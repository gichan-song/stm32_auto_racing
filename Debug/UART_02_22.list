
UART_02_22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000079b8  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000094  08007b58  08007b58  00017b58  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007bec  08007bec  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08007bec  08007bec  00017bec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007bf4  08007bf4  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007bf4  08007bf4  00017bf4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007bf8  08007bf8  00017bf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08007bfc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004db4  20000064  08007c60  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20004e18  08007c60  00024e18  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a445  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003b6f  00000000  00000000  0003a51c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001588  00000000  00000000  0003e090  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010af  00000000  00000000  0003f618  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00018e90  00000000  00000000  000406c7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00018d10  00000000  00000000  00059557  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098954  00000000  00000000  00072267  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005c60  00000000  00000000  0010abbc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  0011081c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08007b40 	.word	0x08007b40

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	08007b40 	.word	0x08007b40

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 80004dc:	b580      	push	{r7, lr}
 80004de:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of changeMode */
  changeModeHandle = osThreadNew(changeModefunc, NULL, &changeMode_attributes);
 80004e0:	4a08      	ldr	r2, [pc, #32]	; (8000504 <MX_FREERTOS_Init+0x28>)
 80004e2:	2100      	movs	r1, #0
 80004e4:	4808      	ldr	r0, [pc, #32]	; (8000508 <MX_FREERTOS_Init+0x2c>)
 80004e6:	f004 fd0d 	bl	8004f04 <osThreadNew>
 80004ea:	4603      	mov	r3, r0
 80004ec:	4a07      	ldr	r2, [pc, #28]	; (800050c <MX_FREERTOS_Init+0x30>)
 80004ee:	6013      	str	r3, [r2, #0]

  /* creation of trigUltrasonic */
  trigUltrasonicHandle = osThreadNew(trigUltrasonicfunc, NULL, &trigUltrasonic_attributes);
 80004f0:	4a07      	ldr	r2, [pc, #28]	; (8000510 <MX_FREERTOS_Init+0x34>)
 80004f2:	2100      	movs	r1, #0
 80004f4:	4807      	ldr	r0, [pc, #28]	; (8000514 <MX_FREERTOS_Init+0x38>)
 80004f6:	f004 fd05 	bl	8004f04 <osThreadNew>
 80004fa:	4603      	mov	r3, r0
 80004fc:	4a06      	ldr	r2, [pc, #24]	; (8000518 <MX_FREERTOS_Init+0x3c>)
 80004fe:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000500:	bf00      	nop
 8000502:	bd80      	pop	{r7, pc}
 8000504:	08007b8c 	.word	0x08007b8c
 8000508:	0800051d 	.word	0x0800051d
 800050c:	20000080 	.word	0x20000080
 8000510:	08007bb0 	.word	0x08007bb0
 8000514:	0800056d 	.word	0x0800056d
 8000518:	20000084 	.word	0x20000084

0800051c <changeModefunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_changeModefunc */
void changeModefunc(void *argument)
{
 800051c:	b580      	push	{r7, lr}
 800051e:	b082      	sub	sp, #8
 8000520:	af00      	add	r7, sp, #0
 8000522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN changeModefunc */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 8000524:	2201      	movs	r2, #1
 8000526:	490e      	ldr	r1, [pc, #56]	; (8000560 <changeModefunc+0x44>)
 8000528:	480e      	ldr	r0, [pc, #56]	; (8000564 <changeModefunc+0x48>)
 800052a:	f003 fd39 	bl	8003fa0 <HAL_UART_Receive_IT>
	  	 	 	  if(rx_Data[0] == 'a') flag = !flag;
 800052e:	4b0c      	ldr	r3, [pc, #48]	; (8000560 <changeModefunc+0x44>)
 8000530:	781b      	ldrb	r3, [r3, #0]
 8000532:	2b61      	cmp	r3, #97	; 0x61
 8000534:	d109      	bne.n	800054a <changeModefunc+0x2e>
 8000536:	4b0c      	ldr	r3, [pc, #48]	; (8000568 <changeModefunc+0x4c>)
 8000538:	781b      	ldrb	r3, [r3, #0]
 800053a:	2b00      	cmp	r3, #0
 800053c:	bf0c      	ite	eq
 800053e:	2301      	moveq	r3, #1
 8000540:	2300      	movne	r3, #0
 8000542:	b2db      	uxtb	r3, r3
 8000544:	461a      	mov	r2, r3
 8000546:	4b08      	ldr	r3, [pc, #32]	; (8000568 <changeModefunc+0x4c>)
 8000548:	701a      	strb	r2, [r3, #0]
	  	 	 	  if(!flag) bt_motor();
 800054a:	4b07      	ldr	r3, [pc, #28]	; (8000568 <changeModefunc+0x4c>)
 800054c:	781b      	ldrb	r3, [r3, #0]
 800054e:	2b00      	cmp	r3, #0
 8000550:	d101      	bne.n	8000556 <changeModefunc+0x3a>
 8000552:	f000 fb33 	bl	8000bbc <bt_motor>
    osDelay(1);
 8000556:	2001      	movs	r0, #1
 8000558:	f004 fd66 	bl	8005028 <osDelay>
	  HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 800055c:	e7e2      	b.n	8000524 <changeModefunc+0x8>
 800055e:	bf00      	nop
 8000560:	20000088 	.word	0x20000088
 8000564:	2000025c 	.word	0x2000025c
 8000568:	2000008a 	.word	0x2000008a

0800056c <trigUltrasonicfunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_trigUltrasonicfunc */
void trigUltrasonicfunc(void *argument)
{
 800056c:	b580      	push	{r7, lr}
 800056e:	b082      	sub	sp, #8
 8000570:	af00      	add	r7, sp, #0
 8000572:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN trigUltrasonicfunc */
  /* Infinite loop */
  for(;;)
  {
	  if(flag)
 8000574:	4b07      	ldr	r3, [pc, #28]	; (8000594 <trigUltrasonicfunc+0x28>)
 8000576:	781b      	ldrb	r3, [r3, #0]
 8000578:	2b00      	cmp	r3, #0
 800057a:	d0fb      	beq.n	8000574 <trigUltrasonicfunc+0x8>
	  {
		  Trig1();
 800057c:	f000 fa4a 	bl	8000a14 <Trig1>
		  osDelay(2);
 8000580:	2002      	movs	r0, #2
 8000582:	f004 fd51 	bl	8005028 <osDelay>
		  Trig3();
 8000586:	f000 fa63 	bl	8000a50 <Trig3>
		  osDelay(10);
 800058a:	200a      	movs	r0, #10
 800058c:	f004 fd4c 	bl	8005028 <osDelay>
	  if(flag)
 8000590:	e7f0      	b.n	8000574 <trigUltrasonicfunc+0x8>
 8000592:	bf00      	nop
 8000594:	2000008a 	.word	0x2000008a

08000598 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000598:	b580      	push	{r7, lr}
 800059a:	b08a      	sub	sp, #40	; 0x28
 800059c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800059e:	f107 0314 	add.w	r3, r7, #20
 80005a2:	2200      	movs	r2, #0
 80005a4:	601a      	str	r2, [r3, #0]
 80005a6:	605a      	str	r2, [r3, #4]
 80005a8:	609a      	str	r2, [r3, #8]
 80005aa:	60da      	str	r2, [r3, #12]
 80005ac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005ae:	2300      	movs	r3, #0
 80005b0:	613b      	str	r3, [r7, #16]
 80005b2:	4b39      	ldr	r3, [pc, #228]	; (8000698 <MX_GPIO_Init+0x100>)
 80005b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005b6:	4a38      	ldr	r2, [pc, #224]	; (8000698 <MX_GPIO_Init+0x100>)
 80005b8:	f043 0304 	orr.w	r3, r3, #4
 80005bc:	6313      	str	r3, [r2, #48]	; 0x30
 80005be:	4b36      	ldr	r3, [pc, #216]	; (8000698 <MX_GPIO_Init+0x100>)
 80005c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005c2:	f003 0304 	and.w	r3, r3, #4
 80005c6:	613b      	str	r3, [r7, #16]
 80005c8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ca:	2300      	movs	r3, #0
 80005cc:	60fb      	str	r3, [r7, #12]
 80005ce:	4b32      	ldr	r3, [pc, #200]	; (8000698 <MX_GPIO_Init+0x100>)
 80005d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005d2:	4a31      	ldr	r2, [pc, #196]	; (8000698 <MX_GPIO_Init+0x100>)
 80005d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005d8:	6313      	str	r3, [r2, #48]	; 0x30
 80005da:	4b2f      	ldr	r3, [pc, #188]	; (8000698 <MX_GPIO_Init+0x100>)
 80005dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80005e2:	60fb      	str	r3, [r7, #12]
 80005e4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80005e6:	2300      	movs	r3, #0
 80005e8:	60bb      	str	r3, [r7, #8]
 80005ea:	4b2b      	ldr	r3, [pc, #172]	; (8000698 <MX_GPIO_Init+0x100>)
 80005ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005ee:	4a2a      	ldr	r2, [pc, #168]	; (8000698 <MX_GPIO_Init+0x100>)
 80005f0:	f043 0301 	orr.w	r3, r3, #1
 80005f4:	6313      	str	r3, [r2, #48]	; 0x30
 80005f6:	4b28      	ldr	r3, [pc, #160]	; (8000698 <MX_GPIO_Init+0x100>)
 80005f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fa:	f003 0301 	and.w	r3, r3, #1
 80005fe:	60bb      	str	r3, [r7, #8]
 8000600:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000602:	2300      	movs	r3, #0
 8000604:	607b      	str	r3, [r7, #4]
 8000606:	4b24      	ldr	r3, [pc, #144]	; (8000698 <MX_GPIO_Init+0x100>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	4a23      	ldr	r2, [pc, #140]	; (8000698 <MX_GPIO_Init+0x100>)
 800060c:	f043 0302 	orr.w	r3, r3, #2
 8000610:	6313      	str	r3, [r2, #48]	; 0x30
 8000612:	4b21      	ldr	r3, [pc, #132]	; (8000698 <MX_GPIO_Init+0x100>)
 8000614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000616:	f003 0302 	and.w	r3, r3, #2
 800061a:	607b      	str	r3, [r7, #4]
 800061c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TrigL_Pin|TrigC_Pin|IN1_Pin, GPIO_PIN_RESET);
 800061e:	2200      	movs	r2, #0
 8000620:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000624:	481d      	ldr	r0, [pc, #116]	; (800069c <MX_GPIO_Init+0x104>)
 8000626:	f001 fc6d 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TrigR_Pin|IN2_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 800062a:	2200      	movs	r2, #0
 800062c:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000630:	481b      	ldr	r0, [pc, #108]	; (80006a0 <MX_GPIO_Init+0x108>)
 8000632:	f001 fc67 	bl	8001f04 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000636:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800063a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800063c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000642:	2300      	movs	r3, #0
 8000644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000646:	f107 0314 	add.w	r3, r7, #20
 800064a:	4619      	mov	r1, r3
 800064c:	4815      	ldr	r0, [pc, #84]	; (80006a4 <MX_GPIO_Init+0x10c>)
 800064e:	f001 fad5 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TrigL_Pin|TrigC_Pin|IN1_Pin;
 8000652:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 8000656:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000658:	2301      	movs	r3, #1
 800065a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800065c:	2300      	movs	r3, #0
 800065e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000660:	2300      	movs	r3, #0
 8000662:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000664:	f107 0314 	add.w	r3, r7, #20
 8000668:	4619      	mov	r1, r3
 800066a:	480c      	ldr	r0, [pc, #48]	; (800069c <MX_GPIO_Init+0x104>)
 800066c:	f001 fac6 	bl	8001bfc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TrigR_Pin|IN2_Pin|IN4_Pin|IN3_Pin;
 8000670:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000674:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000676:	2301      	movs	r3, #1
 8000678:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800067a:	2300      	movs	r3, #0
 800067c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800067e:	2300      	movs	r3, #0
 8000680:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000682:	f107 0314 	add.w	r3, r7, #20
 8000686:	4619      	mov	r1, r3
 8000688:	4805      	ldr	r0, [pc, #20]	; (80006a0 <MX_GPIO_Init+0x108>)
 800068a:	f001 fab7 	bl	8001bfc <HAL_GPIO_Init>

}
 800068e:	bf00      	nop
 8000690:	3728      	adds	r7, #40	; 0x28
 8000692:	46bd      	mov	sp, r7
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	40023800 	.word	0x40023800
 800069c:	40020000 	.word	0x40020000
 80006a0:	40020400 	.word	0x40020400
 80006a4:	40020800 	.word	0x40020800

080006a8 <delay_us>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void delay_us(uint16_t us)
{
 80006a8:	b480      	push	{r7}
 80006aa:	b083      	sub	sp, #12
 80006ac:	af00      	add	r7, sp, #0
 80006ae:	4603      	mov	r3, r0
 80006b0:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <delay_us+0x30>)
 80006b4:	681b      	ldr	r3, [r3, #0]
 80006b6:	2200      	movs	r2, #0
 80006b8:	625a      	str	r2, [r3, #36]	; 0x24

	while((__HAL_TIM_GET_COUNTER(&htim1)) < us);
 80006ba:	bf00      	nop
 80006bc:	4b06      	ldr	r3, [pc, #24]	; (80006d8 <delay_us+0x30>)
 80006be:	681b      	ldr	r3, [r3, #0]
 80006c0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006c2:	88fb      	ldrh	r3, [r7, #6]
 80006c4:	429a      	cmp	r2, r3
 80006c6:	d3f9      	bcc.n	80006bc <delay_us+0x14>
}
 80006c8:	bf00      	nop
 80006ca:	bf00      	nop
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	2000013c 	.word	0x2000013c

080006dc <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80006dc:	b580      	push	{r7, lr}
 80006de:	b082      	sub	sp, #8
 80006e0:	af00      	add	r7, sp, #0
 80006e2:	6078      	str	r0, [r7, #4]
//
//			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
//			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
//		}
//	}
	if(htim->Instance == TIM2)
 80006e4:	687b      	ldr	r3, [r7, #4]
 80006e6:	681b      	ldr	r3, [r3, #0]
 80006e8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80006ec:	f040 809f 	bne.w	800082e <HAL_TIM_IC_CaptureCallback+0x152>
	{
		if(captureFlag2 == 0)	// first value is not capture
 80006f0:	4b6f      	ldr	r3, [pc, #444]	; (80008b0 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 80006f2:	781b      	ldrb	r3, [r3, #0]
 80006f4:	b2db      	uxtb	r3, r3
 80006f6:	2b00      	cmp	r3, #0
 80006f8:	d11a      	bne.n	8000730 <HAL_TIM_IC_CaptureCallback+0x54>
		{
			INC_Value3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// read first value
 80006fa:	2100      	movs	r1, #0
 80006fc:	6878      	ldr	r0, [r7, #4]
 80006fe:	f002 ff25 	bl	800354c <HAL_TIM_ReadCapturedValue>
 8000702:	4603      	mov	r3, r0
 8000704:	4a6b      	ldr	r2, [pc, #428]	; (80008b4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000706:	6013      	str	r3, [r2, #0]
			captureFlag2 = 1;	// first captured as true
 8000708:	4b69      	ldr	r3, [pc, #420]	; (80008b0 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 800070a:	2201      	movs	r2, #1
 800070c:	701a      	strb	r2, [r3, #0]

			// change polarity rising edge to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800070e:	687b      	ldr	r3, [r7, #4]
 8000710:	681b      	ldr	r3, [r3, #0]
 8000712:	6a1a      	ldr	r2, [r3, #32]
 8000714:	687b      	ldr	r3, [r7, #4]
 8000716:	681b      	ldr	r3, [r3, #0]
 8000718:	f022 020a 	bic.w	r2, r2, #10
 800071c:	621a      	str	r2, [r3, #32]
 800071e:	687b      	ldr	r3, [r7, #4]
 8000720:	681b      	ldr	r3, [r3, #0]
 8000722:	6a1a      	ldr	r2, [r3, #32]
 8000724:	687b      	ldr	r3, [r7, #4]
 8000726:	681b      	ldr	r3, [r3, #0]
 8000728:	f042 0202 	orr.w	r2, r2, #2
 800072c:	621a      	str	r2, [r3, #32]
 800072e:	e144      	b.n	80009ba <HAL_TIM_IC_CaptureCallback+0x2de>
		}
		else if(captureFlag2 == 1)	// if first value already captured
 8000730:	4b5f      	ldr	r3, [pc, #380]	; (80008b0 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000732:	781b      	ldrb	r3, [r3, #0]
 8000734:	b2db      	uxtb	r3, r3
 8000736:	2b01      	cmp	r3, #1
 8000738:	f040 813f 	bne.w	80009ba <HAL_TIM_IC_CaptureCallback+0x2de>
		{
			INC_Value4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800073c:	2100      	movs	r1, #0
 800073e:	6878      	ldr	r0, [r7, #4]
 8000740:	f002 ff04 	bl	800354c <HAL_TIM_ReadCapturedValue>
 8000744:	4603      	mov	r3, r0
 8000746:	4a5c      	ldr	r2, [pc, #368]	; (80008b8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000748:	6013      	str	r3, [r2, #0]

			if(INC_Value4  > INC_Value3)
 800074a:	4b5b      	ldr	r3, [pc, #364]	; (80008b8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800074c:	681a      	ldr	r2, [r3, #0]
 800074e:	4b59      	ldr	r3, [pc, #356]	; (80008b4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	429a      	cmp	r2, r3
 8000754:	d907      	bls.n	8000766 <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				echoTime_left = INC_Value4 - INC_Value3;
 8000756:	4b58      	ldr	r3, [pc, #352]	; (80008b8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000758:	681a      	ldr	r2, [r3, #0]
 800075a:	4b56      	ldr	r3, [pc, #344]	; (80008b4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800075c:	681b      	ldr	r3, [r3, #0]
 800075e:	1ad3      	subs	r3, r2, r3
 8000760:	4a56      	ldr	r2, [pc, #344]	; (80008bc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000762:	6013      	str	r3, [r2, #0]
 8000764:	e00f      	b.n	8000786 <HAL_TIM_IC_CaptureCallback+0xaa>
			}
			else if(INC_Value4 < INC_Value3)
 8000766:	4b54      	ldr	r3, [pc, #336]	; (80008b8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000768:	681a      	ldr	r2, [r3, #0]
 800076a:	4b52      	ldr	r3, [pc, #328]	; (80008b4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800076c:	681b      	ldr	r3, [r3, #0]
 800076e:	429a      	cmp	r2, r3
 8000770:	d209      	bcs.n	8000786 <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				echoTime_left = (0xffff - INC_Value3) + INC_Value4;
 8000772:	4b51      	ldr	r3, [pc, #324]	; (80008b8 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b4f      	ldr	r3, [pc, #316]	; (80008b4 <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	1ad3      	subs	r3, r2, r3
 800077c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000780:	33ff      	adds	r3, #255	; 0xff
 8000782:	4a4e      	ldr	r2, [pc, #312]	; (80008bc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000784:	6013      	str	r3, [r2, #0]
			}

			distance_left = echoTime_left / 58;
 8000786:	4b4d      	ldr	r3, [pc, #308]	; (80008bc <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000788:	681b      	ldr	r3, [r3, #0]
 800078a:	4a4d      	ldr	r2, [pc, #308]	; (80008c0 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 800078c:	fba2 2303 	umull	r2, r3, r2, r3
 8000790:	095b      	lsrs	r3, r3, #5
 8000792:	4a4c      	ldr	r2, [pc, #304]	; (80008c4 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 8000794:	6013      	str	r3, [r2, #0]
			captureFlag2 = 0;
 8000796:	4b46      	ldr	r3, [pc, #280]	; (80008b0 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000798:	2200      	movs	r2, #0
 800079a:	701a      	strb	r2, [r3, #0]

			total_left = total_left - readings_left[idx_left];
 800079c:	4b4a      	ldr	r3, [pc, #296]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 800079e:	681a      	ldr	r2, [r3, #0]
 80007a0:	4b4a      	ldr	r3, [pc, #296]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007a2:	681b      	ldr	r3, [r3, #0]
 80007a4:	494a      	ldr	r1, [pc, #296]	; (80008d0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80007a6:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007aa:	1ad3      	subs	r3, r2, r3
 80007ac:	4a46      	ldr	r2, [pc, #280]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80007ae:	6013      	str	r3, [r2, #0]
				  // read from the sensor:
				  readings_left[idx_left] = distance_left;
 80007b0:	4b44      	ldr	r3, [pc, #272]	; (80008c4 <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80007b2:	681a      	ldr	r2, [r3, #0]
 80007b4:	4b45      	ldr	r3, [pc, #276]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007b6:	681b      	ldr	r3, [r3, #0]
 80007b8:	4611      	mov	r1, r2
 80007ba:	4a45      	ldr	r2, [pc, #276]	; (80008d0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80007bc:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  // add the reading to the total:
				  total_left = total_left + readings_left[idx_left];
 80007c0:	4b42      	ldr	r3, [pc, #264]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007c2:	681b      	ldr	r3, [r3, #0]
 80007c4:	4a42      	ldr	r2, [pc, #264]	; (80008d0 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80007c6:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80007ca:	4b3f      	ldr	r3, [pc, #252]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	4413      	add	r3, r2
 80007d0:	4a3d      	ldr	r2, [pc, #244]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80007d2:	6013      	str	r3, [r2, #0]
				  // advance to the next position in the array:
				  idx_left = idx_left + 1;
 80007d4:	4b3d      	ldr	r3, [pc, #244]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007d6:	681b      	ldr	r3, [r3, #0]
 80007d8:	3301      	adds	r3, #1
 80007da:	4a3c      	ldr	r2, [pc, #240]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007dc:	6013      	str	r3, [r2, #0]

				  // if we're at the end of the array...
				  if (idx_left >= ARRAYNUM) {
 80007de:	4b3b      	ldr	r3, [pc, #236]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007e0:	681b      	ldr	r3, [r3, #0]
 80007e2:	2b04      	cmp	r3, #4
 80007e4:	dd02      	ble.n	80007ec <HAL_TIM_IC_CaptureCallback+0x110>
					  // ...wrap around to the beginning:
					  idx_left = 0;
 80007e6:	4b39      	ldr	r3, [pc, #228]	; (80008cc <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007e8:	2200      	movs	r2, #0
 80007ea:	601a      	str	r2, [r3, #0]
				  }
				  // calculate the average:
				  average_left = total_left / ARRAYNUM;
 80007ec:	4b36      	ldr	r3, [pc, #216]	; (80008c8 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80007ee:	681b      	ldr	r3, [r3, #0]
 80007f0:	4a38      	ldr	r2, [pc, #224]	; (80008d4 <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80007f2:	fb82 1203 	smull	r1, r2, r2, r3
 80007f6:	1052      	asrs	r2, r2, #1
 80007f8:	17db      	asrs	r3, r3, #31
 80007fa:	1ad3      	subs	r3, r2, r3
 80007fc:	4a36      	ldr	r2, [pc, #216]	; (80008d8 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 80007fe:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000800:	687b      	ldr	r3, [r7, #4]
 8000802:	681b      	ldr	r3, [r3, #0]
 8000804:	6a1a      	ldr	r2, [r3, #32]
 8000806:	687b      	ldr	r3, [r7, #4]
 8000808:	681b      	ldr	r3, [r3, #0]
 800080a:	f022 020a 	bic.w	r2, r2, #10
 800080e:	621a      	str	r2, [r3, #32]
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	681a      	ldr	r2, [r3, #0]
 8000814:	687b      	ldr	r3, [r7, #4]
 8000816:	681b      	ldr	r3, [r3, #0]
 8000818:	6a12      	ldr	r2, [r2, #32]
 800081a:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 800081c:	4b2f      	ldr	r3, [pc, #188]	; (80008dc <HAL_TIM_IC_CaptureCallback+0x200>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	68da      	ldr	r2, [r3, #12]
 8000822:	4b2e      	ldr	r3, [pc, #184]	; (80008dc <HAL_TIM_IC_CaptureCallback+0x200>)
 8000824:	681b      	ldr	r3, [r3, #0]
 8000826:	f022 0202 	bic.w	r2, r2, #2
 800082a:	60da      	str	r2, [r3, #12]
 800082c:	e0c5      	b.n	80009ba <HAL_TIM_IC_CaptureCallback+0x2de>
		}
	}
	else if(htim->Instance == TIM1)
 800082e:	687b      	ldr	r3, [r7, #4]
 8000830:	681b      	ldr	r3, [r3, #0]
 8000832:	4a2b      	ldr	r2, [pc, #172]	; (80008e0 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000834:	4293      	cmp	r3, r2
 8000836:	f040 80c0 	bne.w	80009ba <HAL_TIM_IC_CaptureCallback+0x2de>
	{
		if(captureFlag3 == 0)	// first value is not capture
 800083a:	4b2a      	ldr	r3, [pc, #168]	; (80008e4 <HAL_TIM_IC_CaptureCallback+0x208>)
 800083c:	781b      	ldrb	r3, [r3, #0]
 800083e:	b2db      	uxtb	r3, r3
 8000840:	2b00      	cmp	r3, #0
 8000842:	d11a      	bne.n	800087a <HAL_TIM_IC_CaptureCallback+0x19e>
		{
			INC_Value5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// read first value
 8000844:	2100      	movs	r1, #0
 8000846:	6878      	ldr	r0, [r7, #4]
 8000848:	f002 fe80 	bl	800354c <HAL_TIM_ReadCapturedValue>
 800084c:	4603      	mov	r3, r0
 800084e:	4a26      	ldr	r2, [pc, #152]	; (80008e8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000850:	6013      	str	r3, [r2, #0]
			captureFlag3 = 1;	// first captured as true
 8000852:	4b24      	ldr	r3, [pc, #144]	; (80008e4 <HAL_TIM_IC_CaptureCallback+0x208>)
 8000854:	2201      	movs	r2, #1
 8000856:	701a      	strb	r2, [r3, #0]

			// change polarity rising edge to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	6a1a      	ldr	r2, [r3, #32]
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	f022 020a 	bic.w	r2, r2, #10
 8000866:	621a      	str	r2, [r3, #32]
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	681b      	ldr	r3, [r3, #0]
 800086c:	6a1a      	ldr	r2, [r3, #32]
 800086e:	687b      	ldr	r3, [r7, #4]
 8000870:	681b      	ldr	r3, [r3, #0]
 8000872:	f042 0202 	orr.w	r2, r2, #2
 8000876:	621a      	str	r2, [r3, #32]
 8000878:	e09f      	b.n	80009ba <HAL_TIM_IC_CaptureCallback+0x2de>
		}
		else if(captureFlag3 == 1)	// if first value already captured
 800087a:	4b1a      	ldr	r3, [pc, #104]	; (80008e4 <HAL_TIM_IC_CaptureCallback+0x208>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	b2db      	uxtb	r3, r3
 8000880:	2b01      	cmp	r3, #1
 8000882:	f040 809a 	bne.w	80009ba <HAL_TIM_IC_CaptureCallback+0x2de>
		{
			INC_Value6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000886:	2100      	movs	r1, #0
 8000888:	6878      	ldr	r0, [r7, #4]
 800088a:	f002 fe5f 	bl	800354c <HAL_TIM_ReadCapturedValue>
 800088e:	4603      	mov	r3, r0
 8000890:	4a16      	ldr	r2, [pc, #88]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x210>)
 8000892:	6013      	str	r3, [r2, #0]

			if(INC_Value6 > INC_Value5)
 8000894:	4b15      	ldr	r3, [pc, #84]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x210>)
 8000896:	681a      	ldr	r2, [r3, #0]
 8000898:	4b13      	ldr	r3, [pc, #76]	; (80008e8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	429a      	cmp	r2, r3
 800089e:	d929      	bls.n	80008f4 <HAL_TIM_IC_CaptureCallback+0x218>
			{
				echoTime_right = INC_Value6 - INC_Value5;
 80008a0:	4b12      	ldr	r3, [pc, #72]	; (80008ec <HAL_TIM_IC_CaptureCallback+0x210>)
 80008a2:	681a      	ldr	r2, [r3, #0]
 80008a4:	4b10      	ldr	r3, [pc, #64]	; (80008e8 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80008a6:	681b      	ldr	r3, [r3, #0]
 80008a8:	1ad3      	subs	r3, r2, r3
 80008aa:	4a11      	ldr	r2, [pc, #68]	; (80008f0 <HAL_TIM_IC_CaptureCallback+0x214>)
 80008ac:	6013      	str	r3, [r2, #0]
 80008ae:	e031      	b.n	8000914 <HAL_TIM_IC_CaptureCallback+0x238>
 80008b0:	200000d8 	.word	0x200000d8
 80008b4:	200000cc 	.word	0x200000cc
 80008b8:	200000d0 	.word	0x200000d0
 80008bc:	200000d4 	.word	0x200000d4
 80008c0:	8d3dcb09 	.word	0x8d3dcb09
 80008c4:	200000dc 	.word	0x200000dc
 80008c8:	200000a4 	.word	0x200000a4
 80008cc:	200000a0 	.word	0x200000a0
 80008d0:	2000008c 	.word	0x2000008c
 80008d4:	66666667 	.word	0x66666667
 80008d8:	200000a8 	.word	0x200000a8
 80008dc:	20000184 	.word	0x20000184
 80008e0:	40010000 	.word	0x40010000
 80008e4:	200000ec 	.word	0x200000ec
 80008e8:	200000e0 	.word	0x200000e0
 80008ec:	200000e4 	.word	0x200000e4
 80008f0:	200000e8 	.word	0x200000e8
			}
			else if(INC_Value6 < INC_Value5)
 80008f4:	4b3a      	ldr	r3, [pc, #232]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x304>)
 80008f6:	681a      	ldr	r2, [r3, #0]
 80008f8:	4b3a      	ldr	r3, [pc, #232]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x308>)
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	429a      	cmp	r2, r3
 80008fe:	d209      	bcs.n	8000914 <HAL_TIM_IC_CaptureCallback+0x238>
			{
				echoTime_right = (0xffff - INC_Value5) + INC_Value6;
 8000900:	4b37      	ldr	r3, [pc, #220]	; (80009e0 <HAL_TIM_IC_CaptureCallback+0x304>)
 8000902:	681a      	ldr	r2, [r3, #0]
 8000904:	4b37      	ldr	r3, [pc, #220]	; (80009e4 <HAL_TIM_IC_CaptureCallback+0x308>)
 8000906:	681b      	ldr	r3, [r3, #0]
 8000908:	1ad3      	subs	r3, r2, r3
 800090a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 800090e:	33ff      	adds	r3, #255	; 0xff
 8000910:	4a35      	ldr	r2, [pc, #212]	; (80009e8 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8000912:	6013      	str	r3, [r2, #0]
			}

			distance_right = echoTime_right / 58;
 8000914:	4b34      	ldr	r3, [pc, #208]	; (80009e8 <HAL_TIM_IC_CaptureCallback+0x30c>)
 8000916:	681b      	ldr	r3, [r3, #0]
 8000918:	4a34      	ldr	r2, [pc, #208]	; (80009ec <HAL_TIM_IC_CaptureCallback+0x310>)
 800091a:	fba2 2303 	umull	r2, r3, r2, r3
 800091e:	095b      	lsrs	r3, r3, #5
 8000920:	4a33      	ldr	r2, [pc, #204]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000922:	6013      	str	r3, [r2, #0]
			captureFlag3 = 0;
 8000924:	4b33      	ldr	r3, [pc, #204]	; (80009f4 <HAL_TIM_IC_CaptureCallback+0x318>)
 8000926:	2200      	movs	r2, #0
 8000928:	701a      	strb	r2, [r3, #0]

			 total_right = total_right - readings_right[idx_right];
 800092a:	4b33      	ldr	r3, [pc, #204]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800092c:	681a      	ldr	r2, [r3, #0]
 800092e:	4b33      	ldr	r3, [pc, #204]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x320>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4933      	ldr	r1, [pc, #204]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000934:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000938:	1ad3      	subs	r3, r2, r3
 800093a:	4a2f      	ldr	r2, [pc, #188]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800093c:	6013      	str	r3, [r2, #0]
				  // read from the sensor:
				  readings_right[idx_right] = distance_right;
 800093e:	4b2c      	ldr	r3, [pc, #176]	; (80009f0 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000940:	681a      	ldr	r2, [r3, #0]
 8000942:	4b2e      	ldr	r3, [pc, #184]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x320>)
 8000944:	681b      	ldr	r3, [r3, #0]
 8000946:	4611      	mov	r1, r2
 8000948:	4a2d      	ldr	r2, [pc, #180]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x324>)
 800094a:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  // add the reading to the total:
				  total_right = total_right + readings_right[idx_right];
 800094e:	4b2b      	ldr	r3, [pc, #172]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x320>)
 8000950:	681b      	ldr	r3, [r3, #0]
 8000952:	4a2b      	ldr	r2, [pc, #172]	; (8000a00 <HAL_TIM_IC_CaptureCallback+0x324>)
 8000954:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000958:	4b27      	ldr	r3, [pc, #156]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800095a:	681b      	ldr	r3, [r3, #0]
 800095c:	4413      	add	r3, r2
 800095e:	4a26      	ldr	r2, [pc, #152]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 8000960:	6013      	str	r3, [r2, #0]
				  // advance to the next position in the array:
				  idx_right = idx_right + 1;
 8000962:	4b26      	ldr	r3, [pc, #152]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x320>)
 8000964:	681b      	ldr	r3, [r3, #0]
 8000966:	3301      	adds	r3, #1
 8000968:	4a24      	ldr	r2, [pc, #144]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x320>)
 800096a:	6013      	str	r3, [r2, #0]

				  // if we're at the end of the array...
				  if (idx_right >= ARRAYNUM) {
 800096c:	4b23      	ldr	r3, [pc, #140]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x320>)
 800096e:	681b      	ldr	r3, [r3, #0]
 8000970:	2b04      	cmp	r3, #4
 8000972:	dd02      	ble.n	800097a <HAL_TIM_IC_CaptureCallback+0x29e>
					  // ...wrap around to the beginning:
					  idx_right = 0;
 8000974:	4b21      	ldr	r3, [pc, #132]	; (80009fc <HAL_TIM_IC_CaptureCallback+0x320>)
 8000976:	2200      	movs	r2, #0
 8000978:	601a      	str	r2, [r3, #0]
				  }
				  // calculate the average:
				  average_right = total_right / ARRAYNUM;
 800097a:	4b1f      	ldr	r3, [pc, #124]	; (80009f8 <HAL_TIM_IC_CaptureCallback+0x31c>)
 800097c:	681b      	ldr	r3, [r3, #0]
 800097e:	4a21      	ldr	r2, [pc, #132]	; (8000a04 <HAL_TIM_IC_CaptureCallback+0x328>)
 8000980:	fb82 1203 	smull	r1, r2, r2, r3
 8000984:	1052      	asrs	r2, r2, #1
 8000986:	17db      	asrs	r3, r3, #31
 8000988:	1ad3      	subs	r3, r2, r3
 800098a:	4a1f      	ldr	r2, [pc, #124]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x32c>)
 800098c:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 800098e:	687b      	ldr	r3, [r7, #4]
 8000990:	681b      	ldr	r3, [r3, #0]
 8000992:	6a1a      	ldr	r2, [r3, #32]
 8000994:	687b      	ldr	r3, [r7, #4]
 8000996:	681b      	ldr	r3, [r3, #0]
 8000998:	f022 020a 	bic.w	r2, r2, #10
 800099c:	621a      	str	r2, [r3, #32]
 800099e:	687b      	ldr	r3, [r7, #4]
 80009a0:	681a      	ldr	r2, [r3, #0]
 80009a2:	687b      	ldr	r3, [r7, #4]
 80009a4:	681b      	ldr	r3, [r3, #0]
 80009a6:	6a12      	ldr	r2, [r2, #32]
 80009a8:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80009aa:	4b18      	ldr	r3, [pc, #96]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0x330>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	68da      	ldr	r2, [r3, #12]
 80009b0:	4b16      	ldr	r3, [pc, #88]	; (8000a0c <HAL_TIM_IC_CaptureCallback+0x330>)
 80009b2:	681b      	ldr	r3, [r3, #0]
 80009b4:	f022 0202 	bic.w	r2, r2, #2
 80009b8:	60da      	str	r2, [r3, #12]
//	if(average_front < 10)
//	{
//		stop();
//		return;
//	}
	if(average_left < 30){
 80009ba:	4b15      	ldr	r3, [pc, #84]	; (8000a10 <HAL_TIM_IC_CaptureCallback+0x334>)
 80009bc:	681b      	ldr	r3, [r3, #0]
 80009be:	2b1d      	cmp	r3, #29
 80009c0:	dc02      	bgt.n	80009c8 <HAL_TIM_IC_CaptureCallback+0x2ec>
		right();
 80009c2:	f000 f8bf 	bl	8000b44 <right>
		return;
 80009c6:	e008      	b.n	80009da <HAL_TIM_IC_CaptureCallback+0x2fe>
	}
	if(average_right < 30){
 80009c8:	4b0f      	ldr	r3, [pc, #60]	; (8000a08 <HAL_TIM_IC_CaptureCallback+0x32c>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	2b1d      	cmp	r3, #29
 80009ce:	dc02      	bgt.n	80009d6 <HAL_TIM_IC_CaptureCallback+0x2fa>
		left();
 80009d0:	f000 f8d6 	bl	8000b80 <left>
		return;
 80009d4:	e001      	b.n	80009da <HAL_TIM_IC_CaptureCallback+0x2fe>
	}
	go();
 80009d6:	f000 f85b 	bl	8000a90 <go>
}
 80009da:	3708      	adds	r7, #8
 80009dc:	46bd      	mov	sp, r7
 80009de:	bd80      	pop	{r7, pc}
 80009e0:	200000e4 	.word	0x200000e4
 80009e4:	200000e0 	.word	0x200000e0
 80009e8:	200000e8 	.word	0x200000e8
 80009ec:	8d3dcb09 	.word	0x8d3dcb09
 80009f0:	200000f0 	.word	0x200000f0
 80009f4:	200000ec 	.word	0x200000ec
 80009f8:	200000c4 	.word	0x200000c4
 80009fc:	200000c0 	.word	0x200000c0
 8000a00:	200000ac 	.word	0x200000ac
 8000a04:	66666667 	.word	0x66666667
 8000a08:	200000c8 	.word	0x200000c8
 8000a0c:	2000013c 	.word	0x2000013c
 8000a10:	200000a8 	.word	0x200000a8

08000a14 <Trig1>:

void Trig1(void)
{
 8000a14:	b580      	push	{r7, lr}
 8000a16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigL_GPIO_Port, TrigL_Pin, 1);	// Trig Pin High
 8000a18:	2201      	movs	r2, #1
 8000a1a:	2140      	movs	r1, #64	; 0x40
 8000a1c:	480a      	ldr	r0, [pc, #40]	; (8000a48 <Trig1+0x34>)
 8000a1e:	f001 fa71 	bl	8001f04 <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000a22:	200a      	movs	r0, #10
 8000a24:	f7ff fe40 	bl	80006a8 <delay_us>
	HAL_GPIO_WritePin(TrigL_GPIO_Port, TrigL_Pin, 0);	// Trig Pin Low
 8000a28:	2200      	movs	r2, #0
 8000a2a:	2140      	movs	r1, #64	; 0x40
 8000a2c:	4806      	ldr	r0, [pc, #24]	; (8000a48 <Trig1+0x34>)
 8000a2e:	f001 fa69 	bl	8001f04 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);	// SET Timer Enable
 8000a32:	4b06      	ldr	r3, [pc, #24]	; (8000a4c <Trig1+0x38>)
 8000a34:	681b      	ldr	r3, [r3, #0]
 8000a36:	68da      	ldr	r2, [r3, #12]
 8000a38:	4b04      	ldr	r3, [pc, #16]	; (8000a4c <Trig1+0x38>)
 8000a3a:	681b      	ldr	r3, [r3, #0]
 8000a3c:	f042 0202 	orr.w	r2, r2, #2
 8000a40:	60da      	str	r2, [r3, #12]
}
 8000a42:	bf00      	nop
 8000a44:	bd80      	pop	{r7, pc}
 8000a46:	bf00      	nop
 8000a48:	40020000 	.word	0x40020000
 8000a4c:	20000184 	.word	0x20000184

08000a50 <Trig3>:
//
//	__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);	// SET Timer Enable
//}

void Trig3(void)
{
 8000a50:	b580      	push	{r7, lr}
 8000a52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigR_GPIO_Port, TrigR_Pin, 1);	// Trig Pin High
 8000a54:	2201      	movs	r2, #1
 8000a56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a5a:	480b      	ldr	r0, [pc, #44]	; (8000a88 <Trig3+0x38>)
 8000a5c:	f001 fa52 	bl	8001f04 <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000a60:	200a      	movs	r0, #10
 8000a62:	f7ff fe21 	bl	80006a8 <delay_us>
	HAL_GPIO_WritePin(TrigR_GPIO_Port, TrigR_Pin, 0);	// Trig Pin Low
 8000a66:	2200      	movs	r2, #0
 8000a68:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a6c:	4806      	ldr	r0, [pc, #24]	; (8000a88 <Trig3+0x38>)
 8000a6e:	f001 fa49 	bl	8001f04 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);	// SET Timer Enable
 8000a72:	4b06      	ldr	r3, [pc, #24]	; (8000a8c <Trig3+0x3c>)
 8000a74:	681b      	ldr	r3, [r3, #0]
 8000a76:	68da      	ldr	r2, [r3, #12]
 8000a78:	4b04      	ldr	r3, [pc, #16]	; (8000a8c <Trig3+0x3c>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	f042 0202 	orr.w	r2, r2, #2
 8000a80:	60da      	str	r2, [r3, #12]
}
 8000a82:	bf00      	nop
 8000a84:	bd80      	pop	{r7, pc}
 8000a86:	bf00      	nop
 8000a88:	40020400 	.word	0x40020400
 8000a8c:	2000013c 	.word	0x2000013c

08000a90 <go>:

void go()		// ?���??????????? ?��?��
{
 8000a90:	b580      	push	{r7, lr}
 8000a92:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);	// Right ?��?��?��
 8000a94:	2201      	movs	r2, #1
 8000a96:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000a9a:	480a      	ldr	r0, [pc, #40]	; (8000ac4 <go+0x34>)
 8000a9c:	f001 fa32 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000aa0:	2200      	movs	r2, #0
 8000aa2:	2108      	movs	r1, #8
 8000aa4:	4808      	ldr	r0, [pc, #32]	; (8000ac8 <go+0x38>)
 8000aa6:	f001 fa2d 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);	// Left ?��?��?��
 8000aaa:	2201      	movs	r2, #1
 8000aac:	2120      	movs	r1, #32
 8000aae:	4806      	ldr	r0, [pc, #24]	; (8000ac8 <go+0x38>)
 8000ab0:	f001 fa28 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000ab4:	2200      	movs	r2, #0
 8000ab6:	2110      	movs	r1, #16
 8000ab8:	4803      	ldr	r0, [pc, #12]	; (8000ac8 <go+0x38>)
 8000aba:	f001 fa23 	bl	8001f04 <HAL_GPIO_WritePin>
	//printf("This is Forward Function\r\n");	myDelay(500);
}
 8000abe:	bf00      	nop
 8000ac0:	bd80      	pop	{r7, pc}
 8000ac2:	bf00      	nop
 8000ac4:	40020000 	.word	0x40020000
 8000ac8:	40020400 	.word	0x40020400

08000acc <back>:

void back()		// ?���?????????? ?��?��
{
 8000acc:	b580      	push	{r7, lr}
 8000ace:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000ad0:	2200      	movs	r2, #0
 8000ad2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ad6:	480a      	ldr	r0, [pc, #40]	; (8000b00 <back+0x34>)
 8000ad8:	f001 fa14 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000adc:	2201      	movs	r2, #1
 8000ade:	2108      	movs	r1, #8
 8000ae0:	4808      	ldr	r0, [pc, #32]	; (8000b04 <back+0x38>)
 8000ae2:	f001 fa0f 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	2120      	movs	r1, #32
 8000aea:	4806      	ldr	r0, [pc, #24]	; (8000b04 <back+0x38>)
 8000aec:	f001 fa0a 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000af0:	2201      	movs	r2, #1
 8000af2:	2110      	movs	r1, #16
 8000af4:	4803      	ldr	r0, [pc, #12]	; (8000b04 <back+0x38>)
 8000af6:	f001 fa05 	bl	8001f04 <HAL_GPIO_WritePin>
	//printf("This is Backward Function\r\n");	myDelay(500);
} // end of Backward
 8000afa:	bf00      	nop
 8000afc:	bd80      	pop	{r7, pc}
 8000afe:	bf00      	nop
 8000b00:	40020000 	.word	0x40020000
 8000b04:	40020400 	.word	0x40020400

08000b08 <stop>:


void stop()
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b12:	480a      	ldr	r0, [pc, #40]	; (8000b3c <stop+0x34>)
 8000b14:	f001 f9f6 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000b18:	2200      	movs	r2, #0
 8000b1a:	2108      	movs	r1, #8
 8000b1c:	4808      	ldr	r0, [pc, #32]	; (8000b40 <stop+0x38>)
 8000b1e:	f001 f9f1 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000b22:	2200      	movs	r2, #0
 8000b24:	2120      	movs	r1, #32
 8000b26:	4806      	ldr	r0, [pc, #24]	; (8000b40 <stop+0x38>)
 8000b28:	f001 f9ec 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000b2c:	2200      	movs	r2, #0
 8000b2e:	2110      	movs	r1, #16
 8000b30:	4803      	ldr	r0, [pc, #12]	; (8000b40 <stop+0x38>)
 8000b32:	f001 f9e7 	bl	8001f04 <HAL_GPIO_WritePin>
} // end of Stop
 8000b36:	bf00      	nop
 8000b38:	bd80      	pop	{r7, pc}
 8000b3a:	bf00      	nop
 8000b3c:	40020000 	.word	0x40020000
 8000b40:	40020400 	.word	0x40020400

08000b44 <right>:


void right()		// ?��?��?�� ?��?��		// Left ?��?��?��, Right ?��?��?��
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);	// Right ?��?��?��
 8000b48:	2201      	movs	r2, #1
 8000b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4e:	480a      	ldr	r0, [pc, #40]	; (8000b78 <right+0x34>)
 8000b50:	f001 f9d8 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000b54:	2200      	movs	r2, #0
 8000b56:	2108      	movs	r1, #8
 8000b58:	4808      	ldr	r0, [pc, #32]	; (8000b7c <right+0x38>)
 8000b5a:	f001 f9d3 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2120      	movs	r1, #32
 8000b62:	4806      	ldr	r0, [pc, #24]	; (8000b7c <right+0x38>)
 8000b64:	f001 f9ce 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4803      	ldr	r0, [pc, #12]	; (8000b7c <right+0x38>)
 8000b6e:	f001 f9c9 	bl	8001f04 <HAL_GPIO_WritePin>
} // end of Rotate_R
 8000b72:	bf00      	nop
 8000b74:	bd80      	pop	{r7, pc}
 8000b76:	bf00      	nop
 8000b78:	40020000 	.word	0x40020000
 8000b7c:	40020400 	.word	0x40020400

08000b80 <left>:



void left()		// 좌회?�� ?��?��		// Left ?��?��?��, Right ?��?��?��
{
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000b84:	2200      	movs	r2, #0
 8000b86:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b8a:	480a      	ldr	r0, [pc, #40]	; (8000bb4 <left+0x34>)
 8000b8c:	f001 f9ba 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000b90:	2201      	movs	r2, #1
 8000b92:	2108      	movs	r1, #8
 8000b94:	4808      	ldr	r0, [pc, #32]	; (8000bb8 <left+0x38>)
 8000b96:	f001 f9b5 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);	// Left ?��?��?��
 8000b9a:	2201      	movs	r2, #1
 8000b9c:	2120      	movs	r1, #32
 8000b9e:	4806      	ldr	r0, [pc, #24]	; (8000bb8 <left+0x38>)
 8000ba0:	f001 f9b0 	bl	8001f04 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000ba4:	2200      	movs	r2, #0
 8000ba6:	2110      	movs	r1, #16
 8000ba8:	4803      	ldr	r0, [pc, #12]	; (8000bb8 <left+0x38>)
 8000baa:	f001 f9ab 	bl	8001f04 <HAL_GPIO_WritePin>
} // end of Rotate_L
 8000bae:	bf00      	nop
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40020000 	.word	0x40020000
 8000bb8:	40020400 	.word	0x40020400

08000bbc <bt_motor>:
/////////////////////////////////////////////////코드 추�?2



void bt_motor()
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	af00      	add	r7, sp, #0

	if(rx_Data[0] == 'H')
 8000bc0:	4b4b      	ldr	r3, [pc, #300]	; (8000cf0 <bt_motor+0x134>)
 8000bc2:	781b      	ldrb	r3, [r3, #0]
 8000bc4:	2b48      	cmp	r3, #72	; 0x48
 8000bc6:	d104      	bne.n	8000bd2 <bt_motor+0x16>
	{
		PWM = 600;
 8000bc8:	4b4a      	ldr	r3, [pc, #296]	; (8000cf4 <bt_motor+0x138>)
 8000bca:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	e037      	b.n	8000c42 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'M')
 8000bd2:	4b47      	ldr	r3, [pc, #284]	; (8000cf0 <bt_motor+0x134>)
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	2b4d      	cmp	r3, #77	; 0x4d
 8000bd8:	d104      	bne.n	8000be4 <bt_motor+0x28>
	{
		PWM = 400;
 8000bda:	4b46      	ldr	r3, [pc, #280]	; (8000cf4 <bt_motor+0x138>)
 8000bdc:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000be0:	601a      	str	r2, [r3, #0]
 8000be2:	e02e      	b.n	8000c42 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'L')
 8000be4:	4b42      	ldr	r3, [pc, #264]	; (8000cf0 <bt_motor+0x134>)
 8000be6:	781b      	ldrb	r3, [r3, #0]
 8000be8:	2b4c      	cmp	r3, #76	; 0x4c
 8000bea:	d103      	bne.n	8000bf4 <bt_motor+0x38>
	{
		PWM = 250;
 8000bec:	4b41      	ldr	r3, [pc, #260]	; (8000cf4 <bt_motor+0x138>)
 8000bee:	22fa      	movs	r2, #250	; 0xfa
 8000bf0:	601a      	str	r2, [r3, #0]
 8000bf2:	e026      	b.n	8000c42 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'f')
 8000bf4:	4b3e      	ldr	r3, [pc, #248]	; (8000cf0 <bt_motor+0x134>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	2b66      	cmp	r3, #102	; 0x66
 8000bfa:	d103      	bne.n	8000c04 <bt_motor+0x48>
	{
	  state = 'f';
 8000bfc:	4b3e      	ldr	r3, [pc, #248]	; (8000cf8 <bt_motor+0x13c>)
 8000bfe:	2266      	movs	r2, #102	; 0x66
 8000c00:	701a      	strb	r2, [r3, #0]
 8000c02:	e01e      	b.n	8000c42 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 's')
 8000c04:	4b3a      	ldr	r3, [pc, #232]	; (8000cf0 <bt_motor+0x134>)
 8000c06:	781b      	ldrb	r3, [r3, #0]
 8000c08:	2b73      	cmp	r3, #115	; 0x73
 8000c0a:	d103      	bne.n	8000c14 <bt_motor+0x58>
	{
	  state = 's';
 8000c0c:	4b3a      	ldr	r3, [pc, #232]	; (8000cf8 <bt_motor+0x13c>)
 8000c0e:	2273      	movs	r2, #115	; 0x73
 8000c10:	701a      	strb	r2, [r3, #0]
 8000c12:	e016      	b.n	8000c42 <bt_motor+0x86>
	}
  else if(rx_Data[0] == 'l')
 8000c14:	4b36      	ldr	r3, [pc, #216]	; (8000cf0 <bt_motor+0x134>)
 8000c16:	781b      	ldrb	r3, [r3, #0]
 8000c18:	2b6c      	cmp	r3, #108	; 0x6c
 8000c1a:	d103      	bne.n	8000c24 <bt_motor+0x68>
	{
	  state = 'l';
 8000c1c:	4b36      	ldr	r3, [pc, #216]	; (8000cf8 <bt_motor+0x13c>)
 8000c1e:	226c      	movs	r2, #108	; 0x6c
 8000c20:	701a      	strb	r2, [r3, #0]
 8000c22:	e00e      	b.n	8000c42 <bt_motor+0x86>

	}
  else if(rx_Data[0] == 'r')
 8000c24:	4b32      	ldr	r3, [pc, #200]	; (8000cf0 <bt_motor+0x134>)
 8000c26:	781b      	ldrb	r3, [r3, #0]
 8000c28:	2b72      	cmp	r3, #114	; 0x72
 8000c2a:	d103      	bne.n	8000c34 <bt_motor+0x78>
	{
	  state = 'r';
 8000c2c:	4b32      	ldr	r3, [pc, #200]	; (8000cf8 <bt_motor+0x13c>)
 8000c2e:	2272      	movs	r2, #114	; 0x72
 8000c30:	701a      	strb	r2, [r3, #0]
 8000c32:	e006      	b.n	8000c42 <bt_motor+0x86>

	}
  else if(rx_Data[0] == 'b')
 8000c34:	4b2e      	ldr	r3, [pc, #184]	; (8000cf0 <bt_motor+0x134>)
 8000c36:	781b      	ldrb	r3, [r3, #0]
 8000c38:	2b62      	cmp	r3, #98	; 0x62
 8000c3a:	d102      	bne.n	8000c42 <bt_motor+0x86>
	{
	  state = 'b';
 8000c3c:	4b2e      	ldr	r3, [pc, #184]	; (8000cf8 <bt_motor+0x13c>)
 8000c3e:	2262      	movs	r2, #98	; 0x62
 8000c40:	701a      	strb	r2, [r3, #0]
	}

	if(state == 'f'){
 8000c42:	4b2d      	ldr	r3, [pc, #180]	; (8000cf8 <bt_motor+0x13c>)
 8000c44:	781b      	ldrb	r3, [r3, #0]
 8000c46:	2b66      	cmp	r3, #102	; 0x66
 8000c48:	d10c      	bne.n	8000c64 <bt_motor+0xa8>
		go();
 8000c4a:	f7ff ff21 	bl	8000a90 <go>
		htim4.Instance->CCR3 = PWM;
 8000c4e:	4b29      	ldr	r3, [pc, #164]	; (8000cf4 <bt_motor+0x138>)
 8000c50:	681a      	ldr	r2, [r3, #0]
 8000c52:	4b2a      	ldr	r3, [pc, #168]	; (8000cfc <bt_motor+0x140>)
 8000c54:	681b      	ldr	r3, [r3, #0]
 8000c56:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000c58:	4b26      	ldr	r3, [pc, #152]	; (8000cf4 <bt_motor+0x138>)
 8000c5a:	681a      	ldr	r2, [r3, #0]
 8000c5c:	4b27      	ldr	r3, [pc, #156]	; (8000cfc <bt_motor+0x140>)
 8000c5e:	681b      	ldr	r3, [r3, #0]
 8000c60:	635a      	str	r2, [r3, #52]	; 0x34
	{
		back();
		htim4.Instance->CCR3 = PWM;
		htim4.Instance->CCR1 = PWM;
	}
}
 8000c62:	e042      	b.n	8000cea <bt_motor+0x12e>
	else if(state == 's')
 8000c64:	4b24      	ldr	r3, [pc, #144]	; (8000cf8 <bt_motor+0x13c>)
 8000c66:	781b      	ldrb	r3, [r3, #0]
 8000c68:	2b73      	cmp	r3, #115	; 0x73
 8000c6a:	d10c      	bne.n	8000c86 <bt_motor+0xca>
		stop();
 8000c6c:	f7ff ff4c 	bl	8000b08 <stop>
		htim4.Instance->CCR3 = PWM;
 8000c70:	4b20      	ldr	r3, [pc, #128]	; (8000cf4 <bt_motor+0x138>)
 8000c72:	681a      	ldr	r2, [r3, #0]
 8000c74:	4b21      	ldr	r3, [pc, #132]	; (8000cfc <bt_motor+0x140>)
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000c7a:	4b1e      	ldr	r3, [pc, #120]	; (8000cf4 <bt_motor+0x138>)
 8000c7c:	681a      	ldr	r2, [r3, #0]
 8000c7e:	4b1f      	ldr	r3, [pc, #124]	; (8000cfc <bt_motor+0x140>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000c84:	e031      	b.n	8000cea <bt_motor+0x12e>
	else if(state == 'l'){
 8000c86:	4b1c      	ldr	r3, [pc, #112]	; (8000cf8 <bt_motor+0x13c>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	2b6c      	cmp	r3, #108	; 0x6c
 8000c8c:	d10c      	bne.n	8000ca8 <bt_motor+0xec>
		left();
 8000c8e:	f7ff ff77 	bl	8000b80 <left>
		htim4.Instance->CCR3 = PWM;
 8000c92:	4b18      	ldr	r3, [pc, #96]	; (8000cf4 <bt_motor+0x138>)
 8000c94:	681a      	ldr	r2, [r3, #0]
 8000c96:	4b19      	ldr	r3, [pc, #100]	; (8000cfc <bt_motor+0x140>)
 8000c98:	681b      	ldr	r3, [r3, #0]
 8000c9a:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000c9c:	4b15      	ldr	r3, [pc, #84]	; (8000cf4 <bt_motor+0x138>)
 8000c9e:	681a      	ldr	r2, [r3, #0]
 8000ca0:	4b16      	ldr	r3, [pc, #88]	; (8000cfc <bt_motor+0x140>)
 8000ca2:	681b      	ldr	r3, [r3, #0]
 8000ca4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ca6:	e020      	b.n	8000cea <bt_motor+0x12e>
	else if(state == 'r'){
 8000ca8:	4b13      	ldr	r3, [pc, #76]	; (8000cf8 <bt_motor+0x13c>)
 8000caa:	781b      	ldrb	r3, [r3, #0]
 8000cac:	2b72      	cmp	r3, #114	; 0x72
 8000cae:	d10c      	bne.n	8000cca <bt_motor+0x10e>
		right();
 8000cb0:	f7ff ff48 	bl	8000b44 <right>
		htim4.Instance->CCR3 = PWM;
 8000cb4:	4b0f      	ldr	r3, [pc, #60]	; (8000cf4 <bt_motor+0x138>)
 8000cb6:	681a      	ldr	r2, [r3, #0]
 8000cb8:	4b10      	ldr	r3, [pc, #64]	; (8000cfc <bt_motor+0x140>)
 8000cba:	681b      	ldr	r3, [r3, #0]
 8000cbc:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000cbe:	4b0d      	ldr	r3, [pc, #52]	; (8000cf4 <bt_motor+0x138>)
 8000cc0:	681a      	ldr	r2, [r3, #0]
 8000cc2:	4b0e      	ldr	r3, [pc, #56]	; (8000cfc <bt_motor+0x140>)
 8000cc4:	681b      	ldr	r3, [r3, #0]
 8000cc6:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cc8:	e00f      	b.n	8000cea <bt_motor+0x12e>
	else if(state == 'b')
 8000cca:	4b0b      	ldr	r3, [pc, #44]	; (8000cf8 <bt_motor+0x13c>)
 8000ccc:	781b      	ldrb	r3, [r3, #0]
 8000cce:	2b62      	cmp	r3, #98	; 0x62
 8000cd0:	d10b      	bne.n	8000cea <bt_motor+0x12e>
		back();
 8000cd2:	f7ff fefb 	bl	8000acc <back>
		htim4.Instance->CCR3 = PWM;
 8000cd6:	4b07      	ldr	r3, [pc, #28]	; (8000cf4 <bt_motor+0x138>)
 8000cd8:	681a      	ldr	r2, [r3, #0]
 8000cda:	4b08      	ldr	r3, [pc, #32]	; (8000cfc <bt_motor+0x140>)
 8000cdc:	681b      	ldr	r3, [r3, #0]
 8000cde:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000ce0:	4b04      	ldr	r3, [pc, #16]	; (8000cf4 <bt_motor+0x138>)
 8000ce2:	681a      	ldr	r2, [r3, #0]
 8000ce4:	4b05      	ldr	r3, [pc, #20]	; (8000cfc <bt_motor+0x140>)
 8000ce6:	681b      	ldr	r3, [r3, #0]
 8000ce8:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000cea:	bf00      	nop
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000088 	.word	0x20000088
 8000cf4:	20000000 	.word	0x20000000
 8000cf8:	20000089 	.word	0x20000089
 8000cfc:	200001cc 	.word	0x200001cc

08000d00 <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	b082      	sub	sp, #8
 8000d04:	af00      	add	r7, sp, #0
 8000d06:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000d08:	687b      	ldr	r3, [r7, #4]
 8000d0a:	681a      	ldr	r2, [r3, #0]
 8000d0c:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <HAL_UART_RxCpltCallback+0x28>)
 8000d0e:	681b      	ldr	r3, [r3, #0]
 8000d10:	429a      	cmp	r2, r3
 8000d12:	d104      	bne.n	8000d1e <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 8000d14:	2201      	movs	r2, #1
 8000d16:	4905      	ldr	r1, [pc, #20]	; (8000d2c <HAL_UART_RxCpltCallback+0x2c>)
 8000d18:	4803      	ldr	r0, [pc, #12]	; (8000d28 <HAL_UART_RxCpltCallback+0x28>)
 8000d1a:	f003 f941 	bl	8003fa0 <HAL_UART_Receive_IT>
	}

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	2000025c 	.word	0x2000025c
 8000d2c:	20000088 	.word	0x20000088

08000d30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000d34:	f000 fdac 	bl	8001890 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000d38:	f000 f83a 	bl	8000db0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000d3c:	f7ff fc2c 	bl	8000598 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000d40:	f000 fca6 	bl	8001690 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000d44:	f000 fc7a 	bl	800163c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000d48:	f000 fa80 	bl	800124c <MX_TIM4_Init>
  MX_TIM1_Init();
 8000d4c:	f000 f9b8 	bl	80010c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000d50:	f000 fa2a 	bl	80011a8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000d54:	f000 fae0 	bl	8001318 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000d58:	2108      	movs	r1, #8
 8000d5a:	4811      	ldr	r0, [pc, #68]	; (8000da0 <main+0x70>)
 8000d5c:	f001 ff12 	bl	8002b84 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000d60:	2100      	movs	r1, #0
 8000d62:	480f      	ldr	r0, [pc, #60]	; (8000da0 <main+0x70>)
 8000d64:	f001 ff0e 	bl	8002b84 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1); // delay_us
 8000d68:	480e      	ldr	r0, [pc, #56]	; (8000da4 <main+0x74>)
 8000d6a:	f001 fdff 	bl	800296c <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000d6e:	2100      	movs	r1, #0
 8000d70:	480d      	ldr	r0, [pc, #52]	; (8000da8 <main+0x78>)
 8000d72:	f002 f807 	bl	8002d84 <HAL_TIM_IC_Start>
//  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_1);
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000d76:	2100      	movs	r1, #0
 8000d78:	480a      	ldr	r0, [pc, #40]	; (8000da4 <main+0x74>)
 8000d7a:	f002 f803 	bl	8002d84 <HAL_TIM_IC_Start>
  htim4.Instance->CCR1 = PWM;
 8000d7e:	4b0b      	ldr	r3, [pc, #44]	; (8000dac <main+0x7c>)
 8000d80:	681a      	ldr	r2, [r3, #0]
 8000d82:	4b07      	ldr	r3, [pc, #28]	; (8000da0 <main+0x70>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	635a      	str	r2, [r3, #52]	; 0x34
  htim4.Instance->CCR3 = PWM;
 8000d88:	4b08      	ldr	r3, [pc, #32]	; (8000dac <main+0x7c>)
 8000d8a:	681a      	ldr	r2, [r3, #0]
 8000d8c:	4b04      	ldr	r3, [pc, #16]	; (8000da0 <main+0x70>)
 8000d8e:	681b      	ldr	r3, [r3, #0]
 8000d90:	63da      	str	r2, [r3, #60]	; 0x3c

//
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d92:	f004 f86d 	bl	8004e70 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000d96:	f7ff fba1 	bl	80004dc <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000d9a:	f004 f88d 	bl	8004eb8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d9e:	e7fe      	b.n	8000d9e <main+0x6e>
 8000da0:	200001cc 	.word	0x200001cc
 8000da4:	2000013c 	.word	0x2000013c
 8000da8:	20000184 	.word	0x20000184
 8000dac:	20000000 	.word	0x20000000

08000db0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000db0:	b580      	push	{r7, lr}
 8000db2:	b094      	sub	sp, #80	; 0x50
 8000db4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000db6:	f107 0320 	add.w	r3, r7, #32
 8000dba:	2230      	movs	r2, #48	; 0x30
 8000dbc:	2100      	movs	r1, #0
 8000dbe:	4618      	mov	r0, r3
 8000dc0:	f006 fdd4 	bl	800796c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dc4:	f107 030c 	add.w	r3, r7, #12
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60bb      	str	r3, [r7, #8]
 8000dd8:	4b28      	ldr	r3, [pc, #160]	; (8000e7c <SystemClock_Config+0xcc>)
 8000dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ddc:	4a27      	ldr	r2, [pc, #156]	; (8000e7c <SystemClock_Config+0xcc>)
 8000dde:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000de2:	6413      	str	r3, [r2, #64]	; 0x40
 8000de4:	4b25      	ldr	r3, [pc, #148]	; (8000e7c <SystemClock_Config+0xcc>)
 8000de6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000de8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000dec:	60bb      	str	r3, [r7, #8]
 8000dee:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000df0:	2300      	movs	r3, #0
 8000df2:	607b      	str	r3, [r7, #4]
 8000df4:	4b22      	ldr	r3, [pc, #136]	; (8000e80 <SystemClock_Config+0xd0>)
 8000df6:	681b      	ldr	r3, [r3, #0]
 8000df8:	4a21      	ldr	r2, [pc, #132]	; (8000e80 <SystemClock_Config+0xd0>)
 8000dfa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8000dfe:	6013      	str	r3, [r2, #0]
 8000e00:	4b1f      	ldr	r3, [pc, #124]	; (8000e80 <SystemClock_Config+0xd0>)
 8000e02:	681b      	ldr	r3, [r3, #0]
 8000e04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000e08:	607b      	str	r3, [r7, #4]
 8000e0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e0c:	2302      	movs	r3, #2
 8000e0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e10:	2301      	movs	r3, #1
 8000e12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e14:	2310      	movs	r3, #16
 8000e16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e18:	2302      	movs	r3, #2
 8000e1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000e20:	2310      	movs	r3, #16
 8000e22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000e28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000e2a:	2304      	movs	r3, #4
 8000e2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e2e:	2304      	movs	r3, #4
 8000e30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e32:	f107 0320 	add.w	r3, r7, #32
 8000e36:	4618      	mov	r0, r3
 8000e38:	f001 f87e 	bl	8001f38 <HAL_RCC_OscConfig>
 8000e3c:	4603      	mov	r3, r0
 8000e3e:	2b00      	cmp	r3, #0
 8000e40:	d001      	beq.n	8000e46 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e42:	f000 f831 	bl	8000ea8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e46:	230f      	movs	r3, #15
 8000e48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e4a:	2302      	movs	r3, #2
 8000e4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e4e:	2300      	movs	r3, #0
 8000e50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e58:	2300      	movs	r3, #0
 8000e5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e5c:	f107 030c 	add.w	r3, r7, #12
 8000e60:	2102      	movs	r1, #2
 8000e62:	4618      	mov	r0, r3
 8000e64:	f001 fae0 	bl	8002428 <HAL_RCC_ClockConfig>
 8000e68:	4603      	mov	r3, r0
 8000e6a:	2b00      	cmp	r3, #0
 8000e6c:	d001      	beq.n	8000e72 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8000e6e:	f000 f81b 	bl	8000ea8 <Error_Handler>
  }
}
 8000e72:	bf00      	nop
 8000e74:	3750      	adds	r7, #80	; 0x50
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
 8000e7a:	bf00      	nop
 8000e7c:	40023800 	.word	0x40023800
 8000e80:	40007000 	.word	0x40007000

08000e84 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af00      	add	r7, sp, #0
 8000e8a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	681b      	ldr	r3, [r3, #0]
 8000e90:	4a04      	ldr	r2, [pc, #16]	; (8000ea4 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000e92:	4293      	cmp	r3, r2
 8000e94:	d101      	bne.n	8000e9a <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000e96:	f000 fd1d 	bl	80018d4 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8000e9a:	bf00      	nop
 8000e9c:	3708      	adds	r7, #8
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}
 8000ea2:	bf00      	nop
 8000ea4:	40014000 	.word	0x40014000

08000ea8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000eac:	b672      	cpsid	i
}
 8000eae:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000eb0:	e7fe      	b.n	8000eb0 <Error_Handler+0x8>
	...

08000eb4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b082      	sub	sp, #8
 8000eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000eba:	2300      	movs	r3, #0
 8000ebc:	607b      	str	r3, [r7, #4]
 8000ebe:	4b12      	ldr	r3, [pc, #72]	; (8000f08 <HAL_MspInit+0x54>)
 8000ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ec2:	4a11      	ldr	r2, [pc, #68]	; (8000f08 <HAL_MspInit+0x54>)
 8000ec4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ec8:	6453      	str	r3, [r2, #68]	; 0x44
 8000eca:	4b0f      	ldr	r3, [pc, #60]	; (8000f08 <HAL_MspInit+0x54>)
 8000ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000ece:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ed2:	607b      	str	r3, [r7, #4]
 8000ed4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	603b      	str	r3, [r7, #0]
 8000eda:	4b0b      	ldr	r3, [pc, #44]	; (8000f08 <HAL_MspInit+0x54>)
 8000edc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ede:	4a0a      	ldr	r2, [pc, #40]	; (8000f08 <HAL_MspInit+0x54>)
 8000ee0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ee4:	6413      	str	r3, [r2, #64]	; 0x40
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <HAL_MspInit+0x54>)
 8000ee8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000eea:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000eee:	603b      	str	r3, [r7, #0]
 8000ef0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	210f      	movs	r1, #15
 8000ef6:	f06f 0001 	mvn.w	r0, #1
 8000efa:	f000 fdc3 	bl	8001a84 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000efe:	bf00      	nop
 8000f00:	3708      	adds	r7, #8
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40023800 	.word	0x40023800

08000f0c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b08c      	sub	sp, #48	; 0x30
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8000f14:	2300      	movs	r3, #0
 8000f16:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8000f18:	2300      	movs	r3, #0
 8000f1a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8000f1c:	2300      	movs	r3, #0
 8000f1e:	60bb      	str	r3, [r7, #8]
 8000f20:	4b2e      	ldr	r3, [pc, #184]	; (8000fdc <HAL_InitTick+0xd0>)
 8000f22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f24:	4a2d      	ldr	r2, [pc, #180]	; (8000fdc <HAL_InitTick+0xd0>)
 8000f26:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8000f2a:	6453      	str	r3, [r2, #68]	; 0x44
 8000f2c:	4b2b      	ldr	r3, [pc, #172]	; (8000fdc <HAL_InitTick+0xd0>)
 8000f2e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f30:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8000f34:	60bb      	str	r3, [r7, #8]
 8000f36:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000f38:	f107 020c 	add.w	r2, r7, #12
 8000f3c:	f107 0310 	add.w	r3, r7, #16
 8000f40:	4611      	mov	r1, r2
 8000f42:	4618      	mov	r0, r3
 8000f44:	f001 fc90 	bl	8002868 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8000f48:	f001 fc7a 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 8000f4c:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000f4e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000f50:	4a23      	ldr	r2, [pc, #140]	; (8000fe0 <HAL_InitTick+0xd4>)
 8000f52:	fba2 2303 	umull	r2, r3, r2, r3
 8000f56:	0c9b      	lsrs	r3, r3, #18
 8000f58:	3b01      	subs	r3, #1
 8000f5a:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8000f5c:	4b21      	ldr	r3, [pc, #132]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f5e:	4a22      	ldr	r2, [pc, #136]	; (8000fe8 <HAL_InitTick+0xdc>)
 8000f60:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 8000f62:	4b20      	ldr	r3, [pc, #128]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f64:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000f68:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8000f6a:	4a1e      	ldr	r2, [pc, #120]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8000f6e:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 8000f70:	4b1c      	ldr	r3, [pc, #112]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f76:	4b1b      	ldr	r3, [pc, #108]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f7c:	4b19      	ldr	r3, [pc, #100]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 8000f82:	4818      	ldr	r0, [pc, #96]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f84:	f001 fca2 	bl	80028cc <HAL_TIM_Base_Init>
 8000f88:	4603      	mov	r3, r0
 8000f8a:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8000f8e:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d11b      	bne.n	8000fce <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 8000f96:	4813      	ldr	r0, [pc, #76]	; (8000fe4 <HAL_InitTick+0xd8>)
 8000f98:	f001 fd42 	bl	8002a20 <HAL_TIM_Base_Start_IT>
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8000fa2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d111      	bne.n	8000fce <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8000faa:	2018      	movs	r0, #24
 8000fac:	f000 fd86 	bl	8001abc <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b0f      	cmp	r3, #15
 8000fb4:	d808      	bhi.n	8000fc8 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	6879      	ldr	r1, [r7, #4]
 8000fba:	2018      	movs	r0, #24
 8000fbc:	f000 fd62 	bl	8001a84 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000fc0:	4a0a      	ldr	r2, [pc, #40]	; (8000fec <HAL_InitTick+0xe0>)
 8000fc2:	687b      	ldr	r3, [r7, #4]
 8000fc4:	6013      	str	r3, [r2, #0]
 8000fc6:	e002      	b.n	8000fce <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8000fc8:	2301      	movs	r3, #1
 8000fca:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8000fce:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8000fd2:	4618      	mov	r0, r3
 8000fd4:	3730      	adds	r7, #48	; 0x30
 8000fd6:	46bd      	mov	sp, r7
 8000fd8:	bd80      	pop	{r7, pc}
 8000fda:	bf00      	nop
 8000fdc:	40023800 	.word	0x40023800
 8000fe0:	431bde83 	.word	0x431bde83
 8000fe4:	200000f4 	.word	0x200000f4
 8000fe8:	40014000 	.word	0x40014000
 8000fec:	20000008 	.word	0x20000008

08000ff0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ff0:	b480      	push	{r7}
 8000ff2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000ff4:	e7fe      	b.n	8000ff4 <NMI_Handler+0x4>

08000ff6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ff6:	b480      	push	{r7}
 8000ff8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ffa:	e7fe      	b.n	8000ffa <HardFault_Handler+0x4>

08000ffc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001000:	e7fe      	b.n	8001000 <MemManage_Handler+0x4>

08001002 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001002:	b480      	push	{r7}
 8001004:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001006:	e7fe      	b.n	8001006 <BusFault_Handler+0x4>

08001008 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001008:	b480      	push	{r7}
 800100a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800100c:	e7fe      	b.n	800100c <UsageFault_Handler+0x4>

0800100e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800100e:	b480      	push	{r7}
 8001010:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001012:	bf00      	nop
 8001014:	46bd      	mov	sp, r7
 8001016:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101a:	4770      	bx	lr

0800101c <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 800101c:	b580      	push	{r7, lr}
 800101e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001020:	4803      	ldr	r0, [pc, #12]	; (8001030 <TIM1_BRK_TIM9_IRQHandler+0x14>)
 8001022:	f001 ff7d 	bl	8002f20 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001026:	4803      	ldr	r0, [pc, #12]	; (8001034 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001028:	f001 ff7a 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 800102c:	bf00      	nop
 800102e:	bd80      	pop	{r7, pc}
 8001030:	2000013c 	.word	0x2000013c
 8001034:	200000f4 	.word	0x200000f4

08001038 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800103c:	4802      	ldr	r0, [pc, #8]	; (8001048 <TIM1_CC_IRQHandler+0x10>)
 800103e:	f001 ff6f 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 8001042:	bf00      	nop
 8001044:	bd80      	pop	{r7, pc}
 8001046:	bf00      	nop
 8001048:	2000013c 	.word	0x2000013c

0800104c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800104c:	b580      	push	{r7, lr}
 800104e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001050:	4802      	ldr	r0, [pc, #8]	; (800105c <TIM2_IRQHandler+0x10>)
 8001052:	f001 ff65 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001056:	bf00      	nop
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	20000184 	.word	0x20000184

08001060 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001064:	4802      	ldr	r0, [pc, #8]	; (8001070 <USART1_IRQHandler+0x10>)
 8001066:	f002 ffc1 	bl	8003fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800106a:	bf00      	nop
 800106c:	bd80      	pop	{r7, pc}
 800106e:	bf00      	nop
 8001070:	2000025c 	.word	0x2000025c

08001074 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001074:	b580      	push	{r7, lr}
 8001076:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001078:	4802      	ldr	r0, [pc, #8]	; (8001084 <USART2_IRQHandler+0x10>)
 800107a:	f002 ffb7 	bl	8003fec <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800107e:	bf00      	nop
 8001080:	bd80      	pop	{r7, pc}
 8001082:	bf00      	nop
 8001084:	200002a4 	.word	0x200002a4

08001088 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800108c:	4802      	ldr	r0, [pc, #8]	; (8001098 <TIM5_IRQHandler+0x10>)
 800108e:	f001 ff47 	bl	8002f20 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001092:	bf00      	nop
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	20000214 	.word	0x20000214

0800109c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800109c:	b480      	push	{r7}
 800109e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80010a0:	4b06      	ldr	r3, [pc, #24]	; (80010bc <SystemInit+0x20>)
 80010a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80010a6:	4a05      	ldr	r2, [pc, #20]	; (80010bc <SystemInit+0x20>)
 80010a8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80010ac:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80010b0:	bf00      	nop
 80010b2:	46bd      	mov	sp, r7
 80010b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b8:	4770      	bx	lr
 80010ba:	bf00      	nop
 80010bc:	e000ed00 	.word	0xe000ed00

080010c0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80010c0:	b580      	push	{r7, lr}
 80010c2:	b08a      	sub	sp, #40	; 0x28
 80010c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c6:	f107 0318 	add.w	r3, r7, #24
 80010ca:	2200      	movs	r2, #0
 80010cc:	601a      	str	r2, [r3, #0]
 80010ce:	605a      	str	r2, [r3, #4]
 80010d0:	609a      	str	r2, [r3, #8]
 80010d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d4:	f107 0310 	add.w	r3, r7, #16
 80010d8:	2200      	movs	r2, #0
 80010da:	601a      	str	r2, [r3, #0]
 80010dc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80010de:	463b      	mov	r3, r7
 80010e0:	2200      	movs	r2, #0
 80010e2:	601a      	str	r2, [r3, #0]
 80010e4:	605a      	str	r2, [r3, #4]
 80010e6:	609a      	str	r2, [r3, #8]
 80010e8:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80010ea:	4b2d      	ldr	r3, [pc, #180]	; (80011a0 <MX_TIM1_Init+0xe0>)
 80010ec:	4a2d      	ldr	r2, [pc, #180]	; (80011a4 <MX_TIM1_Init+0xe4>)
 80010ee:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 80010f0:	4b2b      	ldr	r3, [pc, #172]	; (80011a0 <MX_TIM1_Init+0xe0>)
 80010f2:	2253      	movs	r2, #83	; 0x53
 80010f4:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010f6:	4b2a      	ldr	r3, [pc, #168]	; (80011a0 <MX_TIM1_Init+0xe0>)
 80010f8:	2200      	movs	r2, #0
 80010fa:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 80010fc:	4b28      	ldr	r3, [pc, #160]	; (80011a0 <MX_TIM1_Init+0xe0>)
 80010fe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001102:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001104:	4b26      	ldr	r3, [pc, #152]	; (80011a0 <MX_TIM1_Init+0xe0>)
 8001106:	2200      	movs	r2, #0
 8001108:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800110a:	4b25      	ldr	r3, [pc, #148]	; (80011a0 <MX_TIM1_Init+0xe0>)
 800110c:	2200      	movs	r2, #0
 800110e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001110:	4b23      	ldr	r3, [pc, #140]	; (80011a0 <MX_TIM1_Init+0xe0>)
 8001112:	2200      	movs	r2, #0
 8001114:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001116:	4822      	ldr	r0, [pc, #136]	; (80011a0 <MX_TIM1_Init+0xe0>)
 8001118:	f001 fbd8 	bl	80028cc <HAL_TIM_Base_Init>
 800111c:	4603      	mov	r3, r0
 800111e:	2b00      	cmp	r3, #0
 8001120:	d001      	beq.n	8001126 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001122:	f7ff fec1 	bl	8000ea8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001126:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800112a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800112c:	f107 0318 	add.w	r3, r7, #24
 8001130:	4619      	mov	r1, r3
 8001132:	481b      	ldr	r0, [pc, #108]	; (80011a0 <MX_TIM1_Init+0xe0>)
 8001134:	f002 f942 	bl	80033bc <HAL_TIM_ConfigClockSource>
 8001138:	4603      	mov	r3, r0
 800113a:	2b00      	cmp	r3, #0
 800113c:	d001      	beq.n	8001142 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800113e:	f7ff feb3 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001142:	4817      	ldr	r0, [pc, #92]	; (80011a0 <MX_TIM1_Init+0xe0>)
 8001144:	f001 fdce 	bl	8002ce4 <HAL_TIM_IC_Init>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d001      	beq.n	8001152 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800114e:	f7ff feab 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001152:	2300      	movs	r3, #0
 8001154:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001156:	2300      	movs	r3, #0
 8001158:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800115a:	f107 0310 	add.w	r3, r7, #16
 800115e:	4619      	mov	r1, r3
 8001160:	480f      	ldr	r0, [pc, #60]	; (80011a0 <MX_TIM1_Init+0xe0>)
 8001162:	f002 fe4b 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001166:	4603      	mov	r3, r0
 8001168:	2b00      	cmp	r3, #0
 800116a:	d001      	beq.n	8001170 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800116c:	f7ff fe9c 	bl	8000ea8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001170:	2300      	movs	r3, #0
 8001172:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001174:	2301      	movs	r3, #1
 8001176:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800117c:	230f      	movs	r3, #15
 800117e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001180:	463b      	mov	r3, r7
 8001182:	2200      	movs	r2, #0
 8001184:	4619      	mov	r1, r3
 8001186:	4806      	ldr	r0, [pc, #24]	; (80011a0 <MX_TIM1_Init+0xe0>)
 8001188:	f001 ffba 	bl	8003100 <HAL_TIM_IC_ConfigChannel>
 800118c:	4603      	mov	r3, r0
 800118e:	2b00      	cmp	r3, #0
 8001190:	d001      	beq.n	8001196 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 8001192:	f7ff fe89 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001196:	bf00      	nop
 8001198:	3728      	adds	r7, #40	; 0x28
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	2000013c 	.word	0x2000013c
 80011a4:	40010000 	.word	0x40010000

080011a8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b086      	sub	sp, #24
 80011ac:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ae:	f107 0310 	add.w	r3, r7, #16
 80011b2:	2200      	movs	r2, #0
 80011b4:	601a      	str	r2, [r3, #0]
 80011b6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80011b8:	463b      	mov	r3, r7
 80011ba:	2200      	movs	r2, #0
 80011bc:	601a      	str	r2, [r3, #0]
 80011be:	605a      	str	r2, [r3, #4]
 80011c0:	609a      	str	r2, [r3, #8]
 80011c2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80011c4:	4b20      	ldr	r3, [pc, #128]	; (8001248 <MX_TIM2_Init+0xa0>)
 80011c6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011ca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80011cc:	4b1e      	ldr	r3, [pc, #120]	; (8001248 <MX_TIM2_Init+0xa0>)
 80011ce:	2253      	movs	r2, #83	; 0x53
 80011d0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b1d      	ldr	r3, [pc, #116]	; (8001248 <MX_TIM2_Init+0xa0>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80011d8:	4b1b      	ldr	r3, [pc, #108]	; (8001248 <MX_TIM2_Init+0xa0>)
 80011da:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80011de:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b19      	ldr	r3, [pc, #100]	; (8001248 <MX_TIM2_Init+0xa0>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b18      	ldr	r3, [pc, #96]	; (8001248 <MX_TIM2_Init+0xa0>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80011ec:	4816      	ldr	r0, [pc, #88]	; (8001248 <MX_TIM2_Init+0xa0>)
 80011ee:	f001 fd79 	bl	8002ce4 <HAL_TIM_IC_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80011f8:	f7ff fe56 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011fc:	2300      	movs	r3, #0
 80011fe:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001204:	f107 0310 	add.w	r3, r7, #16
 8001208:	4619      	mov	r1, r3
 800120a:	480f      	ldr	r0, [pc, #60]	; (8001248 <MX_TIM2_Init+0xa0>)
 800120c:	f002 fdf6 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 8001210:	4603      	mov	r3, r0
 8001212:	2b00      	cmp	r3, #0
 8001214:	d001      	beq.n	800121a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001216:	f7ff fe47 	bl	8000ea8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800121a:	2300      	movs	r3, #0
 800121c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800121e:	2301      	movs	r3, #1
 8001220:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001222:	2300      	movs	r3, #0
 8001224:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001226:	230f      	movs	r3, #15
 8001228:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800122a:	463b      	mov	r3, r7
 800122c:	2200      	movs	r2, #0
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	; (8001248 <MX_TIM2_Init+0xa0>)
 8001232:	f001 ff65 	bl	8003100 <HAL_TIM_IC_ConfigChannel>
 8001236:	4603      	mov	r3, r0
 8001238:	2b00      	cmp	r3, #0
 800123a:	d001      	beq.n	8001240 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800123c:	f7ff fe34 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001240:	bf00      	nop
 8001242:	3718      	adds	r7, #24
 8001244:	46bd      	mov	sp, r7
 8001246:	bd80      	pop	{r7, pc}
 8001248:	20000184 	.word	0x20000184

0800124c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	b08a      	sub	sp, #40	; 0x28
 8001250:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001252:	f107 0320 	add.w	r3, r7, #32
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800125c:	1d3b      	adds	r3, r7, #4
 800125e:	2200      	movs	r2, #0
 8001260:	601a      	str	r2, [r3, #0]
 8001262:	605a      	str	r2, [r3, #4]
 8001264:	609a      	str	r2, [r3, #8]
 8001266:	60da      	str	r2, [r3, #12]
 8001268:	611a      	str	r2, [r3, #16]
 800126a:	615a      	str	r2, [r3, #20]
 800126c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800126e:	4b28      	ldr	r3, [pc, #160]	; (8001310 <MX_TIM4_Init+0xc4>)
 8001270:	4a28      	ldr	r2, [pc, #160]	; (8001314 <MX_TIM4_Init+0xc8>)
 8001272:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 8001274:	4b26      	ldr	r3, [pc, #152]	; (8001310 <MX_TIM4_Init+0xc4>)
 8001276:	f242 02cf 	movw	r2, #8399	; 0x20cf
 800127a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800127c:	4b24      	ldr	r3, [pc, #144]	; (8001310 <MX_TIM4_Init+0xc4>)
 800127e:	2200      	movs	r2, #0
 8001280:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 8001282:	4b23      	ldr	r3, [pc, #140]	; (8001310 <MX_TIM4_Init+0xc4>)
 8001284:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001288:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128a:	4b21      	ldr	r3, [pc, #132]	; (8001310 <MX_TIM4_Init+0xc4>)
 800128c:	2200      	movs	r2, #0
 800128e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001290:	4b1f      	ldr	r3, [pc, #124]	; (8001310 <MX_TIM4_Init+0xc4>)
 8001292:	2200      	movs	r2, #0
 8001294:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8001296:	481e      	ldr	r0, [pc, #120]	; (8001310 <MX_TIM4_Init+0xc4>)
 8001298:	f001 fc24 	bl	8002ae4 <HAL_TIM_PWM_Init>
 800129c:	4603      	mov	r3, r0
 800129e:	2b00      	cmp	r3, #0
 80012a0:	d001      	beq.n	80012a6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80012a2:	f7ff fe01 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012aa:	2300      	movs	r3, #0
 80012ac:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80012ae:	f107 0320 	add.w	r3, r7, #32
 80012b2:	4619      	mov	r1, r3
 80012b4:	4816      	ldr	r0, [pc, #88]	; (8001310 <MX_TIM4_Init+0xc4>)
 80012b6:	f002 fda1 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80012c0:	f7ff fdf2 	bl	8000ea8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80012c4:	2360      	movs	r3, #96	; 0x60
 80012c6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80012c8:	2300      	movs	r3, #0
 80012ca:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80012cc:	2300      	movs	r3, #0
 80012ce:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80012d0:	2300      	movs	r3, #0
 80012d2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	4619      	mov	r1, r3
 80012da:	480d      	ldr	r0, [pc, #52]	; (8001310 <MX_TIM4_Init+0xc4>)
 80012dc:	f001 ffac 	bl	8003238 <HAL_TIM_PWM_ConfigChannel>
 80012e0:	4603      	mov	r3, r0
 80012e2:	2b00      	cmp	r3, #0
 80012e4:	d001      	beq.n	80012ea <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80012e6:	f7ff fddf 	bl	8000ea8 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80012ea:	1d3b      	adds	r3, r7, #4
 80012ec:	2208      	movs	r2, #8
 80012ee:	4619      	mov	r1, r3
 80012f0:	4807      	ldr	r0, [pc, #28]	; (8001310 <MX_TIM4_Init+0xc4>)
 80012f2:	f001 ffa1 	bl	8003238 <HAL_TIM_PWM_ConfigChannel>
 80012f6:	4603      	mov	r3, r0
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	d001      	beq.n	8001300 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80012fc:	f7ff fdd4 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001300:	4803      	ldr	r0, [pc, #12]	; (8001310 <MX_TIM4_Init+0xc4>)
 8001302:	f000 f961 	bl	80015c8 <HAL_TIM_MspPostInit>

}
 8001306:	bf00      	nop
 8001308:	3728      	adds	r7, #40	; 0x28
 800130a:	46bd      	mov	sp, r7
 800130c:	bd80      	pop	{r7, pc}
 800130e:	bf00      	nop
 8001310:	200001cc 	.word	0x200001cc
 8001314:	40000800 	.word	0x40000800

08001318 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	b086      	sub	sp, #24
 800131c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131e:	f107 0310 	add.w	r3, r7, #16
 8001322:	2200      	movs	r2, #0
 8001324:	601a      	str	r2, [r3, #0]
 8001326:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001328:	463b      	mov	r3, r7
 800132a:	2200      	movs	r2, #0
 800132c:	601a      	str	r2, [r3, #0]
 800132e:	605a      	str	r2, [r3, #4]
 8001330:	609a      	str	r2, [r3, #8]
 8001332:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001334:	4b20      	ldr	r3, [pc, #128]	; (80013b8 <MX_TIM5_Init+0xa0>)
 8001336:	4a21      	ldr	r2, [pc, #132]	; (80013bc <MX_TIM5_Init+0xa4>)
 8001338:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800133a:	4b1f      	ldr	r3, [pc, #124]	; (80013b8 <MX_TIM5_Init+0xa0>)
 800133c:	2253      	movs	r2, #83	; 0x53
 800133e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001340:	4b1d      	ldr	r3, [pc, #116]	; (80013b8 <MX_TIM5_Init+0xa0>)
 8001342:	2200      	movs	r2, #0
 8001344:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff-1;
 8001346:	4b1c      	ldr	r3, [pc, #112]	; (80013b8 <MX_TIM5_Init+0xa0>)
 8001348:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800134c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800134e:	4b1a      	ldr	r3, [pc, #104]	; (80013b8 <MX_TIM5_Init+0xa0>)
 8001350:	2200      	movs	r2, #0
 8001352:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001354:	4b18      	ldr	r3, [pc, #96]	; (80013b8 <MX_TIM5_Init+0xa0>)
 8001356:	2200      	movs	r2, #0
 8001358:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800135a:	4817      	ldr	r0, [pc, #92]	; (80013b8 <MX_TIM5_Init+0xa0>)
 800135c:	f001 fcc2 	bl	8002ce4 <HAL_TIM_IC_Init>
 8001360:	4603      	mov	r3, r0
 8001362:	2b00      	cmp	r3, #0
 8001364:	d001      	beq.n	800136a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001366:	f7ff fd9f 	bl	8000ea8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800136a:	2300      	movs	r3, #0
 800136c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800136e:	2300      	movs	r3, #0
 8001370:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8001372:	f107 0310 	add.w	r3, r7, #16
 8001376:	4619      	mov	r1, r3
 8001378:	480f      	ldr	r0, [pc, #60]	; (80013b8 <MX_TIM5_Init+0xa0>)
 800137a:	f002 fd3f 	bl	8003dfc <HAL_TIMEx_MasterConfigSynchronization>
 800137e:	4603      	mov	r3, r0
 8001380:	2b00      	cmp	r3, #0
 8001382:	d001      	beq.n	8001388 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 8001384:	f7ff fd90 	bl	8000ea8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001388:	2300      	movs	r3, #0
 800138a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800138c:	2301      	movs	r3, #1
 800138e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001390:	2300      	movs	r3, #0
 8001392:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001394:	230f      	movs	r3, #15
 8001396:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001398:	463b      	mov	r3, r7
 800139a:	2200      	movs	r2, #0
 800139c:	4619      	mov	r1, r3
 800139e:	4806      	ldr	r0, [pc, #24]	; (80013b8 <MX_TIM5_Init+0xa0>)
 80013a0:	f001 feae 	bl	8003100 <HAL_TIM_IC_ConfigChannel>
 80013a4:	4603      	mov	r3, r0
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	d001      	beq.n	80013ae <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80013aa:	f7ff fd7d 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80013ae:	bf00      	nop
 80013b0:	3718      	adds	r7, #24
 80013b2:	46bd      	mov	sp, r7
 80013b4:	bd80      	pop	{r7, pc}
 80013b6:	bf00      	nop
 80013b8:	20000214 	.word	0x20000214
 80013bc:	40000c00 	.word	0x40000c00

080013c0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80013c0:	b580      	push	{r7, lr}
 80013c2:	b08a      	sub	sp, #40	; 0x28
 80013c4:	af00      	add	r7, sp, #0
 80013c6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013c8:	f107 0314 	add.w	r3, r7, #20
 80013cc:	2200      	movs	r2, #0
 80013ce:	601a      	str	r2, [r3, #0]
 80013d0:	605a      	str	r2, [r3, #4]
 80013d2:	609a      	str	r2, [r3, #8]
 80013d4:	60da      	str	r2, [r3, #12]
 80013d6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80013d8:	687b      	ldr	r3, [r7, #4]
 80013da:	681b      	ldr	r3, [r3, #0]
 80013dc:	4a21      	ldr	r2, [pc, #132]	; (8001464 <HAL_TIM_Base_MspInit+0xa4>)
 80013de:	4293      	cmp	r3, r2
 80013e0:	d13c      	bne.n	800145c <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80013e2:	2300      	movs	r3, #0
 80013e4:	613b      	str	r3, [r7, #16]
 80013e6:	4b20      	ldr	r3, [pc, #128]	; (8001468 <HAL_TIM_Base_MspInit+0xa8>)
 80013e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013ea:	4a1f      	ldr	r2, [pc, #124]	; (8001468 <HAL_TIM_Base_MspInit+0xa8>)
 80013ec:	f043 0301 	orr.w	r3, r3, #1
 80013f0:	6453      	str	r3, [r2, #68]	; 0x44
 80013f2:	4b1d      	ldr	r3, [pc, #116]	; (8001468 <HAL_TIM_Base_MspInit+0xa8>)
 80013f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	613b      	str	r3, [r7, #16]
 80013fc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80013fe:	2300      	movs	r3, #0
 8001400:	60fb      	str	r3, [r7, #12]
 8001402:	4b19      	ldr	r3, [pc, #100]	; (8001468 <HAL_TIM_Base_MspInit+0xa8>)
 8001404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001406:	4a18      	ldr	r2, [pc, #96]	; (8001468 <HAL_TIM_Base_MspInit+0xa8>)
 8001408:	f043 0301 	orr.w	r3, r3, #1
 800140c:	6313      	str	r3, [r2, #48]	; 0x30
 800140e:	4b16      	ldr	r3, [pc, #88]	; (8001468 <HAL_TIM_Base_MspInit+0xa8>)
 8001410:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001412:	f003 0301 	and.w	r3, r3, #1
 8001416:	60fb      	str	r3, [r7, #12]
 8001418:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EchoR_Pin;
 800141a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800141e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001420:	2302      	movs	r3, #2
 8001422:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001424:	2300      	movs	r3, #0
 8001426:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001428:	2300      	movs	r3, #0
 800142a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800142c:	2301      	movs	r3, #1
 800142e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EchoR_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0314 	add.w	r3, r7, #20
 8001434:	4619      	mov	r1, r3
 8001436:	480d      	ldr	r0, [pc, #52]	; (800146c <HAL_TIM_Base_MspInit+0xac>)
 8001438:	f000 fbe0 	bl	8001bfc <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 800143c:	2200      	movs	r2, #0
 800143e:	210f      	movs	r1, #15
 8001440:	2018      	movs	r0, #24
 8001442:	f000 fb1f 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001446:	2018      	movs	r0, #24
 8001448:	f000 fb38 	bl	8001abc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800144c:	2200      	movs	r2, #0
 800144e:	2105      	movs	r1, #5
 8001450:	201b      	movs	r0, #27
 8001452:	f000 fb17 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001456:	201b      	movs	r0, #27
 8001458:	f000 fb30 	bl	8001abc <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800145c:	bf00      	nop
 800145e:	3728      	adds	r7, #40	; 0x28
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40010000 	.word	0x40010000
 8001468:	40023800 	.word	0x40023800
 800146c:	40020000 	.word	0x40020000

08001470 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08c      	sub	sp, #48	; 0x30
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 031c 	add.w	r3, r7, #28
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001490:	d134      	bne.n	80014fc <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	61bb      	str	r3, [r7, #24]
 8001496:	4b38      	ldr	r3, [pc, #224]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 8001498:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800149a:	4a37      	ldr	r2, [pc, #220]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 800149c:	f043 0301 	orr.w	r3, r3, #1
 80014a0:	6413      	str	r3, [r2, #64]	; 0x40
 80014a2:	4b35      	ldr	r3, [pc, #212]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	f003 0301 	and.w	r3, r3, #1
 80014aa:	61bb      	str	r3, [r7, #24]
 80014ac:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	617b      	str	r3, [r7, #20]
 80014b2:	4b31      	ldr	r3, [pc, #196]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 80014b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014b6:	4a30      	ldr	r2, [pc, #192]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 80014b8:	f043 0301 	orr.w	r3, r3, #1
 80014bc:	6313      	str	r3, [r2, #48]	; 0x30
 80014be:	4b2e      	ldr	r3, [pc, #184]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 80014c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014c2:	f003 0301 	and.w	r3, r3, #1
 80014c6:	617b      	str	r3, [r7, #20]
 80014c8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = EchoL_Pin;
 80014ca:	2320      	movs	r3, #32
 80014cc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80014ce:	2302      	movs	r3, #2
 80014d0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014d2:	2300      	movs	r3, #0
 80014d4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014d6:	2300      	movs	r3, #0
 80014d8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80014da:	2301      	movs	r3, #1
 80014dc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EchoL_GPIO_Port, &GPIO_InitStruct);
 80014de:	f107 031c 	add.w	r3, r7, #28
 80014e2:	4619      	mov	r1, r3
 80014e4:	4825      	ldr	r0, [pc, #148]	; (800157c <HAL_TIM_IC_MspInit+0x10c>)
 80014e6:	f000 fb89 	bl	8001bfc <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 80014ea:	2200      	movs	r2, #0
 80014ec:	2105      	movs	r1, #5
 80014ee:	201c      	movs	r0, #28
 80014f0:	f000 fac8 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80014f4:	201c      	movs	r0, #28
 80014f6:	f000 fae1 	bl	8001abc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 80014fa:	e038      	b.n	800156e <HAL_TIM_IC_MspInit+0xfe>
  else if(tim_icHandle->Instance==TIM5)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a1f      	ldr	r2, [pc, #124]	; (8001580 <HAL_TIM_IC_MspInit+0x110>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d133      	bne.n	800156e <HAL_TIM_IC_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001506:	2300      	movs	r3, #0
 8001508:	613b      	str	r3, [r7, #16]
 800150a:	4b1b      	ldr	r3, [pc, #108]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 800150c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800150e:	4a1a      	ldr	r2, [pc, #104]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 8001510:	f043 0308 	orr.w	r3, r3, #8
 8001514:	6413      	str	r3, [r2, #64]	; 0x40
 8001516:	4b18      	ldr	r3, [pc, #96]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 8001518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800151a:	f003 0308 	and.w	r3, r3, #8
 800151e:	613b      	str	r3, [r7, #16]
 8001520:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001522:	2300      	movs	r3, #0
 8001524:	60fb      	str	r3, [r7, #12]
 8001526:	4b14      	ldr	r3, [pc, #80]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 8001528:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800152a:	4a13      	ldr	r2, [pc, #76]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 800152c:	f043 0301 	orr.w	r3, r3, #1
 8001530:	6313      	str	r3, [r2, #48]	; 0x30
 8001532:	4b11      	ldr	r3, [pc, #68]	; (8001578 <HAL_TIM_IC_MspInit+0x108>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	f003 0301 	and.w	r3, r3, #1
 800153a:	60fb      	str	r3, [r7, #12]
 800153c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EchoC_Pin;
 800153e:	2301      	movs	r3, #1
 8001540:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001542:	2302      	movs	r3, #2
 8001544:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001546:	2300      	movs	r3, #0
 8001548:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800154a:	2300      	movs	r3, #0
 800154c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800154e:	2302      	movs	r3, #2
 8001550:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EchoC_GPIO_Port, &GPIO_InitStruct);
 8001552:	f107 031c 	add.w	r3, r7, #28
 8001556:	4619      	mov	r1, r3
 8001558:	4808      	ldr	r0, [pc, #32]	; (800157c <HAL_TIM_IC_MspInit+0x10c>)
 800155a:	f000 fb4f 	bl	8001bfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800155e:	2200      	movs	r2, #0
 8001560:	2105      	movs	r1, #5
 8001562:	2032      	movs	r0, #50	; 0x32
 8001564:	f000 fa8e 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001568:	2032      	movs	r0, #50	; 0x32
 800156a:	f000 faa7 	bl	8001abc <HAL_NVIC_EnableIRQ>
}
 800156e:	bf00      	nop
 8001570:	3730      	adds	r7, #48	; 0x30
 8001572:	46bd      	mov	sp, r7
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	40023800 	.word	0x40023800
 800157c:	40020000 	.word	0x40020000
 8001580:	40000c00 	.word	0x40000c00

08001584 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0
 800158a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 800158c:	687b      	ldr	r3, [r7, #4]
 800158e:	681b      	ldr	r3, [r3, #0]
 8001590:	4a0b      	ldr	r2, [pc, #44]	; (80015c0 <HAL_TIM_PWM_MspInit+0x3c>)
 8001592:	4293      	cmp	r3, r2
 8001594:	d10d      	bne.n	80015b2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8001596:	2300      	movs	r3, #0
 8001598:	60fb      	str	r3, [r7, #12]
 800159a:	4b0a      	ldr	r3, [pc, #40]	; (80015c4 <HAL_TIM_PWM_MspInit+0x40>)
 800159c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800159e:	4a09      	ldr	r2, [pc, #36]	; (80015c4 <HAL_TIM_PWM_MspInit+0x40>)
 80015a0:	f043 0304 	orr.w	r3, r3, #4
 80015a4:	6413      	str	r3, [r2, #64]	; 0x40
 80015a6:	4b07      	ldr	r3, [pc, #28]	; (80015c4 <HAL_TIM_PWM_MspInit+0x40>)
 80015a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015aa:	f003 0304 	and.w	r3, r3, #4
 80015ae:	60fb      	str	r3, [r7, #12]
 80015b0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80015b2:	bf00      	nop
 80015b4:	3714      	adds	r7, #20
 80015b6:	46bd      	mov	sp, r7
 80015b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015bc:	4770      	bx	lr
 80015be:	bf00      	nop
 80015c0:	40000800 	.word	0x40000800
 80015c4:	40023800 	.word	0x40023800

080015c8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b088      	sub	sp, #32
 80015cc:	af00      	add	r7, sp, #0
 80015ce:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d0:	f107 030c 	add.w	r3, r7, #12
 80015d4:	2200      	movs	r2, #0
 80015d6:	601a      	str	r2, [r3, #0]
 80015d8:	605a      	str	r2, [r3, #4]
 80015da:	609a      	str	r2, [r3, #8]
 80015dc:	60da      	str	r2, [r3, #12]
 80015de:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	681b      	ldr	r3, [r3, #0]
 80015e4:	4a12      	ldr	r2, [pc, #72]	; (8001630 <HAL_TIM_MspPostInit+0x68>)
 80015e6:	4293      	cmp	r3, r2
 80015e8:	d11e      	bne.n	8001628 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a10      	ldr	r2, [pc, #64]	; (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015f4:	f043 0302 	orr.w	r3, r3, #2
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b0e      	ldr	r3, [pc, #56]	; (8001634 <HAL_TIM_MspPostInit+0x6c>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0302 	and.w	r3, r3, #2
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = ENB_Pin|ENA_Pin;
 8001606:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800160a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800160c:	2302      	movs	r3, #2
 800160e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001610:	2300      	movs	r3, #0
 8001612:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001618:	2302      	movs	r3, #2
 800161a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800161c:	f107 030c 	add.w	r3, r7, #12
 8001620:	4619      	mov	r1, r3
 8001622:	4805      	ldr	r0, [pc, #20]	; (8001638 <HAL_TIM_MspPostInit+0x70>)
 8001624:	f000 faea 	bl	8001bfc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001628:	bf00      	nop
 800162a:	3720      	adds	r7, #32
 800162c:	46bd      	mov	sp, r7
 800162e:	bd80      	pop	{r7, pc}
 8001630:	40000800 	.word	0x40000800
 8001634:	40023800 	.word	0x40023800
 8001638:	40020400 	.word	0x40020400

0800163c <MX_USART1_UART_Init>:
UART_HandleTypeDef huart2;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800163c:	b580      	push	{r7, lr}
 800163e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001640:	4b11      	ldr	r3, [pc, #68]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001642:	4a12      	ldr	r2, [pc, #72]	; (800168c <MX_USART1_UART_Init+0x50>)
 8001644:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001646:	4b10      	ldr	r3, [pc, #64]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001648:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800164c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800164e:	4b0e      	ldr	r3, [pc, #56]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001650:	2200      	movs	r2, #0
 8001652:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001654:	4b0c      	ldr	r3, [pc, #48]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001656:	2200      	movs	r2, #0
 8001658:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800165a:	4b0b      	ldr	r3, [pc, #44]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 800165c:	2200      	movs	r2, #0
 800165e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001660:	4b09      	ldr	r3, [pc, #36]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001662:	220c      	movs	r2, #12
 8001664:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001666:	4b08      	ldr	r3, [pc, #32]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001668:	2200      	movs	r2, #0
 800166a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 800166e:	2200      	movs	r2, #0
 8001670:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001672:	4805      	ldr	r0, [pc, #20]	; (8001688 <MX_USART1_UART_Init+0x4c>)
 8001674:	f002 fc44 	bl	8003f00 <HAL_UART_Init>
 8001678:	4603      	mov	r3, r0
 800167a:	2b00      	cmp	r3, #0
 800167c:	d001      	beq.n	8001682 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800167e:	f7ff fc13 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001682:	bf00      	nop
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	2000025c 	.word	0x2000025c
 800168c:	40011000 	.word	0x40011000

08001690 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001694:	4b11      	ldr	r3, [pc, #68]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 8001696:	4a12      	ldr	r2, [pc, #72]	; (80016e0 <MX_USART2_UART_Init+0x50>)
 8001698:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800169a:	4b10      	ldr	r3, [pc, #64]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 800169c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80016a0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80016a2:	4b0e      	ldr	r3, [pc, #56]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80016a8:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80016ae:	4b0b      	ldr	r3, [pc, #44]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80016b4:	4b09      	ldr	r3, [pc, #36]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016b6:	220c      	movs	r2, #12
 80016b8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80016ba:	4b08      	ldr	r3, [pc, #32]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80016c0:	4b06      	ldr	r3, [pc, #24]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80016c6:	4805      	ldr	r0, [pc, #20]	; (80016dc <MX_USART2_UART_Init+0x4c>)
 80016c8:	f002 fc1a 	bl	8003f00 <HAL_UART_Init>
 80016cc:	4603      	mov	r3, r0
 80016ce:	2b00      	cmp	r3, #0
 80016d0:	d001      	beq.n	80016d6 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80016d2:	f7ff fbe9 	bl	8000ea8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80016d6:	bf00      	nop
 80016d8:	bd80      	pop	{r7, pc}
 80016da:	bf00      	nop
 80016dc:	200002a4 	.word	0x200002a4
 80016e0:	40004400 	.word	0x40004400

080016e4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b08c      	sub	sp, #48	; 0x30
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ec:	f107 031c 	add.w	r3, r7, #28
 80016f0:	2200      	movs	r2, #0
 80016f2:	601a      	str	r2, [r3, #0]
 80016f4:	605a      	str	r2, [r3, #4]
 80016f6:	609a      	str	r2, [r3, #8]
 80016f8:	60da      	str	r2, [r3, #12]
 80016fa:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	681b      	ldr	r3, [r3, #0]
 8001700:	4a49      	ldr	r2, [pc, #292]	; (8001828 <HAL_UART_MspInit+0x144>)
 8001702:	4293      	cmp	r3, r2
 8001704:	d153      	bne.n	80017ae <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001706:	2300      	movs	r3, #0
 8001708:	61bb      	str	r3, [r7, #24]
 800170a:	4b48      	ldr	r3, [pc, #288]	; (800182c <HAL_UART_MspInit+0x148>)
 800170c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170e:	4a47      	ldr	r2, [pc, #284]	; (800182c <HAL_UART_MspInit+0x148>)
 8001710:	f043 0310 	orr.w	r3, r3, #16
 8001714:	6453      	str	r3, [r2, #68]	; 0x44
 8001716:	4b45      	ldr	r3, [pc, #276]	; (800182c <HAL_UART_MspInit+0x148>)
 8001718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800171a:	f003 0310 	and.w	r3, r3, #16
 800171e:	61bb      	str	r3, [r7, #24]
 8001720:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]
 8001726:	4b41      	ldr	r3, [pc, #260]	; (800182c <HAL_UART_MspInit+0x148>)
 8001728:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800172a:	4a40      	ldr	r2, [pc, #256]	; (800182c <HAL_UART_MspInit+0x148>)
 800172c:	f043 0301 	orr.w	r3, r3, #1
 8001730:	6313      	str	r3, [r2, #48]	; 0x30
 8001732:	4b3e      	ldr	r3, [pc, #248]	; (800182c <HAL_UART_MspInit+0x148>)
 8001734:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001736:	f003 0301 	and.w	r3, r3, #1
 800173a:	617b      	str	r3, [r7, #20]
 800173c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800173e:	2300      	movs	r3, #0
 8001740:	613b      	str	r3, [r7, #16]
 8001742:	4b3a      	ldr	r3, [pc, #232]	; (800182c <HAL_UART_MspInit+0x148>)
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	4a39      	ldr	r2, [pc, #228]	; (800182c <HAL_UART_MspInit+0x148>)
 8001748:	f043 0302 	orr.w	r3, r3, #2
 800174c:	6313      	str	r3, [r2, #48]	; 0x30
 800174e:	4b37      	ldr	r3, [pc, #220]	; (800182c <HAL_UART_MspInit+0x148>)
 8001750:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001752:	f003 0302 	and.w	r3, r3, #2
 8001756:	613b      	str	r3, [r7, #16]
 8001758:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800175a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800175e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001760:	2302      	movs	r3, #2
 8001762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001764:	2300      	movs	r3, #0
 8001766:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001768:	2303      	movs	r3, #3
 800176a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800176c:	2307      	movs	r3, #7
 800176e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001770:	f107 031c 	add.w	r3, r7, #28
 8001774:	4619      	mov	r1, r3
 8001776:	482e      	ldr	r0, [pc, #184]	; (8001830 <HAL_UART_MspInit+0x14c>)
 8001778:	f000 fa40 	bl	8001bfc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800177c:	2380      	movs	r3, #128	; 0x80
 800177e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001780:	2302      	movs	r3, #2
 8001782:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001784:	2300      	movs	r3, #0
 8001786:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001788:	2303      	movs	r3, #3
 800178a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800178c:	2307      	movs	r3, #7
 800178e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001790:	f107 031c 	add.w	r3, r7, #28
 8001794:	4619      	mov	r1, r3
 8001796:	4827      	ldr	r0, [pc, #156]	; (8001834 <HAL_UART_MspInit+0x150>)
 8001798:	f000 fa30 	bl	8001bfc <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 800179c:	2200      	movs	r2, #0
 800179e:	2105      	movs	r1, #5
 80017a0:	2025      	movs	r0, #37	; 0x25
 80017a2:	f000 f96f 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80017a6:	2025      	movs	r0, #37	; 0x25
 80017a8:	f000 f988 	bl	8001abc <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80017ac:	e038      	b.n	8001820 <HAL_UART_MspInit+0x13c>
  else if(uartHandle->Instance==USART2)
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	4a21      	ldr	r2, [pc, #132]	; (8001838 <HAL_UART_MspInit+0x154>)
 80017b4:	4293      	cmp	r3, r2
 80017b6:	d133      	bne.n	8001820 <HAL_UART_MspInit+0x13c>
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b8:	2300      	movs	r3, #0
 80017ba:	60fb      	str	r3, [r7, #12]
 80017bc:	4b1b      	ldr	r3, [pc, #108]	; (800182c <HAL_UART_MspInit+0x148>)
 80017be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017c0:	4a1a      	ldr	r2, [pc, #104]	; (800182c <HAL_UART_MspInit+0x148>)
 80017c2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80017c6:	6413      	str	r3, [r2, #64]	; 0x40
 80017c8:	4b18      	ldr	r3, [pc, #96]	; (800182c <HAL_UART_MspInit+0x148>)
 80017ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017cc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80017d0:	60fb      	str	r3, [r7, #12]
 80017d2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d4:	2300      	movs	r3, #0
 80017d6:	60bb      	str	r3, [r7, #8]
 80017d8:	4b14      	ldr	r3, [pc, #80]	; (800182c <HAL_UART_MspInit+0x148>)
 80017da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017dc:	4a13      	ldr	r2, [pc, #76]	; (800182c <HAL_UART_MspInit+0x148>)
 80017de:	f043 0301 	orr.w	r3, r3, #1
 80017e2:	6313      	str	r3, [r2, #48]	; 0x30
 80017e4:	4b11      	ldr	r3, [pc, #68]	; (800182c <HAL_UART_MspInit+0x148>)
 80017e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017e8:	f003 0301 	and.w	r3, r3, #1
 80017ec:	60bb      	str	r3, [r7, #8]
 80017ee:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80017f0:	230c      	movs	r3, #12
 80017f2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f4:	2302      	movs	r3, #2
 80017f6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f8:	2300      	movs	r3, #0
 80017fa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fc:	2303      	movs	r3, #3
 80017fe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001800:	2307      	movs	r3, #7
 8001802:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001804:	f107 031c 	add.w	r3, r7, #28
 8001808:	4619      	mov	r1, r3
 800180a:	4809      	ldr	r0, [pc, #36]	; (8001830 <HAL_UART_MspInit+0x14c>)
 800180c:	f000 f9f6 	bl	8001bfc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001810:	2200      	movs	r2, #0
 8001812:	2105      	movs	r1, #5
 8001814:	2026      	movs	r0, #38	; 0x26
 8001816:	f000 f935 	bl	8001a84 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800181a:	2026      	movs	r0, #38	; 0x26
 800181c:	f000 f94e 	bl	8001abc <HAL_NVIC_EnableIRQ>
}
 8001820:	bf00      	nop
 8001822:	3730      	adds	r7, #48	; 0x30
 8001824:	46bd      	mov	sp, r7
 8001826:	bd80      	pop	{r7, pc}
 8001828:	40011000 	.word	0x40011000
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000
 8001834:	40020400 	.word	0x40020400
 8001838:	40004400 	.word	0x40004400

0800183c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800183c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001874 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001840:	f7ff fc2c 	bl	800109c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001844:	480c      	ldr	r0, [pc, #48]	; (8001878 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001846:	490d      	ldr	r1, [pc, #52]	; (800187c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001848:	4a0d      	ldr	r2, [pc, #52]	; (8001880 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800184a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800184c:	e002      	b.n	8001854 <LoopCopyDataInit>

0800184e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800184e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001850:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001852:	3304      	adds	r3, #4

08001854 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001854:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001856:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001858:	d3f9      	bcc.n	800184e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800185a:	4a0a      	ldr	r2, [pc, #40]	; (8001884 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 800185c:	4c0a      	ldr	r4, [pc, #40]	; (8001888 <LoopFillZerobss+0x22>)
  movs r3, #0
 800185e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001860:	e001      	b.n	8001866 <LoopFillZerobss>

08001862 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001862:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001864:	3204      	adds	r2, #4

08001866 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001866:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001868:	d3fb      	bcc.n	8001862 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800186a:	f006 f8dd 	bl	8007a28 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800186e:	f7ff fa5f 	bl	8000d30 <main>
  bx  lr    
 8001872:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001874:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001878:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800187c:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001880:	08007bfc 	.word	0x08007bfc
  ldr r2, =_sbss
 8001884:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001888:	20004e18 	.word	0x20004e18

0800188c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800188c:	e7fe      	b.n	800188c <ADC_IRQHandler>
	...

08001890 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001894:	4b0e      	ldr	r3, [pc, #56]	; (80018d0 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0d      	ldr	r2, [pc, #52]	; (80018d0 <HAL_Init+0x40>)
 800189a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800189e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80018a0:	4b0b      	ldr	r3, [pc, #44]	; (80018d0 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0a      	ldr	r2, [pc, #40]	; (80018d0 <HAL_Init+0x40>)
 80018a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018ac:	4b08      	ldr	r3, [pc, #32]	; (80018d0 <HAL_Init+0x40>)
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	4a07      	ldr	r2, [pc, #28]	; (80018d0 <HAL_Init+0x40>)
 80018b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018b8:	2003      	movs	r0, #3
 80018ba:	f000 f8d8 	bl	8001a6e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018be:	200f      	movs	r0, #15
 80018c0:	f7ff fb24 	bl	8000f0c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018c4:	f7ff faf6 	bl	8000eb4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018c8:	2300      	movs	r3, #0
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	bd80      	pop	{r7, pc}
 80018ce:	bf00      	nop
 80018d0:	40023c00 	.word	0x40023c00

080018d4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018d4:	b480      	push	{r7}
 80018d6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018d8:	4b06      	ldr	r3, [pc, #24]	; (80018f4 <HAL_IncTick+0x20>)
 80018da:	781b      	ldrb	r3, [r3, #0]
 80018dc:	461a      	mov	r2, r3
 80018de:	4b06      	ldr	r3, [pc, #24]	; (80018f8 <HAL_IncTick+0x24>)
 80018e0:	681b      	ldr	r3, [r3, #0]
 80018e2:	4413      	add	r3, r2
 80018e4:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <HAL_IncTick+0x24>)
 80018e6:	6013      	str	r3, [r2, #0]
}
 80018e8:	bf00      	nop
 80018ea:	46bd      	mov	sp, r7
 80018ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f0:	4770      	bx	lr
 80018f2:	bf00      	nop
 80018f4:	2000000c 	.word	0x2000000c
 80018f8:	200002ec 	.word	0x200002ec

080018fc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80018fc:	b480      	push	{r7}
 80018fe:	af00      	add	r7, sp, #0
  return uwTick;
 8001900:	4b03      	ldr	r3, [pc, #12]	; (8001910 <HAL_GetTick+0x14>)
 8001902:	681b      	ldr	r3, [r3, #0]
}
 8001904:	4618      	mov	r0, r3
 8001906:	46bd      	mov	sp, r7
 8001908:	f85d 7b04 	ldr.w	r7, [sp], #4
 800190c:	4770      	bx	lr
 800190e:	bf00      	nop
 8001910:	200002ec 	.word	0x200002ec

08001914 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001914:	b480      	push	{r7}
 8001916:	b085      	sub	sp, #20
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	f003 0307 	and.w	r3, r3, #7
 8001922:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001924:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001926:	68db      	ldr	r3, [r3, #12]
 8001928:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800192a:	68ba      	ldr	r2, [r7, #8]
 800192c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001930:	4013      	ands	r3, r2
 8001932:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001934:	68fb      	ldr	r3, [r7, #12]
 8001936:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800193c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001940:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001944:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001946:	4a04      	ldr	r2, [pc, #16]	; (8001958 <__NVIC_SetPriorityGrouping+0x44>)
 8001948:	68bb      	ldr	r3, [r7, #8]
 800194a:	60d3      	str	r3, [r2, #12]
}
 800194c:	bf00      	nop
 800194e:	3714      	adds	r7, #20
 8001950:	46bd      	mov	sp, r7
 8001952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001956:	4770      	bx	lr
 8001958:	e000ed00 	.word	0xe000ed00

0800195c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800195c:	b480      	push	{r7}
 800195e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001960:	4b04      	ldr	r3, [pc, #16]	; (8001974 <__NVIC_GetPriorityGrouping+0x18>)
 8001962:	68db      	ldr	r3, [r3, #12]
 8001964:	0a1b      	lsrs	r3, r3, #8
 8001966:	f003 0307 	and.w	r3, r3, #7
}
 800196a:	4618      	mov	r0, r3
 800196c:	46bd      	mov	sp, r7
 800196e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001972:	4770      	bx	lr
 8001974:	e000ed00 	.word	0xe000ed00

08001978 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	4603      	mov	r3, r0
 8001980:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001982:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001986:	2b00      	cmp	r3, #0
 8001988:	db0b      	blt.n	80019a2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800198a:	79fb      	ldrb	r3, [r7, #7]
 800198c:	f003 021f 	and.w	r2, r3, #31
 8001990:	4907      	ldr	r1, [pc, #28]	; (80019b0 <__NVIC_EnableIRQ+0x38>)
 8001992:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001996:	095b      	lsrs	r3, r3, #5
 8001998:	2001      	movs	r0, #1
 800199a:	fa00 f202 	lsl.w	r2, r0, r2
 800199e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80019a2:	bf00      	nop
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr
 80019ae:	bf00      	nop
 80019b0:	e000e100 	.word	0xe000e100

080019b4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019b4:	b480      	push	{r7}
 80019b6:	b083      	sub	sp, #12
 80019b8:	af00      	add	r7, sp, #0
 80019ba:	4603      	mov	r3, r0
 80019bc:	6039      	str	r1, [r7, #0]
 80019be:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019c4:	2b00      	cmp	r3, #0
 80019c6:	db0a      	blt.n	80019de <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019c8:	683b      	ldr	r3, [r7, #0]
 80019ca:	b2da      	uxtb	r2, r3
 80019cc:	490c      	ldr	r1, [pc, #48]	; (8001a00 <__NVIC_SetPriority+0x4c>)
 80019ce:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d2:	0112      	lsls	r2, r2, #4
 80019d4:	b2d2      	uxtb	r2, r2
 80019d6:	440b      	add	r3, r1
 80019d8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019dc:	e00a      	b.n	80019f4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019de:	683b      	ldr	r3, [r7, #0]
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4908      	ldr	r1, [pc, #32]	; (8001a04 <__NVIC_SetPriority+0x50>)
 80019e4:	79fb      	ldrb	r3, [r7, #7]
 80019e6:	f003 030f 	and.w	r3, r3, #15
 80019ea:	3b04      	subs	r3, #4
 80019ec:	0112      	lsls	r2, r2, #4
 80019ee:	b2d2      	uxtb	r2, r2
 80019f0:	440b      	add	r3, r1
 80019f2:	761a      	strb	r2, [r3, #24]
}
 80019f4:	bf00      	nop
 80019f6:	370c      	adds	r7, #12
 80019f8:	46bd      	mov	sp, r7
 80019fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019fe:	4770      	bx	lr
 8001a00:	e000e100 	.word	0xe000e100
 8001a04:	e000ed00 	.word	0xe000ed00

08001a08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a08:	b480      	push	{r7}
 8001a0a:	b089      	sub	sp, #36	; 0x24
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	60f8      	str	r0, [r7, #12]
 8001a10:	60b9      	str	r1, [r7, #8]
 8001a12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a14:	68fb      	ldr	r3, [r7, #12]
 8001a16:	f003 0307 	and.w	r3, r3, #7
 8001a1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a1c:	69fb      	ldr	r3, [r7, #28]
 8001a1e:	f1c3 0307 	rsb	r3, r3, #7
 8001a22:	2b04      	cmp	r3, #4
 8001a24:	bf28      	it	cs
 8001a26:	2304      	movcs	r3, #4
 8001a28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a2a:	69fb      	ldr	r3, [r7, #28]
 8001a2c:	3304      	adds	r3, #4
 8001a2e:	2b06      	cmp	r3, #6
 8001a30:	d902      	bls.n	8001a38 <NVIC_EncodePriority+0x30>
 8001a32:	69fb      	ldr	r3, [r7, #28]
 8001a34:	3b03      	subs	r3, #3
 8001a36:	e000      	b.n	8001a3a <NVIC_EncodePriority+0x32>
 8001a38:	2300      	movs	r3, #0
 8001a3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a3c:	f04f 32ff 	mov.w	r2, #4294967295
 8001a40:	69bb      	ldr	r3, [r7, #24]
 8001a42:	fa02 f303 	lsl.w	r3, r2, r3
 8001a46:	43da      	mvns	r2, r3
 8001a48:	68bb      	ldr	r3, [r7, #8]
 8001a4a:	401a      	ands	r2, r3
 8001a4c:	697b      	ldr	r3, [r7, #20]
 8001a4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a50:	f04f 31ff 	mov.w	r1, #4294967295
 8001a54:	697b      	ldr	r3, [r7, #20]
 8001a56:	fa01 f303 	lsl.w	r3, r1, r3
 8001a5a:	43d9      	mvns	r1, r3
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a60:	4313      	orrs	r3, r2
         );
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3724      	adds	r7, #36	; 0x24
 8001a66:	46bd      	mov	sp, r7
 8001a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6c:	4770      	bx	lr

08001a6e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b082      	sub	sp, #8
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a76:	6878      	ldr	r0, [r7, #4]
 8001a78:	f7ff ff4c 	bl	8001914 <__NVIC_SetPriorityGrouping>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}

08001a84 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a84:	b580      	push	{r7, lr}
 8001a86:	b086      	sub	sp, #24
 8001a88:	af00      	add	r7, sp, #0
 8001a8a:	4603      	mov	r3, r0
 8001a8c:	60b9      	str	r1, [r7, #8]
 8001a8e:	607a      	str	r2, [r7, #4]
 8001a90:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001a92:	2300      	movs	r3, #0
 8001a94:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a96:	f7ff ff61 	bl	800195c <__NVIC_GetPriorityGrouping>
 8001a9a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a9c:	687a      	ldr	r2, [r7, #4]
 8001a9e:	68b9      	ldr	r1, [r7, #8]
 8001aa0:	6978      	ldr	r0, [r7, #20]
 8001aa2:	f7ff ffb1 	bl	8001a08 <NVIC_EncodePriority>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001aac:	4611      	mov	r1, r2
 8001aae:	4618      	mov	r0, r3
 8001ab0:	f7ff ff80 	bl	80019b4 <__NVIC_SetPriority>
}
 8001ab4:	bf00      	nop
 8001ab6:	3718      	adds	r7, #24
 8001ab8:	46bd      	mov	sp, r7
 8001aba:	bd80      	pop	{r7, pc}

08001abc <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001abc:	b580      	push	{r7, lr}
 8001abe:	b082      	sub	sp, #8
 8001ac0:	af00      	add	r7, sp, #0
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ac6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aca:	4618      	mov	r0, r3
 8001acc:	f7ff ff54 	bl	8001978 <__NVIC_EnableIRQ>
}
 8001ad0:	bf00      	nop
 8001ad2:	3708      	adds	r7, #8
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bd80      	pop	{r7, pc}

08001ad8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b084      	sub	sp, #16
 8001adc:	af00      	add	r7, sp, #0
 8001ade:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ae0:	687b      	ldr	r3, [r7, #4]
 8001ae2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ae4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ae6:	f7ff ff09 	bl	80018fc <HAL_GetTick>
 8001aea:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001af2:	b2db      	uxtb	r3, r3
 8001af4:	2b02      	cmp	r3, #2
 8001af6:	d008      	beq.n	8001b0a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	2280      	movs	r2, #128	; 0x80
 8001afc:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001afe:	687b      	ldr	r3, [r7, #4]
 8001b00:	2200      	movs	r2, #0
 8001b02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001b06:	2301      	movs	r3, #1
 8001b08:	e052      	b.n	8001bb0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001b0a:	687b      	ldr	r3, [r7, #4]
 8001b0c:	681b      	ldr	r3, [r3, #0]
 8001b0e:	681a      	ldr	r2, [r3, #0]
 8001b10:	687b      	ldr	r3, [r7, #4]
 8001b12:	681b      	ldr	r3, [r3, #0]
 8001b14:	f022 0216 	bic.w	r2, r2, #22
 8001b18:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001b1a:	687b      	ldr	r3, [r7, #4]
 8001b1c:	681b      	ldr	r3, [r3, #0]
 8001b1e:	695a      	ldr	r2, [r3, #20]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	681b      	ldr	r3, [r3, #0]
 8001b24:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001b28:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001b2a:	687b      	ldr	r3, [r7, #4]
 8001b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b2e:	2b00      	cmp	r3, #0
 8001b30:	d103      	bne.n	8001b3a <HAL_DMA_Abort+0x62>
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001b36:	2b00      	cmp	r3, #0
 8001b38:	d007      	beq.n	8001b4a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	681a      	ldr	r2, [r3, #0]
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	f022 0208 	bic.w	r2, r2, #8
 8001b48:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	681b      	ldr	r3, [r3, #0]
 8001b4e:	681a      	ldr	r2, [r3, #0]
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	f022 0201 	bic.w	r2, r2, #1
 8001b58:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b5a:	e013      	b.n	8001b84 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001b5c:	f7ff fece 	bl	80018fc <HAL_GetTick>
 8001b60:	4602      	mov	r2, r0
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	1ad3      	subs	r3, r2, r3
 8001b66:	2b05      	cmp	r3, #5
 8001b68:	d90c      	bls.n	8001b84 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001b6a:	687b      	ldr	r3, [r7, #4]
 8001b6c:	2220      	movs	r2, #32
 8001b6e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	2203      	movs	r2, #3
 8001b74:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001b80:	2303      	movs	r3, #3
 8001b82:	e015      	b.n	8001bb0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001b84:	687b      	ldr	r3, [r7, #4]
 8001b86:	681b      	ldr	r3, [r3, #0]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	f003 0301 	and.w	r3, r3, #1
 8001b8e:	2b00      	cmp	r3, #0
 8001b90:	d1e4      	bne.n	8001b5c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001b92:	687b      	ldr	r3, [r7, #4]
 8001b94:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001b96:	223f      	movs	r2, #63	; 0x3f
 8001b98:	409a      	lsls	r2, r3
 8001b9a:	68fb      	ldr	r3, [r7, #12]
 8001b9c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	2200      	movs	r2, #0
 8001baa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001bae:	2300      	movs	r3, #0
}
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	3710      	adds	r7, #16
 8001bb4:	46bd      	mov	sp, r7
 8001bb6:	bd80      	pop	{r7, pc}

08001bb8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001bc0:	687b      	ldr	r3, [r7, #4]
 8001bc2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001bc6:	b2db      	uxtb	r3, r3
 8001bc8:	2b02      	cmp	r3, #2
 8001bca:	d004      	beq.n	8001bd6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	2280      	movs	r2, #128	; 0x80
 8001bd0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	e00c      	b.n	8001bf0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	2205      	movs	r2, #5
 8001bda:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	681b      	ldr	r3, [r3, #0]
 8001be2:	681a      	ldr	r2, [r3, #0]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	f022 0201 	bic.w	r2, r2, #1
 8001bec:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001bee:	2300      	movs	r3, #0
}
 8001bf0:	4618      	mov	r0, r3
 8001bf2:	370c      	adds	r7, #12
 8001bf4:	46bd      	mov	sp, r7
 8001bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bfa:	4770      	bx	lr

08001bfc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bfc:	b480      	push	{r7}
 8001bfe:	b089      	sub	sp, #36	; 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	6078      	str	r0, [r7, #4]
 8001c04:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001c06:	2300      	movs	r3, #0
 8001c08:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001c0a:	2300      	movs	r3, #0
 8001c0c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001c12:	2300      	movs	r3, #0
 8001c14:	61fb      	str	r3, [r7, #28]
 8001c16:	e159      	b.n	8001ecc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001c18:	2201      	movs	r2, #1
 8001c1a:	69fb      	ldr	r3, [r7, #28]
 8001c1c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c20:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001c22:	683b      	ldr	r3, [r7, #0]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	697a      	ldr	r2, [r7, #20]
 8001c28:	4013      	ands	r3, r2
 8001c2a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c2c:	693a      	ldr	r2, [r7, #16]
 8001c2e:	697b      	ldr	r3, [r7, #20]
 8001c30:	429a      	cmp	r2, r3
 8001c32:	f040 8148 	bne.w	8001ec6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c36:	683b      	ldr	r3, [r7, #0]
 8001c38:	685b      	ldr	r3, [r3, #4]
 8001c3a:	f003 0303 	and.w	r3, r3, #3
 8001c3e:	2b01      	cmp	r3, #1
 8001c40:	d005      	beq.n	8001c4e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	685b      	ldr	r3, [r3, #4]
 8001c46:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c4a:	2b02      	cmp	r3, #2
 8001c4c:	d130      	bne.n	8001cb0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	689b      	ldr	r3, [r3, #8]
 8001c52:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c54:	69fb      	ldr	r3, [r7, #28]
 8001c56:	005b      	lsls	r3, r3, #1
 8001c58:	2203      	movs	r2, #3
 8001c5a:	fa02 f303 	lsl.w	r3, r2, r3
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	69ba      	ldr	r2, [r7, #24]
 8001c62:	4013      	ands	r3, r2
 8001c64:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	68da      	ldr	r2, [r3, #12]
 8001c6a:	69fb      	ldr	r3, [r7, #28]
 8001c6c:	005b      	lsls	r3, r3, #1
 8001c6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001c72:	69ba      	ldr	r2, [r7, #24]
 8001c74:	4313      	orrs	r3, r2
 8001c76:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	69ba      	ldr	r2, [r7, #24]
 8001c7c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	685b      	ldr	r3, [r3, #4]
 8001c82:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c84:	2201      	movs	r2, #1
 8001c86:	69fb      	ldr	r3, [r7, #28]
 8001c88:	fa02 f303 	lsl.w	r3, r2, r3
 8001c8c:	43db      	mvns	r3, r3
 8001c8e:	69ba      	ldr	r2, [r7, #24]
 8001c90:	4013      	ands	r3, r2
 8001c92:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c94:	683b      	ldr	r3, [r7, #0]
 8001c96:	685b      	ldr	r3, [r3, #4]
 8001c98:	091b      	lsrs	r3, r3, #4
 8001c9a:	f003 0201 	and.w	r2, r3, #1
 8001c9e:	69fb      	ldr	r3, [r7, #28]
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	69ba      	ldr	r2, [r7, #24]
 8001ca6:	4313      	orrs	r3, r2
 8001ca8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	69ba      	ldr	r2, [r7, #24]
 8001cae:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001cb0:	683b      	ldr	r3, [r7, #0]
 8001cb2:	685b      	ldr	r3, [r3, #4]
 8001cb4:	f003 0303 	and.w	r3, r3, #3
 8001cb8:	2b03      	cmp	r3, #3
 8001cba:	d017      	beq.n	8001cec <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001cc2:	69fb      	ldr	r3, [r7, #28]
 8001cc4:	005b      	lsls	r3, r3, #1
 8001cc6:	2203      	movs	r2, #3
 8001cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8001ccc:	43db      	mvns	r3, r3
 8001cce:	69ba      	ldr	r2, [r7, #24]
 8001cd0:	4013      	ands	r3, r2
 8001cd2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cd4:	683b      	ldr	r3, [r7, #0]
 8001cd6:	689a      	ldr	r2, [r3, #8]
 8001cd8:	69fb      	ldr	r3, [r7, #28]
 8001cda:	005b      	lsls	r3, r3, #1
 8001cdc:	fa02 f303 	lsl.w	r3, r2, r3
 8001ce0:	69ba      	ldr	r2, [r7, #24]
 8001ce2:	4313      	orrs	r3, r2
 8001ce4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	69ba      	ldr	r2, [r7, #24]
 8001cea:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cec:	683b      	ldr	r3, [r7, #0]
 8001cee:	685b      	ldr	r3, [r3, #4]
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	2b02      	cmp	r3, #2
 8001cf6:	d123      	bne.n	8001d40 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	08da      	lsrs	r2, r3, #3
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	3208      	adds	r2, #8
 8001d00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d04:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001d06:	69fb      	ldr	r3, [r7, #28]
 8001d08:	f003 0307 	and.w	r3, r3, #7
 8001d0c:	009b      	lsls	r3, r3, #2
 8001d0e:	220f      	movs	r2, #15
 8001d10:	fa02 f303 	lsl.w	r3, r2, r3
 8001d14:	43db      	mvns	r3, r3
 8001d16:	69ba      	ldr	r2, [r7, #24]
 8001d18:	4013      	ands	r3, r2
 8001d1a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001d1c:	683b      	ldr	r3, [r7, #0]
 8001d1e:	691a      	ldr	r2, [r3, #16]
 8001d20:	69fb      	ldr	r3, [r7, #28]
 8001d22:	f003 0307 	and.w	r3, r3, #7
 8001d26:	009b      	lsls	r3, r3, #2
 8001d28:	fa02 f303 	lsl.w	r3, r2, r3
 8001d2c:	69ba      	ldr	r2, [r7, #24]
 8001d2e:	4313      	orrs	r3, r2
 8001d30:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d32:	69fb      	ldr	r3, [r7, #28]
 8001d34:	08da      	lsrs	r2, r3, #3
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	3208      	adds	r2, #8
 8001d3a:	69b9      	ldr	r1, [r7, #24]
 8001d3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d46:	69fb      	ldr	r3, [r7, #28]
 8001d48:	005b      	lsls	r3, r3, #1
 8001d4a:	2203      	movs	r2, #3
 8001d4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	69ba      	ldr	r2, [r7, #24]
 8001d54:	4013      	ands	r3, r2
 8001d56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	685b      	ldr	r3, [r3, #4]
 8001d5c:	f003 0203 	and.w	r2, r3, #3
 8001d60:	69fb      	ldr	r3, [r7, #28]
 8001d62:	005b      	lsls	r3, r3, #1
 8001d64:	fa02 f303 	lsl.w	r3, r2, r3
 8001d68:	69ba      	ldr	r2, [r7, #24]
 8001d6a:	4313      	orrs	r3, r2
 8001d6c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	69ba      	ldr	r2, [r7, #24]
 8001d72:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d74:	683b      	ldr	r3, [r7, #0]
 8001d76:	685b      	ldr	r3, [r3, #4]
 8001d78:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d7c:	2b00      	cmp	r3, #0
 8001d7e:	f000 80a2 	beq.w	8001ec6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d82:	2300      	movs	r3, #0
 8001d84:	60fb      	str	r3, [r7, #12]
 8001d86:	4b57      	ldr	r3, [pc, #348]	; (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001d88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d8a:	4a56      	ldr	r2, [pc, #344]	; (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001d8c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d90:	6453      	str	r3, [r2, #68]	; 0x44
 8001d92:	4b54      	ldr	r3, [pc, #336]	; (8001ee4 <HAL_GPIO_Init+0x2e8>)
 8001d94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d96:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d9e:	4a52      	ldr	r2, [pc, #328]	; (8001ee8 <HAL_GPIO_Init+0x2ec>)
 8001da0:	69fb      	ldr	r3, [r7, #28]
 8001da2:	089b      	lsrs	r3, r3, #2
 8001da4:	3302      	adds	r3, #2
 8001da6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001daa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001dac:	69fb      	ldr	r3, [r7, #28]
 8001dae:	f003 0303 	and.w	r3, r3, #3
 8001db2:	009b      	lsls	r3, r3, #2
 8001db4:	220f      	movs	r2, #15
 8001db6:	fa02 f303 	lsl.w	r3, r2, r3
 8001dba:	43db      	mvns	r3, r3
 8001dbc:	69ba      	ldr	r2, [r7, #24]
 8001dbe:	4013      	ands	r3, r2
 8001dc0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	4a49      	ldr	r2, [pc, #292]	; (8001eec <HAL_GPIO_Init+0x2f0>)
 8001dc6:	4293      	cmp	r3, r2
 8001dc8:	d019      	beq.n	8001dfe <HAL_GPIO_Init+0x202>
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	4a48      	ldr	r2, [pc, #288]	; (8001ef0 <HAL_GPIO_Init+0x2f4>)
 8001dce:	4293      	cmp	r3, r2
 8001dd0:	d013      	beq.n	8001dfa <HAL_GPIO_Init+0x1fe>
 8001dd2:	687b      	ldr	r3, [r7, #4]
 8001dd4:	4a47      	ldr	r2, [pc, #284]	; (8001ef4 <HAL_GPIO_Init+0x2f8>)
 8001dd6:	4293      	cmp	r3, r2
 8001dd8:	d00d      	beq.n	8001df6 <HAL_GPIO_Init+0x1fa>
 8001dda:	687b      	ldr	r3, [r7, #4]
 8001ddc:	4a46      	ldr	r2, [pc, #280]	; (8001ef8 <HAL_GPIO_Init+0x2fc>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d007      	beq.n	8001df2 <HAL_GPIO_Init+0x1f6>
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	4a45      	ldr	r2, [pc, #276]	; (8001efc <HAL_GPIO_Init+0x300>)
 8001de6:	4293      	cmp	r3, r2
 8001de8:	d101      	bne.n	8001dee <HAL_GPIO_Init+0x1f2>
 8001dea:	2304      	movs	r3, #4
 8001dec:	e008      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dee:	2307      	movs	r3, #7
 8001df0:	e006      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001df2:	2303      	movs	r3, #3
 8001df4:	e004      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001df6:	2302      	movs	r3, #2
 8001df8:	e002      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dfa:	2301      	movs	r3, #1
 8001dfc:	e000      	b.n	8001e00 <HAL_GPIO_Init+0x204>
 8001dfe:	2300      	movs	r3, #0
 8001e00:	69fa      	ldr	r2, [r7, #28]
 8001e02:	f002 0203 	and.w	r2, r2, #3
 8001e06:	0092      	lsls	r2, r2, #2
 8001e08:	4093      	lsls	r3, r2
 8001e0a:	69ba      	ldr	r2, [r7, #24]
 8001e0c:	4313      	orrs	r3, r2
 8001e0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001e10:	4935      	ldr	r1, [pc, #212]	; (8001ee8 <HAL_GPIO_Init+0x2ec>)
 8001e12:	69fb      	ldr	r3, [r7, #28]
 8001e14:	089b      	lsrs	r3, r3, #2
 8001e16:	3302      	adds	r3, #2
 8001e18:	69ba      	ldr	r2, [r7, #24]
 8001e1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e1e:	4b38      	ldr	r3, [pc, #224]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e20:	689b      	ldr	r3, [r3, #8]
 8001e22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e24:	693b      	ldr	r3, [r7, #16]
 8001e26:	43db      	mvns	r3, r3
 8001e28:	69ba      	ldr	r2, [r7, #24]
 8001e2a:	4013      	ands	r3, r2
 8001e2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e2e:	683b      	ldr	r3, [r7, #0]
 8001e30:	685b      	ldr	r3, [r3, #4]
 8001e32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e36:	2b00      	cmp	r3, #0
 8001e38:	d003      	beq.n	8001e42 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e3a:	69ba      	ldr	r2, [r7, #24]
 8001e3c:	693b      	ldr	r3, [r7, #16]
 8001e3e:	4313      	orrs	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e42:	4a2f      	ldr	r2, [pc, #188]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e44:	69bb      	ldr	r3, [r7, #24]
 8001e46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e48:	4b2d      	ldr	r3, [pc, #180]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e4a:	68db      	ldr	r3, [r3, #12]
 8001e4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e4e:	693b      	ldr	r3, [r7, #16]
 8001e50:	43db      	mvns	r3, r3
 8001e52:	69ba      	ldr	r2, [r7, #24]
 8001e54:	4013      	ands	r3, r2
 8001e56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e58:	683b      	ldr	r3, [r7, #0]
 8001e5a:	685b      	ldr	r3, [r3, #4]
 8001e5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d003      	beq.n	8001e6c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e64:	69ba      	ldr	r2, [r7, #24]
 8001e66:	693b      	ldr	r3, [r7, #16]
 8001e68:	4313      	orrs	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e6c:	4a24      	ldr	r2, [pc, #144]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e6e:	69bb      	ldr	r3, [r7, #24]
 8001e70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e72:	4b23      	ldr	r3, [pc, #140]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e74:	685b      	ldr	r3, [r3, #4]
 8001e76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e78:	693b      	ldr	r3, [r7, #16]
 8001e7a:	43db      	mvns	r3, r3
 8001e7c:	69ba      	ldr	r2, [r7, #24]
 8001e7e:	4013      	ands	r3, r2
 8001e80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e82:	683b      	ldr	r3, [r7, #0]
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d003      	beq.n	8001e96 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e8e:	69ba      	ldr	r2, [r7, #24]
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	4313      	orrs	r3, r2
 8001e94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e96:	4a1a      	ldr	r2, [pc, #104]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e98:	69bb      	ldr	r3, [r7, #24]
 8001e9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e9c:	4b18      	ldr	r3, [pc, #96]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001e9e:	681b      	ldr	r3, [r3, #0]
 8001ea0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001ea2:	693b      	ldr	r3, [r7, #16]
 8001ea4:	43db      	mvns	r3, r3
 8001ea6:	69ba      	ldr	r2, [r7, #24]
 8001ea8:	4013      	ands	r3, r2
 8001eaa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001eac:	683b      	ldr	r3, [r7, #0]
 8001eae:	685b      	ldr	r3, [r3, #4]
 8001eb0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	693b      	ldr	r3, [r7, #16]
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001ec0:	4a0f      	ldr	r2, [pc, #60]	; (8001f00 <HAL_GPIO_Init+0x304>)
 8001ec2:	69bb      	ldr	r3, [r7, #24]
 8001ec4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001ec6:	69fb      	ldr	r3, [r7, #28]
 8001ec8:	3301      	adds	r3, #1
 8001eca:	61fb      	str	r3, [r7, #28]
 8001ecc:	69fb      	ldr	r3, [r7, #28]
 8001ece:	2b0f      	cmp	r3, #15
 8001ed0:	f67f aea2 	bls.w	8001c18 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001ed4:	bf00      	nop
 8001ed6:	bf00      	nop
 8001ed8:	3724      	adds	r7, #36	; 0x24
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr
 8001ee2:	bf00      	nop
 8001ee4:	40023800 	.word	0x40023800
 8001ee8:	40013800 	.word	0x40013800
 8001eec:	40020000 	.word	0x40020000
 8001ef0:	40020400 	.word	0x40020400
 8001ef4:	40020800 	.word	0x40020800
 8001ef8:	40020c00 	.word	0x40020c00
 8001efc:	40021000 	.word	0x40021000
 8001f00:	40013c00 	.word	0x40013c00

08001f04 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f04:	b480      	push	{r7}
 8001f06:	b083      	sub	sp, #12
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
 8001f0c:	460b      	mov	r3, r1
 8001f0e:	807b      	strh	r3, [r7, #2]
 8001f10:	4613      	mov	r3, r2
 8001f12:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f14:	787b      	ldrb	r3, [r7, #1]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f1a:	887a      	ldrh	r2, [r7, #2]
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f20:	e003      	b.n	8001f2a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f22:	887b      	ldrh	r3, [r7, #2]
 8001f24:	041a      	lsls	r2, r3, #16
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	619a      	str	r2, [r3, #24]
}
 8001f2a:	bf00      	nop
 8001f2c:	370c      	adds	r7, #12
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f34:	4770      	bx	lr
	...

08001f38 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001f38:	b580      	push	{r7, lr}
 8001f3a:	b086      	sub	sp, #24
 8001f3c:	af00      	add	r7, sp, #0
 8001f3e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001f46:	2301      	movs	r3, #1
 8001f48:	e267      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	681b      	ldr	r3, [r3, #0]
 8001f4e:	f003 0301 	and.w	r3, r3, #1
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	d075      	beq.n	8002042 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f56:	4b88      	ldr	r3, [pc, #544]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001f58:	689b      	ldr	r3, [r3, #8]
 8001f5a:	f003 030c 	and.w	r3, r3, #12
 8001f5e:	2b04      	cmp	r3, #4
 8001f60:	d00c      	beq.n	8001f7c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f62:	4b85      	ldr	r3, [pc, #532]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001f64:	689b      	ldr	r3, [r3, #8]
 8001f66:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001f6a:	2b08      	cmp	r3, #8
 8001f6c:	d112      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001f6e:	4b82      	ldr	r3, [pc, #520]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001f70:	685b      	ldr	r3, [r3, #4]
 8001f72:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001f76:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001f7a:	d10b      	bne.n	8001f94 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001f7c:	4b7e      	ldr	r3, [pc, #504]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001f84:	2b00      	cmp	r3, #0
 8001f86:	d05b      	beq.n	8002040 <HAL_RCC_OscConfig+0x108>
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	685b      	ldr	r3, [r3, #4]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d157      	bne.n	8002040 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001f90:	2301      	movs	r3, #1
 8001f92:	e242      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	685b      	ldr	r3, [r3, #4]
 8001f98:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001f9c:	d106      	bne.n	8001fac <HAL_RCC_OscConfig+0x74>
 8001f9e:	4b76      	ldr	r3, [pc, #472]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fa0:	681b      	ldr	r3, [r3, #0]
 8001fa2:	4a75      	ldr	r2, [pc, #468]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fa4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fa8:	6013      	str	r3, [r2, #0]
 8001faa:	e01d      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fac:	687b      	ldr	r3, [r7, #4]
 8001fae:	685b      	ldr	r3, [r3, #4]
 8001fb0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001fb4:	d10c      	bne.n	8001fd0 <HAL_RCC_OscConfig+0x98>
 8001fb6:	4b70      	ldr	r3, [pc, #448]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a6f      	ldr	r2, [pc, #444]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fbc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001fc0:	6013      	str	r3, [r2, #0]
 8001fc2:	4b6d      	ldr	r3, [pc, #436]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	4a6c      	ldr	r2, [pc, #432]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fc8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001fcc:	6013      	str	r3, [r2, #0]
 8001fce:	e00b      	b.n	8001fe8 <HAL_RCC_OscConfig+0xb0>
 8001fd0:	4b69      	ldr	r3, [pc, #420]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fd2:	681b      	ldr	r3, [r3, #0]
 8001fd4:	4a68      	ldr	r2, [pc, #416]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fd6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001fda:	6013      	str	r3, [r2, #0]
 8001fdc:	4b66      	ldr	r3, [pc, #408]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	4a65      	ldr	r2, [pc, #404]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8001fe2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001fe6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	2b00      	cmp	r3, #0
 8001fee:	d013      	beq.n	8002018 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001ff0:	f7ff fc84 	bl	80018fc <HAL_GetTick>
 8001ff4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001ff6:	e008      	b.n	800200a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001ff8:	f7ff fc80 	bl	80018fc <HAL_GetTick>
 8001ffc:	4602      	mov	r2, r0
 8001ffe:	693b      	ldr	r3, [r7, #16]
 8002000:	1ad3      	subs	r3, r2, r3
 8002002:	2b64      	cmp	r3, #100	; 0x64
 8002004:	d901      	bls.n	800200a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002006:	2303      	movs	r3, #3
 8002008:	e207      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800200a:	4b5b      	ldr	r3, [pc, #364]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002012:	2b00      	cmp	r3, #0
 8002014:	d0f0      	beq.n	8001ff8 <HAL_RCC_OscConfig+0xc0>
 8002016:	e014      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002018:	f7ff fc70 	bl	80018fc <HAL_GetTick>
 800201c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800201e:	e008      	b.n	8002032 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002020:	f7ff fc6c 	bl	80018fc <HAL_GetTick>
 8002024:	4602      	mov	r2, r0
 8002026:	693b      	ldr	r3, [r7, #16]
 8002028:	1ad3      	subs	r3, r2, r3
 800202a:	2b64      	cmp	r3, #100	; 0x64
 800202c:	d901      	bls.n	8002032 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800202e:	2303      	movs	r3, #3
 8002030:	e1f3      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002032:	4b51      	ldr	r3, [pc, #324]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800203a:	2b00      	cmp	r3, #0
 800203c:	d1f0      	bne.n	8002020 <HAL_RCC_OscConfig+0xe8>
 800203e:	e000      	b.n	8002042 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002040:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f003 0302 	and.w	r3, r3, #2
 800204a:	2b00      	cmp	r3, #0
 800204c:	d063      	beq.n	8002116 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800204e:	4b4a      	ldr	r3, [pc, #296]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8002050:	689b      	ldr	r3, [r3, #8]
 8002052:	f003 030c 	and.w	r3, r3, #12
 8002056:	2b00      	cmp	r3, #0
 8002058:	d00b      	beq.n	8002072 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800205a:	4b47      	ldr	r3, [pc, #284]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 800205c:	689b      	ldr	r3, [r3, #8]
 800205e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002062:	2b08      	cmp	r3, #8
 8002064:	d11c      	bne.n	80020a0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002066:	4b44      	ldr	r3, [pc, #272]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800206e:	2b00      	cmp	r3, #0
 8002070:	d116      	bne.n	80020a0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002072:	4b41      	ldr	r3, [pc, #260]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	f003 0302 	and.w	r3, r3, #2
 800207a:	2b00      	cmp	r3, #0
 800207c:	d005      	beq.n	800208a <HAL_RCC_OscConfig+0x152>
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	68db      	ldr	r3, [r3, #12]
 8002082:	2b01      	cmp	r3, #1
 8002084:	d001      	beq.n	800208a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002086:	2301      	movs	r3, #1
 8002088:	e1c7      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800208a:	4b3b      	ldr	r3, [pc, #236]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 800208c:	681b      	ldr	r3, [r3, #0]
 800208e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	691b      	ldr	r3, [r3, #16]
 8002096:	00db      	lsls	r3, r3, #3
 8002098:	4937      	ldr	r1, [pc, #220]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 800209a:	4313      	orrs	r3, r2
 800209c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800209e:	e03a      	b.n	8002116 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80020a0:	687b      	ldr	r3, [r7, #4]
 80020a2:	68db      	ldr	r3, [r3, #12]
 80020a4:	2b00      	cmp	r3, #0
 80020a6:	d020      	beq.n	80020ea <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80020a8:	4b34      	ldr	r3, [pc, #208]	; (800217c <HAL_RCC_OscConfig+0x244>)
 80020aa:	2201      	movs	r2, #1
 80020ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020ae:	f7ff fc25 	bl	80018fc <HAL_GetTick>
 80020b2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020b4:	e008      	b.n	80020c8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020b6:	f7ff fc21 	bl	80018fc <HAL_GetTick>
 80020ba:	4602      	mov	r2, r0
 80020bc:	693b      	ldr	r3, [r7, #16]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b02      	cmp	r3, #2
 80020c2:	d901      	bls.n	80020c8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80020c4:	2303      	movs	r3, #3
 80020c6:	e1a8      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80020c8:	4b2b      	ldr	r3, [pc, #172]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	f003 0302 	and.w	r3, r3, #2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d0f0      	beq.n	80020b6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80020d4:	4b28      	ldr	r3, [pc, #160]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	691b      	ldr	r3, [r3, #16]
 80020e0:	00db      	lsls	r3, r3, #3
 80020e2:	4925      	ldr	r1, [pc, #148]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 80020e4:	4313      	orrs	r3, r2
 80020e6:	600b      	str	r3, [r1, #0]
 80020e8:	e015      	b.n	8002116 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80020ea:	4b24      	ldr	r3, [pc, #144]	; (800217c <HAL_RCC_OscConfig+0x244>)
 80020ec:	2200      	movs	r2, #0
 80020ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80020f0:	f7ff fc04 	bl	80018fc <HAL_GetTick>
 80020f4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020f6:	e008      	b.n	800210a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80020f8:	f7ff fc00 	bl	80018fc <HAL_GetTick>
 80020fc:	4602      	mov	r2, r0
 80020fe:	693b      	ldr	r3, [r7, #16]
 8002100:	1ad3      	subs	r3, r2, r3
 8002102:	2b02      	cmp	r3, #2
 8002104:	d901      	bls.n	800210a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002106:	2303      	movs	r3, #3
 8002108:	e187      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800210a:	4b1b      	ldr	r3, [pc, #108]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 800210c:	681b      	ldr	r3, [r3, #0]
 800210e:	f003 0302 	and.w	r3, r3, #2
 8002112:	2b00      	cmp	r3, #0
 8002114:	d1f0      	bne.n	80020f8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	681b      	ldr	r3, [r3, #0]
 800211a:	f003 0308 	and.w	r3, r3, #8
 800211e:	2b00      	cmp	r3, #0
 8002120:	d036      	beq.n	8002190 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	695b      	ldr	r3, [r3, #20]
 8002126:	2b00      	cmp	r3, #0
 8002128:	d016      	beq.n	8002158 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800212a:	4b15      	ldr	r3, [pc, #84]	; (8002180 <HAL_RCC_OscConfig+0x248>)
 800212c:	2201      	movs	r2, #1
 800212e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002130:	f7ff fbe4 	bl	80018fc <HAL_GetTick>
 8002134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002136:	e008      	b.n	800214a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002138:	f7ff fbe0 	bl	80018fc <HAL_GetTick>
 800213c:	4602      	mov	r2, r0
 800213e:	693b      	ldr	r3, [r7, #16]
 8002140:	1ad3      	subs	r3, r2, r3
 8002142:	2b02      	cmp	r3, #2
 8002144:	d901      	bls.n	800214a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002146:	2303      	movs	r3, #3
 8002148:	e167      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800214a:	4b0b      	ldr	r3, [pc, #44]	; (8002178 <HAL_RCC_OscConfig+0x240>)
 800214c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d0f0      	beq.n	8002138 <HAL_RCC_OscConfig+0x200>
 8002156:	e01b      	b.n	8002190 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002158:	4b09      	ldr	r3, [pc, #36]	; (8002180 <HAL_RCC_OscConfig+0x248>)
 800215a:	2200      	movs	r2, #0
 800215c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800215e:	f7ff fbcd 	bl	80018fc <HAL_GetTick>
 8002162:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002164:	e00e      	b.n	8002184 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002166:	f7ff fbc9 	bl	80018fc <HAL_GetTick>
 800216a:	4602      	mov	r2, r0
 800216c:	693b      	ldr	r3, [r7, #16]
 800216e:	1ad3      	subs	r3, r2, r3
 8002170:	2b02      	cmp	r3, #2
 8002172:	d907      	bls.n	8002184 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002174:	2303      	movs	r3, #3
 8002176:	e150      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
 8002178:	40023800 	.word	0x40023800
 800217c:	42470000 	.word	0x42470000
 8002180:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002184:	4b88      	ldr	r3, [pc, #544]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002186:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002188:	f003 0302 	and.w	r3, r3, #2
 800218c:	2b00      	cmp	r3, #0
 800218e:	d1ea      	bne.n	8002166 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	f003 0304 	and.w	r3, r3, #4
 8002198:	2b00      	cmp	r3, #0
 800219a:	f000 8097 	beq.w	80022cc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800219e:	2300      	movs	r3, #0
 80021a0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80021a2:	4b81      	ldr	r3, [pc, #516]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80021a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d10f      	bne.n	80021ce <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80021ae:	2300      	movs	r3, #0
 80021b0:	60bb      	str	r3, [r7, #8]
 80021b2:	4b7d      	ldr	r3, [pc, #500]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80021b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021b6:	4a7c      	ldr	r2, [pc, #496]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80021b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80021bc:	6413      	str	r3, [r2, #64]	; 0x40
 80021be:	4b7a      	ldr	r3, [pc, #488]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80021c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80021c6:	60bb      	str	r3, [r7, #8]
 80021c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80021ca:	2301      	movs	r3, #1
 80021cc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ce:	4b77      	ldr	r3, [pc, #476]	; (80023ac <HAL_RCC_OscConfig+0x474>)
 80021d0:	681b      	ldr	r3, [r3, #0]
 80021d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d118      	bne.n	800220c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80021da:	4b74      	ldr	r3, [pc, #464]	; (80023ac <HAL_RCC_OscConfig+0x474>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	4a73      	ldr	r2, [pc, #460]	; (80023ac <HAL_RCC_OscConfig+0x474>)
 80021e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80021e6:	f7ff fb89 	bl	80018fc <HAL_GetTick>
 80021ea:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021ec:	e008      	b.n	8002200 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80021ee:	f7ff fb85 	bl	80018fc <HAL_GetTick>
 80021f2:	4602      	mov	r2, r0
 80021f4:	693b      	ldr	r3, [r7, #16]
 80021f6:	1ad3      	subs	r3, r2, r3
 80021f8:	2b02      	cmp	r3, #2
 80021fa:	d901      	bls.n	8002200 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80021fc:	2303      	movs	r3, #3
 80021fe:	e10c      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002200:	4b6a      	ldr	r3, [pc, #424]	; (80023ac <HAL_RCC_OscConfig+0x474>)
 8002202:	681b      	ldr	r3, [r3, #0]
 8002204:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002208:	2b00      	cmp	r3, #0
 800220a:	d0f0      	beq.n	80021ee <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	689b      	ldr	r3, [r3, #8]
 8002210:	2b01      	cmp	r3, #1
 8002212:	d106      	bne.n	8002222 <HAL_RCC_OscConfig+0x2ea>
 8002214:	4b64      	ldr	r3, [pc, #400]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002216:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002218:	4a63      	ldr	r2, [pc, #396]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 800221a:	f043 0301 	orr.w	r3, r3, #1
 800221e:	6713      	str	r3, [r2, #112]	; 0x70
 8002220:	e01c      	b.n	800225c <HAL_RCC_OscConfig+0x324>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	689b      	ldr	r3, [r3, #8]
 8002226:	2b05      	cmp	r3, #5
 8002228:	d10c      	bne.n	8002244 <HAL_RCC_OscConfig+0x30c>
 800222a:	4b5f      	ldr	r3, [pc, #380]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 800222c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800222e:	4a5e      	ldr	r2, [pc, #376]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002230:	f043 0304 	orr.w	r3, r3, #4
 8002234:	6713      	str	r3, [r2, #112]	; 0x70
 8002236:	4b5c      	ldr	r3, [pc, #368]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002238:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800223a:	4a5b      	ldr	r2, [pc, #364]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 800223c:	f043 0301 	orr.w	r3, r3, #1
 8002240:	6713      	str	r3, [r2, #112]	; 0x70
 8002242:	e00b      	b.n	800225c <HAL_RCC_OscConfig+0x324>
 8002244:	4b58      	ldr	r3, [pc, #352]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002246:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002248:	4a57      	ldr	r2, [pc, #348]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 800224a:	f023 0301 	bic.w	r3, r3, #1
 800224e:	6713      	str	r3, [r2, #112]	; 0x70
 8002250:	4b55      	ldr	r3, [pc, #340]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002252:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002254:	4a54      	ldr	r2, [pc, #336]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002256:	f023 0304 	bic.w	r3, r3, #4
 800225a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	689b      	ldr	r3, [r3, #8]
 8002260:	2b00      	cmp	r3, #0
 8002262:	d015      	beq.n	8002290 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002264:	f7ff fb4a 	bl	80018fc <HAL_GetTick>
 8002268:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800226a:	e00a      	b.n	8002282 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800226c:	f7ff fb46 	bl	80018fc <HAL_GetTick>
 8002270:	4602      	mov	r2, r0
 8002272:	693b      	ldr	r3, [r7, #16]
 8002274:	1ad3      	subs	r3, r2, r3
 8002276:	f241 3288 	movw	r2, #5000	; 0x1388
 800227a:	4293      	cmp	r3, r2
 800227c:	d901      	bls.n	8002282 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800227e:	2303      	movs	r3, #3
 8002280:	e0cb      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002282:	4b49      	ldr	r3, [pc, #292]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002284:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002286:	f003 0302 	and.w	r3, r3, #2
 800228a:	2b00      	cmp	r3, #0
 800228c:	d0ee      	beq.n	800226c <HAL_RCC_OscConfig+0x334>
 800228e:	e014      	b.n	80022ba <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002290:	f7ff fb34 	bl	80018fc <HAL_GetTick>
 8002294:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002296:	e00a      	b.n	80022ae <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002298:	f7ff fb30 	bl	80018fc <HAL_GetTick>
 800229c:	4602      	mov	r2, r0
 800229e:	693b      	ldr	r3, [r7, #16]
 80022a0:	1ad3      	subs	r3, r2, r3
 80022a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80022a6:	4293      	cmp	r3, r2
 80022a8:	d901      	bls.n	80022ae <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80022aa:	2303      	movs	r3, #3
 80022ac:	e0b5      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80022ae:	4b3e      	ldr	r3, [pc, #248]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80022b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80022b2:	f003 0302 	and.w	r3, r3, #2
 80022b6:	2b00      	cmp	r3, #0
 80022b8:	d1ee      	bne.n	8002298 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80022ba:	7dfb      	ldrb	r3, [r7, #23]
 80022bc:	2b01      	cmp	r3, #1
 80022be:	d105      	bne.n	80022cc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80022c0:	4b39      	ldr	r3, [pc, #228]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80022c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c4:	4a38      	ldr	r2, [pc, #224]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80022c6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80022ca:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	699b      	ldr	r3, [r3, #24]
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	f000 80a1 	beq.w	8002418 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80022d6:	4b34      	ldr	r3, [pc, #208]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 80022d8:	689b      	ldr	r3, [r3, #8]
 80022da:	f003 030c 	and.w	r3, r3, #12
 80022de:	2b08      	cmp	r3, #8
 80022e0:	d05c      	beq.n	800239c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	699b      	ldr	r3, [r3, #24]
 80022e6:	2b02      	cmp	r3, #2
 80022e8:	d141      	bne.n	800236e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ea:	4b31      	ldr	r3, [pc, #196]	; (80023b0 <HAL_RCC_OscConfig+0x478>)
 80022ec:	2200      	movs	r2, #0
 80022ee:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022f0:	f7ff fb04 	bl	80018fc <HAL_GetTick>
 80022f4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80022f6:	e008      	b.n	800230a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80022f8:	f7ff fb00 	bl	80018fc <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	693b      	ldr	r3, [r7, #16]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	2b02      	cmp	r3, #2
 8002304:	d901      	bls.n	800230a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002306:	2303      	movs	r3, #3
 8002308:	e087      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800230a:	4b27      	ldr	r3, [pc, #156]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002312:	2b00      	cmp	r3, #0
 8002314:	d1f0      	bne.n	80022f8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	69da      	ldr	r2, [r3, #28]
 800231a:	687b      	ldr	r3, [r7, #4]
 800231c:	6a1b      	ldr	r3, [r3, #32]
 800231e:	431a      	orrs	r2, r3
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	019b      	lsls	r3, r3, #6
 8002326:	431a      	orrs	r2, r3
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800232c:	085b      	lsrs	r3, r3, #1
 800232e:	3b01      	subs	r3, #1
 8002330:	041b      	lsls	r3, r3, #16
 8002332:	431a      	orrs	r2, r3
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002338:	061b      	lsls	r3, r3, #24
 800233a:	491b      	ldr	r1, [pc, #108]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 800233c:	4313      	orrs	r3, r2
 800233e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002340:	4b1b      	ldr	r3, [pc, #108]	; (80023b0 <HAL_RCC_OscConfig+0x478>)
 8002342:	2201      	movs	r2, #1
 8002344:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002346:	f7ff fad9 	bl	80018fc <HAL_GetTick>
 800234a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800234c:	e008      	b.n	8002360 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800234e:	f7ff fad5 	bl	80018fc <HAL_GetTick>
 8002352:	4602      	mov	r2, r0
 8002354:	693b      	ldr	r3, [r7, #16]
 8002356:	1ad3      	subs	r3, r2, r3
 8002358:	2b02      	cmp	r3, #2
 800235a:	d901      	bls.n	8002360 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800235c:	2303      	movs	r3, #3
 800235e:	e05c      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002360:	4b11      	ldr	r3, [pc, #68]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002368:	2b00      	cmp	r3, #0
 800236a:	d0f0      	beq.n	800234e <HAL_RCC_OscConfig+0x416>
 800236c:	e054      	b.n	8002418 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800236e:	4b10      	ldr	r3, [pc, #64]	; (80023b0 <HAL_RCC_OscConfig+0x478>)
 8002370:	2200      	movs	r2, #0
 8002372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002374:	f7ff fac2 	bl	80018fc <HAL_GetTick>
 8002378:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800237a:	e008      	b.n	800238e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800237c:	f7ff fabe 	bl	80018fc <HAL_GetTick>
 8002380:	4602      	mov	r2, r0
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	1ad3      	subs	r3, r2, r3
 8002386:	2b02      	cmp	r3, #2
 8002388:	d901      	bls.n	800238e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800238a:	2303      	movs	r3, #3
 800238c:	e045      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800238e:	4b06      	ldr	r3, [pc, #24]	; (80023a8 <HAL_RCC_OscConfig+0x470>)
 8002390:	681b      	ldr	r3, [r3, #0]
 8002392:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002396:	2b00      	cmp	r3, #0
 8002398:	d1f0      	bne.n	800237c <HAL_RCC_OscConfig+0x444>
 800239a:	e03d      	b.n	8002418 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	699b      	ldr	r3, [r3, #24]
 80023a0:	2b01      	cmp	r3, #1
 80023a2:	d107      	bne.n	80023b4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80023a4:	2301      	movs	r3, #1
 80023a6:	e038      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
 80023a8:	40023800 	.word	0x40023800
 80023ac:	40007000 	.word	0x40007000
 80023b0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80023b4:	4b1b      	ldr	r3, [pc, #108]	; (8002424 <HAL_RCC_OscConfig+0x4ec>)
 80023b6:	685b      	ldr	r3, [r3, #4]
 80023b8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	699b      	ldr	r3, [r3, #24]
 80023be:	2b01      	cmp	r3, #1
 80023c0:	d028      	beq.n	8002414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023c2:	68fb      	ldr	r3, [r7, #12]
 80023c4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80023c8:	687b      	ldr	r3, [r7, #4]
 80023ca:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80023cc:	429a      	cmp	r2, r3
 80023ce:	d121      	bne.n	8002414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023d0:	68fb      	ldr	r3, [r7, #12]
 80023d2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80023d6:	687b      	ldr	r3, [r7, #4]
 80023d8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80023da:	429a      	cmp	r2, r3
 80023dc:	d11a      	bne.n	8002414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80023de:	68fa      	ldr	r2, [r7, #12]
 80023e0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80023e4:	4013      	ands	r3, r2
 80023e6:	687a      	ldr	r2, [r7, #4]
 80023e8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80023ea:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d111      	bne.n	8002414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80023fa:	085b      	lsrs	r3, r3, #1
 80023fc:	3b01      	subs	r3, #1
 80023fe:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002400:	429a      	cmp	r2, r3
 8002402:	d107      	bne.n	8002414 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002404:	68fb      	ldr	r3, [r7, #12]
 8002406:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800240e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002410:	429a      	cmp	r2, r3
 8002412:	d001      	beq.n	8002418 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002414:	2301      	movs	r3, #1
 8002416:	e000      	b.n	800241a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002418:	2300      	movs	r3, #0
}
 800241a:	4618      	mov	r0, r3
 800241c:	3718      	adds	r7, #24
 800241e:	46bd      	mov	sp, r7
 8002420:	bd80      	pop	{r7, pc}
 8002422:	bf00      	nop
 8002424:	40023800 	.word	0x40023800

08002428 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002428:	b580      	push	{r7, lr}
 800242a:	b084      	sub	sp, #16
 800242c:	af00      	add	r7, sp, #0
 800242e:	6078      	str	r0, [r7, #4]
 8002430:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	2b00      	cmp	r3, #0
 8002436:	d101      	bne.n	800243c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002438:	2301      	movs	r3, #1
 800243a:	e0cc      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800243c:	4b68      	ldr	r3, [pc, #416]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0307 	and.w	r3, r3, #7
 8002444:	683a      	ldr	r2, [r7, #0]
 8002446:	429a      	cmp	r2, r3
 8002448:	d90c      	bls.n	8002464 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800244a:	4b65      	ldr	r3, [pc, #404]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 800244c:	683a      	ldr	r2, [r7, #0]
 800244e:	b2d2      	uxtb	r2, r2
 8002450:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002452:	4b63      	ldr	r3, [pc, #396]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0307 	and.w	r3, r3, #7
 800245a:	683a      	ldr	r2, [r7, #0]
 800245c:	429a      	cmp	r2, r3
 800245e:	d001      	beq.n	8002464 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002460:	2301      	movs	r3, #1
 8002462:	e0b8      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f003 0302 	and.w	r3, r3, #2
 800246c:	2b00      	cmp	r3, #0
 800246e:	d020      	beq.n	80024b2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	f003 0304 	and.w	r3, r3, #4
 8002478:	2b00      	cmp	r3, #0
 800247a:	d005      	beq.n	8002488 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800247c:	4b59      	ldr	r3, [pc, #356]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800247e:	689b      	ldr	r3, [r3, #8]
 8002480:	4a58      	ldr	r2, [pc, #352]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002482:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002486:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f003 0308 	and.w	r3, r3, #8
 8002490:	2b00      	cmp	r3, #0
 8002492:	d005      	beq.n	80024a0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002494:	4b53      	ldr	r3, [pc, #332]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002496:	689b      	ldr	r3, [r3, #8]
 8002498:	4a52      	ldr	r2, [pc, #328]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800249a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800249e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80024a0:	4b50      	ldr	r3, [pc, #320]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024a2:	689b      	ldr	r3, [r3, #8]
 80024a4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	689b      	ldr	r3, [r3, #8]
 80024ac:	494d      	ldr	r1, [pc, #308]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024ae:	4313      	orrs	r3, r2
 80024b0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f003 0301 	and.w	r3, r3, #1
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d044      	beq.n	8002548 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	685b      	ldr	r3, [r3, #4]
 80024c2:	2b01      	cmp	r3, #1
 80024c4:	d107      	bne.n	80024d6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80024c6:	4b47      	ldr	r3, [pc, #284]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d119      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024d2:	2301      	movs	r3, #1
 80024d4:	e07f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	685b      	ldr	r3, [r3, #4]
 80024da:	2b02      	cmp	r3, #2
 80024dc:	d003      	beq.n	80024e6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80024e2:	2b03      	cmp	r3, #3
 80024e4:	d107      	bne.n	80024f6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80024e6:	4b3f      	ldr	r3, [pc, #252]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d109      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80024f2:	2301      	movs	r3, #1
 80024f4:	e06f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80024f6:	4b3b      	ldr	r3, [pc, #236]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80024f8:	681b      	ldr	r3, [r3, #0]
 80024fa:	f003 0302 	and.w	r3, r3, #2
 80024fe:	2b00      	cmp	r3, #0
 8002500:	d101      	bne.n	8002506 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002502:	2301      	movs	r3, #1
 8002504:	e067      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002506:	4b37      	ldr	r3, [pc, #220]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002508:	689b      	ldr	r3, [r3, #8]
 800250a:	f023 0203 	bic.w	r2, r3, #3
 800250e:	687b      	ldr	r3, [r7, #4]
 8002510:	685b      	ldr	r3, [r3, #4]
 8002512:	4934      	ldr	r1, [pc, #208]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002514:	4313      	orrs	r3, r2
 8002516:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002518:	f7ff f9f0 	bl	80018fc <HAL_GetTick>
 800251c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800251e:	e00a      	b.n	8002536 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002520:	f7ff f9ec 	bl	80018fc <HAL_GetTick>
 8002524:	4602      	mov	r2, r0
 8002526:	68fb      	ldr	r3, [r7, #12]
 8002528:	1ad3      	subs	r3, r2, r3
 800252a:	f241 3288 	movw	r2, #5000	; 0x1388
 800252e:	4293      	cmp	r3, r2
 8002530:	d901      	bls.n	8002536 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e04f      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002536:	4b2b      	ldr	r3, [pc, #172]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 8002538:	689b      	ldr	r3, [r3, #8]
 800253a:	f003 020c 	and.w	r2, r3, #12
 800253e:	687b      	ldr	r3, [r7, #4]
 8002540:	685b      	ldr	r3, [r3, #4]
 8002542:	009b      	lsls	r3, r3, #2
 8002544:	429a      	cmp	r2, r3
 8002546:	d1eb      	bne.n	8002520 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002548:	4b25      	ldr	r3, [pc, #148]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	f003 0307 	and.w	r3, r3, #7
 8002550:	683a      	ldr	r2, [r7, #0]
 8002552:	429a      	cmp	r2, r3
 8002554:	d20c      	bcs.n	8002570 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002556:	4b22      	ldr	r3, [pc, #136]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002558:	683a      	ldr	r2, [r7, #0]
 800255a:	b2d2      	uxtb	r2, r2
 800255c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800255e:	4b20      	ldr	r3, [pc, #128]	; (80025e0 <HAL_RCC_ClockConfig+0x1b8>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f003 0307 	and.w	r3, r3, #7
 8002566:	683a      	ldr	r2, [r7, #0]
 8002568:	429a      	cmp	r2, r3
 800256a:	d001      	beq.n	8002570 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800256c:	2301      	movs	r3, #1
 800256e:	e032      	b.n	80025d6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d008      	beq.n	800258e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800257c:	4b19      	ldr	r3, [pc, #100]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800257e:	689b      	ldr	r3, [r3, #8]
 8002580:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	68db      	ldr	r3, [r3, #12]
 8002588:	4916      	ldr	r1, [pc, #88]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800258a:	4313      	orrs	r3, r2
 800258c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800258e:	687b      	ldr	r3, [r7, #4]
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	f003 0308 	and.w	r3, r3, #8
 8002596:	2b00      	cmp	r3, #0
 8002598:	d009      	beq.n	80025ae <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800259a:	4b12      	ldr	r3, [pc, #72]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 800259c:	689b      	ldr	r3, [r3, #8]
 800259e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	691b      	ldr	r3, [r3, #16]
 80025a6:	00db      	lsls	r3, r3, #3
 80025a8:	490e      	ldr	r1, [pc, #56]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025aa:	4313      	orrs	r3, r2
 80025ac:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80025ae:	f000 f821 	bl	80025f4 <HAL_RCC_GetSysClockFreq>
 80025b2:	4602      	mov	r2, r0
 80025b4:	4b0b      	ldr	r3, [pc, #44]	; (80025e4 <HAL_RCC_ClockConfig+0x1bc>)
 80025b6:	689b      	ldr	r3, [r3, #8]
 80025b8:	091b      	lsrs	r3, r3, #4
 80025ba:	f003 030f 	and.w	r3, r3, #15
 80025be:	490a      	ldr	r1, [pc, #40]	; (80025e8 <HAL_RCC_ClockConfig+0x1c0>)
 80025c0:	5ccb      	ldrb	r3, [r1, r3]
 80025c2:	fa22 f303 	lsr.w	r3, r2, r3
 80025c6:	4a09      	ldr	r2, [pc, #36]	; (80025ec <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80025ca:	4b09      	ldr	r3, [pc, #36]	; (80025f0 <HAL_RCC_ClockConfig+0x1c8>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fe fc9c 	bl	8000f0c <HAL_InitTick>

  return HAL_OK;
 80025d4:	2300      	movs	r3, #0
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3710      	adds	r7, #16
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023c00 	.word	0x40023c00
 80025e4:	40023800 	.word	0x40023800
 80025e8:	08007bd4 	.word	0x08007bd4
 80025ec:	20000004 	.word	0x20000004
 80025f0:	20000008 	.word	0x20000008

080025f4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80025f4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80025f8:	b094      	sub	sp, #80	; 0x50
 80025fa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80025fc:	2300      	movs	r3, #0
 80025fe:	647b      	str	r3, [r7, #68]	; 0x44
 8002600:	2300      	movs	r3, #0
 8002602:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002604:	2300      	movs	r3, #0
 8002606:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002608:	2300      	movs	r3, #0
 800260a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800260c:	4b79      	ldr	r3, [pc, #484]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800260e:	689b      	ldr	r3, [r3, #8]
 8002610:	f003 030c 	and.w	r3, r3, #12
 8002614:	2b08      	cmp	r3, #8
 8002616:	d00d      	beq.n	8002634 <HAL_RCC_GetSysClockFreq+0x40>
 8002618:	2b08      	cmp	r3, #8
 800261a:	f200 80e1 	bhi.w	80027e0 <HAL_RCC_GetSysClockFreq+0x1ec>
 800261e:	2b00      	cmp	r3, #0
 8002620:	d002      	beq.n	8002628 <HAL_RCC_GetSysClockFreq+0x34>
 8002622:	2b04      	cmp	r3, #4
 8002624:	d003      	beq.n	800262e <HAL_RCC_GetSysClockFreq+0x3a>
 8002626:	e0db      	b.n	80027e0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002628:	4b73      	ldr	r3, [pc, #460]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x204>)
 800262a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800262c:	e0db      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800262e:	4b73      	ldr	r3, [pc, #460]	; (80027fc <HAL_RCC_GetSysClockFreq+0x208>)
 8002630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002632:	e0d8      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002634:	4b6f      	ldr	r3, [pc, #444]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002636:	685b      	ldr	r3, [r3, #4]
 8002638:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800263c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800263e:	4b6d      	ldr	r3, [pc, #436]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002640:	685b      	ldr	r3, [r3, #4]
 8002642:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002646:	2b00      	cmp	r3, #0
 8002648:	d063      	beq.n	8002712 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800264a:	4b6a      	ldr	r3, [pc, #424]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 800264c:	685b      	ldr	r3, [r3, #4]
 800264e:	099b      	lsrs	r3, r3, #6
 8002650:	2200      	movs	r2, #0
 8002652:	63bb      	str	r3, [r7, #56]	; 0x38
 8002654:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002658:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800265c:	633b      	str	r3, [r7, #48]	; 0x30
 800265e:	2300      	movs	r3, #0
 8002660:	637b      	str	r3, [r7, #52]	; 0x34
 8002662:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002666:	4622      	mov	r2, r4
 8002668:	462b      	mov	r3, r5
 800266a:	f04f 0000 	mov.w	r0, #0
 800266e:	f04f 0100 	mov.w	r1, #0
 8002672:	0159      	lsls	r1, r3, #5
 8002674:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002678:	0150      	lsls	r0, r2, #5
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4621      	mov	r1, r4
 8002680:	1a51      	subs	r1, r2, r1
 8002682:	6139      	str	r1, [r7, #16]
 8002684:	4629      	mov	r1, r5
 8002686:	eb63 0301 	sbc.w	r3, r3, r1
 800268a:	617b      	str	r3, [r7, #20]
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	f04f 0300 	mov.w	r3, #0
 8002694:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002698:	4659      	mov	r1, fp
 800269a:	018b      	lsls	r3, r1, #6
 800269c:	4651      	mov	r1, sl
 800269e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80026a2:	4651      	mov	r1, sl
 80026a4:	018a      	lsls	r2, r1, #6
 80026a6:	4651      	mov	r1, sl
 80026a8:	ebb2 0801 	subs.w	r8, r2, r1
 80026ac:	4659      	mov	r1, fp
 80026ae:	eb63 0901 	sbc.w	r9, r3, r1
 80026b2:	f04f 0200 	mov.w	r2, #0
 80026b6:	f04f 0300 	mov.w	r3, #0
 80026ba:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80026be:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80026c2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80026c6:	4690      	mov	r8, r2
 80026c8:	4699      	mov	r9, r3
 80026ca:	4623      	mov	r3, r4
 80026cc:	eb18 0303 	adds.w	r3, r8, r3
 80026d0:	60bb      	str	r3, [r7, #8]
 80026d2:	462b      	mov	r3, r5
 80026d4:	eb49 0303 	adc.w	r3, r9, r3
 80026d8:	60fb      	str	r3, [r7, #12]
 80026da:	f04f 0200 	mov.w	r2, #0
 80026de:	f04f 0300 	mov.w	r3, #0
 80026e2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80026e6:	4629      	mov	r1, r5
 80026e8:	024b      	lsls	r3, r1, #9
 80026ea:	4621      	mov	r1, r4
 80026ec:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80026f0:	4621      	mov	r1, r4
 80026f2:	024a      	lsls	r2, r1, #9
 80026f4:	4610      	mov	r0, r2
 80026f6:	4619      	mov	r1, r3
 80026f8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80026fa:	2200      	movs	r2, #0
 80026fc:	62bb      	str	r3, [r7, #40]	; 0x28
 80026fe:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002700:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002704:	f7fd fd6c 	bl	80001e0 <__aeabi_uldivmod>
 8002708:	4602      	mov	r2, r0
 800270a:	460b      	mov	r3, r1
 800270c:	4613      	mov	r3, r2
 800270e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002710:	e058      	b.n	80027c4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002712:	4b38      	ldr	r3, [pc, #224]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	099b      	lsrs	r3, r3, #6
 8002718:	2200      	movs	r2, #0
 800271a:	4618      	mov	r0, r3
 800271c:	4611      	mov	r1, r2
 800271e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002722:	623b      	str	r3, [r7, #32]
 8002724:	2300      	movs	r3, #0
 8002726:	627b      	str	r3, [r7, #36]	; 0x24
 8002728:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800272c:	4642      	mov	r2, r8
 800272e:	464b      	mov	r3, r9
 8002730:	f04f 0000 	mov.w	r0, #0
 8002734:	f04f 0100 	mov.w	r1, #0
 8002738:	0159      	lsls	r1, r3, #5
 800273a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800273e:	0150      	lsls	r0, r2, #5
 8002740:	4602      	mov	r2, r0
 8002742:	460b      	mov	r3, r1
 8002744:	4641      	mov	r1, r8
 8002746:	ebb2 0a01 	subs.w	sl, r2, r1
 800274a:	4649      	mov	r1, r9
 800274c:	eb63 0b01 	sbc.w	fp, r3, r1
 8002750:	f04f 0200 	mov.w	r2, #0
 8002754:	f04f 0300 	mov.w	r3, #0
 8002758:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800275c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002760:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002764:	ebb2 040a 	subs.w	r4, r2, sl
 8002768:	eb63 050b 	sbc.w	r5, r3, fp
 800276c:	f04f 0200 	mov.w	r2, #0
 8002770:	f04f 0300 	mov.w	r3, #0
 8002774:	00eb      	lsls	r3, r5, #3
 8002776:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800277a:	00e2      	lsls	r2, r4, #3
 800277c:	4614      	mov	r4, r2
 800277e:	461d      	mov	r5, r3
 8002780:	4643      	mov	r3, r8
 8002782:	18e3      	adds	r3, r4, r3
 8002784:	603b      	str	r3, [r7, #0]
 8002786:	464b      	mov	r3, r9
 8002788:	eb45 0303 	adc.w	r3, r5, r3
 800278c:	607b      	str	r3, [r7, #4]
 800278e:	f04f 0200 	mov.w	r2, #0
 8002792:	f04f 0300 	mov.w	r3, #0
 8002796:	e9d7 4500 	ldrd	r4, r5, [r7]
 800279a:	4629      	mov	r1, r5
 800279c:	028b      	lsls	r3, r1, #10
 800279e:	4621      	mov	r1, r4
 80027a0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80027a4:	4621      	mov	r1, r4
 80027a6:	028a      	lsls	r2, r1, #10
 80027a8:	4610      	mov	r0, r2
 80027aa:	4619      	mov	r1, r3
 80027ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80027ae:	2200      	movs	r2, #0
 80027b0:	61bb      	str	r3, [r7, #24]
 80027b2:	61fa      	str	r2, [r7, #28]
 80027b4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80027b8:	f7fd fd12 	bl	80001e0 <__aeabi_uldivmod>
 80027bc:	4602      	mov	r2, r0
 80027be:	460b      	mov	r3, r1
 80027c0:	4613      	mov	r3, r2
 80027c2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80027c4:	4b0b      	ldr	r3, [pc, #44]	; (80027f4 <HAL_RCC_GetSysClockFreq+0x200>)
 80027c6:	685b      	ldr	r3, [r3, #4]
 80027c8:	0c1b      	lsrs	r3, r3, #16
 80027ca:	f003 0303 	and.w	r3, r3, #3
 80027ce:	3301      	adds	r3, #1
 80027d0:	005b      	lsls	r3, r3, #1
 80027d2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80027d4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80027d6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80027d8:	fbb2 f3f3 	udiv	r3, r2, r3
 80027dc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027de:	e002      	b.n	80027e6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80027e0:	4b05      	ldr	r3, [pc, #20]	; (80027f8 <HAL_RCC_GetSysClockFreq+0x204>)
 80027e2:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80027e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80027e6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3750      	adds	r7, #80	; 0x50
 80027ec:	46bd      	mov	sp, r7
 80027ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027f2:	bf00      	nop
 80027f4:	40023800 	.word	0x40023800
 80027f8:	00f42400 	.word	0x00f42400
 80027fc:	007a1200 	.word	0x007a1200

08002800 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002800:	b480      	push	{r7}
 8002802:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002804:	4b03      	ldr	r3, [pc, #12]	; (8002814 <HAL_RCC_GetHCLKFreq+0x14>)
 8002806:	681b      	ldr	r3, [r3, #0]
}
 8002808:	4618      	mov	r0, r3
 800280a:	46bd      	mov	sp, r7
 800280c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002810:	4770      	bx	lr
 8002812:	bf00      	nop
 8002814:	20000004 	.word	0x20000004

08002818 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002818:	b580      	push	{r7, lr}
 800281a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800281c:	f7ff fff0 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002820:	4602      	mov	r2, r0
 8002822:	4b05      	ldr	r3, [pc, #20]	; (8002838 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002824:	689b      	ldr	r3, [r3, #8]
 8002826:	0a9b      	lsrs	r3, r3, #10
 8002828:	f003 0307 	and.w	r3, r3, #7
 800282c:	4903      	ldr	r1, [pc, #12]	; (800283c <HAL_RCC_GetPCLK1Freq+0x24>)
 800282e:	5ccb      	ldrb	r3, [r1, r3]
 8002830:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002834:	4618      	mov	r0, r3
 8002836:	bd80      	pop	{r7, pc}
 8002838:	40023800 	.word	0x40023800
 800283c:	08007be4 	.word	0x08007be4

08002840 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002840:	b580      	push	{r7, lr}
 8002842:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002844:	f7ff ffdc 	bl	8002800 <HAL_RCC_GetHCLKFreq>
 8002848:	4602      	mov	r2, r0
 800284a:	4b05      	ldr	r3, [pc, #20]	; (8002860 <HAL_RCC_GetPCLK2Freq+0x20>)
 800284c:	689b      	ldr	r3, [r3, #8]
 800284e:	0b5b      	lsrs	r3, r3, #13
 8002850:	f003 0307 	and.w	r3, r3, #7
 8002854:	4903      	ldr	r1, [pc, #12]	; (8002864 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002856:	5ccb      	ldrb	r3, [r1, r3]
 8002858:	fa22 f303 	lsr.w	r3, r2, r3
}
 800285c:	4618      	mov	r0, r3
 800285e:	bd80      	pop	{r7, pc}
 8002860:	40023800 	.word	0x40023800
 8002864:	08007be4 	.word	0x08007be4

08002868 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8002868:	b480      	push	{r7}
 800286a:	b083      	sub	sp, #12
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
 8002870:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	220f      	movs	r2, #15
 8002876:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8002878:	4b12      	ldr	r3, [pc, #72]	; (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800287a:	689b      	ldr	r3, [r3, #8]
 800287c:	f003 0203 	and.w	r2, r3, #3
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8002884:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002886:	689b      	ldr	r3, [r3, #8]
 8002888:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8002890:	4b0c      	ldr	r3, [pc, #48]	; (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 8002892:	689b      	ldr	r3, [r3, #8]
 8002894:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800289c:	4b09      	ldr	r3, [pc, #36]	; (80028c4 <HAL_RCC_GetClockConfig+0x5c>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	08db      	lsrs	r3, r3, #3
 80028a2:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80028aa:	4b07      	ldr	r3, [pc, #28]	; (80028c8 <HAL_RCC_GetClockConfig+0x60>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0207 	and.w	r2, r3, #7
 80028b2:	683b      	ldr	r3, [r7, #0]
 80028b4:	601a      	str	r2, [r3, #0]
}
 80028b6:	bf00      	nop
 80028b8:	370c      	adds	r7, #12
 80028ba:	46bd      	mov	sp, r7
 80028bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c0:	4770      	bx	lr
 80028c2:	bf00      	nop
 80028c4:	40023800 	.word	0x40023800
 80028c8:	40023c00 	.word	0x40023c00

080028cc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028cc:	b580      	push	{r7, lr}
 80028ce:	b082      	sub	sp, #8
 80028d0:	af00      	add	r7, sp, #0
 80028d2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d101      	bne.n	80028de <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028da:	2301      	movs	r3, #1
 80028dc:	e041      	b.n	8002962 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028de:	687b      	ldr	r3, [r7, #4]
 80028e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028e4:	b2db      	uxtb	r3, r3
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d106      	bne.n	80028f8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	2200      	movs	r2, #0
 80028ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80028f2:	6878      	ldr	r0, [r7, #4]
 80028f4:	f7fe fd64 	bl	80013c0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	2202      	movs	r2, #2
 80028fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	681a      	ldr	r2, [r3, #0]
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	3304      	adds	r3, #4
 8002908:	4619      	mov	r1, r3
 800290a:	4610      	mov	r0, r2
 800290c:	f000 fe80 	bl	8003610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	2201      	movs	r2, #1
 8002914:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	2201      	movs	r2, #1
 800291c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002920:	687b      	ldr	r3, [r7, #4]
 8002922:	2201      	movs	r2, #1
 8002924:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2201      	movs	r2, #1
 800292c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2201      	movs	r2, #1
 8002934:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	2201      	movs	r2, #1
 800293c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	2201      	movs	r2, #1
 8002944:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	2201      	movs	r2, #1
 800294c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	2201      	movs	r2, #1
 8002954:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	2201      	movs	r2, #1
 800295c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002960:	2300      	movs	r3, #0
}
 8002962:	4618      	mov	r0, r3
 8002964:	3708      	adds	r7, #8
 8002966:	46bd      	mov	sp, r7
 8002968:	bd80      	pop	{r7, pc}
	...

0800296c <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800296c:	b480      	push	{r7}
 800296e:	b085      	sub	sp, #20
 8002970:	af00      	add	r7, sp, #0
 8002972:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002974:	687b      	ldr	r3, [r7, #4]
 8002976:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800297a:	b2db      	uxtb	r3, r3
 800297c:	2b01      	cmp	r3, #1
 800297e:	d001      	beq.n	8002984 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8002980:	2301      	movs	r3, #1
 8002982:	e03c      	b.n	80029fe <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	2202      	movs	r2, #2
 8002988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800298c:	687b      	ldr	r3, [r7, #4]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	4a1e      	ldr	r2, [pc, #120]	; (8002a0c <HAL_TIM_Base_Start+0xa0>)
 8002992:	4293      	cmp	r3, r2
 8002994:	d018      	beq.n	80029c8 <HAL_TIM_Base_Start+0x5c>
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800299e:	d013      	beq.n	80029c8 <HAL_TIM_Base_Start+0x5c>
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a1a      	ldr	r2, [pc, #104]	; (8002a10 <HAL_TIM_Base_Start+0xa4>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	d00e      	beq.n	80029c8 <HAL_TIM_Base_Start+0x5c>
 80029aa:	687b      	ldr	r3, [r7, #4]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a19      	ldr	r2, [pc, #100]	; (8002a14 <HAL_TIM_Base_Start+0xa8>)
 80029b0:	4293      	cmp	r3, r2
 80029b2:	d009      	beq.n	80029c8 <HAL_TIM_Base_Start+0x5c>
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	4a17      	ldr	r2, [pc, #92]	; (8002a18 <HAL_TIM_Base_Start+0xac>)
 80029ba:	4293      	cmp	r3, r2
 80029bc:	d004      	beq.n	80029c8 <HAL_TIM_Base_Start+0x5c>
 80029be:	687b      	ldr	r3, [r7, #4]
 80029c0:	681b      	ldr	r3, [r3, #0]
 80029c2:	4a16      	ldr	r2, [pc, #88]	; (8002a1c <HAL_TIM_Base_Start+0xb0>)
 80029c4:	4293      	cmp	r3, r2
 80029c6:	d111      	bne.n	80029ec <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	689b      	ldr	r3, [r3, #8]
 80029ce:	f003 0307 	and.w	r3, r3, #7
 80029d2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	68fb      	ldr	r3, [r7, #12]
 80029d6:	2b06      	cmp	r3, #6
 80029d8:	d010      	beq.n	80029fc <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	681b      	ldr	r3, [r3, #0]
 80029de:	681a      	ldr	r2, [r3, #0]
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	f042 0201 	orr.w	r2, r2, #1
 80029e8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029ea:	e007      	b.n	80029fc <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	681a      	ldr	r2, [r3, #0]
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	681b      	ldr	r3, [r3, #0]
 80029f6:	f042 0201 	orr.w	r2, r2, #1
 80029fa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029fc:	2300      	movs	r3, #0
}
 80029fe:	4618      	mov	r0, r3
 8002a00:	3714      	adds	r7, #20
 8002a02:	46bd      	mov	sp, r7
 8002a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a08:	4770      	bx	lr
 8002a0a:	bf00      	nop
 8002a0c:	40010000 	.word	0x40010000
 8002a10:	40000400 	.word	0x40000400
 8002a14:	40000800 	.word	0x40000800
 8002a18:	40000c00 	.word	0x40000c00
 8002a1c:	40014000 	.word	0x40014000

08002a20 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002a20:	b480      	push	{r7}
 8002a22:	b085      	sub	sp, #20
 8002a24:	af00      	add	r7, sp, #0
 8002a26:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002a28:	687b      	ldr	r3, [r7, #4]
 8002a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002a2e:	b2db      	uxtb	r3, r3
 8002a30:	2b01      	cmp	r3, #1
 8002a32:	d001      	beq.n	8002a38 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002a34:	2301      	movs	r3, #1
 8002a36:	e044      	b.n	8002ac2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	2202      	movs	r2, #2
 8002a3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	68da      	ldr	r2, [r3, #12]
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	f042 0201 	orr.w	r2, r2, #1
 8002a4e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	4a1e      	ldr	r2, [pc, #120]	; (8002ad0 <HAL_TIM_Base_Start_IT+0xb0>)
 8002a56:	4293      	cmp	r3, r2
 8002a58:	d018      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a62:	d013      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	4a1a      	ldr	r2, [pc, #104]	; (8002ad4 <HAL_TIM_Base_Start_IT+0xb4>)
 8002a6a:	4293      	cmp	r3, r2
 8002a6c:	d00e      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	4a19      	ldr	r2, [pc, #100]	; (8002ad8 <HAL_TIM_Base_Start_IT+0xb8>)
 8002a74:	4293      	cmp	r3, r2
 8002a76:	d009      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	4a17      	ldr	r2, [pc, #92]	; (8002adc <HAL_TIM_Base_Start_IT+0xbc>)
 8002a7e:	4293      	cmp	r3, r2
 8002a80:	d004      	beq.n	8002a8c <HAL_TIM_Base_Start_IT+0x6c>
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	4a16      	ldr	r2, [pc, #88]	; (8002ae0 <HAL_TIM_Base_Start_IT+0xc0>)
 8002a88:	4293      	cmp	r3, r2
 8002a8a:	d111      	bne.n	8002ab0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	689b      	ldr	r3, [r3, #8]
 8002a92:	f003 0307 	and.w	r3, r3, #7
 8002a96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	2b06      	cmp	r3, #6
 8002a9c:	d010      	beq.n	8002ac0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	681a      	ldr	r2, [r3, #0]
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	681b      	ldr	r3, [r3, #0]
 8002aa8:	f042 0201 	orr.w	r2, r2, #1
 8002aac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002aae:	e007      	b.n	8002ac0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	681a      	ldr	r2, [r3, #0]
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	f042 0201 	orr.w	r2, r2, #1
 8002abe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002ac0:	2300      	movs	r3, #0
}
 8002ac2:	4618      	mov	r0, r3
 8002ac4:	3714      	adds	r7, #20
 8002ac6:	46bd      	mov	sp, r7
 8002ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002acc:	4770      	bx	lr
 8002ace:	bf00      	nop
 8002ad0:	40010000 	.word	0x40010000
 8002ad4:	40000400 	.word	0x40000400
 8002ad8:	40000800 	.word	0x40000800
 8002adc:	40000c00 	.word	0x40000c00
 8002ae0:	40014000 	.word	0x40014000

08002ae4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b082      	sub	sp, #8
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	d101      	bne.n	8002af6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e041      	b.n	8002b7a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	d106      	bne.n	8002b10 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002b0a:	6878      	ldr	r0, [r7, #4]
 8002b0c:	f7fe fd3a 	bl	8001584 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	2202      	movs	r2, #2
 8002b14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	681a      	ldr	r2, [r3, #0]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	3304      	adds	r3, #4
 8002b20:	4619      	mov	r1, r3
 8002b22:	4610      	mov	r0, r2
 8002b24:	f000 fd74 	bl	8003610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	2201      	movs	r2, #1
 8002b2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b30:	687b      	ldr	r3, [r7, #4]
 8002b32:	2201      	movs	r2, #1
 8002b34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2201      	movs	r2, #1
 8002b3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	2201      	movs	r2, #1
 8002b44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	2201      	movs	r2, #1
 8002b4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	2201      	movs	r2, #1
 8002b54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2201      	movs	r2, #1
 8002b5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2201      	movs	r2, #1
 8002b64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	2201      	movs	r2, #1
 8002b6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	2201      	movs	r2, #1
 8002b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002b78:	2300      	movs	r3, #0
}
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	3708      	adds	r7, #8
 8002b7e:	46bd      	mov	sp, r7
 8002b80:	bd80      	pop	{r7, pc}
	...

08002b84 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002b84:	b580      	push	{r7, lr}
 8002b86:	b084      	sub	sp, #16
 8002b88:	af00      	add	r7, sp, #0
 8002b8a:	6078      	str	r0, [r7, #4]
 8002b8c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002b8e:	683b      	ldr	r3, [r7, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d109      	bne.n	8002ba8 <HAL_TIM_PWM_Start+0x24>
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002b9a:	b2db      	uxtb	r3, r3
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	bf14      	ite	ne
 8002ba0:	2301      	movne	r3, #1
 8002ba2:	2300      	moveq	r3, #0
 8002ba4:	b2db      	uxtb	r3, r3
 8002ba6:	e022      	b.n	8002bee <HAL_TIM_PWM_Start+0x6a>
 8002ba8:	683b      	ldr	r3, [r7, #0]
 8002baa:	2b04      	cmp	r3, #4
 8002bac:	d109      	bne.n	8002bc2 <HAL_TIM_PWM_Start+0x3e>
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002bb4:	b2db      	uxtb	r3, r3
 8002bb6:	2b01      	cmp	r3, #1
 8002bb8:	bf14      	ite	ne
 8002bba:	2301      	movne	r3, #1
 8002bbc:	2300      	moveq	r3, #0
 8002bbe:	b2db      	uxtb	r3, r3
 8002bc0:	e015      	b.n	8002bee <HAL_TIM_PWM_Start+0x6a>
 8002bc2:	683b      	ldr	r3, [r7, #0]
 8002bc4:	2b08      	cmp	r3, #8
 8002bc6:	d109      	bne.n	8002bdc <HAL_TIM_PWM_Start+0x58>
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002bce:	b2db      	uxtb	r3, r3
 8002bd0:	2b01      	cmp	r3, #1
 8002bd2:	bf14      	ite	ne
 8002bd4:	2301      	movne	r3, #1
 8002bd6:	2300      	moveq	r3, #0
 8002bd8:	b2db      	uxtb	r3, r3
 8002bda:	e008      	b.n	8002bee <HAL_TIM_PWM_Start+0x6a>
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002be2:	b2db      	uxtb	r3, r3
 8002be4:	2b01      	cmp	r3, #1
 8002be6:	bf14      	ite	ne
 8002be8:	2301      	movne	r3, #1
 8002bea:	2300      	moveq	r3, #0
 8002bec:	b2db      	uxtb	r3, r3
 8002bee:	2b00      	cmp	r3, #0
 8002bf0:	d001      	beq.n	8002bf6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e068      	b.n	8002cc8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002bf6:	683b      	ldr	r3, [r7, #0]
 8002bf8:	2b00      	cmp	r3, #0
 8002bfa:	d104      	bne.n	8002c06 <HAL_TIM_PWM_Start+0x82>
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	2202      	movs	r2, #2
 8002c00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002c04:	e013      	b.n	8002c2e <HAL_TIM_PWM_Start+0xaa>
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	2b04      	cmp	r3, #4
 8002c0a:	d104      	bne.n	8002c16 <HAL_TIM_PWM_Start+0x92>
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2202      	movs	r2, #2
 8002c10:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002c14:	e00b      	b.n	8002c2e <HAL_TIM_PWM_Start+0xaa>
 8002c16:	683b      	ldr	r3, [r7, #0]
 8002c18:	2b08      	cmp	r3, #8
 8002c1a:	d104      	bne.n	8002c26 <HAL_TIM_PWM_Start+0xa2>
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	2202      	movs	r2, #2
 8002c20:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002c24:	e003      	b.n	8002c2e <HAL_TIM_PWM_Start+0xaa>
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	2202      	movs	r2, #2
 8002c2a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	2201      	movs	r2, #1
 8002c34:	6839      	ldr	r1, [r7, #0]
 8002c36:	4618      	mov	r0, r3
 8002c38:	f001 f8ba 	bl	8003db0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a23      	ldr	r2, [pc, #140]	; (8002cd0 <HAL_TIM_PWM_Start+0x14c>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d107      	bne.n	8002c56 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002c54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	681b      	ldr	r3, [r3, #0]
 8002c5a:	4a1d      	ldr	r2, [pc, #116]	; (8002cd0 <HAL_TIM_PWM_Start+0x14c>)
 8002c5c:	4293      	cmp	r3, r2
 8002c5e:	d018      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x10e>
 8002c60:	687b      	ldr	r3, [r7, #4]
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002c68:	d013      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x10e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	4a19      	ldr	r2, [pc, #100]	; (8002cd4 <HAL_TIM_PWM_Start+0x150>)
 8002c70:	4293      	cmp	r3, r2
 8002c72:	d00e      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x10e>
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	4a17      	ldr	r2, [pc, #92]	; (8002cd8 <HAL_TIM_PWM_Start+0x154>)
 8002c7a:	4293      	cmp	r3, r2
 8002c7c:	d009      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x10e>
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	4a16      	ldr	r2, [pc, #88]	; (8002cdc <HAL_TIM_PWM_Start+0x158>)
 8002c84:	4293      	cmp	r3, r2
 8002c86:	d004      	beq.n	8002c92 <HAL_TIM_PWM_Start+0x10e>
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	4a14      	ldr	r2, [pc, #80]	; (8002ce0 <HAL_TIM_PWM_Start+0x15c>)
 8002c8e:	4293      	cmp	r3, r2
 8002c90:	d111      	bne.n	8002cb6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	689b      	ldr	r3, [r3, #8]
 8002c98:	f003 0307 	and.w	r3, r3, #7
 8002c9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	2b06      	cmp	r3, #6
 8002ca2:	d010      	beq.n	8002cc6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	681a      	ldr	r2, [r3, #0]
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	f042 0201 	orr.w	r2, r2, #1
 8002cb2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002cb4:	e007      	b.n	8002cc6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	681a      	ldr	r2, [r3, #0]
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	681b      	ldr	r3, [r3, #0]
 8002cc0:	f042 0201 	orr.w	r2, r2, #1
 8002cc4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002cc6:	2300      	movs	r3, #0
}
 8002cc8:	4618      	mov	r0, r3
 8002cca:	3710      	adds	r7, #16
 8002ccc:	46bd      	mov	sp, r7
 8002cce:	bd80      	pop	{r7, pc}
 8002cd0:	40010000 	.word	0x40010000
 8002cd4:	40000400 	.word	0x40000400
 8002cd8:	40000800 	.word	0x40000800
 8002cdc:	40000c00 	.word	0x40000c00
 8002ce0:	40014000 	.word	0x40014000

08002ce4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8002ce4:	b580      	push	{r7, lr}
 8002ce6:	b082      	sub	sp, #8
 8002ce8:	af00      	add	r7, sp, #0
 8002cea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2b00      	cmp	r3, #0
 8002cf0:	d101      	bne.n	8002cf6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8002cf2:	2301      	movs	r3, #1
 8002cf4:	e041      	b.n	8002d7a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002cfc:	b2db      	uxtb	r3, r3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d106      	bne.n	8002d10 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	2200      	movs	r2, #0
 8002d06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f7fe fbb0 	bl	8001470 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	2202      	movs	r2, #2
 8002d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	681a      	ldr	r2, [r3, #0]
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	3304      	adds	r3, #4
 8002d20:	4619      	mov	r1, r3
 8002d22:	4610      	mov	r0, r2
 8002d24:	f000 fc74 	bl	8003610 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	2201      	movs	r2, #1
 8002d2c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2201      	movs	r2, #1
 8002d34:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	2201      	movs	r2, #1
 8002d3c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	2201      	movs	r2, #1
 8002d44:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002d78:	2300      	movs	r3, #0
}
 8002d7a:	4618      	mov	r0, r3
 8002d7c:	3708      	adds	r7, #8
 8002d7e:	46bd      	mov	sp, r7
 8002d80:	bd80      	pop	{r7, pc}
	...

08002d84 <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002d84:	b580      	push	{r7, lr}
 8002d86:	b084      	sub	sp, #16
 8002d88:	af00      	add	r7, sp, #0
 8002d8a:	6078      	str	r0, [r7, #4]
 8002d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	2b00      	cmp	r3, #0
 8002d92:	d104      	bne.n	8002d9e <HAL_TIM_IC_Start+0x1a>
 8002d94:	687b      	ldr	r3, [r7, #4]
 8002d96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8002d9a:	b2db      	uxtb	r3, r3
 8002d9c:	e013      	b.n	8002dc6 <HAL_TIM_IC_Start+0x42>
 8002d9e:	683b      	ldr	r3, [r7, #0]
 8002da0:	2b04      	cmp	r3, #4
 8002da2:	d104      	bne.n	8002dae <HAL_TIM_IC_Start+0x2a>
 8002da4:	687b      	ldr	r3, [r7, #4]
 8002da6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8002daa:	b2db      	uxtb	r3, r3
 8002dac:	e00b      	b.n	8002dc6 <HAL_TIM_IC_Start+0x42>
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	2b08      	cmp	r3, #8
 8002db2:	d104      	bne.n	8002dbe <HAL_TIM_IC_Start+0x3a>
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8002dba:	b2db      	uxtb	r3, r3
 8002dbc:	e003      	b.n	8002dc6 <HAL_TIM_IC_Start+0x42>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002dc4:	b2db      	uxtb	r3, r3
 8002dc6:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d104      	bne.n	8002dd8 <HAL_TIM_IC_Start+0x54>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8002dd4:	b2db      	uxtb	r3, r3
 8002dd6:	e013      	b.n	8002e00 <HAL_TIM_IC_Start+0x7c>
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	2b04      	cmp	r3, #4
 8002ddc:	d104      	bne.n	8002de8 <HAL_TIM_IC_Start+0x64>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8002de4:	b2db      	uxtb	r3, r3
 8002de6:	e00b      	b.n	8002e00 <HAL_TIM_IC_Start+0x7c>
 8002de8:	683b      	ldr	r3, [r7, #0]
 8002dea:	2b08      	cmp	r3, #8
 8002dec:	d104      	bne.n	8002df8 <HAL_TIM_IC_Start+0x74>
 8002dee:	687b      	ldr	r3, [r7, #4]
 8002df0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	e003      	b.n	8002e00 <HAL_TIM_IC_Start+0x7c>
 8002df8:	687b      	ldr	r3, [r7, #4]
 8002dfa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8002dfe:	b2db      	uxtb	r3, r3
 8002e00:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8002e02:	7bfb      	ldrb	r3, [r7, #15]
 8002e04:	2b01      	cmp	r3, #1
 8002e06:	d102      	bne.n	8002e0e <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8002e08:	7bbb      	ldrb	r3, [r7, #14]
 8002e0a:	2b01      	cmp	r3, #1
 8002e0c:	d001      	beq.n	8002e12 <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	e077      	b.n	8002f02 <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d104      	bne.n	8002e22 <HAL_TIM_IC_Start+0x9e>
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	2202      	movs	r2, #2
 8002e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002e20:	e013      	b.n	8002e4a <HAL_TIM_IC_Start+0xc6>
 8002e22:	683b      	ldr	r3, [r7, #0]
 8002e24:	2b04      	cmp	r3, #4
 8002e26:	d104      	bne.n	8002e32 <HAL_TIM_IC_Start+0xae>
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2202      	movs	r2, #2
 8002e2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002e30:	e00b      	b.n	8002e4a <HAL_TIM_IC_Start+0xc6>
 8002e32:	683b      	ldr	r3, [r7, #0]
 8002e34:	2b08      	cmp	r3, #8
 8002e36:	d104      	bne.n	8002e42 <HAL_TIM_IC_Start+0xbe>
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	2202      	movs	r2, #2
 8002e3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002e40:	e003      	b.n	8002e4a <HAL_TIM_IC_Start+0xc6>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	2202      	movs	r2, #2
 8002e46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002e4a:	683b      	ldr	r3, [r7, #0]
 8002e4c:	2b00      	cmp	r3, #0
 8002e4e:	d104      	bne.n	8002e5a <HAL_TIM_IC_Start+0xd6>
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2202      	movs	r2, #2
 8002e54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002e58:	e013      	b.n	8002e82 <HAL_TIM_IC_Start+0xfe>
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	2b04      	cmp	r3, #4
 8002e5e:	d104      	bne.n	8002e6a <HAL_TIM_IC_Start+0xe6>
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	2202      	movs	r2, #2
 8002e64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8002e68:	e00b      	b.n	8002e82 <HAL_TIM_IC_Start+0xfe>
 8002e6a:	683b      	ldr	r3, [r7, #0]
 8002e6c:	2b08      	cmp	r3, #8
 8002e6e:	d104      	bne.n	8002e7a <HAL_TIM_IC_Start+0xf6>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	2202      	movs	r2, #2
 8002e74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002e78:	e003      	b.n	8002e82 <HAL_TIM_IC_Start+0xfe>
 8002e7a:	687b      	ldr	r3, [r7, #4]
 8002e7c:	2202      	movs	r2, #2
 8002e7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	2201      	movs	r2, #1
 8002e88:	6839      	ldr	r1, [r7, #0]
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	f000 ff90 	bl	8003db0 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	4a1d      	ldr	r2, [pc, #116]	; (8002f0c <HAL_TIM_IC_Start+0x188>)
 8002e96:	4293      	cmp	r3, r2
 8002e98:	d018      	beq.n	8002ecc <HAL_TIM_IC_Start+0x148>
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002ea2:	d013      	beq.n	8002ecc <HAL_TIM_IC_Start+0x148>
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4a19      	ldr	r2, [pc, #100]	; (8002f10 <HAL_TIM_IC_Start+0x18c>)
 8002eaa:	4293      	cmp	r3, r2
 8002eac:	d00e      	beq.n	8002ecc <HAL_TIM_IC_Start+0x148>
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4a18      	ldr	r2, [pc, #96]	; (8002f14 <HAL_TIM_IC_Start+0x190>)
 8002eb4:	4293      	cmp	r3, r2
 8002eb6:	d009      	beq.n	8002ecc <HAL_TIM_IC_Start+0x148>
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a16      	ldr	r2, [pc, #88]	; (8002f18 <HAL_TIM_IC_Start+0x194>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d004      	beq.n	8002ecc <HAL_TIM_IC_Start+0x148>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	4a15      	ldr	r2, [pc, #84]	; (8002f1c <HAL_TIM_IC_Start+0x198>)
 8002ec8:	4293      	cmp	r3, r2
 8002eca:	d111      	bne.n	8002ef0 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	681b      	ldr	r3, [r3, #0]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	f003 0307 	and.w	r3, r3, #7
 8002ed6:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	2b06      	cmp	r3, #6
 8002edc:	d010      	beq.n	8002f00 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	681a      	ldr	r2, [r3, #0]
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	f042 0201 	orr.w	r2, r2, #1
 8002eec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002eee:	e007      	b.n	8002f00 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	681a      	ldr	r2, [r3, #0]
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	f042 0201 	orr.w	r2, r2, #1
 8002efe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002f00:	2300      	movs	r3, #0
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3710      	adds	r7, #16
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
 8002f0a:	bf00      	nop
 8002f0c:	40010000 	.word	0x40010000
 8002f10:	40000400 	.word	0x40000400
 8002f14:	40000800 	.word	0x40000800
 8002f18:	40000c00 	.word	0x40000c00
 8002f1c:	40014000 	.word	0x40014000

08002f20 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	b084      	sub	sp, #16
 8002f24:	af00      	add	r7, sp, #0
 8002f26:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	68db      	ldr	r3, [r3, #12]
 8002f2e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	691b      	ldr	r3, [r3, #16]
 8002f36:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8002f38:	68bb      	ldr	r3, [r7, #8]
 8002f3a:	f003 0302 	and.w	r3, r3, #2
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d020      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8002f42:	68fb      	ldr	r3, [r7, #12]
 8002f44:	f003 0302 	and.w	r3, r3, #2
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	d01b      	beq.n	8002f84 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f06f 0202 	mvn.w	r2, #2
 8002f54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	2201      	movs	r2, #1
 8002f5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	699b      	ldr	r3, [r3, #24]
 8002f62:	f003 0303 	and.w	r3, r3, #3
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002f6a:	6878      	ldr	r0, [r7, #4]
 8002f6c:	f7fd fbb6 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8002f70:	e005      	b.n	8002f7e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f000 fb2e 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002f78:	6878      	ldr	r0, [r7, #4]
 8002f7a:	f000 fb35 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	2200      	movs	r2, #0
 8002f82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	f003 0304 	and.w	r3, r3, #4
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	d020      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	f003 0304 	and.w	r3, r3, #4
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d01b      	beq.n	8002fd0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	681b      	ldr	r3, [r3, #0]
 8002f9c:	f06f 0204 	mvn.w	r2, #4
 8002fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	2202      	movs	r2, #2
 8002fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002fa8:	687b      	ldr	r3, [r7, #4]
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	699b      	ldr	r3, [r3, #24]
 8002fae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002fb2:	2b00      	cmp	r3, #0
 8002fb4:	d003      	beq.n	8002fbe <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7fd fb90 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8002fbc:	e005      	b.n	8002fca <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002fbe:	6878      	ldr	r0, [r7, #4]
 8002fc0:	f000 fb08 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002fc4:	6878      	ldr	r0, [r7, #4]
 8002fc6:	f000 fb0f 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	2200      	movs	r2, #0
 8002fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8002fd0:	68bb      	ldr	r3, [r7, #8]
 8002fd2:	f003 0308 	and.w	r3, r3, #8
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d020      	beq.n	800301c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	f003 0308 	and.w	r3, r3, #8
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d01b      	beq.n	800301c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8002fe4:	687b      	ldr	r3, [r7, #4]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	f06f 0208 	mvn.w	r2, #8
 8002fec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	2204      	movs	r2, #4
 8002ff2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	69db      	ldr	r3, [r3, #28]
 8002ffa:	f003 0303 	and.w	r3, r3, #3
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d003      	beq.n	800300a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003002:	6878      	ldr	r0, [r7, #4]
 8003004:	f7fd fb6a 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8003008:	e005      	b.n	8003016 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800300a:	6878      	ldr	r0, [r7, #4]
 800300c:	f000 fae2 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003010:	6878      	ldr	r0, [r7, #4]
 8003012:	f000 fae9 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	2200      	movs	r2, #0
 800301a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	f003 0310 	and.w	r3, r3, #16
 8003022:	2b00      	cmp	r3, #0
 8003024:	d020      	beq.n	8003068 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	f003 0310 	and.w	r3, r3, #16
 800302c:	2b00      	cmp	r3, #0
 800302e:	d01b      	beq.n	8003068 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	f06f 0210 	mvn.w	r2, #16
 8003038:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800303a:	687b      	ldr	r3, [r7, #4]
 800303c:	2208      	movs	r2, #8
 800303e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	69db      	ldr	r3, [r3, #28]
 8003046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800304e:	6878      	ldr	r0, [r7, #4]
 8003050:	f7fd fb44 	bl	80006dc <HAL_TIM_IC_CaptureCallback>
 8003054:	e005      	b.n	8003062 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003056:	6878      	ldr	r0, [r7, #4]
 8003058:	f000 fabc 	bl	80035d4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800305c:	6878      	ldr	r0, [r7, #4]
 800305e:	f000 fac3 	bl	80035e8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	2200      	movs	r2, #0
 8003066:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	f003 0301 	and.w	r3, r3, #1
 800306e:	2b00      	cmp	r3, #0
 8003070:	d00c      	beq.n	800308c <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003072:	68fb      	ldr	r3, [r7, #12]
 8003074:	f003 0301 	and.w	r3, r3, #1
 8003078:	2b00      	cmp	r3, #0
 800307a:	d007      	beq.n	800308c <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	f06f 0201 	mvn.w	r2, #1
 8003084:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f7fd fefc 	bl	8000e84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 800308c:	68bb      	ldr	r3, [r7, #8]
 800308e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003092:	2b00      	cmp	r3, #0
 8003094:	d00c      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800309c:	2b00      	cmp	r3, #0
 800309e:	d007      	beq.n	80030b0 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80030a0:	687b      	ldr	r3, [r7, #4]
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80030a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80030aa:	6878      	ldr	r0, [r7, #4]
 80030ac:	f000 ff1e 	bl	8003eec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80030b0:	68bb      	ldr	r3, [r7, #8]
 80030b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d00c      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d007      	beq.n	80030d4 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80030cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80030ce:	6878      	ldr	r0, [r7, #4]
 80030d0:	f000 fa94 	bl	80035fc <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80030d4:	68bb      	ldr	r3, [r7, #8]
 80030d6:	f003 0320 	and.w	r3, r3, #32
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d00c      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	f003 0320 	and.w	r3, r3, #32
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d007      	beq.n	80030f8 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f06f 0220 	mvn.w	r2, #32
 80030f0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80030f2:	6878      	ldr	r0, [r7, #4]
 80030f4:	f000 fef0 	bl	8003ed8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80030f8:	bf00      	nop
 80030fa:	3710      	adds	r7, #16
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}

08003100 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003100:	b580      	push	{r7, lr}
 8003102:	b086      	sub	sp, #24
 8003104:	af00      	add	r7, sp, #0
 8003106:	60f8      	str	r0, [r7, #12]
 8003108:	60b9      	str	r1, [r7, #8]
 800310a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800310c:	2300      	movs	r3, #0
 800310e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_TIM_IC_ConfigChannel+0x1e>
 800311a:	2302      	movs	r3, #2
 800311c:	e088      	b.n	8003230 <HAL_TIM_IC_ConfigChannel+0x130>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	2b00      	cmp	r3, #0
 800312a:	d11b      	bne.n	8003164 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800312c:	68fb      	ldr	r3, [r7, #12]
 800312e:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003130:	68bb      	ldr	r3, [r7, #8]
 8003132:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003134:	68bb      	ldr	r3, [r7, #8]
 8003136:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 800313c:	f000 fc80 	bl	8003a40 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003140:	68fb      	ldr	r3, [r7, #12]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	699a      	ldr	r2, [r3, #24]
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f022 020c 	bic.w	r2, r2, #12
 800314e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	6999      	ldr	r1, [r3, #24]
 8003156:	68bb      	ldr	r3, [r7, #8]
 8003158:	689a      	ldr	r2, [r3, #8]
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	430a      	orrs	r2, r1
 8003160:	619a      	str	r2, [r3, #24]
 8003162:	e060      	b.n	8003226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	2b04      	cmp	r3, #4
 8003168:	d11c      	bne.n	80031a4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003172:	68bb      	ldr	r3, [r7, #8]
 8003174:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003176:	68bb      	ldr	r3, [r7, #8]
 8003178:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 800317a:	f000 fcf8 	bl	8003b6e <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800317e:	68fb      	ldr	r3, [r7, #12]
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	699a      	ldr	r2, [r3, #24]
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	681b      	ldr	r3, [r3, #0]
 8003188:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800318c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800318e:	68fb      	ldr	r3, [r7, #12]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	6999      	ldr	r1, [r3, #24]
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	689b      	ldr	r3, [r3, #8]
 8003198:	021a      	lsls	r2, r3, #8
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	681b      	ldr	r3, [r3, #0]
 800319e:	430a      	orrs	r2, r1
 80031a0:	619a      	str	r2, [r3, #24]
 80031a2:	e040      	b.n	8003226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	2b08      	cmp	r3, #8
 80031a8:	d11b      	bne.n	80031e2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031ae:	68bb      	ldr	r3, [r7, #8]
 80031b0:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031b2:	68bb      	ldr	r3, [r7, #8]
 80031b4:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031b6:	68bb      	ldr	r3, [r7, #8]
 80031b8:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 80031ba:	f000 fd45 	bl	8003c48 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80031be:	68fb      	ldr	r3, [r7, #12]
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	69da      	ldr	r2, [r3, #28]
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	f022 020c 	bic.w	r2, r2, #12
 80031cc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	69d9      	ldr	r1, [r3, #28]
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	689a      	ldr	r2, [r3, #8]
 80031d8:	68fb      	ldr	r3, [r7, #12]
 80031da:	681b      	ldr	r3, [r3, #0]
 80031dc:	430a      	orrs	r2, r1
 80031de:	61da      	str	r2, [r3, #28]
 80031e0:	e021      	b.n	8003226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	2b0c      	cmp	r3, #12
 80031e6:	d11c      	bne.n	8003222 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80031ec:	68bb      	ldr	r3, [r7, #8]
 80031ee:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80031f0:	68bb      	ldr	r3, [r7, #8]
 80031f2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80031f4:	68bb      	ldr	r3, [r7, #8]
 80031f6:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 80031f8:	f000 fd62 	bl	8003cc0 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80031fc:	68fb      	ldr	r3, [r7, #12]
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800320a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	69d9      	ldr	r1, [r3, #28]
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	689b      	ldr	r3, [r3, #8]
 8003216:	021a      	lsls	r2, r3, #8
 8003218:	68fb      	ldr	r3, [r7, #12]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	430a      	orrs	r2, r1
 800321e:	61da      	str	r2, [r3, #28]
 8003220:	e001      	b.n	8003226 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003222:	2301      	movs	r3, #1
 8003224:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003226:	68fb      	ldr	r3, [r7, #12]
 8003228:	2200      	movs	r2, #0
 800322a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800322e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003230:	4618      	mov	r0, r3
 8003232:	3718      	adds	r7, #24
 8003234:	46bd      	mov	sp, r7
 8003236:	bd80      	pop	{r7, pc}

08003238 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003238:	b580      	push	{r7, lr}
 800323a:	b086      	sub	sp, #24
 800323c:	af00      	add	r7, sp, #0
 800323e:	60f8      	str	r0, [r7, #12]
 8003240:	60b9      	str	r1, [r7, #8]
 8003242:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003244:	2300      	movs	r3, #0
 8003246:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800324e:	2b01      	cmp	r3, #1
 8003250:	d101      	bne.n	8003256 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003252:	2302      	movs	r3, #2
 8003254:	e0ae      	b.n	80033b4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003256:	68fb      	ldr	r3, [r7, #12]
 8003258:	2201      	movs	r2, #1
 800325a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	2b0c      	cmp	r3, #12
 8003262:	f200 809f 	bhi.w	80033a4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003266:	a201      	add	r2, pc, #4	; (adr r2, 800326c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003268:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800326c:	080032a1 	.word	0x080032a1
 8003270:	080033a5 	.word	0x080033a5
 8003274:	080033a5 	.word	0x080033a5
 8003278:	080033a5 	.word	0x080033a5
 800327c:	080032e1 	.word	0x080032e1
 8003280:	080033a5 	.word	0x080033a5
 8003284:	080033a5 	.word	0x080033a5
 8003288:	080033a5 	.word	0x080033a5
 800328c:	08003323 	.word	0x08003323
 8003290:	080033a5 	.word	0x080033a5
 8003294:	080033a5 	.word	0x080033a5
 8003298:	080033a5 	.word	0x080033a5
 800329c:	08003363 	.word	0x08003363
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032a0:	68fb      	ldr	r3, [r7, #12]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	68b9      	ldr	r1, [r7, #8]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f000 fa3e 	bl	8003728 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	681b      	ldr	r3, [r3, #0]
 80032b0:	699a      	ldr	r2, [r3, #24]
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	f042 0208 	orr.w	r2, r2, #8
 80032ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	699a      	ldr	r2, [r3, #24]
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0204 	bic.w	r2, r2, #4
 80032ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032cc:	68fb      	ldr	r3, [r7, #12]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	6999      	ldr	r1, [r3, #24]
 80032d2:	68bb      	ldr	r3, [r7, #8]
 80032d4:	691a      	ldr	r2, [r3, #16]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	430a      	orrs	r2, r1
 80032dc:	619a      	str	r2, [r3, #24]
      break;
 80032de:	e064      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	68b9      	ldr	r1, [r7, #8]
 80032e6:	4618      	mov	r0, r3
 80032e8:	f000 fa84 	bl	80037f4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	699a      	ldr	r2, [r3, #24]
 80032f2:	68fb      	ldr	r3, [r7, #12]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80032fa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	699a      	ldr	r2, [r3, #24]
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800330a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	6999      	ldr	r1, [r3, #24]
 8003312:	68bb      	ldr	r3, [r7, #8]
 8003314:	691b      	ldr	r3, [r3, #16]
 8003316:	021a      	lsls	r2, r3, #8
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	430a      	orrs	r2, r1
 800331e:	619a      	str	r2, [r3, #24]
      break;
 8003320:	e043      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	68b9      	ldr	r1, [r7, #8]
 8003328:	4618      	mov	r0, r3
 800332a:	f000 facf 	bl	80038cc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	69da      	ldr	r2, [r3, #28]
 8003334:	68fb      	ldr	r3, [r7, #12]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	f042 0208 	orr.w	r2, r2, #8
 800333c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	69da      	ldr	r2, [r3, #28]
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	f022 0204 	bic.w	r2, r2, #4
 800334c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	69d9      	ldr	r1, [r3, #28]
 8003354:	68bb      	ldr	r3, [r7, #8]
 8003356:	691a      	ldr	r2, [r3, #16]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	430a      	orrs	r2, r1
 800335e:	61da      	str	r2, [r3, #28]
      break;
 8003360:	e023      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	68b9      	ldr	r1, [r7, #8]
 8003368:	4618      	mov	r0, r3
 800336a:	f000 fb19 	bl	80039a0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	69da      	ldr	r2, [r3, #28]
 8003374:	68fb      	ldr	r3, [r7, #12]
 8003376:	681b      	ldr	r3, [r3, #0]
 8003378:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800337c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800337e:	68fb      	ldr	r3, [r7, #12]
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	69da      	ldr	r2, [r3, #28]
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	681b      	ldr	r3, [r3, #0]
 8003388:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800338c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	69d9      	ldr	r1, [r3, #28]
 8003394:	68bb      	ldr	r3, [r7, #8]
 8003396:	691b      	ldr	r3, [r3, #16]
 8003398:	021a      	lsls	r2, r3, #8
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	430a      	orrs	r2, r1
 80033a0:	61da      	str	r2, [r3, #28]
      break;
 80033a2:	e002      	b.n	80033aa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033a4:	2301      	movs	r3, #1
 80033a6:	75fb      	strb	r3, [r7, #23]
      break;
 80033a8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80033b2:	7dfb      	ldrb	r3, [r7, #23]
}
 80033b4:	4618      	mov	r0, r3
 80033b6:	3718      	adds	r7, #24
 80033b8:	46bd      	mov	sp, r7
 80033ba:	bd80      	pop	{r7, pc}

080033bc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033bc:	b580      	push	{r7, lr}
 80033be:	b084      	sub	sp, #16
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033c6:	2300      	movs	r3, #0
 80033c8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80033d0:	2b01      	cmp	r3, #1
 80033d2:	d101      	bne.n	80033d8 <HAL_TIM_ConfigClockSource+0x1c>
 80033d4:	2302      	movs	r3, #2
 80033d6:	e0b4      	b.n	8003542 <HAL_TIM_ConfigClockSource+0x186>
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	2202      	movs	r2, #2
 80033e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	689b      	ldr	r3, [r3, #8]
 80033ee:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80033f0:	68bb      	ldr	r3, [r7, #8]
 80033f2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80033f6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80033f8:	68bb      	ldr	r3, [r7, #8]
 80033fa:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80033fe:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	68ba      	ldr	r2, [r7, #8]
 8003406:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003408:	683b      	ldr	r3, [r7, #0]
 800340a:	681b      	ldr	r3, [r3, #0]
 800340c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003410:	d03e      	beq.n	8003490 <HAL_TIM_ConfigClockSource+0xd4>
 8003412:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003416:	f200 8087 	bhi.w	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 800341a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800341e:	f000 8086 	beq.w	800352e <HAL_TIM_ConfigClockSource+0x172>
 8003422:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003426:	d87f      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003428:	2b70      	cmp	r3, #112	; 0x70
 800342a:	d01a      	beq.n	8003462 <HAL_TIM_ConfigClockSource+0xa6>
 800342c:	2b70      	cmp	r3, #112	; 0x70
 800342e:	d87b      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003430:	2b60      	cmp	r3, #96	; 0x60
 8003432:	d050      	beq.n	80034d6 <HAL_TIM_ConfigClockSource+0x11a>
 8003434:	2b60      	cmp	r3, #96	; 0x60
 8003436:	d877      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003438:	2b50      	cmp	r3, #80	; 0x50
 800343a:	d03c      	beq.n	80034b6 <HAL_TIM_ConfigClockSource+0xfa>
 800343c:	2b50      	cmp	r3, #80	; 0x50
 800343e:	d873      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003440:	2b40      	cmp	r3, #64	; 0x40
 8003442:	d058      	beq.n	80034f6 <HAL_TIM_ConfigClockSource+0x13a>
 8003444:	2b40      	cmp	r3, #64	; 0x40
 8003446:	d86f      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003448:	2b30      	cmp	r3, #48	; 0x30
 800344a:	d064      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 800344c:	2b30      	cmp	r3, #48	; 0x30
 800344e:	d86b      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003450:	2b20      	cmp	r3, #32
 8003452:	d060      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 8003454:	2b20      	cmp	r3, #32
 8003456:	d867      	bhi.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
 8003458:	2b00      	cmp	r3, #0
 800345a:	d05c      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 800345c:	2b10      	cmp	r3, #16
 800345e:	d05a      	beq.n	8003516 <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	e062      	b.n	8003528 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003466:	683b      	ldr	r3, [r7, #0]
 8003468:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800346a:	683b      	ldr	r3, [r7, #0]
 800346c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003472:	f000 fc7d 	bl	8003d70 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	689b      	ldr	r3, [r3, #8]
 800347c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800347e:	68bb      	ldr	r3, [r7, #8]
 8003480:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003484:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003486:	687b      	ldr	r3, [r7, #4]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	68ba      	ldr	r2, [r7, #8]
 800348c:	609a      	str	r2, [r3, #8]
      break;
 800348e:	e04f      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003494:	683b      	ldr	r3, [r7, #0]
 8003496:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003498:	683b      	ldr	r3, [r7, #0]
 800349a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034a0:	f000 fc66 	bl	8003d70 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	689a      	ldr	r2, [r3, #8]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80034b2:	609a      	str	r2, [r3, #8]
      break;
 80034b4:	e03c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ba:	683b      	ldr	r3, [r7, #0]
 80034bc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034be:	683b      	ldr	r3, [r7, #0]
 80034c0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034c2:	461a      	mov	r2, r3
 80034c4:	f000 fb24 	bl	8003b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	2150      	movs	r1, #80	; 0x50
 80034ce:	4618      	mov	r0, r3
 80034d0:	f000 fc33 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 80034d4:	e02c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034de:	683b      	ldr	r3, [r7, #0]
 80034e0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034e2:	461a      	mov	r2, r3
 80034e4:	f000 fb80 	bl	8003be8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	2160      	movs	r1, #96	; 0x60
 80034ee:	4618      	mov	r0, r3
 80034f0:	f000 fc23 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 80034f4:	e01c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034fe:	683b      	ldr	r3, [r7, #0]
 8003500:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003502:	461a      	mov	r2, r3
 8003504:	f000 fb04 	bl	8003b10 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	2140      	movs	r1, #64	; 0x40
 800350e:	4618      	mov	r0, r3
 8003510:	f000 fc13 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003514:	e00c      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681a      	ldr	r2, [r3, #0]
 800351a:	683b      	ldr	r3, [r7, #0]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	4619      	mov	r1, r3
 8003520:	4610      	mov	r0, r2
 8003522:	f000 fc0a 	bl	8003d3a <TIM_ITRx_SetConfig>
      break;
 8003526:	e003      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003528:	2301      	movs	r3, #1
 800352a:	73fb      	strb	r3, [r7, #15]
      break;
 800352c:	e000      	b.n	8003530 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800352e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2200      	movs	r2, #0
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003540:	7bfb      	ldrb	r3, [r7, #15]
}
 8003542:	4618      	mov	r0, r3
 8003544:	3710      	adds	r7, #16
 8003546:	46bd      	mov	sp, r7
 8003548:	bd80      	pop	{r7, pc}
	...

0800354c <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800354c:	b480      	push	{r7}
 800354e:	b085      	sub	sp, #20
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
 8003554:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003556:	2300      	movs	r3, #0
 8003558:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 800355a:	683b      	ldr	r3, [r7, #0]
 800355c:	2b0c      	cmp	r3, #12
 800355e:	d831      	bhi.n	80035c4 <HAL_TIM_ReadCapturedValue+0x78>
 8003560:	a201      	add	r2, pc, #4	; (adr r2, 8003568 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003562:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003566:	bf00      	nop
 8003568:	0800359d 	.word	0x0800359d
 800356c:	080035c5 	.word	0x080035c5
 8003570:	080035c5 	.word	0x080035c5
 8003574:	080035c5 	.word	0x080035c5
 8003578:	080035a7 	.word	0x080035a7
 800357c:	080035c5 	.word	0x080035c5
 8003580:	080035c5 	.word	0x080035c5
 8003584:	080035c5 	.word	0x080035c5
 8003588:	080035b1 	.word	0x080035b1
 800358c:	080035c5 	.word	0x080035c5
 8003590:	080035c5 	.word	0x080035c5
 8003594:	080035c5 	.word	0x080035c5
 8003598:	080035bb 	.word	0x080035bb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80035a2:	60fb      	str	r3, [r7, #12]

      break;
 80035a4:	e00f      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035ac:	60fb      	str	r3, [r7, #12]

      break;
 80035ae:	e00a      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80035b6:	60fb      	str	r3, [r7, #12]

      break;
 80035b8:	e005      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035c0:	60fb      	str	r3, [r7, #12]

      break;
 80035c2:	e000      	b.n	80035c6 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 80035c4:	bf00      	nop
  }

  return tmpreg;
 80035c6:	68fb      	ldr	r3, [r7, #12]
}
 80035c8:	4618      	mov	r0, r3
 80035ca:	3714      	adds	r7, #20
 80035cc:	46bd      	mov	sp, r7
 80035ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d2:	4770      	bx	lr

080035d4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80035d4:	b480      	push	{r7}
 80035d6:	b083      	sub	sp, #12
 80035d8:	af00      	add	r7, sp, #0
 80035da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80035dc:	bf00      	nop
 80035de:	370c      	adds	r7, #12
 80035e0:	46bd      	mov	sp, r7
 80035e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035e6:	4770      	bx	lr

080035e8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80035e8:	b480      	push	{r7}
 80035ea:	b083      	sub	sp, #12
 80035ec:	af00      	add	r7, sp, #0
 80035ee:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80035f0:	bf00      	nop
 80035f2:	370c      	adds	r7, #12
 80035f4:	46bd      	mov	sp, r7
 80035f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035fa:	4770      	bx	lr

080035fc <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035fc:	b480      	push	{r7}
 80035fe:	b083      	sub	sp, #12
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003604:	bf00      	nop
 8003606:	370c      	adds	r7, #12
 8003608:	46bd      	mov	sp, r7
 800360a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800360e:	4770      	bx	lr

08003610 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003610:	b480      	push	{r7}
 8003612:	b085      	sub	sp, #20
 8003614:	af00      	add	r7, sp, #0
 8003616:	6078      	str	r0, [r7, #4]
 8003618:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	4a3a      	ldr	r2, [pc, #232]	; (800370c <TIM_Base_SetConfig+0xfc>)
 8003624:	4293      	cmp	r3, r2
 8003626:	d00f      	beq.n	8003648 <TIM_Base_SetConfig+0x38>
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800362e:	d00b      	beq.n	8003648 <TIM_Base_SetConfig+0x38>
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	4a37      	ldr	r2, [pc, #220]	; (8003710 <TIM_Base_SetConfig+0x100>)
 8003634:	4293      	cmp	r3, r2
 8003636:	d007      	beq.n	8003648 <TIM_Base_SetConfig+0x38>
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	4a36      	ldr	r2, [pc, #216]	; (8003714 <TIM_Base_SetConfig+0x104>)
 800363c:	4293      	cmp	r3, r2
 800363e:	d003      	beq.n	8003648 <TIM_Base_SetConfig+0x38>
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	4a35      	ldr	r2, [pc, #212]	; (8003718 <TIM_Base_SetConfig+0x108>)
 8003644:	4293      	cmp	r3, r2
 8003646:	d108      	bne.n	800365a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800364e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	68fa      	ldr	r2, [r7, #12]
 8003656:	4313      	orrs	r3, r2
 8003658:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	4a2b      	ldr	r2, [pc, #172]	; (800370c <TIM_Base_SetConfig+0xfc>)
 800365e:	4293      	cmp	r3, r2
 8003660:	d01b      	beq.n	800369a <TIM_Base_SetConfig+0x8a>
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003668:	d017      	beq.n	800369a <TIM_Base_SetConfig+0x8a>
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	4a28      	ldr	r2, [pc, #160]	; (8003710 <TIM_Base_SetConfig+0x100>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d013      	beq.n	800369a <TIM_Base_SetConfig+0x8a>
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	4a27      	ldr	r2, [pc, #156]	; (8003714 <TIM_Base_SetConfig+0x104>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d00f      	beq.n	800369a <TIM_Base_SetConfig+0x8a>
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	4a26      	ldr	r2, [pc, #152]	; (8003718 <TIM_Base_SetConfig+0x108>)
 800367e:	4293      	cmp	r3, r2
 8003680:	d00b      	beq.n	800369a <TIM_Base_SetConfig+0x8a>
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	4a25      	ldr	r2, [pc, #148]	; (800371c <TIM_Base_SetConfig+0x10c>)
 8003686:	4293      	cmp	r3, r2
 8003688:	d007      	beq.n	800369a <TIM_Base_SetConfig+0x8a>
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	4a24      	ldr	r2, [pc, #144]	; (8003720 <TIM_Base_SetConfig+0x110>)
 800368e:	4293      	cmp	r3, r2
 8003690:	d003      	beq.n	800369a <TIM_Base_SetConfig+0x8a>
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	4a23      	ldr	r2, [pc, #140]	; (8003724 <TIM_Base_SetConfig+0x114>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d108      	bne.n	80036ac <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036a0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036a2:	683b      	ldr	r3, [r7, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	68fa      	ldr	r2, [r7, #12]
 80036a8:	4313      	orrs	r3, r2
 80036aa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	695b      	ldr	r3, [r3, #20]
 80036b6:	4313      	orrs	r3, r2
 80036b8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	68fa      	ldr	r2, [r7, #12]
 80036be:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	689a      	ldr	r2, [r3, #8]
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80036c8:	683b      	ldr	r3, [r7, #0]
 80036ca:	681a      	ldr	r2, [r3, #0]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a0e      	ldr	r2, [pc, #56]	; (800370c <TIM_Base_SetConfig+0xfc>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d103      	bne.n	80036e0 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80036d8:	683b      	ldr	r3, [r7, #0]
 80036da:	691a      	ldr	r2, [r3, #16]
 80036dc:	687b      	ldr	r3, [r7, #4]
 80036de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	691b      	ldr	r3, [r3, #16]
 80036ea:	f003 0301 	and.w	r3, r3, #1
 80036ee:	2b01      	cmp	r3, #1
 80036f0:	d105      	bne.n	80036fe <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	691b      	ldr	r3, [r3, #16]
 80036f6:	f023 0201 	bic.w	r2, r3, #1
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	611a      	str	r2, [r3, #16]
  }
}
 80036fe:	bf00      	nop
 8003700:	3714      	adds	r7, #20
 8003702:	46bd      	mov	sp, r7
 8003704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003708:	4770      	bx	lr
 800370a:	bf00      	nop
 800370c:	40010000 	.word	0x40010000
 8003710:	40000400 	.word	0x40000400
 8003714:	40000800 	.word	0x40000800
 8003718:	40000c00 	.word	0x40000c00
 800371c:	40014000 	.word	0x40014000
 8003720:	40014400 	.word	0x40014400
 8003724:	40014800 	.word	0x40014800

08003728 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003728:	b480      	push	{r7}
 800372a:	b087      	sub	sp, #28
 800372c:	af00      	add	r7, sp, #0
 800372e:	6078      	str	r0, [r7, #4]
 8003730:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	6a1b      	ldr	r3, [r3, #32]
 8003736:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	6a1b      	ldr	r3, [r3, #32]
 800373c:	f023 0201 	bic.w	r2, r3, #1
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	699b      	ldr	r3, [r3, #24]
 800374e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003756:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003758:	68fb      	ldr	r3, [r7, #12]
 800375a:	f023 0303 	bic.w	r3, r3, #3
 800375e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	68fa      	ldr	r2, [r7, #12]
 8003766:	4313      	orrs	r3, r2
 8003768:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800376a:	697b      	ldr	r3, [r7, #20]
 800376c:	f023 0302 	bic.w	r3, r3, #2
 8003770:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	689b      	ldr	r3, [r3, #8]
 8003776:	697a      	ldr	r2, [r7, #20]
 8003778:	4313      	orrs	r3, r2
 800377a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	4a1c      	ldr	r2, [pc, #112]	; (80037f0 <TIM_OC1_SetConfig+0xc8>)
 8003780:	4293      	cmp	r3, r2
 8003782:	d10c      	bne.n	800379e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003784:	697b      	ldr	r3, [r7, #20]
 8003786:	f023 0308 	bic.w	r3, r3, #8
 800378a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800378c:	683b      	ldr	r3, [r7, #0]
 800378e:	68db      	ldr	r3, [r3, #12]
 8003790:	697a      	ldr	r2, [r7, #20]
 8003792:	4313      	orrs	r3, r2
 8003794:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003796:	697b      	ldr	r3, [r7, #20]
 8003798:	f023 0304 	bic.w	r3, r3, #4
 800379c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	4a13      	ldr	r2, [pc, #76]	; (80037f0 <TIM_OC1_SetConfig+0xc8>)
 80037a2:	4293      	cmp	r3, r2
 80037a4:	d111      	bne.n	80037ca <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ae:	693b      	ldr	r3, [r7, #16]
 80037b0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037b6:	683b      	ldr	r3, [r7, #0]
 80037b8:	695b      	ldr	r3, [r3, #20]
 80037ba:	693a      	ldr	r2, [r7, #16]
 80037bc:	4313      	orrs	r3, r2
 80037be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037c0:	683b      	ldr	r3, [r7, #0]
 80037c2:	699b      	ldr	r3, [r3, #24]
 80037c4:	693a      	ldr	r2, [r7, #16]
 80037c6:	4313      	orrs	r3, r2
 80037c8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	693a      	ldr	r2, [r7, #16]
 80037ce:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	68fa      	ldr	r2, [r7, #12]
 80037d4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80037d6:	683b      	ldr	r3, [r7, #0]
 80037d8:	685a      	ldr	r2, [r3, #4]
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	697a      	ldr	r2, [r7, #20]
 80037e2:	621a      	str	r2, [r3, #32]
}
 80037e4:	bf00      	nop
 80037e6:	371c      	adds	r7, #28
 80037e8:	46bd      	mov	sp, r7
 80037ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ee:	4770      	bx	lr
 80037f0:	40010000 	.word	0x40010000

080037f4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80037f4:	b480      	push	{r7}
 80037f6:	b087      	sub	sp, #28
 80037f8:	af00      	add	r7, sp, #0
 80037fa:	6078      	str	r0, [r7, #4]
 80037fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6a1b      	ldr	r3, [r3, #32]
 8003802:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	6a1b      	ldr	r3, [r3, #32]
 8003808:	f023 0210 	bic.w	r2, r3, #16
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	685b      	ldr	r3, [r3, #4]
 8003814:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	699b      	ldr	r3, [r3, #24]
 800381a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800381c:	68fb      	ldr	r3, [r7, #12]
 800381e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003822:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003824:	68fb      	ldr	r3, [r7, #12]
 8003826:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800382a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800382c:	683b      	ldr	r3, [r7, #0]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	021b      	lsls	r3, r3, #8
 8003832:	68fa      	ldr	r2, [r7, #12]
 8003834:	4313      	orrs	r3, r2
 8003836:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003838:	697b      	ldr	r3, [r7, #20]
 800383a:	f023 0320 	bic.w	r3, r3, #32
 800383e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003840:	683b      	ldr	r3, [r7, #0]
 8003842:	689b      	ldr	r3, [r3, #8]
 8003844:	011b      	lsls	r3, r3, #4
 8003846:	697a      	ldr	r2, [r7, #20]
 8003848:	4313      	orrs	r3, r2
 800384a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	4a1e      	ldr	r2, [pc, #120]	; (80038c8 <TIM_OC2_SetConfig+0xd4>)
 8003850:	4293      	cmp	r3, r2
 8003852:	d10d      	bne.n	8003870 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003854:	697b      	ldr	r3, [r7, #20]
 8003856:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800385a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	68db      	ldr	r3, [r3, #12]
 8003860:	011b      	lsls	r3, r3, #4
 8003862:	697a      	ldr	r2, [r7, #20]
 8003864:	4313      	orrs	r3, r2
 8003866:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003868:	697b      	ldr	r3, [r7, #20]
 800386a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800386e:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	4a15      	ldr	r2, [pc, #84]	; (80038c8 <TIM_OC2_SetConfig+0xd4>)
 8003874:	4293      	cmp	r3, r2
 8003876:	d113      	bne.n	80038a0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8003878:	693b      	ldr	r3, [r7, #16]
 800387a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800387e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003880:	693b      	ldr	r3, [r7, #16]
 8003882:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003886:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8003888:	683b      	ldr	r3, [r7, #0]
 800388a:	695b      	ldr	r3, [r3, #20]
 800388c:	009b      	lsls	r3, r3, #2
 800388e:	693a      	ldr	r2, [r7, #16]
 8003890:	4313      	orrs	r3, r2
 8003892:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003894:	683b      	ldr	r3, [r7, #0]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	009b      	lsls	r3, r3, #2
 800389a:	693a      	ldr	r2, [r7, #16]
 800389c:	4313      	orrs	r3, r2
 800389e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	693a      	ldr	r2, [r7, #16]
 80038a4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	68fa      	ldr	r2, [r7, #12]
 80038aa:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038ac:	683b      	ldr	r3, [r7, #0]
 80038ae:	685a      	ldr	r2, [r3, #4]
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	697a      	ldr	r2, [r7, #20]
 80038b8:	621a      	str	r2, [r3, #32]
}
 80038ba:	bf00      	nop
 80038bc:	371c      	adds	r7, #28
 80038be:	46bd      	mov	sp, r7
 80038c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038c4:	4770      	bx	lr
 80038c6:	bf00      	nop
 80038c8:	40010000 	.word	0x40010000

080038cc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038cc:	b480      	push	{r7}
 80038ce:	b087      	sub	sp, #28
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
 80038d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	6a1b      	ldr	r3, [r3, #32]
 80038da:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	6a1b      	ldr	r3, [r3, #32]
 80038e0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	685b      	ldr	r3, [r3, #4]
 80038ec:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	69db      	ldr	r3, [r3, #28]
 80038f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f023 0303 	bic.w	r3, r3, #3
 8003902:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003904:	683b      	ldr	r3, [r7, #0]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	68fa      	ldr	r2, [r7, #12]
 800390a:	4313      	orrs	r3, r2
 800390c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800390e:	697b      	ldr	r3, [r7, #20]
 8003910:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003914:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003916:	683b      	ldr	r3, [r7, #0]
 8003918:	689b      	ldr	r3, [r3, #8]
 800391a:	021b      	lsls	r3, r3, #8
 800391c:	697a      	ldr	r2, [r7, #20]
 800391e:	4313      	orrs	r3, r2
 8003920:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	4a1d      	ldr	r2, [pc, #116]	; (800399c <TIM_OC3_SetConfig+0xd0>)
 8003926:	4293      	cmp	r3, r2
 8003928:	d10d      	bne.n	8003946 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800392a:	697b      	ldr	r3, [r7, #20]
 800392c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003930:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003932:	683b      	ldr	r3, [r7, #0]
 8003934:	68db      	ldr	r3, [r3, #12]
 8003936:	021b      	lsls	r3, r3, #8
 8003938:	697a      	ldr	r2, [r7, #20]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800393e:	697b      	ldr	r3, [r7, #20]
 8003940:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003944:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <TIM_OC3_SetConfig+0xd0>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d113      	bne.n	8003976 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800394e:	693b      	ldr	r3, [r7, #16]
 8003950:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003954:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003956:	693b      	ldr	r3, [r7, #16]
 8003958:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800395c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	695b      	ldr	r3, [r3, #20]
 8003962:	011b      	lsls	r3, r3, #4
 8003964:	693a      	ldr	r2, [r7, #16]
 8003966:	4313      	orrs	r3, r2
 8003968:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	699b      	ldr	r3, [r3, #24]
 800396e:	011b      	lsls	r3, r3, #4
 8003970:	693a      	ldr	r2, [r7, #16]
 8003972:	4313      	orrs	r3, r2
 8003974:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	693a      	ldr	r2, [r7, #16]
 800397a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	68fa      	ldr	r2, [r7, #12]
 8003980:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003982:	683b      	ldr	r3, [r7, #0]
 8003984:	685a      	ldr	r2, [r3, #4]
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	697a      	ldr	r2, [r7, #20]
 800398e:	621a      	str	r2, [r3, #32]
}
 8003990:	bf00      	nop
 8003992:	371c      	adds	r7, #28
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	40010000 	.word	0x40010000

080039a0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b087      	sub	sp, #28
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
 80039a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	6a1b      	ldr	r3, [r3, #32]
 80039b4:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	685b      	ldr	r3, [r3, #4]
 80039c0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	69db      	ldr	r3, [r3, #28]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80039ce:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80039d0:	68fb      	ldr	r3, [r7, #12]
 80039d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80039d6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	021b      	lsls	r3, r3, #8
 80039de:	68fa      	ldr	r2, [r7, #12]
 80039e0:	4313      	orrs	r3, r2
 80039e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80039e4:	693b      	ldr	r3, [r7, #16]
 80039e6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80039ea:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80039ec:	683b      	ldr	r3, [r7, #0]
 80039ee:	689b      	ldr	r3, [r3, #8]
 80039f0:	031b      	lsls	r3, r3, #12
 80039f2:	693a      	ldr	r2, [r7, #16]
 80039f4:	4313      	orrs	r3, r2
 80039f6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <TIM_OC4_SetConfig+0x9c>)
 80039fc:	4293      	cmp	r3, r2
 80039fe:	d109      	bne.n	8003a14 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a00:	697b      	ldr	r3, [r7, #20]
 8003a02:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a06:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a08:	683b      	ldr	r3, [r7, #0]
 8003a0a:	695b      	ldr	r3, [r3, #20]
 8003a0c:	019b      	lsls	r3, r3, #6
 8003a0e:	697a      	ldr	r2, [r7, #20]
 8003a10:	4313      	orrs	r3, r2
 8003a12:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	697a      	ldr	r2, [r7, #20]
 8003a18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	68fa      	ldr	r2, [r7, #12]
 8003a1e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a20:	683b      	ldr	r3, [r7, #0]
 8003a22:	685a      	ldr	r2, [r3, #4]
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	693a      	ldr	r2, [r7, #16]
 8003a2c:	621a      	str	r2, [r3, #32]
}
 8003a2e:	bf00      	nop
 8003a30:	371c      	adds	r7, #28
 8003a32:	46bd      	mov	sp, r7
 8003a34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40010000 	.word	0x40010000

08003a40 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8003a40:	b480      	push	{r7}
 8003a42:	b087      	sub	sp, #28
 8003a44:	af00      	add	r7, sp, #0
 8003a46:	60f8      	str	r0, [r7, #12]
 8003a48:	60b9      	str	r1, [r7, #8]
 8003a4a:	607a      	str	r2, [r7, #4]
 8003a4c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	6a1b      	ldr	r3, [r3, #32]
 8003a58:	f023 0201 	bic.w	r2, r3, #1
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	699b      	ldr	r3, [r3, #24]
 8003a64:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4a24      	ldr	r2, [pc, #144]	; (8003afc <TIM_TI1_SetConfig+0xbc>)
 8003a6a:	4293      	cmp	r3, r2
 8003a6c:	d013      	beq.n	8003a96 <TIM_TI1_SetConfig+0x56>
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a74:	d00f      	beq.n	8003a96 <TIM_TI1_SetConfig+0x56>
 8003a76:	68fb      	ldr	r3, [r7, #12]
 8003a78:	4a21      	ldr	r2, [pc, #132]	; (8003b00 <TIM_TI1_SetConfig+0xc0>)
 8003a7a:	4293      	cmp	r3, r2
 8003a7c:	d00b      	beq.n	8003a96 <TIM_TI1_SetConfig+0x56>
 8003a7e:	68fb      	ldr	r3, [r7, #12]
 8003a80:	4a20      	ldr	r2, [pc, #128]	; (8003b04 <TIM_TI1_SetConfig+0xc4>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d007      	beq.n	8003a96 <TIM_TI1_SetConfig+0x56>
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	4a1f      	ldr	r2, [pc, #124]	; (8003b08 <TIM_TI1_SetConfig+0xc8>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d003      	beq.n	8003a96 <TIM_TI1_SetConfig+0x56>
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	4a1e      	ldr	r2, [pc, #120]	; (8003b0c <TIM_TI1_SetConfig+0xcc>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d101      	bne.n	8003a9a <TIM_TI1_SetConfig+0x5a>
 8003a96:	2301      	movs	r3, #1
 8003a98:	e000      	b.n	8003a9c <TIM_TI1_SetConfig+0x5c>
 8003a9a:	2300      	movs	r3, #0
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d008      	beq.n	8003ab2 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8003aa0:	697b      	ldr	r3, [r7, #20]
 8003aa2:	f023 0303 	bic.w	r3, r3, #3
 8003aa6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8003aa8:	697a      	ldr	r2, [r7, #20]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	4313      	orrs	r3, r2
 8003aae:	617b      	str	r3, [r7, #20]
 8003ab0:	e003      	b.n	8003aba <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f043 0301 	orr.w	r3, r3, #1
 8003ab8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aba:	697b      	ldr	r3, [r7, #20]
 8003abc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003ac0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	011b      	lsls	r3, r3, #4
 8003ac6:	b2db      	uxtb	r3, r3
 8003ac8:	697a      	ldr	r2, [r7, #20]
 8003aca:	4313      	orrs	r3, r2
 8003acc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ace:	693b      	ldr	r3, [r7, #16]
 8003ad0:	f023 030a 	bic.w	r3, r3, #10
 8003ad4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8003ad6:	68bb      	ldr	r3, [r7, #8]
 8003ad8:	f003 030a 	and.w	r3, r3, #10
 8003adc:	693a      	ldr	r2, [r7, #16]
 8003ade:	4313      	orrs	r3, r2
 8003ae0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	697a      	ldr	r2, [r7, #20]
 8003ae6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	693a      	ldr	r2, [r7, #16]
 8003aec:	621a      	str	r2, [r3, #32]
}
 8003aee:	bf00      	nop
 8003af0:	371c      	adds	r7, #28
 8003af2:	46bd      	mov	sp, r7
 8003af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003af8:	4770      	bx	lr
 8003afa:	bf00      	nop
 8003afc:	40010000 	.word	0x40010000
 8003b00:	40000400 	.word	0x40000400
 8003b04:	40000800 	.word	0x40000800
 8003b08:	40000c00 	.word	0x40000c00
 8003b0c:	40014000 	.word	0x40014000

08003b10 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b10:	b480      	push	{r7}
 8003b12:	b087      	sub	sp, #28
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	6a1b      	ldr	r3, [r3, #32]
 8003b20:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a1b      	ldr	r3, [r3, #32]
 8003b26:	f023 0201 	bic.w	r2, r3, #1
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b2e:	68fb      	ldr	r3, [r7, #12]
 8003b30:	699b      	ldr	r3, [r3, #24]
 8003b32:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b3a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	011b      	lsls	r3, r3, #4
 8003b40:	693a      	ldr	r2, [r7, #16]
 8003b42:	4313      	orrs	r3, r2
 8003b44:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003b46:	697b      	ldr	r3, [r7, #20]
 8003b48:	f023 030a 	bic.w	r3, r3, #10
 8003b4c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003b4e:	697a      	ldr	r2, [r7, #20]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	4313      	orrs	r3, r2
 8003b54:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	693a      	ldr	r2, [r7, #16]
 8003b5a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	697a      	ldr	r2, [r7, #20]
 8003b60:	621a      	str	r2, [r3, #32]
}
 8003b62:	bf00      	nop
 8003b64:	371c      	adds	r7, #28
 8003b66:	46bd      	mov	sp, r7
 8003b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6c:	4770      	bx	lr

08003b6e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003b6e:	b480      	push	{r7}
 8003b70:	b087      	sub	sp, #28
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	60f8      	str	r0, [r7, #12]
 8003b76:	60b9      	str	r1, [r7, #8]
 8003b78:	607a      	str	r2, [r7, #4]
 8003b7a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6a1b      	ldr	r3, [r3, #32]
 8003b80:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	6a1b      	ldr	r3, [r3, #32]
 8003b86:	f023 0210 	bic.w	r2, r3, #16
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	699b      	ldr	r3, [r3, #24]
 8003b92:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8003b94:	693b      	ldr	r3, [r7, #16]
 8003b96:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b9a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	693a      	ldr	r2, [r7, #16]
 8003ba2:	4313      	orrs	r3, r2
 8003ba4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003ba6:	693b      	ldr	r3, [r7, #16]
 8003ba8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003bac:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	031b      	lsls	r3, r3, #12
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8003bc2:	68bb      	ldr	r3, [r7, #8]
 8003bc4:	011b      	lsls	r3, r3, #4
 8003bc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8003bca:	697a      	ldr	r2, [r7, #20]
 8003bcc:	4313      	orrs	r3, r2
 8003bce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	693a      	ldr	r2, [r7, #16]
 8003bd4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	697a      	ldr	r2, [r7, #20]
 8003bda:	621a      	str	r2, [r3, #32]
}
 8003bdc:	bf00      	nop
 8003bde:	371c      	adds	r7, #28
 8003be0:	46bd      	mov	sp, r7
 8003be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be6:	4770      	bx	lr

08003be8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be8:	b480      	push	{r7}
 8003bea:	b087      	sub	sp, #28
 8003bec:	af00      	add	r7, sp, #0
 8003bee:	60f8      	str	r0, [r7, #12]
 8003bf0:	60b9      	str	r1, [r7, #8]
 8003bf2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	6a1b      	ldr	r3, [r3, #32]
 8003bfe:	f023 0210 	bic.w	r2, r3, #16
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	699b      	ldr	r3, [r3, #24]
 8003c0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c0c:	693b      	ldr	r3, [r7, #16]
 8003c0e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003c12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	031b      	lsls	r3, r3, #12
 8003c18:	693a      	ldr	r2, [r7, #16]
 8003c1a:	4313      	orrs	r3, r2
 8003c1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c1e:	697b      	ldr	r3, [r7, #20]
 8003c20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003c24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c26:	68bb      	ldr	r3, [r7, #8]
 8003c28:	011b      	lsls	r3, r3, #4
 8003c2a:	697a      	ldr	r2, [r7, #20]
 8003c2c:	4313      	orrs	r3, r2
 8003c2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	693a      	ldr	r2, [r7, #16]
 8003c34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c36:	68fb      	ldr	r3, [r7, #12]
 8003c38:	697a      	ldr	r2, [r7, #20]
 8003c3a:	621a      	str	r2, [r3, #32]
}
 8003c3c:	bf00      	nop
 8003c3e:	371c      	adds	r7, #28
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b087      	sub	sp, #28
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	60f8      	str	r0, [r7, #12]
 8003c50:	60b9      	str	r1, [r7, #8]
 8003c52:	607a      	str	r2, [r7, #4]
 8003c54:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	6a1b      	ldr	r3, [r3, #32]
 8003c5a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	6a1b      	ldr	r3, [r3, #32]
 8003c60:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	69db      	ldr	r3, [r3, #28]
 8003c6c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8003c6e:	693b      	ldr	r3, [r7, #16]
 8003c70:	f023 0303 	bic.w	r3, r3, #3
 8003c74:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8003c76:	693a      	ldr	r2, [r7, #16]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	4313      	orrs	r3, r2
 8003c7c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8003c7e:	693b      	ldr	r3, [r7, #16]
 8003c80:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003c84:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8003c86:	683b      	ldr	r3, [r7, #0]
 8003c88:	011b      	lsls	r3, r3, #4
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	693a      	ldr	r2, [r7, #16]
 8003c8e:	4313      	orrs	r3, r2
 8003c90:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8003c92:	697b      	ldr	r3, [r7, #20]
 8003c94:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8003c98:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	021b      	lsls	r3, r3, #8
 8003c9e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8003ca2:	697a      	ldr	r2, [r7, #20]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	693a      	ldr	r2, [r7, #16]
 8003cac:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	697a      	ldr	r2, [r7, #20]
 8003cb2:	621a      	str	r2, [r3, #32]
}
 8003cb4:	bf00      	nop
 8003cb6:	371c      	adds	r7, #28
 8003cb8:	46bd      	mov	sp, r7
 8003cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cbe:	4770      	bx	lr

08003cc0 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8003cc0:	b480      	push	{r7}
 8003cc2:	b087      	sub	sp, #28
 8003cc4:	af00      	add	r7, sp, #0
 8003cc6:	60f8      	str	r0, [r7, #12]
 8003cc8:	60b9      	str	r1, [r7, #8]
 8003cca:	607a      	str	r2, [r7, #4]
 8003ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	6a1b      	ldr	r3, [r3, #32]
 8003cd2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a1b      	ldr	r3, [r3, #32]
 8003cd8:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	69db      	ldr	r3, [r3, #28]
 8003ce4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003cec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	021b      	lsls	r3, r3, #8
 8003cf2:	693a      	ldr	r2, [r7, #16]
 8003cf4:	4313      	orrs	r3, r2
 8003cf6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8003cf8:	693b      	ldr	r3, [r7, #16]
 8003cfa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003cfe:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	031b      	lsls	r3, r3, #12
 8003d04:	b29b      	uxth	r3, r3
 8003d06:	693a      	ldr	r2, [r7, #16]
 8003d08:	4313      	orrs	r3, r2
 8003d0a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8003d0c:	697b      	ldr	r3, [r7, #20]
 8003d0e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8003d12:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8003d14:	68bb      	ldr	r3, [r7, #8]
 8003d16:	031b      	lsls	r3, r3, #12
 8003d18:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8003d1c:	697a      	ldr	r2, [r7, #20]
 8003d1e:	4313      	orrs	r3, r2
 8003d20:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	693a      	ldr	r2, [r7, #16]
 8003d26:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8003d28:	68fb      	ldr	r3, [r7, #12]
 8003d2a:	697a      	ldr	r2, [r7, #20]
 8003d2c:	621a      	str	r2, [r3, #32]
}
 8003d2e:	bf00      	nop
 8003d30:	371c      	adds	r7, #28
 8003d32:	46bd      	mov	sp, r7
 8003d34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d38:	4770      	bx	lr

08003d3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003d3a:	b480      	push	{r7}
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	af00      	add	r7, sp, #0
 8003d40:	6078      	str	r0, [r7, #4]
 8003d42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	689b      	ldr	r3, [r3, #8]
 8003d48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003d50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003d52:	683a      	ldr	r2, [r7, #0]
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	4313      	orrs	r3, r2
 8003d58:	f043 0307 	orr.w	r3, r3, #7
 8003d5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	68fa      	ldr	r2, [r7, #12]
 8003d62:	609a      	str	r2, [r3, #8]
}
 8003d64:	bf00      	nop
 8003d66:	3714      	adds	r7, #20
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003d70:	b480      	push	{r7}
 8003d72:	b087      	sub	sp, #28
 8003d74:	af00      	add	r7, sp, #0
 8003d76:	60f8      	str	r0, [r7, #12]
 8003d78:	60b9      	str	r1, [r7, #8]
 8003d7a:	607a      	str	r2, [r7, #4]
 8003d7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003d7e:	68fb      	ldr	r3, [r7, #12]
 8003d80:	689b      	ldr	r3, [r3, #8]
 8003d82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d84:	697b      	ldr	r3, [r7, #20]
 8003d86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003d8c:	683b      	ldr	r3, [r7, #0]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	431a      	orrs	r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	4313      	orrs	r3, r2
 8003d98:	697a      	ldr	r2, [r7, #20]
 8003d9a:	4313      	orrs	r3, r2
 8003d9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003d9e:	68fb      	ldr	r3, [r7, #12]
 8003da0:	697a      	ldr	r2, [r7, #20]
 8003da2:	609a      	str	r2, [r3, #8]
}
 8003da4:	bf00      	nop
 8003da6:	371c      	adds	r7, #28
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr

08003db0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b087      	sub	sp, #28
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	60f8      	str	r0, [r7, #12]
 8003db8:	60b9      	str	r1, [r7, #8]
 8003dba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003dbc:	68bb      	ldr	r3, [r7, #8]
 8003dbe:	f003 031f 	and.w	r3, r3, #31
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	6a1a      	ldr	r2, [r3, #32]
 8003dce:	697b      	ldr	r3, [r7, #20]
 8003dd0:	43db      	mvns	r3, r3
 8003dd2:	401a      	ands	r2, r3
 8003dd4:	68fb      	ldr	r3, [r7, #12]
 8003dd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	6a1a      	ldr	r2, [r3, #32]
 8003ddc:	68bb      	ldr	r3, [r7, #8]
 8003dde:	f003 031f 	and.w	r3, r3, #31
 8003de2:	6879      	ldr	r1, [r7, #4]
 8003de4:	fa01 f303 	lsl.w	r3, r1, r3
 8003de8:	431a      	orrs	r2, r3
 8003dea:	68fb      	ldr	r3, [r7, #12]
 8003dec:	621a      	str	r2, [r3, #32]
}
 8003dee:	bf00      	nop
 8003df0:	371c      	adds	r7, #28
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr
	...

08003dfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003dfc:	b480      	push	{r7}
 8003dfe:	b085      	sub	sp, #20
 8003e00:	af00      	add	r7, sp, #0
 8003e02:	6078      	str	r0, [r7, #4]
 8003e04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	d101      	bne.n	8003e14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003e10:	2302      	movs	r3, #2
 8003e12:	e050      	b.n	8003eb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	685b      	ldr	r3, [r3, #4]
 8003e2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	689b      	ldr	r3, [r3, #8]
 8003e32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003e3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003e3c:	683b      	ldr	r3, [r7, #0]
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	68fa      	ldr	r2, [r7, #12]
 8003e42:	4313      	orrs	r3, r2
 8003e44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	68fa      	ldr	r2, [r7, #12]
 8003e4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	4a1c      	ldr	r2, [pc, #112]	; (8003ec4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003e54:	4293      	cmp	r3, r2
 8003e56:	d018      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e60:	d013      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	4a18      	ldr	r2, [pc, #96]	; (8003ec8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003e68:	4293      	cmp	r3, r2
 8003e6a:	d00e      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	4a16      	ldr	r2, [pc, #88]	; (8003ecc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003e72:	4293      	cmp	r3, r2
 8003e74:	d009      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	4a15      	ldr	r2, [pc, #84]	; (8003ed0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003e7c:	4293      	cmp	r3, r2
 8003e7e:	d004      	beq.n	8003e8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	4a13      	ldr	r2, [pc, #76]	; (8003ed4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003e86:	4293      	cmp	r3, r2
 8003e88:	d10c      	bne.n	8003ea4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003e8a:	68bb      	ldr	r3, [r7, #8]
 8003e8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003e90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	685b      	ldr	r3, [r3, #4]
 8003e96:	68ba      	ldr	r2, [r7, #8]
 8003e98:	4313      	orrs	r3, r2
 8003e9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	68ba      	ldr	r2, [r7, #8]
 8003ea2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2201      	movs	r2, #1
 8003ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2200      	movs	r2, #0
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003eb4:	2300      	movs	r3, #0
}
 8003eb6:	4618      	mov	r0, r3
 8003eb8:	3714      	adds	r7, #20
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ec0:	4770      	bx	lr
 8003ec2:	bf00      	nop
 8003ec4:	40010000 	.word	0x40010000
 8003ec8:	40000400 	.word	0x40000400
 8003ecc:	40000800 	.word	0x40000800
 8003ed0:	40000c00 	.word	0x40000c00
 8003ed4:	40014000 	.word	0x40014000

08003ed8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003ed8:	b480      	push	{r7}
 8003eda:	b083      	sub	sp, #12
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003ee0:	bf00      	nop
 8003ee2:	370c      	adds	r7, #12
 8003ee4:	46bd      	mov	sp, r7
 8003ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eea:	4770      	bx	lr

08003eec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003eec:	b480      	push	{r7}
 8003eee:	b083      	sub	sp, #12
 8003ef0:	af00      	add	r7, sp, #0
 8003ef2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003ef4:	bf00      	nop
 8003ef6:	370c      	adds	r7, #12
 8003ef8:	46bd      	mov	sp, r7
 8003efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efe:	4770      	bx	lr

08003f00 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003f00:	b580      	push	{r7, lr}
 8003f02:	b082      	sub	sp, #8
 8003f04:	af00      	add	r7, sp, #0
 8003f06:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d101      	bne.n	8003f12 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e042      	b.n	8003f98 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003f18:	b2db      	uxtb	r3, r3
 8003f1a:	2b00      	cmp	r3, #0
 8003f1c:	d106      	bne.n	8003f2c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	2200      	movs	r2, #0
 8003f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003f26:	6878      	ldr	r0, [r7, #4]
 8003f28:	f7fd fbdc 	bl	80016e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	2224      	movs	r2, #36	; 0x24
 8003f30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68da      	ldr	r2, [r3, #12]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003f42:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003f44:	6878      	ldr	r0, [r7, #4]
 8003f46:	f000 fcdb 	bl	8004900 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	691a      	ldr	r2, [r3, #16]
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003f58:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	681b      	ldr	r3, [r3, #0]
 8003f5e:	695a      	ldr	r2, [r3, #20]
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003f68:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	68da      	ldr	r2, [r3, #12]
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003f78:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2200      	movs	r2, #0
 8003f7e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	2220      	movs	r2, #32
 8003f84:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2200      	movs	r2, #0
 8003f94:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8003f96:	2300      	movs	r3, #0
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3708      	adds	r7, #8
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}

08003fa0 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003fa0:	b580      	push	{r7, lr}
 8003fa2:	b084      	sub	sp, #16
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	60f8      	str	r0, [r7, #12]
 8003fa8:	60b9      	str	r1, [r7, #8]
 8003faa:	4613      	mov	r3, r2
 8003fac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8003fb4:	b2db      	uxtb	r3, r3
 8003fb6:	2b20      	cmp	r3, #32
 8003fb8:	d112      	bne.n	8003fe0 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fba:	68bb      	ldr	r3, [r7, #8]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d002      	beq.n	8003fc6 <HAL_UART_Receive_IT+0x26>
 8003fc0:	88fb      	ldrh	r3, [r7, #6]
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d101      	bne.n	8003fca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8003fc6:	2301      	movs	r3, #1
 8003fc8:	e00b      	b.n	8003fe2 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8003fd0:	88fb      	ldrh	r3, [r7, #6]
 8003fd2:	461a      	mov	r2, r3
 8003fd4:	68b9      	ldr	r1, [r7, #8]
 8003fd6:	68f8      	ldr	r0, [r7, #12]
 8003fd8:	f000 faba 	bl	8004550 <UART_Start_Receive_IT>
 8003fdc:	4603      	mov	r3, r0
 8003fde:	e000      	b.n	8003fe2 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8003fe0:	2302      	movs	r3, #2
  }
}
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	3710      	adds	r7, #16
 8003fe6:	46bd      	mov	sp, r7
 8003fe8:	bd80      	pop	{r7, pc}
	...

08003fec <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8003fec:	b580      	push	{r7, lr}
 8003fee:	b0ba      	sub	sp, #232	; 0xe8
 8003ff0:	af00      	add	r7, sp, #0
 8003ff2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68db      	ldr	r3, [r3, #12]
 8004004:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	695b      	ldr	r3, [r3, #20]
 800400e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004012:	2300      	movs	r3, #0
 8004014:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004018:	2300      	movs	r3, #0
 800401a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800401e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004022:	f003 030f 	and.w	r3, r3, #15
 8004026:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800402a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800402e:	2b00      	cmp	r3, #0
 8004030:	d10f      	bne.n	8004052 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004032:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004036:	f003 0320 	and.w	r3, r3, #32
 800403a:	2b00      	cmp	r3, #0
 800403c:	d009      	beq.n	8004052 <HAL_UART_IRQHandler+0x66>
 800403e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004042:	f003 0320 	and.w	r3, r3, #32
 8004046:	2b00      	cmp	r3, #0
 8004048:	d003      	beq.n	8004052 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 fb99 	bl	8004782 <UART_Receive_IT>
      return;
 8004050:	e25b      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004052:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004056:	2b00      	cmp	r3, #0
 8004058:	f000 80de 	beq.w	8004218 <HAL_UART_IRQHandler+0x22c>
 800405c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004060:	f003 0301 	and.w	r3, r3, #1
 8004064:	2b00      	cmp	r3, #0
 8004066:	d106      	bne.n	8004076 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004068:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800406c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004070:	2b00      	cmp	r3, #0
 8004072:	f000 80d1 	beq.w	8004218 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004076:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b00      	cmp	r3, #0
 8004080:	d00b      	beq.n	800409a <HAL_UART_IRQHandler+0xae>
 8004082:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004086:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800408a:	2b00      	cmp	r3, #0
 800408c:	d005      	beq.n	800409a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004092:	f043 0201 	orr.w	r2, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800409a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800409e:	f003 0304 	and.w	r3, r3, #4
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d00b      	beq.n	80040be <HAL_UART_IRQHandler+0xd2>
 80040a6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040aa:	f003 0301 	and.w	r3, r3, #1
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d005      	beq.n	80040be <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b6:	f043 0202 	orr.w	r2, r3, #2
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80040be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040c2:	f003 0302 	and.w	r3, r3, #2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d00b      	beq.n	80040e2 <HAL_UART_IRQHandler+0xf6>
 80040ca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040ce:	f003 0301 	and.w	r3, r3, #1
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d005      	beq.n	80040e2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040da:	f043 0204 	orr.w	r2, r3, #4
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80040e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80040e6:	f003 0308 	and.w	r3, r3, #8
 80040ea:	2b00      	cmp	r3, #0
 80040ec:	d011      	beq.n	8004112 <HAL_UART_IRQHandler+0x126>
 80040ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80040f2:	f003 0320 	and.w	r3, r3, #32
 80040f6:	2b00      	cmp	r3, #0
 80040f8:	d105      	bne.n	8004106 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80040fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80040fe:	f003 0301 	and.w	r3, r3, #1
 8004102:	2b00      	cmp	r3, #0
 8004104:	d005      	beq.n	8004112 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800410a:	f043 0208 	orr.w	r2, r3, #8
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004116:	2b00      	cmp	r3, #0
 8004118:	f000 81f2 	beq.w	8004500 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800411c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004120:	f003 0320 	and.w	r3, r3, #32
 8004124:	2b00      	cmp	r3, #0
 8004126:	d008      	beq.n	800413a <HAL_UART_IRQHandler+0x14e>
 8004128:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b00      	cmp	r3, #0
 8004132:	d002      	beq.n	800413a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004134:	6878      	ldr	r0, [r7, #4]
 8004136:	f000 fb24 	bl	8004782 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	695b      	ldr	r3, [r3, #20]
 8004140:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004144:	2b40      	cmp	r3, #64	; 0x40
 8004146:	bf0c      	ite	eq
 8004148:	2301      	moveq	r3, #1
 800414a:	2300      	movne	r3, #0
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004156:	f003 0308 	and.w	r3, r3, #8
 800415a:	2b00      	cmp	r3, #0
 800415c:	d103      	bne.n	8004166 <HAL_UART_IRQHandler+0x17a>
 800415e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004162:	2b00      	cmp	r3, #0
 8004164:	d04f      	beq.n	8004206 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004166:	6878      	ldr	r0, [r7, #4]
 8004168:	f000 fa2c 	bl	80045c4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004176:	2b40      	cmp	r3, #64	; 0x40
 8004178:	d141      	bne.n	80041fe <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	3314      	adds	r3, #20
 8004180:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004184:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004188:	e853 3f00 	ldrex	r3, [r3]
 800418c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004190:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004194:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004198:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	3314      	adds	r3, #20
 80041a2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80041a6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80041aa:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80041ae:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80041b2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80041b6:	e841 2300 	strex	r3, r2, [r1]
 80041ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80041be:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80041c2:	2b00      	cmp	r3, #0
 80041c4:	d1d9      	bne.n	800417a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d013      	beq.n	80041f6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	4a7e      	ldr	r2, [pc, #504]	; (80043cc <HAL_UART_IRQHandler+0x3e0>)
 80041d4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041da:	4618      	mov	r0, r3
 80041dc:	f7fd fcec 	bl	8001bb8 <HAL_DMA_Abort_IT>
 80041e0:	4603      	mov	r3, r0
 80041e2:	2b00      	cmp	r3, #0
 80041e4:	d016      	beq.n	8004214 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80041ec:	687a      	ldr	r2, [r7, #4]
 80041ee:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80041f0:	4610      	mov	r0, r2
 80041f2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041f4:	e00e      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80041f6:	6878      	ldr	r0, [r7, #4]
 80041f8:	f000 f994 	bl	8004524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80041fc:	e00a      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80041fe:	6878      	ldr	r0, [r7, #4]
 8004200:	f000 f990 	bl	8004524 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004204:	e006      	b.n	8004214 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004206:	6878      	ldr	r0, [r7, #4]
 8004208:	f000 f98c 	bl	8004524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	2200      	movs	r2, #0
 8004210:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004212:	e175      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004214:	bf00      	nop
    return;
 8004216:	e173      	b.n	8004500 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800421c:	2b01      	cmp	r3, #1
 800421e:	f040 814f 	bne.w	80044c0 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004222:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004226:	f003 0310 	and.w	r3, r3, #16
 800422a:	2b00      	cmp	r3, #0
 800422c:	f000 8148 	beq.w	80044c0 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004230:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004234:	f003 0310 	and.w	r3, r3, #16
 8004238:	2b00      	cmp	r3, #0
 800423a:	f000 8141 	beq.w	80044c0 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800423e:	2300      	movs	r3, #0
 8004240:	60bb      	str	r3, [r7, #8]
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	60bb      	str	r3, [r7, #8]
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	60bb      	str	r3, [r7, #8]
 8004252:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	695b      	ldr	r3, [r3, #20]
 800425a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800425e:	2b40      	cmp	r3, #64	; 0x40
 8004260:	f040 80b6 	bne.w	80043d0 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685b      	ldr	r3, [r3, #4]
 800426c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004270:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8145 	beq.w	8004504 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800427e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004282:	429a      	cmp	r2, r3
 8004284:	f080 813e 	bcs.w	8004504 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800428e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	69db      	ldr	r3, [r3, #28]
 8004296:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800429a:	f000 8088 	beq.w	80043ae <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	330c      	adds	r3, #12
 80042a4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042a8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80042ac:	e853 3f00 	ldrex	r3, [r3]
 80042b0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80042b4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80042b8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80042bc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	681b      	ldr	r3, [r3, #0]
 80042c4:	330c      	adds	r3, #12
 80042c6:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80042ca:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80042ce:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042d2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80042d6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80042da:	e841 2300 	strex	r3, r2, [r1]
 80042de:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80042e2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80042e6:	2b00      	cmp	r3, #0
 80042e8:	d1d9      	bne.n	800429e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	3314      	adds	r3, #20
 80042f0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042f2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80042f4:	e853 3f00 	ldrex	r3, [r3]
 80042f8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80042fa:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80042fc:	f023 0301 	bic.w	r3, r3, #1
 8004300:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	3314      	adds	r3, #20
 800430a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800430e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004312:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004314:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004316:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800431a:	e841 2300 	strex	r3, r2, [r1]
 800431e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004320:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004322:	2b00      	cmp	r3, #0
 8004324:	d1e1      	bne.n	80042ea <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	3314      	adds	r3, #20
 800432c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800432e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004330:	e853 3f00 	ldrex	r3, [r3]
 8004334:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004336:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004338:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800433c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	3314      	adds	r3, #20
 8004346:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800434a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800434c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800434e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004350:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004352:	e841 2300 	strex	r3, r2, [r1]
 8004356:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004358:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1e3      	bne.n	8004326 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2220      	movs	r2, #32
 8004362:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	2200      	movs	r2, #0
 800436a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	330c      	adds	r3, #12
 8004372:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004374:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004376:	e853 3f00 	ldrex	r3, [r3]
 800437a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800437c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800437e:	f023 0310 	bic.w	r3, r3, #16
 8004382:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	681b      	ldr	r3, [r3, #0]
 800438a:	330c      	adds	r3, #12
 800438c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004390:	65ba      	str	r2, [r7, #88]	; 0x58
 8004392:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004394:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004396:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004398:	e841 2300 	strex	r3, r2, [r1]
 800439c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800439e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d1e3      	bne.n	800436c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80043a8:	4618      	mov	r0, r3
 80043aa:	f7fd fb95 	bl	8001ad8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	2202      	movs	r2, #2
 80043b2:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043bc:	b29b      	uxth	r3, r3
 80043be:	1ad3      	subs	r3, r2, r3
 80043c0:	b29b      	uxth	r3, r3
 80043c2:	4619      	mov	r1, r3
 80043c4:	6878      	ldr	r0, [r7, #4]
 80043c6:	f000 f8b7 	bl	8004538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80043ca:	e09b      	b.n	8004504 <HAL_UART_IRQHandler+0x518>
 80043cc:	0800468b 	.word	0x0800468b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043d8:	b29b      	uxth	r3, r3
 80043da:	1ad3      	subs	r3, r2, r3
 80043dc:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80043e4:	b29b      	uxth	r3, r3
 80043e6:	2b00      	cmp	r3, #0
 80043e8:	f000 808e 	beq.w	8004508 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 80043ec:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	f000 8089 	beq.w	8004508 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	330c      	adds	r3, #12
 80043fc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80043fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004400:	e853 3f00 	ldrex	r3, [r3]
 8004404:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004406:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004408:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800440c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	330c      	adds	r3, #12
 8004416:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800441a:	647a      	str	r2, [r7, #68]	; 0x44
 800441c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800441e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004420:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004422:	e841 2300 	strex	r3, r2, [r1]
 8004426:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004428:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800442a:	2b00      	cmp	r3, #0
 800442c:	d1e3      	bne.n	80043f6 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	3314      	adds	r3, #20
 8004434:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004436:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004438:	e853 3f00 	ldrex	r3, [r3]
 800443c:	623b      	str	r3, [r7, #32]
   return(result);
 800443e:	6a3b      	ldr	r3, [r7, #32]
 8004440:	f023 0301 	bic.w	r3, r3, #1
 8004444:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	681b      	ldr	r3, [r3, #0]
 800444c:	3314      	adds	r3, #20
 800444e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004452:	633a      	str	r2, [r7, #48]	; 0x30
 8004454:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004456:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004458:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800445a:	e841 2300 	strex	r3, r2, [r1]
 800445e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004460:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004462:	2b00      	cmp	r3, #0
 8004464:	d1e3      	bne.n	800442e <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	2220      	movs	r2, #32
 800446a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	330c      	adds	r3, #12
 800447a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800447c:	693b      	ldr	r3, [r7, #16]
 800447e:	e853 3f00 	ldrex	r3, [r3]
 8004482:	60fb      	str	r3, [r7, #12]
   return(result);
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	f023 0310 	bic.w	r3, r3, #16
 800448a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	330c      	adds	r3, #12
 8004494:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004498:	61fa      	str	r2, [r7, #28]
 800449a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800449c:	69b9      	ldr	r1, [r7, #24]
 800449e:	69fa      	ldr	r2, [r7, #28]
 80044a0:	e841 2300 	strex	r3, r2, [r1]
 80044a4:	617b      	str	r3, [r7, #20]
   return(result);
 80044a6:	697b      	ldr	r3, [r7, #20]
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d1e3      	bne.n	8004474 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	2202      	movs	r2, #2
 80044b0:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80044b2:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80044b6:	4619      	mov	r1, r3
 80044b8:	6878      	ldr	r0, [r7, #4]
 80044ba:	f000 f83d 	bl	8004538 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80044be:	e023      	b.n	8004508 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80044c0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044c4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044c8:	2b00      	cmp	r3, #0
 80044ca:	d009      	beq.n	80044e0 <HAL_UART_IRQHandler+0x4f4>
 80044cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	d003      	beq.n	80044e0 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80044d8:	6878      	ldr	r0, [r7, #4]
 80044da:	f000 f8ea 	bl	80046b2 <UART_Transmit_IT>
    return;
 80044de:	e014      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80044e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80044e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d00e      	beq.n	800450a <HAL_UART_IRQHandler+0x51e>
 80044ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80044f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80044f4:	2b00      	cmp	r3, #0
 80044f6:	d008      	beq.n	800450a <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 80044f8:	6878      	ldr	r0, [r7, #4]
 80044fa:	f000 f92a 	bl	8004752 <UART_EndTransmit_IT>
    return;
 80044fe:	e004      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
    return;
 8004500:	bf00      	nop
 8004502:	e002      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
      return;
 8004504:	bf00      	nop
 8004506:	e000      	b.n	800450a <HAL_UART_IRQHandler+0x51e>
      return;
 8004508:	bf00      	nop
  }
}
 800450a:	37e8      	adds	r7, #232	; 0xe8
 800450c:	46bd      	mov	sp, r7
 800450e:	bd80      	pop	{r7, pc}

08004510 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004510:	b480      	push	{r7}
 8004512:	b083      	sub	sp, #12
 8004514:	af00      	add	r7, sp, #0
 8004516:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004518:	bf00      	nop
 800451a:	370c      	adds	r7, #12
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr

08004524 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800452c:	bf00      	nop
 800452e:	370c      	adds	r7, #12
 8004530:	46bd      	mov	sp, r7
 8004532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004536:	4770      	bx	lr

08004538 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004538:	b480      	push	{r7}
 800453a:	b083      	sub	sp, #12
 800453c:	af00      	add	r7, sp, #0
 800453e:	6078      	str	r0, [r7, #4]
 8004540:	460b      	mov	r3, r1
 8004542:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004544:	bf00      	nop
 8004546:	370c      	adds	r7, #12
 8004548:	46bd      	mov	sp, r7
 800454a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454e:	4770      	bx	lr

08004550 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004550:	b480      	push	{r7}
 8004552:	b085      	sub	sp, #20
 8004554:	af00      	add	r7, sp, #0
 8004556:	60f8      	str	r0, [r7, #12]
 8004558:	60b9      	str	r1, [r7, #8]
 800455a:	4613      	mov	r3, r2
 800455c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	68ba      	ldr	r2, [r7, #8]
 8004562:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004564:	68fb      	ldr	r3, [r7, #12]
 8004566:	88fa      	ldrh	r2, [r7, #6]
 8004568:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	88fa      	ldrh	r2, [r7, #6]
 800456e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	2200      	movs	r2, #0
 8004574:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	2222      	movs	r2, #34	; 0x22
 800457a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	691b      	ldr	r3, [r3, #16]
 8004582:	2b00      	cmp	r3, #0
 8004584:	d007      	beq.n	8004596 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	68da      	ldr	r2, [r3, #12]
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004594:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	695a      	ldr	r2, [r3, #20]
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	f042 0201 	orr.w	r2, r2, #1
 80045a4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80045a6:	68fb      	ldr	r3, [r7, #12]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	68da      	ldr	r2, [r3, #12]
 80045ac:	68fb      	ldr	r3, [r7, #12]
 80045ae:	681b      	ldr	r3, [r3, #0]
 80045b0:	f042 0220 	orr.w	r2, r2, #32
 80045b4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80045b6:	2300      	movs	r3, #0
}
 80045b8:	4618      	mov	r0, r3
 80045ba:	3714      	adds	r7, #20
 80045bc:	46bd      	mov	sp, r7
 80045be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c2:	4770      	bx	lr

080045c4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80045c4:	b480      	push	{r7}
 80045c6:	b095      	sub	sp, #84	; 0x54
 80045c8:	af00      	add	r7, sp, #0
 80045ca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	681b      	ldr	r3, [r3, #0]
 80045d0:	330c      	adds	r3, #12
 80045d2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80045d6:	e853 3f00 	ldrex	r3, [r3]
 80045da:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80045dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80045de:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80045e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	330c      	adds	r3, #12
 80045ea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80045ec:	643a      	str	r2, [r7, #64]	; 0x40
 80045ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045f0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80045f2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80045f4:	e841 2300 	strex	r3, r2, [r1]
 80045f8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d1e5      	bne.n	80045cc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	3314      	adds	r3, #20
 8004606:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	6a3b      	ldr	r3, [r7, #32]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	61fb      	str	r3, [r7, #28]
   return(result);
 8004610:	69fb      	ldr	r3, [r7, #28]
 8004612:	f023 0301 	bic.w	r3, r3, #1
 8004616:	64bb      	str	r3, [r7, #72]	; 0x48
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	3314      	adds	r3, #20
 800461e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004620:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004622:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004626:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800462e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004638:	2b01      	cmp	r3, #1
 800463a:	d119      	bne.n	8004670 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	330c      	adds	r3, #12
 8004642:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	e853 3f00 	ldrex	r3, [r3]
 800464a:	60bb      	str	r3, [r7, #8]
   return(result);
 800464c:	68bb      	ldr	r3, [r7, #8]
 800464e:	f023 0310 	bic.w	r3, r3, #16
 8004652:	647b      	str	r3, [r7, #68]	; 0x44
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	330c      	adds	r3, #12
 800465a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800465c:	61ba      	str	r2, [r7, #24]
 800465e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004660:	6979      	ldr	r1, [r7, #20]
 8004662:	69ba      	ldr	r2, [r7, #24]
 8004664:	e841 2300 	strex	r3, r2, [r1]
 8004668:	613b      	str	r3, [r7, #16]
   return(result);
 800466a:	693b      	ldr	r3, [r7, #16]
 800466c:	2b00      	cmp	r3, #0
 800466e:	d1e5      	bne.n	800463c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	2220      	movs	r2, #32
 8004674:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2200      	movs	r2, #0
 800467c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800467e:	bf00      	nop
 8004680:	3754      	adds	r7, #84	; 0x54
 8004682:	46bd      	mov	sp, r7
 8004684:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004688:	4770      	bx	lr

0800468a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800468a:	b580      	push	{r7, lr}
 800468c:	b084      	sub	sp, #16
 800468e:	af00      	add	r7, sp, #0
 8004690:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004696:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	2200      	movs	r2, #0
 800469c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	2200      	movs	r2, #0
 80046a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80046a4:	68f8      	ldr	r0, [r7, #12]
 80046a6:	f7ff ff3d 	bl	8004524 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80046aa:	bf00      	nop
 80046ac:	3710      	adds	r7, #16
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}

080046b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80046b2:	b480      	push	{r7}
 80046b4:	b085      	sub	sp, #20
 80046b6:	af00      	add	r7, sp, #0
 80046b8:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80046c0:	b2db      	uxtb	r3, r3
 80046c2:	2b21      	cmp	r3, #33	; 0x21
 80046c4:	d13e      	bne.n	8004744 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	689b      	ldr	r3, [r3, #8]
 80046ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80046ce:	d114      	bne.n	80046fa <UART_Transmit_IT+0x48>
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	691b      	ldr	r3, [r3, #16]
 80046d4:	2b00      	cmp	r3, #0
 80046d6:	d110      	bne.n	80046fa <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	6a1b      	ldr	r3, [r3, #32]
 80046dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	461a      	mov	r2, r3
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80046ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	6a1b      	ldr	r3, [r3, #32]
 80046f2:	1c9a      	adds	r2, r3, #2
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	621a      	str	r2, [r3, #32]
 80046f8:	e008      	b.n	800470c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80046fa:	687b      	ldr	r3, [r7, #4]
 80046fc:	6a1b      	ldr	r3, [r3, #32]
 80046fe:	1c59      	adds	r1, r3, #1
 8004700:	687a      	ldr	r2, [r7, #4]
 8004702:	6211      	str	r1, [r2, #32]
 8004704:	781a      	ldrb	r2, [r3, #0]
 8004706:	687b      	ldr	r3, [r7, #4]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004710:	b29b      	uxth	r3, r3
 8004712:	3b01      	subs	r3, #1
 8004714:	b29b      	uxth	r3, r3
 8004716:	687a      	ldr	r2, [r7, #4]
 8004718:	4619      	mov	r1, r3
 800471a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800471c:	2b00      	cmp	r3, #0
 800471e:	d10f      	bne.n	8004740 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	68da      	ldr	r2, [r3, #12]
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800472e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	68da      	ldr	r2, [r3, #12]
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800473e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004740:	2300      	movs	r3, #0
 8004742:	e000      	b.n	8004746 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004744:	2302      	movs	r3, #2
  }
}
 8004746:	4618      	mov	r0, r3
 8004748:	3714      	adds	r7, #20
 800474a:	46bd      	mov	sp, r7
 800474c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004750:	4770      	bx	lr

08004752 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004752:	b580      	push	{r7, lr}
 8004754:	b082      	sub	sp, #8
 8004756:	af00      	add	r7, sp, #0
 8004758:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	681b      	ldr	r3, [r3, #0]
 800475e:	68da      	ldr	r2, [r3, #12]
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004768:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	2220      	movs	r2, #32
 800476e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004772:	6878      	ldr	r0, [r7, #4]
 8004774:	f7ff fecc 	bl	8004510 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004778:	2300      	movs	r3, #0
}
 800477a:	4618      	mov	r0, r3
 800477c:	3708      	adds	r7, #8
 800477e:	46bd      	mov	sp, r7
 8004780:	bd80      	pop	{r7, pc}

08004782 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004782:	b580      	push	{r7, lr}
 8004784:	b08c      	sub	sp, #48	; 0x30
 8004786:	af00      	add	r7, sp, #0
 8004788:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b22      	cmp	r3, #34	; 0x22
 8004794:	f040 80ae 	bne.w	80048f4 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	689b      	ldr	r3, [r3, #8]
 800479c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047a0:	d117      	bne.n	80047d2 <UART_Receive_IT+0x50>
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	691b      	ldr	r3, [r3, #16]
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d113      	bne.n	80047d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80047aa:	2300      	movs	r3, #0
 80047ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80047c0:	b29a      	uxth	r2, r3
 80047c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047ca:	1c9a      	adds	r2, r3, #2
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	629a      	str	r2, [r3, #40]	; 0x28
 80047d0:	e026      	b.n	8004820 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80047d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80047d8:	2300      	movs	r3, #0
 80047da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	689b      	ldr	r3, [r3, #8]
 80047e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80047e4:	d007      	beq.n	80047f6 <UART_Receive_IT+0x74>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	689b      	ldr	r3, [r3, #8]
 80047ea:	2b00      	cmp	r3, #0
 80047ec:	d10a      	bne.n	8004804 <UART_Receive_IT+0x82>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	691b      	ldr	r3, [r3, #16]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d106      	bne.n	8004804 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	685b      	ldr	r3, [r3, #4]
 80047fc:	b2da      	uxtb	r2, r3
 80047fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004800:	701a      	strb	r2, [r3, #0]
 8004802:	e008      	b.n	8004816 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	685b      	ldr	r3, [r3, #4]
 800480a:	b2db      	uxtb	r3, r3
 800480c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004810:	b2da      	uxtb	r2, r3
 8004812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004814:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800481a:	1c5a      	adds	r2, r3, #1
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004824:	b29b      	uxth	r3, r3
 8004826:	3b01      	subs	r3, #1
 8004828:	b29b      	uxth	r3, r3
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4619      	mov	r1, r3
 800482e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8004830:	2b00      	cmp	r3, #0
 8004832:	d15d      	bne.n	80048f0 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	681b      	ldr	r3, [r3, #0]
 8004838:	68da      	ldr	r2, [r3, #12]
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	f022 0220 	bic.w	r2, r2, #32
 8004842:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	681b      	ldr	r3, [r3, #0]
 8004848:	68da      	ldr	r2, [r3, #12]
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004852:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	695a      	ldr	r2, [r3, #20]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f022 0201 	bic.w	r2, r2, #1
 8004862:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	2220      	movs	r2, #32
 8004868:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2200      	movs	r2, #0
 8004870:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004872:	687b      	ldr	r3, [r7, #4]
 8004874:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004876:	2b01      	cmp	r3, #1
 8004878:	d135      	bne.n	80048e6 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	2200      	movs	r2, #0
 800487e:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	330c      	adds	r3, #12
 8004886:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004888:	697b      	ldr	r3, [r7, #20]
 800488a:	e853 3f00 	ldrex	r3, [r3]
 800488e:	613b      	str	r3, [r7, #16]
   return(result);
 8004890:	693b      	ldr	r3, [r7, #16]
 8004892:	f023 0310 	bic.w	r3, r3, #16
 8004896:	627b      	str	r3, [r7, #36]	; 0x24
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	330c      	adds	r3, #12
 800489e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80048a0:	623a      	str	r2, [r7, #32]
 80048a2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80048a4:	69f9      	ldr	r1, [r7, #28]
 80048a6:	6a3a      	ldr	r2, [r7, #32]
 80048a8:	e841 2300 	strex	r3, r2, [r1]
 80048ac:	61bb      	str	r3, [r7, #24]
   return(result);
 80048ae:	69bb      	ldr	r3, [r7, #24]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d1e5      	bne.n	8004880 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	681b      	ldr	r3, [r3, #0]
 80048ba:	f003 0310 	and.w	r3, r3, #16
 80048be:	2b10      	cmp	r3, #16
 80048c0:	d10a      	bne.n	80048d8 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80048c2:	2300      	movs	r3, #0
 80048c4:	60fb      	str	r3, [r7, #12]
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	681b      	ldr	r3, [r3, #0]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	60fb      	str	r3, [r7, #12]
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	685b      	ldr	r3, [r3, #4]
 80048d4:	60fb      	str	r3, [r7, #12]
 80048d6:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80048dc:	4619      	mov	r1, r3
 80048de:	6878      	ldr	r0, [r7, #4]
 80048e0:	f7ff fe2a 	bl	8004538 <HAL_UARTEx_RxEventCallback>
 80048e4:	e002      	b.n	80048ec <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80048e6:	6878      	ldr	r0, [r7, #4]
 80048e8:	f7fc fa0a 	bl	8000d00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80048ec:	2300      	movs	r3, #0
 80048ee:	e002      	b.n	80048f6 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80048f0:	2300      	movs	r3, #0
 80048f2:	e000      	b.n	80048f6 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80048f4:	2302      	movs	r3, #2
  }
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3730      	adds	r7, #48	; 0x30
 80048fa:	46bd      	mov	sp, r7
 80048fc:	bd80      	pop	{r7, pc}
	...

08004900 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004900:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004904:	b0c0      	sub	sp, #256	; 0x100
 8004906:	af00      	add	r7, sp, #0
 8004908:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800490c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	691b      	ldr	r3, [r3, #16]
 8004914:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004918:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800491c:	68d9      	ldr	r1, [r3, #12]
 800491e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004922:	681a      	ldr	r2, [r3, #0]
 8004924:	ea40 0301 	orr.w	r3, r0, r1
 8004928:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800492a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800492e:	689a      	ldr	r2, [r3, #8]
 8004930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004934:	691b      	ldr	r3, [r3, #16]
 8004936:	431a      	orrs	r2, r3
 8004938:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800493c:	695b      	ldr	r3, [r3, #20]
 800493e:	431a      	orrs	r2, r3
 8004940:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004944:	69db      	ldr	r3, [r3, #28]
 8004946:	4313      	orrs	r3, r2
 8004948:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800494c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	68db      	ldr	r3, [r3, #12]
 8004954:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004958:	f021 010c 	bic.w	r1, r1, #12
 800495c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004960:	681a      	ldr	r2, [r3, #0]
 8004962:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004966:	430b      	orrs	r3, r1
 8004968:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800496a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800496e:	681b      	ldr	r3, [r3, #0]
 8004970:	695b      	ldr	r3, [r3, #20]
 8004972:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497a:	6999      	ldr	r1, [r3, #24]
 800497c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004980:	681a      	ldr	r2, [r3, #0]
 8004982:	ea40 0301 	orr.w	r3, r0, r1
 8004986:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004988:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800498c:	681a      	ldr	r2, [r3, #0]
 800498e:	4b8f      	ldr	r3, [pc, #572]	; (8004bcc <UART_SetConfig+0x2cc>)
 8004990:	429a      	cmp	r2, r3
 8004992:	d005      	beq.n	80049a0 <UART_SetConfig+0xa0>
 8004994:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004998:	681a      	ldr	r2, [r3, #0]
 800499a:	4b8d      	ldr	r3, [pc, #564]	; (8004bd0 <UART_SetConfig+0x2d0>)
 800499c:	429a      	cmp	r2, r3
 800499e:	d104      	bne.n	80049aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049a0:	f7fd ff4e 	bl	8002840 <HAL_RCC_GetPCLK2Freq>
 80049a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80049a8:	e003      	b.n	80049b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80049aa:	f7fd ff35 	bl	8002818 <HAL_RCC_GetPCLK1Freq>
 80049ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80049b6:	69db      	ldr	r3, [r3, #28]
 80049b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049bc:	f040 810c 	bne.w	8004bd8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049c4:	2200      	movs	r2, #0
 80049c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80049ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80049ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80049d2:	4622      	mov	r2, r4
 80049d4:	462b      	mov	r3, r5
 80049d6:	1891      	adds	r1, r2, r2
 80049d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80049da:	415b      	adcs	r3, r3
 80049dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80049de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80049e2:	4621      	mov	r1, r4
 80049e4:	eb12 0801 	adds.w	r8, r2, r1
 80049e8:	4629      	mov	r1, r5
 80049ea:	eb43 0901 	adc.w	r9, r3, r1
 80049ee:	f04f 0200 	mov.w	r2, #0
 80049f2:	f04f 0300 	mov.w	r3, #0
 80049f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80049fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80049fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004a02:	4690      	mov	r8, r2
 8004a04:	4699      	mov	r9, r3
 8004a06:	4623      	mov	r3, r4
 8004a08:	eb18 0303 	adds.w	r3, r8, r3
 8004a0c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004a10:	462b      	mov	r3, r5
 8004a12:	eb49 0303 	adc.w	r3, r9, r3
 8004a16:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004a1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1e:	685b      	ldr	r3, [r3, #4]
 8004a20:	2200      	movs	r2, #0
 8004a22:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004a26:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004a2a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004a2e:	460b      	mov	r3, r1
 8004a30:	18db      	adds	r3, r3, r3
 8004a32:	653b      	str	r3, [r7, #80]	; 0x50
 8004a34:	4613      	mov	r3, r2
 8004a36:	eb42 0303 	adc.w	r3, r2, r3
 8004a3a:	657b      	str	r3, [r7, #84]	; 0x54
 8004a3c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004a40:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004a44:	f7fb fbcc 	bl	80001e0 <__aeabi_uldivmod>
 8004a48:	4602      	mov	r2, r0
 8004a4a:	460b      	mov	r3, r1
 8004a4c:	4b61      	ldr	r3, [pc, #388]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004a4e:	fba3 2302 	umull	r2, r3, r3, r2
 8004a52:	095b      	lsrs	r3, r3, #5
 8004a54:	011c      	lsls	r4, r3, #4
 8004a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a5a:	2200      	movs	r2, #0
 8004a5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a60:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004a64:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004a68:	4642      	mov	r2, r8
 8004a6a:	464b      	mov	r3, r9
 8004a6c:	1891      	adds	r1, r2, r2
 8004a6e:	64b9      	str	r1, [r7, #72]	; 0x48
 8004a70:	415b      	adcs	r3, r3
 8004a72:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004a74:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004a78:	4641      	mov	r1, r8
 8004a7a:	eb12 0a01 	adds.w	sl, r2, r1
 8004a7e:	4649      	mov	r1, r9
 8004a80:	eb43 0b01 	adc.w	fp, r3, r1
 8004a84:	f04f 0200 	mov.w	r2, #0
 8004a88:	f04f 0300 	mov.w	r3, #0
 8004a8c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004a90:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004a94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004a98:	4692      	mov	sl, r2
 8004a9a:	469b      	mov	fp, r3
 8004a9c:	4643      	mov	r3, r8
 8004a9e:	eb1a 0303 	adds.w	r3, sl, r3
 8004aa2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004aa6:	464b      	mov	r3, r9
 8004aa8:	eb4b 0303 	adc.w	r3, fp, r3
 8004aac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004ab0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ab4:	685b      	ldr	r3, [r3, #4]
 8004ab6:	2200      	movs	r2, #0
 8004ab8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004abc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004ac0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004ac4:	460b      	mov	r3, r1
 8004ac6:	18db      	adds	r3, r3, r3
 8004ac8:	643b      	str	r3, [r7, #64]	; 0x40
 8004aca:	4613      	mov	r3, r2
 8004acc:	eb42 0303 	adc.w	r3, r2, r3
 8004ad0:	647b      	str	r3, [r7, #68]	; 0x44
 8004ad2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004ad6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004ada:	f7fb fb81 	bl	80001e0 <__aeabi_uldivmod>
 8004ade:	4602      	mov	r2, r0
 8004ae0:	460b      	mov	r3, r1
 8004ae2:	4611      	mov	r1, r2
 8004ae4:	4b3b      	ldr	r3, [pc, #236]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004ae6:	fba3 2301 	umull	r2, r3, r3, r1
 8004aea:	095b      	lsrs	r3, r3, #5
 8004aec:	2264      	movs	r2, #100	; 0x64
 8004aee:	fb02 f303 	mul.w	r3, r2, r3
 8004af2:	1acb      	subs	r3, r1, r3
 8004af4:	00db      	lsls	r3, r3, #3
 8004af6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004afa:	4b36      	ldr	r3, [pc, #216]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004afc:	fba3 2302 	umull	r2, r3, r3, r2
 8004b00:	095b      	lsrs	r3, r3, #5
 8004b02:	005b      	lsls	r3, r3, #1
 8004b04:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004b08:	441c      	add	r4, r3
 8004b0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004b0e:	2200      	movs	r2, #0
 8004b10:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b14:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004b18:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004b1c:	4642      	mov	r2, r8
 8004b1e:	464b      	mov	r3, r9
 8004b20:	1891      	adds	r1, r2, r2
 8004b22:	63b9      	str	r1, [r7, #56]	; 0x38
 8004b24:	415b      	adcs	r3, r3
 8004b26:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004b28:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004b2c:	4641      	mov	r1, r8
 8004b2e:	1851      	adds	r1, r2, r1
 8004b30:	6339      	str	r1, [r7, #48]	; 0x30
 8004b32:	4649      	mov	r1, r9
 8004b34:	414b      	adcs	r3, r1
 8004b36:	637b      	str	r3, [r7, #52]	; 0x34
 8004b38:	f04f 0200 	mov.w	r2, #0
 8004b3c:	f04f 0300 	mov.w	r3, #0
 8004b40:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004b44:	4659      	mov	r1, fp
 8004b46:	00cb      	lsls	r3, r1, #3
 8004b48:	4651      	mov	r1, sl
 8004b4a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004b4e:	4651      	mov	r1, sl
 8004b50:	00ca      	lsls	r2, r1, #3
 8004b52:	4610      	mov	r0, r2
 8004b54:	4619      	mov	r1, r3
 8004b56:	4603      	mov	r3, r0
 8004b58:	4642      	mov	r2, r8
 8004b5a:	189b      	adds	r3, r3, r2
 8004b5c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004b60:	464b      	mov	r3, r9
 8004b62:	460a      	mov	r2, r1
 8004b64:	eb42 0303 	adc.w	r3, r2, r3
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b70:	685b      	ldr	r3, [r3, #4]
 8004b72:	2200      	movs	r2, #0
 8004b74:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004b78:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004b7c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004b80:	460b      	mov	r3, r1
 8004b82:	18db      	adds	r3, r3, r3
 8004b84:	62bb      	str	r3, [r7, #40]	; 0x28
 8004b86:	4613      	mov	r3, r2
 8004b88:	eb42 0303 	adc.w	r3, r2, r3
 8004b8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004b8e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004b92:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004b96:	f7fb fb23 	bl	80001e0 <__aeabi_uldivmod>
 8004b9a:	4602      	mov	r2, r0
 8004b9c:	460b      	mov	r3, r1
 8004b9e:	4b0d      	ldr	r3, [pc, #52]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004ba0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ba4:	095b      	lsrs	r3, r3, #5
 8004ba6:	2164      	movs	r1, #100	; 0x64
 8004ba8:	fb01 f303 	mul.w	r3, r1, r3
 8004bac:	1ad3      	subs	r3, r2, r3
 8004bae:	00db      	lsls	r3, r3, #3
 8004bb0:	3332      	adds	r3, #50	; 0x32
 8004bb2:	4a08      	ldr	r2, [pc, #32]	; (8004bd4 <UART_SetConfig+0x2d4>)
 8004bb4:	fba2 2303 	umull	r2, r3, r2, r3
 8004bb8:	095b      	lsrs	r3, r3, #5
 8004bba:	f003 0207 	and.w	r2, r3, #7
 8004bbe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc2:	681b      	ldr	r3, [r3, #0]
 8004bc4:	4422      	add	r2, r4
 8004bc6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004bc8:	e106      	b.n	8004dd8 <UART_SetConfig+0x4d8>
 8004bca:	bf00      	nop
 8004bcc:	40011000 	.word	0x40011000
 8004bd0:	40011400 	.word	0x40011400
 8004bd4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004bd8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004bdc:	2200      	movs	r2, #0
 8004bde:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004be2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004be6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004bea:	4642      	mov	r2, r8
 8004bec:	464b      	mov	r3, r9
 8004bee:	1891      	adds	r1, r2, r2
 8004bf0:	6239      	str	r1, [r7, #32]
 8004bf2:	415b      	adcs	r3, r3
 8004bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8004bf6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004bfa:	4641      	mov	r1, r8
 8004bfc:	1854      	adds	r4, r2, r1
 8004bfe:	4649      	mov	r1, r9
 8004c00:	eb43 0501 	adc.w	r5, r3, r1
 8004c04:	f04f 0200 	mov.w	r2, #0
 8004c08:	f04f 0300 	mov.w	r3, #0
 8004c0c:	00eb      	lsls	r3, r5, #3
 8004c0e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004c12:	00e2      	lsls	r2, r4, #3
 8004c14:	4614      	mov	r4, r2
 8004c16:	461d      	mov	r5, r3
 8004c18:	4643      	mov	r3, r8
 8004c1a:	18e3      	adds	r3, r4, r3
 8004c1c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004c20:	464b      	mov	r3, r9
 8004c22:	eb45 0303 	adc.w	r3, r5, r3
 8004c26:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004c2a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c2e:	685b      	ldr	r3, [r3, #4]
 8004c30:	2200      	movs	r2, #0
 8004c32:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004c36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004c3a:	f04f 0200 	mov.w	r2, #0
 8004c3e:	f04f 0300 	mov.w	r3, #0
 8004c42:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004c46:	4629      	mov	r1, r5
 8004c48:	008b      	lsls	r3, r1, #2
 8004c4a:	4621      	mov	r1, r4
 8004c4c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004c50:	4621      	mov	r1, r4
 8004c52:	008a      	lsls	r2, r1, #2
 8004c54:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004c58:	f7fb fac2 	bl	80001e0 <__aeabi_uldivmod>
 8004c5c:	4602      	mov	r2, r0
 8004c5e:	460b      	mov	r3, r1
 8004c60:	4b60      	ldr	r3, [pc, #384]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004c62:	fba3 2302 	umull	r2, r3, r3, r2
 8004c66:	095b      	lsrs	r3, r3, #5
 8004c68:	011c      	lsls	r4, r3, #4
 8004c6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c6e:	2200      	movs	r2, #0
 8004c70:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004c74:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004c78:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004c7c:	4642      	mov	r2, r8
 8004c7e:	464b      	mov	r3, r9
 8004c80:	1891      	adds	r1, r2, r2
 8004c82:	61b9      	str	r1, [r7, #24]
 8004c84:	415b      	adcs	r3, r3
 8004c86:	61fb      	str	r3, [r7, #28]
 8004c88:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004c8c:	4641      	mov	r1, r8
 8004c8e:	1851      	adds	r1, r2, r1
 8004c90:	6139      	str	r1, [r7, #16]
 8004c92:	4649      	mov	r1, r9
 8004c94:	414b      	adcs	r3, r1
 8004c96:	617b      	str	r3, [r7, #20]
 8004c98:	f04f 0200 	mov.w	r2, #0
 8004c9c:	f04f 0300 	mov.w	r3, #0
 8004ca0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004ca4:	4659      	mov	r1, fp
 8004ca6:	00cb      	lsls	r3, r1, #3
 8004ca8:	4651      	mov	r1, sl
 8004caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004cae:	4651      	mov	r1, sl
 8004cb0:	00ca      	lsls	r2, r1, #3
 8004cb2:	4610      	mov	r0, r2
 8004cb4:	4619      	mov	r1, r3
 8004cb6:	4603      	mov	r3, r0
 8004cb8:	4642      	mov	r2, r8
 8004cba:	189b      	adds	r3, r3, r2
 8004cbc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004cc0:	464b      	mov	r3, r9
 8004cc2:	460a      	mov	r2, r1
 8004cc4:	eb42 0303 	adc.w	r3, r2, r3
 8004cc8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004ccc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004cd0:	685b      	ldr	r3, [r3, #4]
 8004cd2:	2200      	movs	r2, #0
 8004cd4:	67bb      	str	r3, [r7, #120]	; 0x78
 8004cd6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004cd8:	f04f 0200 	mov.w	r2, #0
 8004cdc:	f04f 0300 	mov.w	r3, #0
 8004ce0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004ce4:	4649      	mov	r1, r9
 8004ce6:	008b      	lsls	r3, r1, #2
 8004ce8:	4641      	mov	r1, r8
 8004cea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004cee:	4641      	mov	r1, r8
 8004cf0:	008a      	lsls	r2, r1, #2
 8004cf2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004cf6:	f7fb fa73 	bl	80001e0 <__aeabi_uldivmod>
 8004cfa:	4602      	mov	r2, r0
 8004cfc:	460b      	mov	r3, r1
 8004cfe:	4611      	mov	r1, r2
 8004d00:	4b38      	ldr	r3, [pc, #224]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004d02:	fba3 2301 	umull	r2, r3, r3, r1
 8004d06:	095b      	lsrs	r3, r3, #5
 8004d08:	2264      	movs	r2, #100	; 0x64
 8004d0a:	fb02 f303 	mul.w	r3, r2, r3
 8004d0e:	1acb      	subs	r3, r1, r3
 8004d10:	011b      	lsls	r3, r3, #4
 8004d12:	3332      	adds	r3, #50	; 0x32
 8004d14:	4a33      	ldr	r2, [pc, #204]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004d16:	fba2 2303 	umull	r2, r3, r2, r3
 8004d1a:	095b      	lsrs	r3, r3, #5
 8004d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004d20:	441c      	add	r4, r3
 8004d22:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d26:	2200      	movs	r2, #0
 8004d28:	673b      	str	r3, [r7, #112]	; 0x70
 8004d2a:	677a      	str	r2, [r7, #116]	; 0x74
 8004d2c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004d30:	4642      	mov	r2, r8
 8004d32:	464b      	mov	r3, r9
 8004d34:	1891      	adds	r1, r2, r2
 8004d36:	60b9      	str	r1, [r7, #8]
 8004d38:	415b      	adcs	r3, r3
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004d40:	4641      	mov	r1, r8
 8004d42:	1851      	adds	r1, r2, r1
 8004d44:	6039      	str	r1, [r7, #0]
 8004d46:	4649      	mov	r1, r9
 8004d48:	414b      	adcs	r3, r1
 8004d4a:	607b      	str	r3, [r7, #4]
 8004d4c:	f04f 0200 	mov.w	r2, #0
 8004d50:	f04f 0300 	mov.w	r3, #0
 8004d54:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004d58:	4659      	mov	r1, fp
 8004d5a:	00cb      	lsls	r3, r1, #3
 8004d5c:	4651      	mov	r1, sl
 8004d5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004d62:	4651      	mov	r1, sl
 8004d64:	00ca      	lsls	r2, r1, #3
 8004d66:	4610      	mov	r0, r2
 8004d68:	4619      	mov	r1, r3
 8004d6a:	4603      	mov	r3, r0
 8004d6c:	4642      	mov	r2, r8
 8004d6e:	189b      	adds	r3, r3, r2
 8004d70:	66bb      	str	r3, [r7, #104]	; 0x68
 8004d72:	464b      	mov	r3, r9
 8004d74:	460a      	mov	r2, r1
 8004d76:	eb42 0303 	adc.w	r3, r2, r3
 8004d7a:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004d7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d80:	685b      	ldr	r3, [r3, #4]
 8004d82:	2200      	movs	r2, #0
 8004d84:	663b      	str	r3, [r7, #96]	; 0x60
 8004d86:	667a      	str	r2, [r7, #100]	; 0x64
 8004d88:	f04f 0200 	mov.w	r2, #0
 8004d8c:	f04f 0300 	mov.w	r3, #0
 8004d90:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004d94:	4649      	mov	r1, r9
 8004d96:	008b      	lsls	r3, r1, #2
 8004d98:	4641      	mov	r1, r8
 8004d9a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004d9e:	4641      	mov	r1, r8
 8004da0:	008a      	lsls	r2, r1, #2
 8004da2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004da6:	f7fb fa1b 	bl	80001e0 <__aeabi_uldivmod>
 8004daa:	4602      	mov	r2, r0
 8004dac:	460b      	mov	r3, r1
 8004dae:	4b0d      	ldr	r3, [pc, #52]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004db0:	fba3 1302 	umull	r1, r3, r3, r2
 8004db4:	095b      	lsrs	r3, r3, #5
 8004db6:	2164      	movs	r1, #100	; 0x64
 8004db8:	fb01 f303 	mul.w	r3, r1, r3
 8004dbc:	1ad3      	subs	r3, r2, r3
 8004dbe:	011b      	lsls	r3, r3, #4
 8004dc0:	3332      	adds	r3, #50	; 0x32
 8004dc2:	4a08      	ldr	r2, [pc, #32]	; (8004de4 <UART_SetConfig+0x4e4>)
 8004dc4:	fba2 2303 	umull	r2, r3, r2, r3
 8004dc8:	095b      	lsrs	r3, r3, #5
 8004dca:	f003 020f 	and.w	r2, r3, #15
 8004dce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd2:	681b      	ldr	r3, [r3, #0]
 8004dd4:	4422      	add	r2, r4
 8004dd6:	609a      	str	r2, [r3, #8]
}
 8004dd8:	bf00      	nop
 8004dda:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004dde:	46bd      	mov	sp, r7
 8004de0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004de4:	51eb851f 	.word	0x51eb851f

08004de8 <__NVIC_SetPriority>:
{
 8004de8:	b480      	push	{r7}
 8004dea:	b083      	sub	sp, #12
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	4603      	mov	r3, r0
 8004df0:	6039      	str	r1, [r7, #0]
 8004df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	db0a      	blt.n	8004e12 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004dfc:	683b      	ldr	r3, [r7, #0]
 8004dfe:	b2da      	uxtb	r2, r3
 8004e00:	490c      	ldr	r1, [pc, #48]	; (8004e34 <__NVIC_SetPriority+0x4c>)
 8004e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004e06:	0112      	lsls	r2, r2, #4
 8004e08:	b2d2      	uxtb	r2, r2
 8004e0a:	440b      	add	r3, r1
 8004e0c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8004e10:	e00a      	b.n	8004e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004e12:	683b      	ldr	r3, [r7, #0]
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4908      	ldr	r1, [pc, #32]	; (8004e38 <__NVIC_SetPriority+0x50>)
 8004e18:	79fb      	ldrb	r3, [r7, #7]
 8004e1a:	f003 030f 	and.w	r3, r3, #15
 8004e1e:	3b04      	subs	r3, #4
 8004e20:	0112      	lsls	r2, r2, #4
 8004e22:	b2d2      	uxtb	r2, r2
 8004e24:	440b      	add	r3, r1
 8004e26:	761a      	strb	r2, [r3, #24]
}
 8004e28:	bf00      	nop
 8004e2a:	370c      	adds	r7, #12
 8004e2c:	46bd      	mov	sp, r7
 8004e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e32:	4770      	bx	lr
 8004e34:	e000e100 	.word	0xe000e100
 8004e38:	e000ed00 	.word	0xe000ed00

08004e3c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004e3c:	b580      	push	{r7, lr}
 8004e3e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004e40:	4b05      	ldr	r3, [pc, #20]	; (8004e58 <SysTick_Handler+0x1c>)
 8004e42:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004e44:	f001 fd28 	bl	8006898 <xTaskGetSchedulerState>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d001      	beq.n	8004e52 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004e4e:	f002 fb13 	bl	8007478 <xPortSysTickHandler>
  }
}
 8004e52:	bf00      	nop
 8004e54:	bd80      	pop	{r7, pc}
 8004e56:	bf00      	nop
 8004e58:	e000e010 	.word	0xe000e010

08004e5c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004e5c:	b580      	push	{r7, lr}
 8004e5e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004e60:	2100      	movs	r1, #0
 8004e62:	f06f 0004 	mvn.w	r0, #4
 8004e66:	f7ff ffbf 	bl	8004de8 <__NVIC_SetPriority>
#endif
}
 8004e6a:	bf00      	nop
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004e70:	b480      	push	{r7}
 8004e72:	b083      	sub	sp, #12
 8004e74:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004e76:	f3ef 8305 	mrs	r3, IPSR
 8004e7a:	603b      	str	r3, [r7, #0]
  return(result);
 8004e7c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d003      	beq.n	8004e8a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004e82:	f06f 0305 	mvn.w	r3, #5
 8004e86:	607b      	str	r3, [r7, #4]
 8004e88:	e00c      	b.n	8004ea4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004e8a:	4b0a      	ldr	r3, [pc, #40]	; (8004eb4 <osKernelInitialize+0x44>)
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	2b00      	cmp	r3, #0
 8004e90:	d105      	bne.n	8004e9e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004e92:	4b08      	ldr	r3, [pc, #32]	; (8004eb4 <osKernelInitialize+0x44>)
 8004e94:	2201      	movs	r2, #1
 8004e96:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004e98:	2300      	movs	r3, #0
 8004e9a:	607b      	str	r3, [r7, #4]
 8004e9c:	e002      	b.n	8004ea4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004e9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004ea2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ea4:	687b      	ldr	r3, [r7, #4]
}
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	370c      	adds	r7, #12
 8004eaa:	46bd      	mov	sp, r7
 8004eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004eb0:	4770      	bx	lr
 8004eb2:	bf00      	nop
 8004eb4:	200002f0 	.word	0x200002f0

08004eb8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004eb8:	b580      	push	{r7, lr}
 8004eba:	b082      	sub	sp, #8
 8004ebc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004ebe:	f3ef 8305 	mrs	r3, IPSR
 8004ec2:	603b      	str	r3, [r7, #0]
  return(result);
 8004ec4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004eca:	f06f 0305 	mvn.w	r3, #5
 8004ece:	607b      	str	r3, [r7, #4]
 8004ed0:	e010      	b.n	8004ef4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004ed2:	4b0b      	ldr	r3, [pc, #44]	; (8004f00 <osKernelStart+0x48>)
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d109      	bne.n	8004eee <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004eda:	f7ff ffbf 	bl	8004e5c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004ede:	4b08      	ldr	r3, [pc, #32]	; (8004f00 <osKernelStart+0x48>)
 8004ee0:	2202      	movs	r2, #2
 8004ee2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004ee4:	f001 f87c 	bl	8005fe0 <vTaskStartScheduler>
      stat = osOK;
 8004ee8:	2300      	movs	r3, #0
 8004eea:	607b      	str	r3, [r7, #4]
 8004eec:	e002      	b.n	8004ef4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004eee:	f04f 33ff 	mov.w	r3, #4294967295
 8004ef2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004ef4:	687b      	ldr	r3, [r7, #4]
}
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	3708      	adds	r7, #8
 8004efa:	46bd      	mov	sp, r7
 8004efc:	bd80      	pop	{r7, pc}
 8004efe:	bf00      	nop
 8004f00:	200002f0 	.word	0x200002f0

08004f04 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004f04:	b580      	push	{r7, lr}
 8004f06:	b08e      	sub	sp, #56	; 0x38
 8004f08:	af04      	add	r7, sp, #16
 8004f0a:	60f8      	str	r0, [r7, #12]
 8004f0c:	60b9      	str	r1, [r7, #8]
 8004f0e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004f10:	2300      	movs	r3, #0
 8004f12:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004f14:	f3ef 8305 	mrs	r3, IPSR
 8004f18:	617b      	str	r3, [r7, #20]
  return(result);
 8004f1a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d17e      	bne.n	800501e <osThreadNew+0x11a>
 8004f20:	68fb      	ldr	r3, [r7, #12]
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d07b      	beq.n	800501e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004f26:	2380      	movs	r3, #128	; 0x80
 8004f28:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004f2a:	2318      	movs	r3, #24
 8004f2c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004f2e:	2300      	movs	r3, #0
 8004f30:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8004f32:	f04f 33ff 	mov.w	r3, #4294967295
 8004f36:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	2b00      	cmp	r3, #0
 8004f3c:	d045      	beq.n	8004fca <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d002      	beq.n	8004f4c <osThreadNew+0x48>
        name = attr->name;
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	699b      	ldr	r3, [r3, #24]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	d002      	beq.n	8004f5a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	699b      	ldr	r3, [r3, #24]
 8004f58:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004f5a:	69fb      	ldr	r3, [r7, #28]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d008      	beq.n	8004f72 <osThreadNew+0x6e>
 8004f60:	69fb      	ldr	r3, [r7, #28]
 8004f62:	2b38      	cmp	r3, #56	; 0x38
 8004f64:	d805      	bhi.n	8004f72 <osThreadNew+0x6e>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	685b      	ldr	r3, [r3, #4]
 8004f6a:	f003 0301 	and.w	r3, r3, #1
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d001      	beq.n	8004f76 <osThreadNew+0x72>
        return (NULL);
 8004f72:	2300      	movs	r3, #0
 8004f74:	e054      	b.n	8005020 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	695b      	ldr	r3, [r3, #20]
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d003      	beq.n	8004f86 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004f7e:	687b      	ldr	r3, [r7, #4]
 8004f80:	695b      	ldr	r3, [r3, #20]
 8004f82:	089b      	lsrs	r3, r3, #2
 8004f84:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f86:	687b      	ldr	r3, [r7, #4]
 8004f88:	689b      	ldr	r3, [r3, #8]
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00e      	beq.n	8004fac <osThreadNew+0xa8>
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	68db      	ldr	r3, [r3, #12]
 8004f92:	2ba7      	cmp	r3, #167	; 0xa7
 8004f94:	d90a      	bls.n	8004fac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004f9a:	2b00      	cmp	r3, #0
 8004f9c:	d006      	beq.n	8004fac <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	695b      	ldr	r3, [r3, #20]
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d002      	beq.n	8004fac <osThreadNew+0xa8>
        mem = 1;
 8004fa6:	2301      	movs	r3, #1
 8004fa8:	61bb      	str	r3, [r7, #24]
 8004faa:	e010      	b.n	8004fce <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	689b      	ldr	r3, [r3, #8]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10c      	bne.n	8004fce <osThreadNew+0xca>
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	68db      	ldr	r3, [r3, #12]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d108      	bne.n	8004fce <osThreadNew+0xca>
 8004fbc:	687b      	ldr	r3, [r7, #4]
 8004fbe:	691b      	ldr	r3, [r3, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d104      	bne.n	8004fce <osThreadNew+0xca>
          mem = 0;
 8004fc4:	2300      	movs	r3, #0
 8004fc6:	61bb      	str	r3, [r7, #24]
 8004fc8:	e001      	b.n	8004fce <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004fca:	2300      	movs	r3, #0
 8004fcc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004fce:	69bb      	ldr	r3, [r7, #24]
 8004fd0:	2b01      	cmp	r3, #1
 8004fd2:	d110      	bne.n	8004ff6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004fd8:	687a      	ldr	r2, [r7, #4]
 8004fda:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004fdc:	9202      	str	r2, [sp, #8]
 8004fde:	9301      	str	r3, [sp, #4]
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	9300      	str	r3, [sp, #0]
 8004fe4:	68bb      	ldr	r3, [r7, #8]
 8004fe6:	6a3a      	ldr	r2, [r7, #32]
 8004fe8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8004fea:	68f8      	ldr	r0, [r7, #12]
 8004fec:	f000 fe0c 	bl	8005c08 <xTaskCreateStatic>
 8004ff0:	4603      	mov	r3, r0
 8004ff2:	613b      	str	r3, [r7, #16]
 8004ff4:	e013      	b.n	800501e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004ff6:	69bb      	ldr	r3, [r7, #24]
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	d110      	bne.n	800501e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004ffc:	6a3b      	ldr	r3, [r7, #32]
 8004ffe:	b29a      	uxth	r2, r3
 8005000:	f107 0310 	add.w	r3, r7, #16
 8005004:	9301      	str	r3, [sp, #4]
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	9300      	str	r3, [sp, #0]
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800500e:	68f8      	ldr	r0, [r7, #12]
 8005010:	f000 fe57 	bl	8005cc2 <xTaskCreate>
 8005014:	4603      	mov	r3, r0
 8005016:	2b01      	cmp	r3, #1
 8005018:	d001      	beq.n	800501e <osThreadNew+0x11a>
            hTask = NULL;
 800501a:	2300      	movs	r3, #0
 800501c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800501e:	693b      	ldr	r3, [r7, #16]
}
 8005020:	4618      	mov	r0, r3
 8005022:	3728      	adds	r7, #40	; 0x28
 8005024:	46bd      	mov	sp, r7
 8005026:	bd80      	pop	{r7, pc}

08005028 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005028:	b580      	push	{r7, lr}
 800502a:	b084      	sub	sp, #16
 800502c:	af00      	add	r7, sp, #0
 800502e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005030:	f3ef 8305 	mrs	r3, IPSR
 8005034:	60bb      	str	r3, [r7, #8]
  return(result);
 8005036:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005038:	2b00      	cmp	r3, #0
 800503a:	d003      	beq.n	8005044 <osDelay+0x1c>
    stat = osErrorISR;
 800503c:	f06f 0305 	mvn.w	r3, #5
 8005040:	60fb      	str	r3, [r7, #12]
 8005042:	e007      	b.n	8005054 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005044:	2300      	movs	r3, #0
 8005046:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005048:	687b      	ldr	r3, [r7, #4]
 800504a:	2b00      	cmp	r3, #0
 800504c:	d002      	beq.n	8005054 <osDelay+0x2c>
      vTaskDelay(ticks);
 800504e:	6878      	ldr	r0, [r7, #4]
 8005050:	f000 ff92 	bl	8005f78 <vTaskDelay>
    }
  }

  return (stat);
 8005054:	68fb      	ldr	r3, [r7, #12]
}
 8005056:	4618      	mov	r0, r3
 8005058:	3710      	adds	r7, #16
 800505a:	46bd      	mov	sp, r7
 800505c:	bd80      	pop	{r7, pc}
	...

08005060 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005060:	b480      	push	{r7}
 8005062:	b085      	sub	sp, #20
 8005064:	af00      	add	r7, sp, #0
 8005066:	60f8      	str	r0, [r7, #12]
 8005068:	60b9      	str	r1, [r7, #8]
 800506a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	4a07      	ldr	r2, [pc, #28]	; (800508c <vApplicationGetIdleTaskMemory+0x2c>)
 8005070:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005072:	68bb      	ldr	r3, [r7, #8]
 8005074:	4a06      	ldr	r2, [pc, #24]	; (8005090 <vApplicationGetIdleTaskMemory+0x30>)
 8005076:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	2280      	movs	r2, #128	; 0x80
 800507c:	601a      	str	r2, [r3, #0]
}
 800507e:	bf00      	nop
 8005080:	3714      	adds	r7, #20
 8005082:	46bd      	mov	sp, r7
 8005084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005088:	4770      	bx	lr
 800508a:	bf00      	nop
 800508c:	200002f4 	.word	0x200002f4
 8005090:	2000039c 	.word	0x2000039c

08005094 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005094:	b480      	push	{r7}
 8005096:	b085      	sub	sp, #20
 8005098:	af00      	add	r7, sp, #0
 800509a:	60f8      	str	r0, [r7, #12]
 800509c:	60b9      	str	r1, [r7, #8]
 800509e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	4a07      	ldr	r2, [pc, #28]	; (80050c0 <vApplicationGetTimerTaskMemory+0x2c>)
 80050a4:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80050a6:	68bb      	ldr	r3, [r7, #8]
 80050a8:	4a06      	ldr	r2, [pc, #24]	; (80050c4 <vApplicationGetTimerTaskMemory+0x30>)
 80050aa:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f44f 7280 	mov.w	r2, #256	; 0x100
 80050b2:	601a      	str	r2, [r3, #0]
}
 80050b4:	bf00      	nop
 80050b6:	3714      	adds	r7, #20
 80050b8:	46bd      	mov	sp, r7
 80050ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050be:	4770      	bx	lr
 80050c0:	2000059c 	.word	0x2000059c
 80050c4:	20000644 	.word	0x20000644

080050c8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80050c8:	b480      	push	{r7}
 80050ca:	b083      	sub	sp, #12
 80050cc:	af00      	add	r7, sp, #0
 80050ce:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050d0:	687b      	ldr	r3, [r7, #4]
 80050d2:	f103 0208 	add.w	r2, r3, #8
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f04f 32ff 	mov.w	r2, #4294967295
 80050e0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	f103 0208 	add.w	r2, r3, #8
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	f103 0208 	add.w	r2, r3, #8
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	2200      	movs	r2, #0
 80050fa:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80050fc:	bf00      	nop
 80050fe:	370c      	adds	r7, #12
 8005100:	46bd      	mov	sp, r7
 8005102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005106:	4770      	bx	lr

08005108 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005108:	b480      	push	{r7}
 800510a:	b083      	sub	sp, #12
 800510c:	af00      	add	r7, sp, #0
 800510e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	2200      	movs	r2, #0
 8005114:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005116:	bf00      	nop
 8005118:	370c      	adds	r7, #12
 800511a:	46bd      	mov	sp, r7
 800511c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005120:	4770      	bx	lr

08005122 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005122:	b480      	push	{r7}
 8005124:	b085      	sub	sp, #20
 8005126:	af00      	add	r7, sp, #0
 8005128:	6078      	str	r0, [r7, #4]
 800512a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	685b      	ldr	r3, [r3, #4]
 8005130:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005132:	683b      	ldr	r3, [r7, #0]
 8005134:	68fa      	ldr	r2, [r7, #12]
 8005136:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	689a      	ldr	r2, [r3, #8]
 800513c:	683b      	ldr	r3, [r7, #0]
 800513e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005140:	68fb      	ldr	r3, [r7, #12]
 8005142:	689b      	ldr	r3, [r3, #8]
 8005144:	683a      	ldr	r2, [r7, #0]
 8005146:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005148:	68fb      	ldr	r3, [r7, #12]
 800514a:	683a      	ldr	r2, [r7, #0]
 800514c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800514e:	683b      	ldr	r3, [r7, #0]
 8005150:	687a      	ldr	r2, [r7, #4]
 8005152:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005154:	687b      	ldr	r3, [r7, #4]
 8005156:	681b      	ldr	r3, [r3, #0]
 8005158:	1c5a      	adds	r2, r3, #1
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	601a      	str	r2, [r3, #0]
}
 800515e:	bf00      	nop
 8005160:	3714      	adds	r7, #20
 8005162:	46bd      	mov	sp, r7
 8005164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005168:	4770      	bx	lr

0800516a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800516a:	b480      	push	{r7}
 800516c:	b085      	sub	sp, #20
 800516e:	af00      	add	r7, sp, #0
 8005170:	6078      	str	r0, [r7, #4]
 8005172:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005174:	683b      	ldr	r3, [r7, #0]
 8005176:	681b      	ldr	r3, [r3, #0]
 8005178:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800517a:	68bb      	ldr	r3, [r7, #8]
 800517c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005180:	d103      	bne.n	800518a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	691b      	ldr	r3, [r3, #16]
 8005186:	60fb      	str	r3, [r7, #12]
 8005188:	e00c      	b.n	80051a4 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	3308      	adds	r3, #8
 800518e:	60fb      	str	r3, [r7, #12]
 8005190:	e002      	b.n	8005198 <vListInsert+0x2e>
 8005192:	68fb      	ldr	r3, [r7, #12]
 8005194:	685b      	ldr	r3, [r3, #4]
 8005196:	60fb      	str	r3, [r7, #12]
 8005198:	68fb      	ldr	r3, [r7, #12]
 800519a:	685b      	ldr	r3, [r3, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	68ba      	ldr	r2, [r7, #8]
 80051a0:	429a      	cmp	r2, r3
 80051a2:	d2f6      	bcs.n	8005192 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80051a4:	68fb      	ldr	r3, [r7, #12]
 80051a6:	685a      	ldr	r2, [r3, #4]
 80051a8:	683b      	ldr	r3, [r7, #0]
 80051aa:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80051ac:	683b      	ldr	r3, [r7, #0]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	683a      	ldr	r2, [r7, #0]
 80051b2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	68fa      	ldr	r2, [r7, #12]
 80051b8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	683a      	ldr	r2, [r7, #0]
 80051be:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80051c0:	683b      	ldr	r3, [r7, #0]
 80051c2:	687a      	ldr	r2, [r7, #4]
 80051c4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	1c5a      	adds	r2, r3, #1
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	601a      	str	r2, [r3, #0]
}
 80051d0:	bf00      	nop
 80051d2:	3714      	adds	r7, #20
 80051d4:	46bd      	mov	sp, r7
 80051d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051da:	4770      	bx	lr

080051dc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	691b      	ldr	r3, [r3, #16]
 80051e8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	685b      	ldr	r3, [r3, #4]
 80051ee:	687a      	ldr	r2, [r7, #4]
 80051f0:	6892      	ldr	r2, [r2, #8]
 80051f2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	689b      	ldr	r3, [r3, #8]
 80051f8:	687a      	ldr	r2, [r7, #4]
 80051fa:	6852      	ldr	r2, [r2, #4]
 80051fc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80051fe:	68fb      	ldr	r3, [r7, #12]
 8005200:	685b      	ldr	r3, [r3, #4]
 8005202:	687a      	ldr	r2, [r7, #4]
 8005204:	429a      	cmp	r2, r3
 8005206:	d103      	bne.n	8005210 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	689a      	ldr	r2, [r3, #8]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	2200      	movs	r2, #0
 8005214:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005216:	68fb      	ldr	r3, [r7, #12]
 8005218:	681b      	ldr	r3, [r3, #0]
 800521a:	1e5a      	subs	r2, r3, #1
 800521c:	68fb      	ldr	r3, [r7, #12]
 800521e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005220:	68fb      	ldr	r3, [r7, #12]
 8005222:	681b      	ldr	r3, [r3, #0]
}
 8005224:	4618      	mov	r0, r3
 8005226:	3714      	adds	r7, #20
 8005228:	46bd      	mov	sp, r7
 800522a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800522e:	4770      	bx	lr

08005230 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005230:	b580      	push	{r7, lr}
 8005232:	b084      	sub	sp, #16
 8005234:	af00      	add	r7, sp, #0
 8005236:	6078      	str	r0, [r7, #4]
 8005238:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800523e:	68fb      	ldr	r3, [r7, #12]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d10a      	bne.n	800525a <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005244:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005248:	f383 8811 	msr	BASEPRI, r3
 800524c:	f3bf 8f6f 	isb	sy
 8005250:	f3bf 8f4f 	dsb	sy
 8005254:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005256:	bf00      	nop
 8005258:	e7fe      	b.n	8005258 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800525a:	f002 f87b 	bl	8007354 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800525e:	68fb      	ldr	r3, [r7, #12]
 8005260:	681a      	ldr	r2, [r3, #0]
 8005262:	68fb      	ldr	r3, [r7, #12]
 8005264:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005266:	68f9      	ldr	r1, [r7, #12]
 8005268:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800526a:	fb01 f303 	mul.w	r3, r1, r3
 800526e:	441a      	add	r2, r3
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	2200      	movs	r2, #0
 8005278:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800527a:	68fb      	ldr	r3, [r7, #12]
 800527c:	681a      	ldr	r2, [r3, #0]
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681a      	ldr	r2, [r3, #0]
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800528a:	3b01      	subs	r3, #1
 800528c:	68f9      	ldr	r1, [r7, #12]
 800528e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005290:	fb01 f303 	mul.w	r3, r1, r3
 8005294:	441a      	add	r2, r3
 8005296:	68fb      	ldr	r3, [r7, #12]
 8005298:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	22ff      	movs	r2, #255	; 0xff
 800529e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80052a2:	68fb      	ldr	r3, [r7, #12]
 80052a4:	22ff      	movs	r2, #255	; 0xff
 80052a6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80052aa:	683b      	ldr	r3, [r7, #0]
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d114      	bne.n	80052da <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	691b      	ldr	r3, [r3, #16]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d01a      	beq.n	80052ee <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	3310      	adds	r3, #16
 80052bc:	4618      	mov	r0, r3
 80052be:	f001 f929 	bl	8006514 <xTaskRemoveFromEventList>
 80052c2:	4603      	mov	r3, r0
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d012      	beq.n	80052ee <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80052c8:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <xQueueGenericReset+0xcc>)
 80052ca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80052ce:	601a      	str	r2, [r3, #0]
 80052d0:	f3bf 8f4f 	dsb	sy
 80052d4:	f3bf 8f6f 	isb	sy
 80052d8:	e009      	b.n	80052ee <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	3310      	adds	r3, #16
 80052de:	4618      	mov	r0, r3
 80052e0:	f7ff fef2 	bl	80050c8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	3324      	adds	r3, #36	; 0x24
 80052e8:	4618      	mov	r0, r3
 80052ea:	f7ff feed 	bl	80050c8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80052ee:	f002 f861 	bl	80073b4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80052f2:	2301      	movs	r3, #1
}
 80052f4:	4618      	mov	r0, r3
 80052f6:	3710      	adds	r7, #16
 80052f8:	46bd      	mov	sp, r7
 80052fa:	bd80      	pop	{r7, pc}
 80052fc:	e000ed04 	.word	0xe000ed04

08005300 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005300:	b580      	push	{r7, lr}
 8005302:	b08e      	sub	sp, #56	; 0x38
 8005304:	af02      	add	r7, sp, #8
 8005306:	60f8      	str	r0, [r7, #12]
 8005308:	60b9      	str	r1, [r7, #8]
 800530a:	607a      	str	r2, [r7, #4]
 800530c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800530e:	68fb      	ldr	r3, [r7, #12]
 8005310:	2b00      	cmp	r3, #0
 8005312:	d10a      	bne.n	800532a <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005314:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005318:	f383 8811 	msr	BASEPRI, r3
 800531c:	f3bf 8f6f 	isb	sy
 8005320:	f3bf 8f4f 	dsb	sy
 8005324:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005326:	bf00      	nop
 8005328:	e7fe      	b.n	8005328 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800532a:	683b      	ldr	r3, [r7, #0]
 800532c:	2b00      	cmp	r3, #0
 800532e:	d10a      	bne.n	8005346 <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005330:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005334:	f383 8811 	msr	BASEPRI, r3
 8005338:	f3bf 8f6f 	isb	sy
 800533c:	f3bf 8f4f 	dsb	sy
 8005340:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005342:	bf00      	nop
 8005344:	e7fe      	b.n	8005344 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d002      	beq.n	8005352 <xQueueGenericCreateStatic+0x52>
 800534c:	68bb      	ldr	r3, [r7, #8]
 800534e:	2b00      	cmp	r3, #0
 8005350:	d001      	beq.n	8005356 <xQueueGenericCreateStatic+0x56>
 8005352:	2301      	movs	r3, #1
 8005354:	e000      	b.n	8005358 <xQueueGenericCreateStatic+0x58>
 8005356:	2300      	movs	r3, #0
 8005358:	2b00      	cmp	r3, #0
 800535a:	d10a      	bne.n	8005372 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 800535c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005360:	f383 8811 	msr	BASEPRI, r3
 8005364:	f3bf 8f6f 	isb	sy
 8005368:	f3bf 8f4f 	dsb	sy
 800536c:	623b      	str	r3, [r7, #32]
}
 800536e:	bf00      	nop
 8005370:	e7fe      	b.n	8005370 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d102      	bne.n	800537e <xQueueGenericCreateStatic+0x7e>
 8005378:	68bb      	ldr	r3, [r7, #8]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d101      	bne.n	8005382 <xQueueGenericCreateStatic+0x82>
 800537e:	2301      	movs	r3, #1
 8005380:	e000      	b.n	8005384 <xQueueGenericCreateStatic+0x84>
 8005382:	2300      	movs	r3, #0
 8005384:	2b00      	cmp	r3, #0
 8005386:	d10a      	bne.n	800539e <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800538c:	f383 8811 	msr	BASEPRI, r3
 8005390:	f3bf 8f6f 	isb	sy
 8005394:	f3bf 8f4f 	dsb	sy
 8005398:	61fb      	str	r3, [r7, #28]
}
 800539a:	bf00      	nop
 800539c:	e7fe      	b.n	800539c <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800539e:	2350      	movs	r3, #80	; 0x50
 80053a0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	2b50      	cmp	r3, #80	; 0x50
 80053a6:	d00a      	beq.n	80053be <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80053a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80053ac:	f383 8811 	msr	BASEPRI, r3
 80053b0:	f3bf 8f6f 	isb	sy
 80053b4:	f3bf 8f4f 	dsb	sy
 80053b8:	61bb      	str	r3, [r7, #24]
}
 80053ba:	bf00      	nop
 80053bc:	e7fe      	b.n	80053bc <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80053be:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80053c0:	683b      	ldr	r3, [r7, #0]
 80053c2:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80053c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d00d      	beq.n	80053e6 <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80053ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053cc:	2201      	movs	r2, #1
 80053ce:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80053d2:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80053d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80053d8:	9300      	str	r3, [sp, #0]
 80053da:	4613      	mov	r3, r2
 80053dc:	687a      	ldr	r2, [r7, #4]
 80053de:	68b9      	ldr	r1, [r7, #8]
 80053e0:	68f8      	ldr	r0, [r7, #12]
 80053e2:	f000 f805 	bl	80053f0 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80053e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80053e8:	4618      	mov	r0, r3
 80053ea:	3730      	adds	r7, #48	; 0x30
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b084      	sub	sp, #16
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
 80053fc:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 80053fe:	68bb      	ldr	r3, [r7, #8]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d103      	bne.n	800540c <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	69ba      	ldr	r2, [r7, #24]
 8005408:	601a      	str	r2, [r3, #0]
 800540a:	e002      	b.n	8005412 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800540c:	69bb      	ldr	r3, [r7, #24]
 800540e:	687a      	ldr	r2, [r7, #4]
 8005410:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005412:	69bb      	ldr	r3, [r7, #24]
 8005414:	68fa      	ldr	r2, [r7, #12]
 8005416:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005418:	69bb      	ldr	r3, [r7, #24]
 800541a:	68ba      	ldr	r2, [r7, #8]
 800541c:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800541e:	2101      	movs	r1, #1
 8005420:	69b8      	ldr	r0, [r7, #24]
 8005422:	f7ff ff05 	bl	8005230 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005426:	69bb      	ldr	r3, [r7, #24]
 8005428:	78fa      	ldrb	r2, [r7, #3]
 800542a:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800542e:	bf00      	nop
 8005430:	3710      	adds	r7, #16
 8005432:	46bd      	mov	sp, r7
 8005434:	bd80      	pop	{r7, pc}
	...

08005438 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005438:	b580      	push	{r7, lr}
 800543a:	b08e      	sub	sp, #56	; 0x38
 800543c:	af00      	add	r7, sp, #0
 800543e:	60f8      	str	r0, [r7, #12]
 8005440:	60b9      	str	r1, [r7, #8]
 8005442:	607a      	str	r2, [r7, #4]
 8005444:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005446:	2300      	movs	r3, #0
 8005448:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800544e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005450:	2b00      	cmp	r3, #0
 8005452:	d10a      	bne.n	800546a <xQueueGenericSend+0x32>
	__asm volatile
 8005454:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005458:	f383 8811 	msr	BASEPRI, r3
 800545c:	f3bf 8f6f 	isb	sy
 8005460:	f3bf 8f4f 	dsb	sy
 8005464:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005466:	bf00      	nop
 8005468:	e7fe      	b.n	8005468 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800546a:	68bb      	ldr	r3, [r7, #8]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d103      	bne.n	8005478 <xQueueGenericSend+0x40>
 8005470:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005472:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005474:	2b00      	cmp	r3, #0
 8005476:	d101      	bne.n	800547c <xQueueGenericSend+0x44>
 8005478:	2301      	movs	r3, #1
 800547a:	e000      	b.n	800547e <xQueueGenericSend+0x46>
 800547c:	2300      	movs	r3, #0
 800547e:	2b00      	cmp	r3, #0
 8005480:	d10a      	bne.n	8005498 <xQueueGenericSend+0x60>
	__asm volatile
 8005482:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005486:	f383 8811 	msr	BASEPRI, r3
 800548a:	f3bf 8f6f 	isb	sy
 800548e:	f3bf 8f4f 	dsb	sy
 8005492:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005494:	bf00      	nop
 8005496:	e7fe      	b.n	8005496 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005498:	683b      	ldr	r3, [r7, #0]
 800549a:	2b02      	cmp	r3, #2
 800549c:	d103      	bne.n	80054a6 <xQueueGenericSend+0x6e>
 800549e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80054a2:	2b01      	cmp	r3, #1
 80054a4:	d101      	bne.n	80054aa <xQueueGenericSend+0x72>
 80054a6:	2301      	movs	r3, #1
 80054a8:	e000      	b.n	80054ac <xQueueGenericSend+0x74>
 80054aa:	2300      	movs	r3, #0
 80054ac:	2b00      	cmp	r3, #0
 80054ae:	d10a      	bne.n	80054c6 <xQueueGenericSend+0x8e>
	__asm volatile
 80054b0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054b4:	f383 8811 	msr	BASEPRI, r3
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	f3bf 8f4f 	dsb	sy
 80054c0:	623b      	str	r3, [r7, #32]
}
 80054c2:	bf00      	nop
 80054c4:	e7fe      	b.n	80054c4 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80054c6:	f001 f9e7 	bl	8006898 <xTaskGetSchedulerState>
 80054ca:	4603      	mov	r3, r0
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d102      	bne.n	80054d6 <xQueueGenericSend+0x9e>
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d101      	bne.n	80054da <xQueueGenericSend+0xa2>
 80054d6:	2301      	movs	r3, #1
 80054d8:	e000      	b.n	80054dc <xQueueGenericSend+0xa4>
 80054da:	2300      	movs	r3, #0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d10a      	bne.n	80054f6 <xQueueGenericSend+0xbe>
	__asm volatile
 80054e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80054e4:	f383 8811 	msr	BASEPRI, r3
 80054e8:	f3bf 8f6f 	isb	sy
 80054ec:	f3bf 8f4f 	dsb	sy
 80054f0:	61fb      	str	r3, [r7, #28]
}
 80054f2:	bf00      	nop
 80054f4:	e7fe      	b.n	80054f4 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80054f6:	f001 ff2d 	bl	8007354 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80054fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80054fc:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80054fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005500:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005502:	429a      	cmp	r2, r3
 8005504:	d302      	bcc.n	800550c <xQueueGenericSend+0xd4>
 8005506:	683b      	ldr	r3, [r7, #0]
 8005508:	2b02      	cmp	r3, #2
 800550a:	d129      	bne.n	8005560 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800550c:	683a      	ldr	r2, [r7, #0]
 800550e:	68b9      	ldr	r1, [r7, #8]
 8005510:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005512:	f000 fa0b 	bl	800592c <prvCopyDataToQueue>
 8005516:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005518:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800551a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800551c:	2b00      	cmp	r3, #0
 800551e:	d010      	beq.n	8005542 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005520:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005522:	3324      	adds	r3, #36	; 0x24
 8005524:	4618      	mov	r0, r3
 8005526:	f000 fff5 	bl	8006514 <xTaskRemoveFromEventList>
 800552a:	4603      	mov	r3, r0
 800552c:	2b00      	cmp	r3, #0
 800552e:	d013      	beq.n	8005558 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005530:	4b3f      	ldr	r3, [pc, #252]	; (8005630 <xQueueGenericSend+0x1f8>)
 8005532:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005536:	601a      	str	r2, [r3, #0]
 8005538:	f3bf 8f4f 	dsb	sy
 800553c:	f3bf 8f6f 	isb	sy
 8005540:	e00a      	b.n	8005558 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005544:	2b00      	cmp	r3, #0
 8005546:	d007      	beq.n	8005558 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005548:	4b39      	ldr	r3, [pc, #228]	; (8005630 <xQueueGenericSend+0x1f8>)
 800554a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800554e:	601a      	str	r2, [r3, #0]
 8005550:	f3bf 8f4f 	dsb	sy
 8005554:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005558:	f001 ff2c 	bl	80073b4 <vPortExitCritical>
				return pdPASS;
 800555c:	2301      	movs	r3, #1
 800555e:	e063      	b.n	8005628 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005560:	687b      	ldr	r3, [r7, #4]
 8005562:	2b00      	cmp	r3, #0
 8005564:	d103      	bne.n	800556e <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005566:	f001 ff25 	bl	80073b4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800556a:	2300      	movs	r3, #0
 800556c:	e05c      	b.n	8005628 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 800556e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005570:	2b00      	cmp	r3, #0
 8005572:	d106      	bne.n	8005582 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005574:	f107 0314 	add.w	r3, r7, #20
 8005578:	4618      	mov	r0, r3
 800557a:	f001 f82f 	bl	80065dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800557e:	2301      	movs	r3, #1
 8005580:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005582:	f001 ff17 	bl	80073b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005586:	f000 fd9b 	bl	80060c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800558a:	f001 fee3 	bl	8007354 <vPortEnterCritical>
 800558e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005590:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005594:	b25b      	sxtb	r3, r3
 8005596:	f1b3 3fff 	cmp.w	r3, #4294967295
 800559a:	d103      	bne.n	80055a4 <xQueueGenericSend+0x16c>
 800559c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800559e:	2200      	movs	r2, #0
 80055a0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80055a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055a6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80055aa:	b25b      	sxtb	r3, r3
 80055ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80055b0:	d103      	bne.n	80055ba <xQueueGenericSend+0x182>
 80055b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055b4:	2200      	movs	r2, #0
 80055b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80055ba:	f001 fefb 	bl	80073b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80055be:	1d3a      	adds	r2, r7, #4
 80055c0:	f107 0314 	add.w	r3, r7, #20
 80055c4:	4611      	mov	r1, r2
 80055c6:	4618      	mov	r0, r3
 80055c8:	f001 f81e 	bl	8006608 <xTaskCheckForTimeOut>
 80055cc:	4603      	mov	r3, r0
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	d124      	bne.n	800561c <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 80055d2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055d4:	f000 faa2 	bl	8005b1c <prvIsQueueFull>
 80055d8:	4603      	mov	r3, r0
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d018      	beq.n	8005610 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 80055de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80055e0:	3310      	adds	r3, #16
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	4611      	mov	r1, r2
 80055e6:	4618      	mov	r0, r3
 80055e8:	f000 ff44 	bl	8006474 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 80055ec:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80055ee:	f000 fa2d 	bl	8005a4c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 80055f2:	f000 fd73 	bl	80060dc <xTaskResumeAll>
 80055f6:	4603      	mov	r3, r0
 80055f8:	2b00      	cmp	r3, #0
 80055fa:	f47f af7c 	bne.w	80054f6 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80055fe:	4b0c      	ldr	r3, [pc, #48]	; (8005630 <xQueueGenericSend+0x1f8>)
 8005600:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005604:	601a      	str	r2, [r3, #0]
 8005606:	f3bf 8f4f 	dsb	sy
 800560a:	f3bf 8f6f 	isb	sy
 800560e:	e772      	b.n	80054f6 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005610:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005612:	f000 fa1b 	bl	8005a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005616:	f000 fd61 	bl	80060dc <xTaskResumeAll>
 800561a:	e76c      	b.n	80054f6 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800561c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800561e:	f000 fa15 	bl	8005a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005622:	f000 fd5b 	bl	80060dc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005626:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005628:	4618      	mov	r0, r3
 800562a:	3738      	adds	r7, #56	; 0x38
 800562c:	46bd      	mov	sp, r7
 800562e:	bd80      	pop	{r7, pc}
 8005630:	e000ed04 	.word	0xe000ed04

08005634 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005634:	b580      	push	{r7, lr}
 8005636:	b090      	sub	sp, #64	; 0x40
 8005638:	af00      	add	r7, sp, #0
 800563a:	60f8      	str	r0, [r7, #12]
 800563c:	60b9      	str	r1, [r7, #8]
 800563e:	607a      	str	r2, [r7, #4]
 8005640:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005646:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005648:	2b00      	cmp	r3, #0
 800564a:	d10a      	bne.n	8005662 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 800564c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005650:	f383 8811 	msr	BASEPRI, r3
 8005654:	f3bf 8f6f 	isb	sy
 8005658:	f3bf 8f4f 	dsb	sy
 800565c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800565e:	bf00      	nop
 8005660:	e7fe      	b.n	8005660 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005662:	68bb      	ldr	r3, [r7, #8]
 8005664:	2b00      	cmp	r3, #0
 8005666:	d103      	bne.n	8005670 <xQueueGenericSendFromISR+0x3c>
 8005668:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800566a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800566c:	2b00      	cmp	r3, #0
 800566e:	d101      	bne.n	8005674 <xQueueGenericSendFromISR+0x40>
 8005670:	2301      	movs	r3, #1
 8005672:	e000      	b.n	8005676 <xQueueGenericSendFromISR+0x42>
 8005674:	2300      	movs	r3, #0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d10a      	bne.n	8005690 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800567a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800567e:	f383 8811 	msr	BASEPRI, r3
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	f3bf 8f4f 	dsb	sy
 800568a:	627b      	str	r3, [r7, #36]	; 0x24
}
 800568c:	bf00      	nop
 800568e:	e7fe      	b.n	800568e <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	2b02      	cmp	r3, #2
 8005694:	d103      	bne.n	800569e <xQueueGenericSendFromISR+0x6a>
 8005696:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005698:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800569a:	2b01      	cmp	r3, #1
 800569c:	d101      	bne.n	80056a2 <xQueueGenericSendFromISR+0x6e>
 800569e:	2301      	movs	r3, #1
 80056a0:	e000      	b.n	80056a4 <xQueueGenericSendFromISR+0x70>
 80056a2:	2300      	movs	r3, #0
 80056a4:	2b00      	cmp	r3, #0
 80056a6:	d10a      	bne.n	80056be <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 80056a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ac:	f383 8811 	msr	BASEPRI, r3
 80056b0:	f3bf 8f6f 	isb	sy
 80056b4:	f3bf 8f4f 	dsb	sy
 80056b8:	623b      	str	r3, [r7, #32]
}
 80056ba:	bf00      	nop
 80056bc:	e7fe      	b.n	80056bc <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80056be:	f001 ff2b 	bl	8007518 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80056c2:	f3ef 8211 	mrs	r2, BASEPRI
 80056c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80056ca:	f383 8811 	msr	BASEPRI, r3
 80056ce:	f3bf 8f6f 	isb	sy
 80056d2:	f3bf 8f4f 	dsb	sy
 80056d6:	61fa      	str	r2, [r7, #28]
 80056d8:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80056da:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80056dc:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80056de:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80056e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80056e6:	429a      	cmp	r2, r3
 80056e8:	d302      	bcc.n	80056f0 <xQueueGenericSendFromISR+0xbc>
 80056ea:	683b      	ldr	r3, [r7, #0]
 80056ec:	2b02      	cmp	r3, #2
 80056ee:	d12f      	bne.n	8005750 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80056f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056f2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80056f6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 80056fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80056fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80056fe:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005700:	683a      	ldr	r2, [r7, #0]
 8005702:	68b9      	ldr	r1, [r7, #8]
 8005704:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005706:	f000 f911 	bl	800592c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800570a:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 800570e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005712:	d112      	bne.n	800573a <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005714:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005716:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005718:	2b00      	cmp	r3, #0
 800571a:	d016      	beq.n	800574a <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800571c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800571e:	3324      	adds	r3, #36	; 0x24
 8005720:	4618      	mov	r0, r3
 8005722:	f000 fef7 	bl	8006514 <xTaskRemoveFromEventList>
 8005726:	4603      	mov	r3, r0
 8005728:	2b00      	cmp	r3, #0
 800572a:	d00e      	beq.n	800574a <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b00      	cmp	r3, #0
 8005730:	d00b      	beq.n	800574a <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005732:	687b      	ldr	r3, [r7, #4]
 8005734:	2201      	movs	r2, #1
 8005736:	601a      	str	r2, [r3, #0]
 8005738:	e007      	b.n	800574a <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800573a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800573e:	3301      	adds	r3, #1
 8005740:	b2db      	uxtb	r3, r3
 8005742:	b25a      	sxtb	r2, r3
 8005744:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005746:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800574a:	2301      	movs	r3, #1
 800574c:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 800574e:	e001      	b.n	8005754 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005750:	2300      	movs	r3, #0
 8005752:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005754:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005756:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005758:	697b      	ldr	r3, [r7, #20]
 800575a:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800575e:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005760:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005762:	4618      	mov	r0, r3
 8005764:	3740      	adds	r7, #64	; 0x40
 8005766:	46bd      	mov	sp, r7
 8005768:	bd80      	pop	{r7, pc}
	...

0800576c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800576c:	b580      	push	{r7, lr}
 800576e:	b08c      	sub	sp, #48	; 0x30
 8005770:	af00      	add	r7, sp, #0
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005778:	2300      	movs	r3, #0
 800577a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800577c:	68fb      	ldr	r3, [r7, #12]
 800577e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005782:	2b00      	cmp	r3, #0
 8005784:	d10a      	bne.n	800579c <xQueueReceive+0x30>
	__asm volatile
 8005786:	f04f 0350 	mov.w	r3, #80	; 0x50
 800578a:	f383 8811 	msr	BASEPRI, r3
 800578e:	f3bf 8f6f 	isb	sy
 8005792:	f3bf 8f4f 	dsb	sy
 8005796:	623b      	str	r3, [r7, #32]
}
 8005798:	bf00      	nop
 800579a:	e7fe      	b.n	800579a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b00      	cmp	r3, #0
 80057a0:	d103      	bne.n	80057aa <xQueueReceive+0x3e>
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	d101      	bne.n	80057ae <xQueueReceive+0x42>
 80057aa:	2301      	movs	r3, #1
 80057ac:	e000      	b.n	80057b0 <xQueueReceive+0x44>
 80057ae:	2300      	movs	r3, #0
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d10a      	bne.n	80057ca <xQueueReceive+0x5e>
	__asm volatile
 80057b4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057b8:	f383 8811 	msr	BASEPRI, r3
 80057bc:	f3bf 8f6f 	isb	sy
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	61fb      	str	r3, [r7, #28]
}
 80057c6:	bf00      	nop
 80057c8:	e7fe      	b.n	80057c8 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80057ca:	f001 f865 	bl	8006898 <xTaskGetSchedulerState>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d102      	bne.n	80057da <xQueueReceive+0x6e>
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d101      	bne.n	80057de <xQueueReceive+0x72>
 80057da:	2301      	movs	r3, #1
 80057dc:	e000      	b.n	80057e0 <xQueueReceive+0x74>
 80057de:	2300      	movs	r3, #0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d10a      	bne.n	80057fa <xQueueReceive+0x8e>
	__asm volatile
 80057e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80057e8:	f383 8811 	msr	BASEPRI, r3
 80057ec:	f3bf 8f6f 	isb	sy
 80057f0:	f3bf 8f4f 	dsb	sy
 80057f4:	61bb      	str	r3, [r7, #24]
}
 80057f6:	bf00      	nop
 80057f8:	e7fe      	b.n	80057f8 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80057fa:	f001 fdab 	bl	8007354 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80057fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005800:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005802:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005806:	2b00      	cmp	r3, #0
 8005808:	d01f      	beq.n	800584a <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800580a:	68b9      	ldr	r1, [r7, #8]
 800580c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800580e:	f000 f8f7 	bl	8005a00 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005812:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005814:	1e5a      	subs	r2, r3, #1
 8005816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005818:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800581a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800581c:	691b      	ldr	r3, [r3, #16]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00f      	beq.n	8005842 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	3310      	adds	r3, #16
 8005826:	4618      	mov	r0, r3
 8005828:	f000 fe74 	bl	8006514 <xTaskRemoveFromEventList>
 800582c:	4603      	mov	r3, r0
 800582e:	2b00      	cmp	r3, #0
 8005830:	d007      	beq.n	8005842 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005832:	4b3d      	ldr	r3, [pc, #244]	; (8005928 <xQueueReceive+0x1bc>)
 8005834:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005838:	601a      	str	r2, [r3, #0]
 800583a:	f3bf 8f4f 	dsb	sy
 800583e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005842:	f001 fdb7 	bl	80073b4 <vPortExitCritical>
				return pdPASS;
 8005846:	2301      	movs	r3, #1
 8005848:	e069      	b.n	800591e <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d103      	bne.n	8005858 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005850:	f001 fdb0 	bl	80073b4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005854:	2300      	movs	r3, #0
 8005856:	e062      	b.n	800591e <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005858:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800585a:	2b00      	cmp	r3, #0
 800585c:	d106      	bne.n	800586c <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800585e:	f107 0310 	add.w	r3, r7, #16
 8005862:	4618      	mov	r0, r3
 8005864:	f000 feba 	bl	80065dc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005868:	2301      	movs	r3, #1
 800586a:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800586c:	f001 fda2 	bl	80073b4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005870:	f000 fc26 	bl	80060c0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005874:	f001 fd6e 	bl	8007354 <vPortEnterCritical>
 8005878:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800587a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800587e:	b25b      	sxtb	r3, r3
 8005880:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005884:	d103      	bne.n	800588e <xQueueReceive+0x122>
 8005886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005888:	2200      	movs	r2, #0
 800588a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800588e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005890:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005894:	b25b      	sxtb	r3, r3
 8005896:	f1b3 3fff 	cmp.w	r3, #4294967295
 800589a:	d103      	bne.n	80058a4 <xQueueReceive+0x138>
 800589c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800589e:	2200      	movs	r2, #0
 80058a0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 80058a4:	f001 fd86 	bl	80073b4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80058a8:	1d3a      	adds	r2, r7, #4
 80058aa:	f107 0310 	add.w	r3, r7, #16
 80058ae:	4611      	mov	r1, r2
 80058b0:	4618      	mov	r0, r3
 80058b2:	f000 fea9 	bl	8006608 <xTaskCheckForTimeOut>
 80058b6:	4603      	mov	r3, r0
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d123      	bne.n	8005904 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80058bc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058be:	f000 f917 	bl	8005af0 <prvIsQueueEmpty>
 80058c2:	4603      	mov	r3, r0
 80058c4:	2b00      	cmp	r3, #0
 80058c6:	d017      	beq.n	80058f8 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80058c8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80058ca:	3324      	adds	r3, #36	; 0x24
 80058cc:	687a      	ldr	r2, [r7, #4]
 80058ce:	4611      	mov	r1, r2
 80058d0:	4618      	mov	r0, r3
 80058d2:	f000 fdcf 	bl	8006474 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80058d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058d8:	f000 f8b8 	bl	8005a4c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80058dc:	f000 fbfe 	bl	80060dc <xTaskResumeAll>
 80058e0:	4603      	mov	r3, r0
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d189      	bne.n	80057fa <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 80058e6:	4b10      	ldr	r3, [pc, #64]	; (8005928 <xQueueReceive+0x1bc>)
 80058e8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80058ec:	601a      	str	r2, [r3, #0]
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	f3bf 8f6f 	isb	sy
 80058f6:	e780      	b.n	80057fa <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 80058f8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80058fa:	f000 f8a7 	bl	8005a4c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80058fe:	f000 fbed 	bl	80060dc <xTaskResumeAll>
 8005902:	e77a      	b.n	80057fa <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005904:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005906:	f000 f8a1 	bl	8005a4c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800590a:	f000 fbe7 	bl	80060dc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800590e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8005910:	f000 f8ee 	bl	8005af0 <prvIsQueueEmpty>
 8005914:	4603      	mov	r3, r0
 8005916:	2b00      	cmp	r3, #0
 8005918:	f43f af6f 	beq.w	80057fa <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800591c:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800591e:	4618      	mov	r0, r3
 8005920:	3730      	adds	r7, #48	; 0x30
 8005922:	46bd      	mov	sp, r7
 8005924:	bd80      	pop	{r7, pc}
 8005926:	bf00      	nop
 8005928:	e000ed04 	.word	0xe000ed04

0800592c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800592c:	b580      	push	{r7, lr}
 800592e:	b086      	sub	sp, #24
 8005930:	af00      	add	r7, sp, #0
 8005932:	60f8      	str	r0, [r7, #12]
 8005934:	60b9      	str	r1, [r7, #8]
 8005936:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005938:	2300      	movs	r3, #0
 800593a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800593c:	68fb      	ldr	r3, [r7, #12]
 800593e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005940:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	2b00      	cmp	r3, #0
 8005948:	d10d      	bne.n	8005966 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	2b00      	cmp	r3, #0
 8005950:	d14d      	bne.n	80059ee <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	689b      	ldr	r3, [r3, #8]
 8005956:	4618      	mov	r0, r3
 8005958:	f000 ffbc 	bl	80068d4 <xTaskPriorityDisinherit>
 800595c:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	2200      	movs	r2, #0
 8005962:	609a      	str	r2, [r3, #8]
 8005964:	e043      	b.n	80059ee <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2b00      	cmp	r3, #0
 800596a:	d119      	bne.n	80059a0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800596c:	68fb      	ldr	r3, [r7, #12]
 800596e:	6858      	ldr	r0, [r3, #4]
 8005970:	68fb      	ldr	r3, [r7, #12]
 8005972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005974:	461a      	mov	r2, r3
 8005976:	68b9      	ldr	r1, [r7, #8]
 8005978:	f002 f87c 	bl	8007a74 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800597c:	68fb      	ldr	r3, [r7, #12]
 800597e:	685a      	ldr	r2, [r3, #4]
 8005980:	68fb      	ldr	r3, [r7, #12]
 8005982:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005984:	441a      	add	r2, r3
 8005986:	68fb      	ldr	r3, [r7, #12]
 8005988:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	685a      	ldr	r2, [r3, #4]
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	689b      	ldr	r3, [r3, #8]
 8005992:	429a      	cmp	r2, r3
 8005994:	d32b      	bcc.n	80059ee <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005996:	68fb      	ldr	r3, [r7, #12]
 8005998:	681a      	ldr	r2, [r3, #0]
 800599a:	68fb      	ldr	r3, [r7, #12]
 800599c:	605a      	str	r2, [r3, #4]
 800599e:	e026      	b.n	80059ee <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	68d8      	ldr	r0, [r3, #12]
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059a8:	461a      	mov	r2, r3
 80059aa:	68b9      	ldr	r1, [r7, #8]
 80059ac:	f002 f862 	bl	8007a74 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	68da      	ldr	r2, [r3, #12]
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059b8:	425b      	negs	r3, r3
 80059ba:	441a      	add	r2, r3
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80059c0:	68fb      	ldr	r3, [r7, #12]
 80059c2:	68da      	ldr	r2, [r3, #12]
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	429a      	cmp	r2, r3
 80059ca:	d207      	bcs.n	80059dc <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	689a      	ldr	r2, [r3, #8]
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059d4:	425b      	negs	r3, r3
 80059d6:	441a      	add	r2, r3
 80059d8:	68fb      	ldr	r3, [r7, #12]
 80059da:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	2b02      	cmp	r3, #2
 80059e0:	d105      	bne.n	80059ee <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80059e2:	693b      	ldr	r3, [r7, #16]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d002      	beq.n	80059ee <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80059e8:	693b      	ldr	r3, [r7, #16]
 80059ea:	3b01      	subs	r3, #1
 80059ec:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80059ee:	693b      	ldr	r3, [r7, #16]
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	68fb      	ldr	r3, [r7, #12]
 80059f4:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80059f6:	697b      	ldr	r3, [r7, #20]
}
 80059f8:	4618      	mov	r0, r3
 80059fa:	3718      	adds	r7, #24
 80059fc:	46bd      	mov	sp, r7
 80059fe:	bd80      	pop	{r7, pc}

08005a00 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a00:	b580      	push	{r7, lr}
 8005a02:	b082      	sub	sp, #8
 8005a04:	af00      	add	r7, sp, #0
 8005a06:	6078      	str	r0, [r7, #4]
 8005a08:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d018      	beq.n	8005a44 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	68da      	ldr	r2, [r3, #12]
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a1a:	441a      	add	r2, r3
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68da      	ldr	r2, [r3, #12]
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	689b      	ldr	r3, [r3, #8]
 8005a28:	429a      	cmp	r2, r3
 8005a2a:	d303      	bcc.n	8005a34 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	681a      	ldr	r2, [r3, #0]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68d9      	ldr	r1, [r3, #12]
 8005a38:	687b      	ldr	r3, [r7, #4]
 8005a3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	6838      	ldr	r0, [r7, #0]
 8005a40:	f002 f818 	bl	8007a74 <memcpy>
	}
}
 8005a44:	bf00      	nop
 8005a46:	3708      	adds	r7, #8
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	bd80      	pop	{r7, pc}

08005a4c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005a4c:	b580      	push	{r7, lr}
 8005a4e:	b084      	sub	sp, #16
 8005a50:	af00      	add	r7, sp, #0
 8005a52:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005a54:	f001 fc7e 	bl	8007354 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005a5e:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a60:	e011      	b.n	8005a86 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d012      	beq.n	8005a90 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	3324      	adds	r3, #36	; 0x24
 8005a6e:	4618      	mov	r0, r3
 8005a70:	f000 fd50 	bl	8006514 <xTaskRemoveFromEventList>
 8005a74:	4603      	mov	r3, r0
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d001      	beq.n	8005a7e <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005a7a:	f000 fe27 	bl	80066cc <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005a7e:	7bfb      	ldrb	r3, [r7, #15]
 8005a80:	3b01      	subs	r3, #1
 8005a82:	b2db      	uxtb	r3, r3
 8005a84:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005a86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005a8a:	2b00      	cmp	r3, #0
 8005a8c:	dce9      	bgt.n	8005a62 <prvUnlockQueue+0x16>
 8005a8e:	e000      	b.n	8005a92 <prvUnlockQueue+0x46>
					break;
 8005a90:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	22ff      	movs	r2, #255	; 0xff
 8005a96:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8005a9a:	f001 fc8b 	bl	80073b4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005a9e:	f001 fc59 	bl	8007354 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005aa8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005aaa:	e011      	b.n	8005ad0 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	691b      	ldr	r3, [r3, #16]
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d012      	beq.n	8005ada <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	3310      	adds	r3, #16
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fd2b 	bl	8006514 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d001      	beq.n	8005ac8 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005ac4:	f000 fe02 	bl	80066cc <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005ac8:	7bbb      	ldrb	r3, [r7, #14]
 8005aca:	3b01      	subs	r3, #1
 8005acc:	b2db      	uxtb	r3, r3
 8005ace:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005ad0:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005ad4:	2b00      	cmp	r3, #0
 8005ad6:	dce9      	bgt.n	8005aac <prvUnlockQueue+0x60>
 8005ad8:	e000      	b.n	8005adc <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005ada:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	22ff      	movs	r2, #255	; 0xff
 8005ae0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8005ae4:	f001 fc66 	bl	80073b4 <vPortExitCritical>
}
 8005ae8:	bf00      	nop
 8005aea:	3710      	adds	r7, #16
 8005aec:	46bd      	mov	sp, r7
 8005aee:	bd80      	pop	{r7, pc}

08005af0 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005af0:	b580      	push	{r7, lr}
 8005af2:	b084      	sub	sp, #16
 8005af4:	af00      	add	r7, sp, #0
 8005af6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005af8:	f001 fc2c 	bl	8007354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d102      	bne.n	8005b0a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b04:	2301      	movs	r3, #1
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e001      	b.n	8005b0e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b0a:	2300      	movs	r3, #0
 8005b0c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b0e:	f001 fc51 	bl	80073b4 <vPortExitCritical>

	return xReturn;
 8005b12:	68fb      	ldr	r3, [r7, #12]
}
 8005b14:	4618      	mov	r0, r3
 8005b16:	3710      	adds	r7, #16
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	bd80      	pop	{r7, pc}

08005b1c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005b1c:	b580      	push	{r7, lr}
 8005b1e:	b084      	sub	sp, #16
 8005b20:	af00      	add	r7, sp, #0
 8005b22:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b24:	f001 fc16 	bl	8007354 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b30:	429a      	cmp	r2, r3
 8005b32:	d102      	bne.n	8005b3a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005b34:	2301      	movs	r3, #1
 8005b36:	60fb      	str	r3, [r7, #12]
 8005b38:	e001      	b.n	8005b3e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b3e:	f001 fc39 	bl	80073b4 <vPortExitCritical>

	return xReturn;
 8005b42:	68fb      	ldr	r3, [r7, #12]
}
 8005b44:	4618      	mov	r0, r3
 8005b46:	3710      	adds	r7, #16
 8005b48:	46bd      	mov	sp, r7
 8005b4a:	bd80      	pop	{r7, pc}

08005b4c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005b4c:	b480      	push	{r7}
 8005b4e:	b085      	sub	sp, #20
 8005b50:	af00      	add	r7, sp, #0
 8005b52:	6078      	str	r0, [r7, #4]
 8005b54:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b56:	2300      	movs	r3, #0
 8005b58:	60fb      	str	r3, [r7, #12]
 8005b5a:	e014      	b.n	8005b86 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005b5c:	4a0f      	ldr	r2, [pc, #60]	; (8005b9c <vQueueAddToRegistry+0x50>)
 8005b5e:	68fb      	ldr	r3, [r7, #12]
 8005b60:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005b64:	2b00      	cmp	r3, #0
 8005b66:	d10b      	bne.n	8005b80 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005b68:	490c      	ldr	r1, [pc, #48]	; (8005b9c <vQueueAddToRegistry+0x50>)
 8005b6a:	68fb      	ldr	r3, [r7, #12]
 8005b6c:	683a      	ldr	r2, [r7, #0]
 8005b6e:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005b72:	4a0a      	ldr	r2, [pc, #40]	; (8005b9c <vQueueAddToRegistry+0x50>)
 8005b74:	68fb      	ldr	r3, [r7, #12]
 8005b76:	00db      	lsls	r3, r3, #3
 8005b78:	4413      	add	r3, r2
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005b7e:	e006      	b.n	8005b8e <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005b80:	68fb      	ldr	r3, [r7, #12]
 8005b82:	3301      	adds	r3, #1
 8005b84:	60fb      	str	r3, [r7, #12]
 8005b86:	68fb      	ldr	r3, [r7, #12]
 8005b88:	2b07      	cmp	r3, #7
 8005b8a:	d9e7      	bls.n	8005b5c <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005b8c:	bf00      	nop
 8005b8e:	bf00      	nop
 8005b90:	3714      	adds	r7, #20
 8005b92:	46bd      	mov	sp, r7
 8005b94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b98:	4770      	bx	lr
 8005b9a:	bf00      	nop
 8005b9c:	20000a44 	.word	0x20000a44

08005ba0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b086      	sub	sp, #24
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	60f8      	str	r0, [r7, #12]
 8005ba8:	60b9      	str	r1, [r7, #8]
 8005baa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005bac:	68fb      	ldr	r3, [r7, #12]
 8005bae:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005bb0:	f001 fbd0 	bl	8007354 <vPortEnterCritical>
 8005bb4:	697b      	ldr	r3, [r7, #20]
 8005bb6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005bba:	b25b      	sxtb	r3, r3
 8005bbc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bc0:	d103      	bne.n	8005bca <vQueueWaitForMessageRestricted+0x2a>
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	2200      	movs	r2, #0
 8005bc6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bca:	697b      	ldr	r3, [r7, #20]
 8005bcc:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005bd0:	b25b      	sxtb	r3, r3
 8005bd2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005bd6:	d103      	bne.n	8005be0 <vQueueWaitForMessageRestricted+0x40>
 8005bd8:	697b      	ldr	r3, [r7, #20]
 8005bda:	2200      	movs	r2, #0
 8005bdc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005be0:	f001 fbe8 	bl	80073b4 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005be4:	697b      	ldr	r3, [r7, #20]
 8005be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d106      	bne.n	8005bfa <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	3324      	adds	r3, #36	; 0x24
 8005bf0:	687a      	ldr	r2, [r7, #4]
 8005bf2:	68b9      	ldr	r1, [r7, #8]
 8005bf4:	4618      	mov	r0, r3
 8005bf6:	f000 fc61 	bl	80064bc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005bfa:	6978      	ldr	r0, [r7, #20]
 8005bfc:	f7ff ff26 	bl	8005a4c <prvUnlockQueue>
	}
 8005c00:	bf00      	nop
 8005c02:	3718      	adds	r7, #24
 8005c04:	46bd      	mov	sp, r7
 8005c06:	bd80      	pop	{r7, pc}

08005c08 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c08:	b580      	push	{r7, lr}
 8005c0a:	b08e      	sub	sp, #56	; 0x38
 8005c0c:	af04      	add	r7, sp, #16
 8005c0e:	60f8      	str	r0, [r7, #12]
 8005c10:	60b9      	str	r1, [r7, #8]
 8005c12:	607a      	str	r2, [r7, #4]
 8005c14:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d10a      	bne.n	8005c32 <xTaskCreateStatic+0x2a>
	__asm volatile
 8005c1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c20:	f383 8811 	msr	BASEPRI, r3
 8005c24:	f3bf 8f6f 	isb	sy
 8005c28:	f3bf 8f4f 	dsb	sy
 8005c2c:	623b      	str	r3, [r7, #32]
}
 8005c2e:	bf00      	nop
 8005c30:	e7fe      	b.n	8005c30 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005c32:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c34:	2b00      	cmp	r3, #0
 8005c36:	d10a      	bne.n	8005c4e <xTaskCreateStatic+0x46>
	__asm volatile
 8005c38:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c3c:	f383 8811 	msr	BASEPRI, r3
 8005c40:	f3bf 8f6f 	isb	sy
 8005c44:	f3bf 8f4f 	dsb	sy
 8005c48:	61fb      	str	r3, [r7, #28]
}
 8005c4a:	bf00      	nop
 8005c4c:	e7fe      	b.n	8005c4c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005c4e:	23a8      	movs	r3, #168	; 0xa8
 8005c50:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005c52:	693b      	ldr	r3, [r7, #16]
 8005c54:	2ba8      	cmp	r3, #168	; 0xa8
 8005c56:	d00a      	beq.n	8005c6e <xTaskCreateStatic+0x66>
	__asm volatile
 8005c58:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c5c:	f383 8811 	msr	BASEPRI, r3
 8005c60:	f3bf 8f6f 	isb	sy
 8005c64:	f3bf 8f4f 	dsb	sy
 8005c68:	61bb      	str	r3, [r7, #24]
}
 8005c6a:	bf00      	nop
 8005c6c:	e7fe      	b.n	8005c6c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005c6e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005c70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	d01e      	beq.n	8005cb4 <xTaskCreateStatic+0xac>
 8005c76:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d01b      	beq.n	8005cb4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c7e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005c80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005c84:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005c86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c88:	2202      	movs	r2, #2
 8005c8a:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005c8e:	2300      	movs	r3, #0
 8005c90:	9303      	str	r3, [sp, #12]
 8005c92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005c94:	9302      	str	r3, [sp, #8]
 8005c96:	f107 0314 	add.w	r3, r7, #20
 8005c9a:	9301      	str	r3, [sp, #4]
 8005c9c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c9e:	9300      	str	r3, [sp, #0]
 8005ca0:	683b      	ldr	r3, [r7, #0]
 8005ca2:	687a      	ldr	r2, [r7, #4]
 8005ca4:	68b9      	ldr	r1, [r7, #8]
 8005ca6:	68f8      	ldr	r0, [r7, #12]
 8005ca8:	f000 f850 	bl	8005d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005cac:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8005cae:	f000 f8f3 	bl	8005e98 <prvAddNewTaskToReadyList>
 8005cb2:	e001      	b.n	8005cb8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8005cb4:	2300      	movs	r3, #0
 8005cb6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005cb8:	697b      	ldr	r3, [r7, #20]
	}
 8005cba:	4618      	mov	r0, r3
 8005cbc:	3728      	adds	r7, #40	; 0x28
 8005cbe:	46bd      	mov	sp, r7
 8005cc0:	bd80      	pop	{r7, pc}

08005cc2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005cc2:	b580      	push	{r7, lr}
 8005cc4:	b08c      	sub	sp, #48	; 0x30
 8005cc6:	af04      	add	r7, sp, #16
 8005cc8:	60f8      	str	r0, [r7, #12]
 8005cca:	60b9      	str	r1, [r7, #8]
 8005ccc:	603b      	str	r3, [r7, #0]
 8005cce:	4613      	mov	r3, r2
 8005cd0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005cd2:	88fb      	ldrh	r3, [r7, #6]
 8005cd4:	009b      	lsls	r3, r3, #2
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f001 fc5e 	bl	8007598 <pvPortMalloc>
 8005cdc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005cde:	697b      	ldr	r3, [r7, #20]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d00e      	beq.n	8005d02 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005ce4:	20a8      	movs	r0, #168	; 0xa8
 8005ce6:	f001 fc57 	bl	8007598 <pvPortMalloc>
 8005cea:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d003      	beq.n	8005cfa <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005cf2:	69fb      	ldr	r3, [r7, #28]
 8005cf4:	697a      	ldr	r2, [r7, #20]
 8005cf6:	631a      	str	r2, [r3, #48]	; 0x30
 8005cf8:	e005      	b.n	8005d06 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005cfa:	6978      	ldr	r0, [r7, #20]
 8005cfc:	f001 fd18 	bl	8007730 <vPortFree>
 8005d00:	e001      	b.n	8005d06 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d02:	2300      	movs	r3, #0
 8005d04:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d06:	69fb      	ldr	r3, [r7, #28]
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d017      	beq.n	8005d3c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	2200      	movs	r2, #0
 8005d10:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005d14:	88fa      	ldrh	r2, [r7, #6]
 8005d16:	2300      	movs	r3, #0
 8005d18:	9303      	str	r3, [sp, #12]
 8005d1a:	69fb      	ldr	r3, [r7, #28]
 8005d1c:	9302      	str	r3, [sp, #8]
 8005d1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005d20:	9301      	str	r3, [sp, #4]
 8005d22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005d24:	9300      	str	r3, [sp, #0]
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f000 f80e 	bl	8005d4c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d30:	69f8      	ldr	r0, [r7, #28]
 8005d32:	f000 f8b1 	bl	8005e98 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005d36:	2301      	movs	r3, #1
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	e002      	b.n	8005d42 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005d3c:	f04f 33ff 	mov.w	r3, #4294967295
 8005d40:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005d42:	69bb      	ldr	r3, [r7, #24]
	}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b088      	sub	sp, #32
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	607a      	str	r2, [r7, #4]
 8005d58:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005d5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d5c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	009b      	lsls	r3, r3, #2
 8005d62:	461a      	mov	r2, r3
 8005d64:	21a5      	movs	r1, #165	; 0xa5
 8005d66:	f001 fe01 	bl	800796c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005d6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d6c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8005d74:	3b01      	subs	r3, #1
 8005d76:	009b      	lsls	r3, r3, #2
 8005d78:	4413      	add	r3, r2
 8005d7a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005d7c:	69bb      	ldr	r3, [r7, #24]
 8005d7e:	f023 0307 	bic.w	r3, r3, #7
 8005d82:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005d84:	69bb      	ldr	r3, [r7, #24]
 8005d86:	f003 0307 	and.w	r3, r3, #7
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d00a      	beq.n	8005da4 <prvInitialiseNewTask+0x58>
	__asm volatile
 8005d8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d92:	f383 8811 	msr	BASEPRI, r3
 8005d96:	f3bf 8f6f 	isb	sy
 8005d9a:	f3bf 8f4f 	dsb	sy
 8005d9e:	617b      	str	r3, [r7, #20]
}
 8005da0:	bf00      	nop
 8005da2:	e7fe      	b.n	8005da2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005da4:	68bb      	ldr	r3, [r7, #8]
 8005da6:	2b00      	cmp	r3, #0
 8005da8:	d01f      	beq.n	8005dea <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005daa:	2300      	movs	r3, #0
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	e012      	b.n	8005dd6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005db0:	68ba      	ldr	r2, [r7, #8]
 8005db2:	69fb      	ldr	r3, [r7, #28]
 8005db4:	4413      	add	r3, r2
 8005db6:	7819      	ldrb	r1, [r3, #0]
 8005db8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005dba:	69fb      	ldr	r3, [r7, #28]
 8005dbc:	4413      	add	r3, r2
 8005dbe:	3334      	adds	r3, #52	; 0x34
 8005dc0:	460a      	mov	r2, r1
 8005dc2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005dc4:	68ba      	ldr	r2, [r7, #8]
 8005dc6:	69fb      	ldr	r3, [r7, #28]
 8005dc8:	4413      	add	r3, r2
 8005dca:	781b      	ldrb	r3, [r3, #0]
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d006      	beq.n	8005dde <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005dd0:	69fb      	ldr	r3, [r7, #28]
 8005dd2:	3301      	adds	r3, #1
 8005dd4:	61fb      	str	r3, [r7, #28]
 8005dd6:	69fb      	ldr	r3, [r7, #28]
 8005dd8:	2b0f      	cmp	r3, #15
 8005dda:	d9e9      	bls.n	8005db0 <prvInitialiseNewTask+0x64>
 8005ddc:	e000      	b.n	8005de0 <prvInitialiseNewTask+0x94>
			{
				break;
 8005dde:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005de0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005de2:	2200      	movs	r2, #0
 8005de4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005de8:	e003      	b.n	8005df2 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005df2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005df4:	2b37      	cmp	r3, #55	; 0x37
 8005df6:	d901      	bls.n	8005dfc <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005df8:	2337      	movs	r3, #55	; 0x37
 8005dfa:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005dfc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005dfe:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e00:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e04:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8005e06:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0a:	2200      	movs	r2, #0
 8005e0c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005e0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e10:	3304      	adds	r3, #4
 8005e12:	4618      	mov	r0, r3
 8005e14:	f7ff f978 	bl	8005108 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005e18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1a:	3318      	adds	r3, #24
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f7ff f973 	bl	8005108 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005e22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e26:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005e28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005e2a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8005e2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e30:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005e32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e34:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e36:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005e38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e3a:	2200      	movs	r2, #0
 8005e3c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005e40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e42:	2200      	movs	r2, #0
 8005e44:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005e48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e4a:	3354      	adds	r3, #84	; 0x54
 8005e4c:	224c      	movs	r2, #76	; 0x4c
 8005e4e:	2100      	movs	r1, #0
 8005e50:	4618      	mov	r0, r3
 8005e52:	f001 fd8b 	bl	800796c <memset>
 8005e56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e58:	4a0c      	ldr	r2, [pc, #48]	; (8005e8c <prvInitialiseNewTask+0x140>)
 8005e5a:	659a      	str	r2, [r3, #88]	; 0x58
 8005e5c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e5e:	4a0c      	ldr	r2, [pc, #48]	; (8005e90 <prvInitialiseNewTask+0x144>)
 8005e60:	65da      	str	r2, [r3, #92]	; 0x5c
 8005e62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e64:	4a0b      	ldr	r2, [pc, #44]	; (8005e94 <prvInitialiseNewTask+0x148>)
 8005e66:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005e68:	683a      	ldr	r2, [r7, #0]
 8005e6a:	68f9      	ldr	r1, [r7, #12]
 8005e6c:	69b8      	ldr	r0, [r7, #24]
 8005e6e:	f001 f941 	bl	80070f4 <pxPortInitialiseStack>
 8005e72:	4602      	mov	r2, r0
 8005e74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e76:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d002      	beq.n	8005e84 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005e7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005e80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8005e82:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005e84:	bf00      	nop
 8005e86:	3720      	adds	r7, #32
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	20004cd8 	.word	0x20004cd8
 8005e90:	20004d40 	.word	0x20004d40
 8005e94:	20004da8 	.word	0x20004da8

08005e98 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005e98:	b580      	push	{r7, lr}
 8005e9a:	b082      	sub	sp, #8
 8005e9c:	af00      	add	r7, sp, #0
 8005e9e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005ea0:	f001 fa58 	bl	8007354 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005ea4:	4b2d      	ldr	r3, [pc, #180]	; (8005f5c <prvAddNewTaskToReadyList+0xc4>)
 8005ea6:	681b      	ldr	r3, [r3, #0]
 8005ea8:	3301      	adds	r3, #1
 8005eaa:	4a2c      	ldr	r2, [pc, #176]	; (8005f5c <prvAddNewTaskToReadyList+0xc4>)
 8005eac:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005eae:	4b2c      	ldr	r3, [pc, #176]	; (8005f60 <prvAddNewTaskToReadyList+0xc8>)
 8005eb0:	681b      	ldr	r3, [r3, #0]
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d109      	bne.n	8005eca <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	; (8005f60 <prvAddNewTaskToReadyList+0xc8>)
 8005eb8:	687b      	ldr	r3, [r7, #4]
 8005eba:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005ebc:	4b27      	ldr	r3, [pc, #156]	; (8005f5c <prvAddNewTaskToReadyList+0xc4>)
 8005ebe:	681b      	ldr	r3, [r3, #0]
 8005ec0:	2b01      	cmp	r3, #1
 8005ec2:	d110      	bne.n	8005ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005ec4:	f000 fc26 	bl	8006714 <prvInitialiseTaskLists>
 8005ec8:	e00d      	b.n	8005ee6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005eca:	4b26      	ldr	r3, [pc, #152]	; (8005f64 <prvAddNewTaskToReadyList+0xcc>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d109      	bne.n	8005ee6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005ed2:	4b23      	ldr	r3, [pc, #140]	; (8005f60 <prvAddNewTaskToReadyList+0xc8>)
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005edc:	429a      	cmp	r2, r3
 8005ede:	d802      	bhi.n	8005ee6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005ee0:	4a1f      	ldr	r2, [pc, #124]	; (8005f60 <prvAddNewTaskToReadyList+0xc8>)
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005ee6:	4b20      	ldr	r3, [pc, #128]	; (8005f68 <prvAddNewTaskToReadyList+0xd0>)
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	3301      	adds	r3, #1
 8005eec:	4a1e      	ldr	r2, [pc, #120]	; (8005f68 <prvAddNewTaskToReadyList+0xd0>)
 8005eee:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005ef0:	4b1d      	ldr	r3, [pc, #116]	; (8005f68 <prvAddNewTaskToReadyList+0xd0>)
 8005ef2:	681a      	ldr	r2, [r3, #0]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005efc:	4b1b      	ldr	r3, [pc, #108]	; (8005f6c <prvAddNewTaskToReadyList+0xd4>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	429a      	cmp	r2, r3
 8005f02:	d903      	bls.n	8005f0c <prvAddNewTaskToReadyList+0x74>
 8005f04:	687b      	ldr	r3, [r7, #4]
 8005f06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f08:	4a18      	ldr	r2, [pc, #96]	; (8005f6c <prvAddNewTaskToReadyList+0xd4>)
 8005f0a:	6013      	str	r3, [r2, #0]
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	009b      	lsls	r3, r3, #2
 8005f18:	4a15      	ldr	r2, [pc, #84]	; (8005f70 <prvAddNewTaskToReadyList+0xd8>)
 8005f1a:	441a      	add	r2, r3
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	3304      	adds	r3, #4
 8005f20:	4619      	mov	r1, r3
 8005f22:	4610      	mov	r0, r2
 8005f24:	f7ff f8fd 	bl	8005122 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005f28:	f001 fa44 	bl	80073b4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005f2c:	4b0d      	ldr	r3, [pc, #52]	; (8005f64 <prvAddNewTaskToReadyList+0xcc>)
 8005f2e:	681b      	ldr	r3, [r3, #0]
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d00e      	beq.n	8005f52 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005f34:	4b0a      	ldr	r3, [pc, #40]	; (8005f60 <prvAddNewTaskToReadyList+0xc8>)
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f3e:	429a      	cmp	r2, r3
 8005f40:	d207      	bcs.n	8005f52 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005f42:	4b0c      	ldr	r3, [pc, #48]	; (8005f74 <prvAddNewTaskToReadyList+0xdc>)
 8005f44:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005f48:	601a      	str	r2, [r3, #0]
 8005f4a:	f3bf 8f4f 	dsb	sy
 8005f4e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f52:	bf00      	nop
 8005f54:	3708      	adds	r7, #8
 8005f56:	46bd      	mov	sp, r7
 8005f58:	bd80      	pop	{r7, pc}
 8005f5a:	bf00      	nop
 8005f5c:	20000f58 	.word	0x20000f58
 8005f60:	20000a84 	.word	0x20000a84
 8005f64:	20000f64 	.word	0x20000f64
 8005f68:	20000f74 	.word	0x20000f74
 8005f6c:	20000f60 	.word	0x20000f60
 8005f70:	20000a88 	.word	0x20000a88
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005f78:	b580      	push	{r7, lr}
 8005f7a:	b084      	sub	sp, #16
 8005f7c:	af00      	add	r7, sp, #0
 8005f7e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005f80:	2300      	movs	r3, #0
 8005f82:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d017      	beq.n	8005fba <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005f8a:	4b13      	ldr	r3, [pc, #76]	; (8005fd8 <vTaskDelay+0x60>)
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	d00a      	beq.n	8005fa8 <vTaskDelay+0x30>
	__asm volatile
 8005f92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f96:	f383 8811 	msr	BASEPRI, r3
 8005f9a:	f3bf 8f6f 	isb	sy
 8005f9e:	f3bf 8f4f 	dsb	sy
 8005fa2:	60bb      	str	r3, [r7, #8]
}
 8005fa4:	bf00      	nop
 8005fa6:	e7fe      	b.n	8005fa6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005fa8:	f000 f88a 	bl	80060c0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005fac:	2100      	movs	r1, #0
 8005fae:	6878      	ldr	r0, [r7, #4]
 8005fb0:	f000 fcfe 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005fb4:	f000 f892 	bl	80060dc <xTaskResumeAll>
 8005fb8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d107      	bne.n	8005fd0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8005fc0:	4b06      	ldr	r3, [pc, #24]	; (8005fdc <vTaskDelay+0x64>)
 8005fc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005fc6:	601a      	str	r2, [r3, #0]
 8005fc8:	f3bf 8f4f 	dsb	sy
 8005fcc:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005fd0:	bf00      	nop
 8005fd2:	3710      	adds	r7, #16
 8005fd4:	46bd      	mov	sp, r7
 8005fd6:	bd80      	pop	{r7, pc}
 8005fd8:	20000f80 	.word	0x20000f80
 8005fdc:	e000ed04 	.word	0xe000ed04

08005fe0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005fe0:	b580      	push	{r7, lr}
 8005fe2:	b08a      	sub	sp, #40	; 0x28
 8005fe4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005fe6:	2300      	movs	r3, #0
 8005fe8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005fea:	2300      	movs	r3, #0
 8005fec:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005fee:	463a      	mov	r2, r7
 8005ff0:	1d39      	adds	r1, r7, #4
 8005ff2:	f107 0308 	add.w	r3, r7, #8
 8005ff6:	4618      	mov	r0, r3
 8005ff8:	f7ff f832 	bl	8005060 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005ffc:	6839      	ldr	r1, [r7, #0]
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68ba      	ldr	r2, [r7, #8]
 8006002:	9202      	str	r2, [sp, #8]
 8006004:	9301      	str	r3, [sp, #4]
 8006006:	2300      	movs	r3, #0
 8006008:	9300      	str	r3, [sp, #0]
 800600a:	2300      	movs	r3, #0
 800600c:	460a      	mov	r2, r1
 800600e:	4924      	ldr	r1, [pc, #144]	; (80060a0 <vTaskStartScheduler+0xc0>)
 8006010:	4824      	ldr	r0, [pc, #144]	; (80060a4 <vTaskStartScheduler+0xc4>)
 8006012:	f7ff fdf9 	bl	8005c08 <xTaskCreateStatic>
 8006016:	4603      	mov	r3, r0
 8006018:	4a23      	ldr	r2, [pc, #140]	; (80060a8 <vTaskStartScheduler+0xc8>)
 800601a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800601c:	4b22      	ldr	r3, [pc, #136]	; (80060a8 <vTaskStartScheduler+0xc8>)
 800601e:	681b      	ldr	r3, [r3, #0]
 8006020:	2b00      	cmp	r3, #0
 8006022:	d002      	beq.n	800602a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006024:	2301      	movs	r3, #1
 8006026:	617b      	str	r3, [r7, #20]
 8006028:	e001      	b.n	800602e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800602a:	2300      	movs	r3, #0
 800602c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800602e:	697b      	ldr	r3, [r7, #20]
 8006030:	2b01      	cmp	r3, #1
 8006032:	d102      	bne.n	800603a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006034:	f000 fd10 	bl	8006a58 <xTimerCreateTimerTask>
 8006038:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800603a:	697b      	ldr	r3, [r7, #20]
 800603c:	2b01      	cmp	r3, #1
 800603e:	d11b      	bne.n	8006078 <vTaskStartScheduler+0x98>
	__asm volatile
 8006040:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006044:	f383 8811 	msr	BASEPRI, r3
 8006048:	f3bf 8f6f 	isb	sy
 800604c:	f3bf 8f4f 	dsb	sy
 8006050:	613b      	str	r3, [r7, #16]
}
 8006052:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006054:	4b15      	ldr	r3, [pc, #84]	; (80060ac <vTaskStartScheduler+0xcc>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	3354      	adds	r3, #84	; 0x54
 800605a:	4a15      	ldr	r2, [pc, #84]	; (80060b0 <vTaskStartScheduler+0xd0>)
 800605c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800605e:	4b15      	ldr	r3, [pc, #84]	; (80060b4 <vTaskStartScheduler+0xd4>)
 8006060:	f04f 32ff 	mov.w	r2, #4294967295
 8006064:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006066:	4b14      	ldr	r3, [pc, #80]	; (80060b8 <vTaskStartScheduler+0xd8>)
 8006068:	2201      	movs	r2, #1
 800606a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800606c:	4b13      	ldr	r3, [pc, #76]	; (80060bc <vTaskStartScheduler+0xdc>)
 800606e:	2200      	movs	r2, #0
 8006070:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006072:	f001 f8cd 	bl	8007210 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006076:	e00e      	b.n	8006096 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006078:	697b      	ldr	r3, [r7, #20]
 800607a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800607e:	d10a      	bne.n	8006096 <vTaskStartScheduler+0xb6>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	60fb      	str	r3, [r7, #12]
}
 8006092:	bf00      	nop
 8006094:	e7fe      	b.n	8006094 <vTaskStartScheduler+0xb4>
}
 8006096:	bf00      	nop
 8006098:	3718      	adds	r7, #24
 800609a:	46bd      	mov	sp, r7
 800609c:	bd80      	pop	{r7, pc}
 800609e:	bf00      	nop
 80060a0:	08007b74 	.word	0x08007b74
 80060a4:	080066e5 	.word	0x080066e5
 80060a8:	20000f7c 	.word	0x20000f7c
 80060ac:	20000a84 	.word	0x20000a84
 80060b0:	20000060 	.word	0x20000060
 80060b4:	20000f78 	.word	0x20000f78
 80060b8:	20000f64 	.word	0x20000f64
 80060bc:	20000f5c 	.word	0x20000f5c

080060c0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80060c0:	b480      	push	{r7}
 80060c2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80060c4:	4b04      	ldr	r3, [pc, #16]	; (80060d8 <vTaskSuspendAll+0x18>)
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	3301      	adds	r3, #1
 80060ca:	4a03      	ldr	r2, [pc, #12]	; (80060d8 <vTaskSuspendAll+0x18>)
 80060cc:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80060ce:	bf00      	nop
 80060d0:	46bd      	mov	sp, r7
 80060d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d6:	4770      	bx	lr
 80060d8:	20000f80 	.word	0x20000f80

080060dc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80060dc:	b580      	push	{r7, lr}
 80060de:	b084      	sub	sp, #16
 80060e0:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80060e2:	2300      	movs	r3, #0
 80060e4:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80060e6:	2300      	movs	r3, #0
 80060e8:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 80060ea:	4b42      	ldr	r3, [pc, #264]	; (80061f4 <xTaskResumeAll+0x118>)
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d10a      	bne.n	8006108 <xTaskResumeAll+0x2c>
	__asm volatile
 80060f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80060f6:	f383 8811 	msr	BASEPRI, r3
 80060fa:	f3bf 8f6f 	isb	sy
 80060fe:	f3bf 8f4f 	dsb	sy
 8006102:	603b      	str	r3, [r7, #0]
}
 8006104:	bf00      	nop
 8006106:	e7fe      	b.n	8006106 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006108:	f001 f924 	bl	8007354 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800610c:	4b39      	ldr	r3, [pc, #228]	; (80061f4 <xTaskResumeAll+0x118>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	3b01      	subs	r3, #1
 8006112:	4a38      	ldr	r2, [pc, #224]	; (80061f4 <xTaskResumeAll+0x118>)
 8006114:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006116:	4b37      	ldr	r3, [pc, #220]	; (80061f4 <xTaskResumeAll+0x118>)
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	2b00      	cmp	r3, #0
 800611c:	d162      	bne.n	80061e4 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800611e:	4b36      	ldr	r3, [pc, #216]	; (80061f8 <xTaskResumeAll+0x11c>)
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	2b00      	cmp	r3, #0
 8006124:	d05e      	beq.n	80061e4 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006126:	e02f      	b.n	8006188 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006128:	4b34      	ldr	r3, [pc, #208]	; (80061fc <xTaskResumeAll+0x120>)
 800612a:	68db      	ldr	r3, [r3, #12]
 800612c:	68db      	ldr	r3, [r3, #12]
 800612e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	3318      	adds	r3, #24
 8006134:	4618      	mov	r0, r3
 8006136:	f7ff f851 	bl	80051dc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	3304      	adds	r3, #4
 800613e:	4618      	mov	r0, r3
 8006140:	f7ff f84c 	bl	80051dc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006148:	4b2d      	ldr	r3, [pc, #180]	; (8006200 <xTaskResumeAll+0x124>)
 800614a:	681b      	ldr	r3, [r3, #0]
 800614c:	429a      	cmp	r2, r3
 800614e:	d903      	bls.n	8006158 <xTaskResumeAll+0x7c>
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006154:	4a2a      	ldr	r2, [pc, #168]	; (8006200 <xTaskResumeAll+0x124>)
 8006156:	6013      	str	r3, [r2, #0]
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800615c:	4613      	mov	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	4413      	add	r3, r2
 8006162:	009b      	lsls	r3, r3, #2
 8006164:	4a27      	ldr	r2, [pc, #156]	; (8006204 <xTaskResumeAll+0x128>)
 8006166:	441a      	add	r2, r3
 8006168:	68fb      	ldr	r3, [r7, #12]
 800616a:	3304      	adds	r3, #4
 800616c:	4619      	mov	r1, r3
 800616e:	4610      	mov	r0, r2
 8006170:	f7fe ffd7 	bl	8005122 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006178:	4b23      	ldr	r3, [pc, #140]	; (8006208 <xTaskResumeAll+0x12c>)
 800617a:	681b      	ldr	r3, [r3, #0]
 800617c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800617e:	429a      	cmp	r2, r3
 8006180:	d302      	bcc.n	8006188 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8006182:	4b22      	ldr	r3, [pc, #136]	; (800620c <xTaskResumeAll+0x130>)
 8006184:	2201      	movs	r2, #1
 8006186:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006188:	4b1c      	ldr	r3, [pc, #112]	; (80061fc <xTaskResumeAll+0x120>)
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	2b00      	cmp	r3, #0
 800618e:	d1cb      	bne.n	8006128 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006190:	68fb      	ldr	r3, [r7, #12]
 8006192:	2b00      	cmp	r3, #0
 8006194:	d001      	beq.n	800619a <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006196:	f000 fb5f 	bl	8006858 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 800619a:	4b1d      	ldr	r3, [pc, #116]	; (8006210 <xTaskResumeAll+0x134>)
 800619c:	681b      	ldr	r3, [r3, #0]
 800619e:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	2b00      	cmp	r3, #0
 80061a4:	d010      	beq.n	80061c8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80061a6:	f000 f847 	bl	8006238 <xTaskIncrementTick>
 80061aa:	4603      	mov	r3, r0
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d002      	beq.n	80061b6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 80061b0:	4b16      	ldr	r3, [pc, #88]	; (800620c <xTaskResumeAll+0x130>)
 80061b2:	2201      	movs	r2, #1
 80061b4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	3b01      	subs	r3, #1
 80061ba:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1f1      	bne.n	80061a6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 80061c2:	4b13      	ldr	r3, [pc, #76]	; (8006210 <xTaskResumeAll+0x134>)
 80061c4:	2200      	movs	r2, #0
 80061c6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80061c8:	4b10      	ldr	r3, [pc, #64]	; (800620c <xTaskResumeAll+0x130>)
 80061ca:	681b      	ldr	r3, [r3, #0]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d009      	beq.n	80061e4 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80061d0:	2301      	movs	r3, #1
 80061d2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80061d4:	4b0f      	ldr	r3, [pc, #60]	; (8006214 <xTaskResumeAll+0x138>)
 80061d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80061da:	601a      	str	r2, [r3, #0]
 80061dc:	f3bf 8f4f 	dsb	sy
 80061e0:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80061e4:	f001 f8e6 	bl	80073b4 <vPortExitCritical>

	return xAlreadyYielded;
 80061e8:	68bb      	ldr	r3, [r7, #8]
}
 80061ea:	4618      	mov	r0, r3
 80061ec:	3710      	adds	r7, #16
 80061ee:	46bd      	mov	sp, r7
 80061f0:	bd80      	pop	{r7, pc}
 80061f2:	bf00      	nop
 80061f4:	20000f80 	.word	0x20000f80
 80061f8:	20000f58 	.word	0x20000f58
 80061fc:	20000f18 	.word	0x20000f18
 8006200:	20000f60 	.word	0x20000f60
 8006204:	20000a88 	.word	0x20000a88
 8006208:	20000a84 	.word	0x20000a84
 800620c:	20000f6c 	.word	0x20000f6c
 8006210:	20000f68 	.word	0x20000f68
 8006214:	e000ed04 	.word	0xe000ed04

08006218 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006218:	b480      	push	{r7}
 800621a:	b083      	sub	sp, #12
 800621c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800621e:	4b05      	ldr	r3, [pc, #20]	; (8006234 <xTaskGetTickCount+0x1c>)
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006224:	687b      	ldr	r3, [r7, #4]
}
 8006226:	4618      	mov	r0, r3
 8006228:	370c      	adds	r7, #12
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr
 8006232:	bf00      	nop
 8006234:	20000f5c 	.word	0x20000f5c

08006238 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006238:	b580      	push	{r7, lr}
 800623a:	b086      	sub	sp, #24
 800623c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800623e:	2300      	movs	r3, #0
 8006240:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006242:	4b4f      	ldr	r3, [pc, #316]	; (8006380 <xTaskIncrementTick+0x148>)
 8006244:	681b      	ldr	r3, [r3, #0]
 8006246:	2b00      	cmp	r3, #0
 8006248:	f040 808f 	bne.w	800636a <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800624c:	4b4d      	ldr	r3, [pc, #308]	; (8006384 <xTaskIncrementTick+0x14c>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	3301      	adds	r3, #1
 8006252:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006254:	4a4b      	ldr	r2, [pc, #300]	; (8006384 <xTaskIncrementTick+0x14c>)
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800625a:	693b      	ldr	r3, [r7, #16]
 800625c:	2b00      	cmp	r3, #0
 800625e:	d120      	bne.n	80062a2 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006260:	4b49      	ldr	r3, [pc, #292]	; (8006388 <xTaskIncrementTick+0x150>)
 8006262:	681b      	ldr	r3, [r3, #0]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d00a      	beq.n	8006280 <xTaskIncrementTick+0x48>
	__asm volatile
 800626a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800626e:	f383 8811 	msr	BASEPRI, r3
 8006272:	f3bf 8f6f 	isb	sy
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	603b      	str	r3, [r7, #0]
}
 800627c:	bf00      	nop
 800627e:	e7fe      	b.n	800627e <xTaskIncrementTick+0x46>
 8006280:	4b41      	ldr	r3, [pc, #260]	; (8006388 <xTaskIncrementTick+0x150>)
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	60fb      	str	r3, [r7, #12]
 8006286:	4b41      	ldr	r3, [pc, #260]	; (800638c <xTaskIncrementTick+0x154>)
 8006288:	681b      	ldr	r3, [r3, #0]
 800628a:	4a3f      	ldr	r2, [pc, #252]	; (8006388 <xTaskIncrementTick+0x150>)
 800628c:	6013      	str	r3, [r2, #0]
 800628e:	4a3f      	ldr	r2, [pc, #252]	; (800638c <xTaskIncrementTick+0x154>)
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6013      	str	r3, [r2, #0]
 8006294:	4b3e      	ldr	r3, [pc, #248]	; (8006390 <xTaskIncrementTick+0x158>)
 8006296:	681b      	ldr	r3, [r3, #0]
 8006298:	3301      	adds	r3, #1
 800629a:	4a3d      	ldr	r2, [pc, #244]	; (8006390 <xTaskIncrementTick+0x158>)
 800629c:	6013      	str	r3, [r2, #0]
 800629e:	f000 fadb 	bl	8006858 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 80062a2:	4b3c      	ldr	r3, [pc, #240]	; (8006394 <xTaskIncrementTick+0x15c>)
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	693a      	ldr	r2, [r7, #16]
 80062a8:	429a      	cmp	r2, r3
 80062aa:	d349      	bcc.n	8006340 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80062ac:	4b36      	ldr	r3, [pc, #216]	; (8006388 <xTaskIncrementTick+0x150>)
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	681b      	ldr	r3, [r3, #0]
 80062b2:	2b00      	cmp	r3, #0
 80062b4:	d104      	bne.n	80062c0 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80062b6:	4b37      	ldr	r3, [pc, #220]	; (8006394 <xTaskIncrementTick+0x15c>)
 80062b8:	f04f 32ff 	mov.w	r2, #4294967295
 80062bc:	601a      	str	r2, [r3, #0]
					break;
 80062be:	e03f      	b.n	8006340 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80062c0:	4b31      	ldr	r3, [pc, #196]	; (8006388 <xTaskIncrementTick+0x150>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	68db      	ldr	r3, [r3, #12]
 80062c6:	68db      	ldr	r3, [r3, #12]
 80062c8:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 80062ca:	68bb      	ldr	r3, [r7, #8]
 80062cc:	685b      	ldr	r3, [r3, #4]
 80062ce:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 80062d0:	693a      	ldr	r2, [r7, #16]
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	429a      	cmp	r2, r3
 80062d6:	d203      	bcs.n	80062e0 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 80062d8:	4a2e      	ldr	r2, [pc, #184]	; (8006394 <xTaskIncrementTick+0x15c>)
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 80062de:	e02f      	b.n	8006340 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80062e0:	68bb      	ldr	r3, [r7, #8]
 80062e2:	3304      	adds	r3, #4
 80062e4:	4618      	mov	r0, r3
 80062e6:	f7fe ff79 	bl	80051dc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	d004      	beq.n	80062fc <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80062f2:	68bb      	ldr	r3, [r7, #8]
 80062f4:	3318      	adds	r3, #24
 80062f6:	4618      	mov	r0, r3
 80062f8:	f7fe ff70 	bl	80051dc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006300:	4b25      	ldr	r3, [pc, #148]	; (8006398 <xTaskIncrementTick+0x160>)
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	429a      	cmp	r2, r3
 8006306:	d903      	bls.n	8006310 <xTaskIncrementTick+0xd8>
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800630c:	4a22      	ldr	r2, [pc, #136]	; (8006398 <xTaskIncrementTick+0x160>)
 800630e:	6013      	str	r3, [r2, #0]
 8006310:	68bb      	ldr	r3, [r7, #8]
 8006312:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006314:	4613      	mov	r3, r2
 8006316:	009b      	lsls	r3, r3, #2
 8006318:	4413      	add	r3, r2
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4a1f      	ldr	r2, [pc, #124]	; (800639c <xTaskIncrementTick+0x164>)
 800631e:	441a      	add	r2, r3
 8006320:	68bb      	ldr	r3, [r7, #8]
 8006322:	3304      	adds	r3, #4
 8006324:	4619      	mov	r1, r3
 8006326:	4610      	mov	r0, r2
 8006328:	f7fe fefb 	bl	8005122 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800632c:	68bb      	ldr	r3, [r7, #8]
 800632e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006330:	4b1b      	ldr	r3, [pc, #108]	; (80063a0 <xTaskIncrementTick+0x168>)
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006336:	429a      	cmp	r2, r3
 8006338:	d3b8      	bcc.n	80062ac <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 800633a:	2301      	movs	r3, #1
 800633c:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800633e:	e7b5      	b.n	80062ac <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006340:	4b17      	ldr	r3, [pc, #92]	; (80063a0 <xTaskIncrementTick+0x168>)
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006346:	4915      	ldr	r1, [pc, #84]	; (800639c <xTaskIncrementTick+0x164>)
 8006348:	4613      	mov	r3, r2
 800634a:	009b      	lsls	r3, r3, #2
 800634c:	4413      	add	r3, r2
 800634e:	009b      	lsls	r3, r3, #2
 8006350:	440b      	add	r3, r1
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	2b01      	cmp	r3, #1
 8006356:	d901      	bls.n	800635c <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006358:	2301      	movs	r3, #1
 800635a:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800635c:	4b11      	ldr	r3, [pc, #68]	; (80063a4 <xTaskIncrementTick+0x16c>)
 800635e:	681b      	ldr	r3, [r3, #0]
 8006360:	2b00      	cmp	r3, #0
 8006362:	d007      	beq.n	8006374 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006364:	2301      	movs	r3, #1
 8006366:	617b      	str	r3, [r7, #20]
 8006368:	e004      	b.n	8006374 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 800636a:	4b0f      	ldr	r3, [pc, #60]	; (80063a8 <xTaskIncrementTick+0x170>)
 800636c:	681b      	ldr	r3, [r3, #0]
 800636e:	3301      	adds	r3, #1
 8006370:	4a0d      	ldr	r2, [pc, #52]	; (80063a8 <xTaskIncrementTick+0x170>)
 8006372:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006374:	697b      	ldr	r3, [r7, #20]
}
 8006376:	4618      	mov	r0, r3
 8006378:	3718      	adds	r7, #24
 800637a:	46bd      	mov	sp, r7
 800637c:	bd80      	pop	{r7, pc}
 800637e:	bf00      	nop
 8006380:	20000f80 	.word	0x20000f80
 8006384:	20000f5c 	.word	0x20000f5c
 8006388:	20000f10 	.word	0x20000f10
 800638c:	20000f14 	.word	0x20000f14
 8006390:	20000f70 	.word	0x20000f70
 8006394:	20000f78 	.word	0x20000f78
 8006398:	20000f60 	.word	0x20000f60
 800639c:	20000a88 	.word	0x20000a88
 80063a0:	20000a84 	.word	0x20000a84
 80063a4:	20000f6c 	.word	0x20000f6c
 80063a8:	20000f68 	.word	0x20000f68

080063ac <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 80063ac:	b480      	push	{r7}
 80063ae:	b085      	sub	sp, #20
 80063b0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 80063b2:	4b2a      	ldr	r3, [pc, #168]	; (800645c <vTaskSwitchContext+0xb0>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	2b00      	cmp	r3, #0
 80063b8:	d003      	beq.n	80063c2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 80063ba:	4b29      	ldr	r3, [pc, #164]	; (8006460 <vTaskSwitchContext+0xb4>)
 80063bc:	2201      	movs	r2, #1
 80063be:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 80063c0:	e046      	b.n	8006450 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 80063c2:	4b27      	ldr	r3, [pc, #156]	; (8006460 <vTaskSwitchContext+0xb4>)
 80063c4:	2200      	movs	r2, #0
 80063c6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80063c8:	4b26      	ldr	r3, [pc, #152]	; (8006464 <vTaskSwitchContext+0xb8>)
 80063ca:	681b      	ldr	r3, [r3, #0]
 80063cc:	60fb      	str	r3, [r7, #12]
 80063ce:	e010      	b.n	80063f2 <vTaskSwitchContext+0x46>
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	2b00      	cmp	r3, #0
 80063d4:	d10a      	bne.n	80063ec <vTaskSwitchContext+0x40>
	__asm volatile
 80063d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80063da:	f383 8811 	msr	BASEPRI, r3
 80063de:	f3bf 8f6f 	isb	sy
 80063e2:	f3bf 8f4f 	dsb	sy
 80063e6:	607b      	str	r3, [r7, #4]
}
 80063e8:	bf00      	nop
 80063ea:	e7fe      	b.n	80063ea <vTaskSwitchContext+0x3e>
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	3b01      	subs	r3, #1
 80063f0:	60fb      	str	r3, [r7, #12]
 80063f2:	491d      	ldr	r1, [pc, #116]	; (8006468 <vTaskSwitchContext+0xbc>)
 80063f4:	68fa      	ldr	r2, [r7, #12]
 80063f6:	4613      	mov	r3, r2
 80063f8:	009b      	lsls	r3, r3, #2
 80063fa:	4413      	add	r3, r2
 80063fc:	009b      	lsls	r3, r3, #2
 80063fe:	440b      	add	r3, r1
 8006400:	681b      	ldr	r3, [r3, #0]
 8006402:	2b00      	cmp	r3, #0
 8006404:	d0e4      	beq.n	80063d0 <vTaskSwitchContext+0x24>
 8006406:	68fa      	ldr	r2, [r7, #12]
 8006408:	4613      	mov	r3, r2
 800640a:	009b      	lsls	r3, r3, #2
 800640c:	4413      	add	r3, r2
 800640e:	009b      	lsls	r3, r3, #2
 8006410:	4a15      	ldr	r2, [pc, #84]	; (8006468 <vTaskSwitchContext+0xbc>)
 8006412:	4413      	add	r3, r2
 8006414:	60bb      	str	r3, [r7, #8]
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	685b      	ldr	r3, [r3, #4]
 800641a:	685a      	ldr	r2, [r3, #4]
 800641c:	68bb      	ldr	r3, [r7, #8]
 800641e:	605a      	str	r2, [r3, #4]
 8006420:	68bb      	ldr	r3, [r7, #8]
 8006422:	685a      	ldr	r2, [r3, #4]
 8006424:	68bb      	ldr	r3, [r7, #8]
 8006426:	3308      	adds	r3, #8
 8006428:	429a      	cmp	r2, r3
 800642a:	d104      	bne.n	8006436 <vTaskSwitchContext+0x8a>
 800642c:	68bb      	ldr	r3, [r7, #8]
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	685a      	ldr	r2, [r3, #4]
 8006432:	68bb      	ldr	r3, [r7, #8]
 8006434:	605a      	str	r2, [r3, #4]
 8006436:	68bb      	ldr	r3, [r7, #8]
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	68db      	ldr	r3, [r3, #12]
 800643c:	4a0b      	ldr	r2, [pc, #44]	; (800646c <vTaskSwitchContext+0xc0>)
 800643e:	6013      	str	r3, [r2, #0]
 8006440:	4a08      	ldr	r2, [pc, #32]	; (8006464 <vTaskSwitchContext+0xb8>)
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006446:	4b09      	ldr	r3, [pc, #36]	; (800646c <vTaskSwitchContext+0xc0>)
 8006448:	681b      	ldr	r3, [r3, #0]
 800644a:	3354      	adds	r3, #84	; 0x54
 800644c:	4a08      	ldr	r2, [pc, #32]	; (8006470 <vTaskSwitchContext+0xc4>)
 800644e:	6013      	str	r3, [r2, #0]
}
 8006450:	bf00      	nop
 8006452:	3714      	adds	r7, #20
 8006454:	46bd      	mov	sp, r7
 8006456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645a:	4770      	bx	lr
 800645c:	20000f80 	.word	0x20000f80
 8006460:	20000f6c 	.word	0x20000f6c
 8006464:	20000f60 	.word	0x20000f60
 8006468:	20000a88 	.word	0x20000a88
 800646c:	20000a84 	.word	0x20000a84
 8006470:	20000060 	.word	0x20000060

08006474 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006474:	b580      	push	{r7, lr}
 8006476:	b084      	sub	sp, #16
 8006478:	af00      	add	r7, sp, #0
 800647a:	6078      	str	r0, [r7, #4]
 800647c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	60fb      	str	r3, [r7, #12]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800649a:	4b07      	ldr	r3, [pc, #28]	; (80064b8 <vTaskPlaceOnEventList+0x44>)
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	3318      	adds	r3, #24
 80064a0:	4619      	mov	r1, r3
 80064a2:	6878      	ldr	r0, [r7, #4]
 80064a4:	f7fe fe61 	bl	800516a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 80064a8:	2101      	movs	r1, #1
 80064aa:	6838      	ldr	r0, [r7, #0]
 80064ac:	f000 fa80 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
}
 80064b0:	bf00      	nop
 80064b2:	3710      	adds	r7, #16
 80064b4:	46bd      	mov	sp, r7
 80064b6:	bd80      	pop	{r7, pc}
 80064b8:	20000a84 	.word	0x20000a84

080064bc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80064bc:	b580      	push	{r7, lr}
 80064be:	b086      	sub	sp, #24
 80064c0:	af00      	add	r7, sp, #0
 80064c2:	60f8      	str	r0, [r7, #12]
 80064c4:	60b9      	str	r1, [r7, #8]
 80064c6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 80064c8:	68fb      	ldr	r3, [r7, #12]
 80064ca:	2b00      	cmp	r3, #0
 80064cc:	d10a      	bne.n	80064e4 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 80064ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064d2:	f383 8811 	msr	BASEPRI, r3
 80064d6:	f3bf 8f6f 	isb	sy
 80064da:	f3bf 8f4f 	dsb	sy
 80064de:	617b      	str	r3, [r7, #20]
}
 80064e0:	bf00      	nop
 80064e2:	e7fe      	b.n	80064e2 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 80064e4:	4b0a      	ldr	r3, [pc, #40]	; (8006510 <vTaskPlaceOnEventListRestricted+0x54>)
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	3318      	adds	r3, #24
 80064ea:	4619      	mov	r1, r3
 80064ec:	68f8      	ldr	r0, [r7, #12]
 80064ee:	f7fe fe18 	bl	8005122 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 80064f2:	687b      	ldr	r3, [r7, #4]
 80064f4:	2b00      	cmp	r3, #0
 80064f6:	d002      	beq.n	80064fe <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 80064f8:	f04f 33ff 	mov.w	r3, #4294967295
 80064fc:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80064fe:	6879      	ldr	r1, [r7, #4]
 8006500:	68b8      	ldr	r0, [r7, #8]
 8006502:	f000 fa55 	bl	80069b0 <prvAddCurrentTaskToDelayedList>
	}
 8006506:	bf00      	nop
 8006508:	3718      	adds	r7, #24
 800650a:	46bd      	mov	sp, r7
 800650c:	bd80      	pop	{r7, pc}
 800650e:	bf00      	nop
 8006510:	20000a84 	.word	0x20000a84

08006514 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006514:	b580      	push	{r7, lr}
 8006516:	b086      	sub	sp, #24
 8006518:	af00      	add	r7, sp, #0
 800651a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	68db      	ldr	r3, [r3, #12]
 8006520:	68db      	ldr	r3, [r3, #12]
 8006522:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006524:	693b      	ldr	r3, [r7, #16]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d10a      	bne.n	8006540 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800652a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652e:	f383 8811 	msr	BASEPRI, r3
 8006532:	f3bf 8f6f 	isb	sy
 8006536:	f3bf 8f4f 	dsb	sy
 800653a:	60fb      	str	r3, [r7, #12]
}
 800653c:	bf00      	nop
 800653e:	e7fe      	b.n	800653e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006540:	693b      	ldr	r3, [r7, #16]
 8006542:	3318      	adds	r3, #24
 8006544:	4618      	mov	r0, r3
 8006546:	f7fe fe49 	bl	80051dc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800654a:	4b1e      	ldr	r3, [pc, #120]	; (80065c4 <xTaskRemoveFromEventList+0xb0>)
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	2b00      	cmp	r3, #0
 8006550:	d11d      	bne.n	800658e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006552:	693b      	ldr	r3, [r7, #16]
 8006554:	3304      	adds	r3, #4
 8006556:	4618      	mov	r0, r3
 8006558:	f7fe fe40 	bl	80051dc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800655c:	693b      	ldr	r3, [r7, #16]
 800655e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006560:	4b19      	ldr	r3, [pc, #100]	; (80065c8 <xTaskRemoveFromEventList+0xb4>)
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	429a      	cmp	r2, r3
 8006566:	d903      	bls.n	8006570 <xTaskRemoveFromEventList+0x5c>
 8006568:	693b      	ldr	r3, [r7, #16]
 800656a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800656c:	4a16      	ldr	r2, [pc, #88]	; (80065c8 <xTaskRemoveFromEventList+0xb4>)
 800656e:	6013      	str	r3, [r2, #0]
 8006570:	693b      	ldr	r3, [r7, #16]
 8006572:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006574:	4613      	mov	r3, r2
 8006576:	009b      	lsls	r3, r3, #2
 8006578:	4413      	add	r3, r2
 800657a:	009b      	lsls	r3, r3, #2
 800657c:	4a13      	ldr	r2, [pc, #76]	; (80065cc <xTaskRemoveFromEventList+0xb8>)
 800657e:	441a      	add	r2, r3
 8006580:	693b      	ldr	r3, [r7, #16]
 8006582:	3304      	adds	r3, #4
 8006584:	4619      	mov	r1, r3
 8006586:	4610      	mov	r0, r2
 8006588:	f7fe fdcb 	bl	8005122 <vListInsertEnd>
 800658c:	e005      	b.n	800659a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800658e:	693b      	ldr	r3, [r7, #16]
 8006590:	3318      	adds	r3, #24
 8006592:	4619      	mov	r1, r3
 8006594:	480e      	ldr	r0, [pc, #56]	; (80065d0 <xTaskRemoveFromEventList+0xbc>)
 8006596:	f7fe fdc4 	bl	8005122 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800659a:	693b      	ldr	r3, [r7, #16]
 800659c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800659e:	4b0d      	ldr	r3, [pc, #52]	; (80065d4 <xTaskRemoveFromEventList+0xc0>)
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d905      	bls.n	80065b4 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80065a8:	2301      	movs	r3, #1
 80065aa:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80065ac:	4b0a      	ldr	r3, [pc, #40]	; (80065d8 <xTaskRemoveFromEventList+0xc4>)
 80065ae:	2201      	movs	r2, #1
 80065b0:	601a      	str	r2, [r3, #0]
 80065b2:	e001      	b.n	80065b8 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 80065b4:	2300      	movs	r3, #0
 80065b6:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80065b8:	697b      	ldr	r3, [r7, #20]
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3718      	adds	r7, #24
 80065be:	46bd      	mov	sp, r7
 80065c0:	bd80      	pop	{r7, pc}
 80065c2:	bf00      	nop
 80065c4:	20000f80 	.word	0x20000f80
 80065c8:	20000f60 	.word	0x20000f60
 80065cc:	20000a88 	.word	0x20000a88
 80065d0:	20000f18 	.word	0x20000f18
 80065d4:	20000a84 	.word	0x20000a84
 80065d8:	20000f6c 	.word	0x20000f6c

080065dc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80065dc:	b480      	push	{r7}
 80065de:	b083      	sub	sp, #12
 80065e0:	af00      	add	r7, sp, #0
 80065e2:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80065e4:	4b06      	ldr	r3, [pc, #24]	; (8006600 <vTaskInternalSetTimeOutState+0x24>)
 80065e6:	681a      	ldr	r2, [r3, #0]
 80065e8:	687b      	ldr	r3, [r7, #4]
 80065ea:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 80065ec:	4b05      	ldr	r3, [pc, #20]	; (8006604 <vTaskInternalSetTimeOutState+0x28>)
 80065ee:	681a      	ldr	r2, [r3, #0]
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	605a      	str	r2, [r3, #4]
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000f70 	.word	0x20000f70
 8006604:	20000f5c 	.word	0x20000f5c

08006608 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006608:	b580      	push	{r7, lr}
 800660a:	b088      	sub	sp, #32
 800660c:	af00      	add	r7, sp, #0
 800660e:	6078      	str	r0, [r7, #4]
 8006610:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	2b00      	cmp	r3, #0
 8006616:	d10a      	bne.n	800662e <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006618:	f04f 0350 	mov.w	r3, #80	; 0x50
 800661c:	f383 8811 	msr	BASEPRI, r3
 8006620:	f3bf 8f6f 	isb	sy
 8006624:	f3bf 8f4f 	dsb	sy
 8006628:	613b      	str	r3, [r7, #16]
}
 800662a:	bf00      	nop
 800662c:	e7fe      	b.n	800662c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	2b00      	cmp	r3, #0
 8006632:	d10a      	bne.n	800664a <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006638:	f383 8811 	msr	BASEPRI, r3
 800663c:	f3bf 8f6f 	isb	sy
 8006640:	f3bf 8f4f 	dsb	sy
 8006644:	60fb      	str	r3, [r7, #12]
}
 8006646:	bf00      	nop
 8006648:	e7fe      	b.n	8006648 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800664a:	f000 fe83 	bl	8007354 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800664e:	4b1d      	ldr	r3, [pc, #116]	; (80066c4 <xTaskCheckForTimeOut+0xbc>)
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	685b      	ldr	r3, [r3, #4]
 8006658:	69ba      	ldr	r2, [r7, #24]
 800665a:	1ad3      	subs	r3, r2, r3
 800665c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800665e:	683b      	ldr	r3, [r7, #0]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006666:	d102      	bne.n	800666e <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006668:	2300      	movs	r3, #0
 800666a:	61fb      	str	r3, [r7, #28]
 800666c:	e023      	b.n	80066b6 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	681a      	ldr	r2, [r3, #0]
 8006672:	4b15      	ldr	r3, [pc, #84]	; (80066c8 <xTaskCheckForTimeOut+0xc0>)
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	429a      	cmp	r2, r3
 8006678:	d007      	beq.n	800668a <xTaskCheckForTimeOut+0x82>
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	685b      	ldr	r3, [r3, #4]
 800667e:	69ba      	ldr	r2, [r7, #24]
 8006680:	429a      	cmp	r2, r3
 8006682:	d302      	bcc.n	800668a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006684:	2301      	movs	r3, #1
 8006686:	61fb      	str	r3, [r7, #28]
 8006688:	e015      	b.n	80066b6 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800668a:	683b      	ldr	r3, [r7, #0]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	697a      	ldr	r2, [r7, #20]
 8006690:	429a      	cmp	r2, r3
 8006692:	d20b      	bcs.n	80066ac <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	681a      	ldr	r2, [r3, #0]
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	1ad2      	subs	r2, r2, r3
 800669c:	683b      	ldr	r3, [r7, #0]
 800669e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80066a0:	6878      	ldr	r0, [r7, #4]
 80066a2:	f7ff ff9b 	bl	80065dc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80066a6:	2300      	movs	r3, #0
 80066a8:	61fb      	str	r3, [r7, #28]
 80066aa:	e004      	b.n	80066b6 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 80066ac:	683b      	ldr	r3, [r7, #0]
 80066ae:	2200      	movs	r2, #0
 80066b0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80066b2:	2301      	movs	r3, #1
 80066b4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80066b6:	f000 fe7d 	bl	80073b4 <vPortExitCritical>

	return xReturn;
 80066ba:	69fb      	ldr	r3, [r7, #28]
}
 80066bc:	4618      	mov	r0, r3
 80066be:	3720      	adds	r7, #32
 80066c0:	46bd      	mov	sp, r7
 80066c2:	bd80      	pop	{r7, pc}
 80066c4:	20000f5c 	.word	0x20000f5c
 80066c8:	20000f70 	.word	0x20000f70

080066cc <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80066cc:	b480      	push	{r7}
 80066ce:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80066d0:	4b03      	ldr	r3, [pc, #12]	; (80066e0 <vTaskMissedYield+0x14>)
 80066d2:	2201      	movs	r2, #1
 80066d4:	601a      	str	r2, [r3, #0]
}
 80066d6:	bf00      	nop
 80066d8:	46bd      	mov	sp, r7
 80066da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066de:	4770      	bx	lr
 80066e0:	20000f6c 	.word	0x20000f6c

080066e4 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 80066e4:	b580      	push	{r7, lr}
 80066e6:	b082      	sub	sp, #8
 80066e8:	af00      	add	r7, sp, #0
 80066ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 80066ec:	f000 f852 	bl	8006794 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 80066f0:	4b06      	ldr	r3, [pc, #24]	; (800670c <prvIdleTask+0x28>)
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	2b01      	cmp	r3, #1
 80066f6:	d9f9      	bls.n	80066ec <prvIdleTask+0x8>
			{
				taskYIELD();
 80066f8:	4b05      	ldr	r3, [pc, #20]	; (8006710 <prvIdleTask+0x2c>)
 80066fa:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80066fe:	601a      	str	r2, [r3, #0]
 8006700:	f3bf 8f4f 	dsb	sy
 8006704:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006708:	e7f0      	b.n	80066ec <prvIdleTask+0x8>
 800670a:	bf00      	nop
 800670c:	20000a88 	.word	0x20000a88
 8006710:	e000ed04 	.word	0xe000ed04

08006714 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800671a:	2300      	movs	r3, #0
 800671c:	607b      	str	r3, [r7, #4]
 800671e:	e00c      	b.n	800673a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006720:	687a      	ldr	r2, [r7, #4]
 8006722:	4613      	mov	r3, r2
 8006724:	009b      	lsls	r3, r3, #2
 8006726:	4413      	add	r3, r2
 8006728:	009b      	lsls	r3, r3, #2
 800672a:	4a12      	ldr	r2, [pc, #72]	; (8006774 <prvInitialiseTaskLists+0x60>)
 800672c:	4413      	add	r3, r2
 800672e:	4618      	mov	r0, r3
 8006730:	f7fe fcca 	bl	80050c8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	3301      	adds	r3, #1
 8006738:	607b      	str	r3, [r7, #4]
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2b37      	cmp	r3, #55	; 0x37
 800673e:	d9ef      	bls.n	8006720 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006740:	480d      	ldr	r0, [pc, #52]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006742:	f7fe fcc1 	bl	80050c8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006746:	480d      	ldr	r0, [pc, #52]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006748:	f7fe fcbe 	bl	80050c8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800674c:	480c      	ldr	r0, [pc, #48]	; (8006780 <prvInitialiseTaskLists+0x6c>)
 800674e:	f7fe fcbb 	bl	80050c8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006752:	480c      	ldr	r0, [pc, #48]	; (8006784 <prvInitialiseTaskLists+0x70>)
 8006754:	f7fe fcb8 	bl	80050c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006758:	480b      	ldr	r0, [pc, #44]	; (8006788 <prvInitialiseTaskLists+0x74>)
 800675a:	f7fe fcb5 	bl	80050c8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800675e:	4b0b      	ldr	r3, [pc, #44]	; (800678c <prvInitialiseTaskLists+0x78>)
 8006760:	4a05      	ldr	r2, [pc, #20]	; (8006778 <prvInitialiseTaskLists+0x64>)
 8006762:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006764:	4b0a      	ldr	r3, [pc, #40]	; (8006790 <prvInitialiseTaskLists+0x7c>)
 8006766:	4a05      	ldr	r2, [pc, #20]	; (800677c <prvInitialiseTaskLists+0x68>)
 8006768:	601a      	str	r2, [r3, #0]
}
 800676a:	bf00      	nop
 800676c:	3708      	adds	r7, #8
 800676e:	46bd      	mov	sp, r7
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	20000a88 	.word	0x20000a88
 8006778:	20000ee8 	.word	0x20000ee8
 800677c:	20000efc 	.word	0x20000efc
 8006780:	20000f18 	.word	0x20000f18
 8006784:	20000f2c 	.word	0x20000f2c
 8006788:	20000f44 	.word	0x20000f44
 800678c:	20000f10 	.word	0x20000f10
 8006790:	20000f14 	.word	0x20000f14

08006794 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006794:	b580      	push	{r7, lr}
 8006796:	b082      	sub	sp, #8
 8006798:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800679a:	e019      	b.n	80067d0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800679c:	f000 fdda 	bl	8007354 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a0:	4b10      	ldr	r3, [pc, #64]	; (80067e4 <prvCheckTasksWaitingTermination+0x50>)
 80067a2:	68db      	ldr	r3, [r3, #12]
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	3304      	adds	r3, #4
 80067ac:	4618      	mov	r0, r3
 80067ae:	f7fe fd15 	bl	80051dc <uxListRemove>
				--uxCurrentNumberOfTasks;
 80067b2:	4b0d      	ldr	r3, [pc, #52]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067b4:	681b      	ldr	r3, [r3, #0]
 80067b6:	3b01      	subs	r3, #1
 80067b8:	4a0b      	ldr	r2, [pc, #44]	; (80067e8 <prvCheckTasksWaitingTermination+0x54>)
 80067ba:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80067bc:	4b0b      	ldr	r3, [pc, #44]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067be:	681b      	ldr	r3, [r3, #0]
 80067c0:	3b01      	subs	r3, #1
 80067c2:	4a0a      	ldr	r2, [pc, #40]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067c4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80067c6:	f000 fdf5 	bl	80073b4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80067ca:	6878      	ldr	r0, [r7, #4]
 80067cc:	f000 f810 	bl	80067f0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80067d0:	4b06      	ldr	r3, [pc, #24]	; (80067ec <prvCheckTasksWaitingTermination+0x58>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	2b00      	cmp	r3, #0
 80067d6:	d1e1      	bne.n	800679c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 80067d8:	bf00      	nop
 80067da:	bf00      	nop
 80067dc:	3708      	adds	r7, #8
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
 80067e2:	bf00      	nop
 80067e4:	20000f2c 	.word	0x20000f2c
 80067e8:	20000f58 	.word	0x20000f58
 80067ec:	20000f40 	.word	0x20000f40

080067f0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	b084      	sub	sp, #16
 80067f4:	af00      	add	r7, sp, #0
 80067f6:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	3354      	adds	r3, #84	; 0x54
 80067fc:	4618      	mov	r0, r3
 80067fe:	f001 f8bd 	bl	800797c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006808:	2b00      	cmp	r3, #0
 800680a:	d108      	bne.n	800681e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006810:	4618      	mov	r0, r3
 8006812:	f000 ff8d 	bl	8007730 <vPortFree>
				vPortFree( pxTCB );
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 ff8a 	bl	8007730 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800681c:	e018      	b.n	8006850 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006824:	2b01      	cmp	r3, #1
 8006826:	d103      	bne.n	8006830 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006828:	6878      	ldr	r0, [r7, #4]
 800682a:	f000 ff81 	bl	8007730 <vPortFree>
	}
 800682e:	e00f      	b.n	8006850 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8006836:	2b02      	cmp	r3, #2
 8006838:	d00a      	beq.n	8006850 <prvDeleteTCB+0x60>
	__asm volatile
 800683a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800683e:	f383 8811 	msr	BASEPRI, r3
 8006842:	f3bf 8f6f 	isb	sy
 8006846:	f3bf 8f4f 	dsb	sy
 800684a:	60fb      	str	r3, [r7, #12]
}
 800684c:	bf00      	nop
 800684e:	e7fe      	b.n	800684e <prvDeleteTCB+0x5e>
	}
 8006850:	bf00      	nop
 8006852:	3710      	adds	r7, #16
 8006854:	46bd      	mov	sp, r7
 8006856:	bd80      	pop	{r7, pc}

08006858 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800685e:	4b0c      	ldr	r3, [pc, #48]	; (8006890 <prvResetNextTaskUnblockTime+0x38>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d104      	bne.n	8006872 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006868:	4b0a      	ldr	r3, [pc, #40]	; (8006894 <prvResetNextTaskUnblockTime+0x3c>)
 800686a:	f04f 32ff 	mov.w	r2, #4294967295
 800686e:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006870:	e008      	b.n	8006884 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006872:	4b07      	ldr	r3, [pc, #28]	; (8006890 <prvResetNextTaskUnblockTime+0x38>)
 8006874:	681b      	ldr	r3, [r3, #0]
 8006876:	68db      	ldr	r3, [r3, #12]
 8006878:	68db      	ldr	r3, [r3, #12]
 800687a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	685b      	ldr	r3, [r3, #4]
 8006880:	4a04      	ldr	r2, [pc, #16]	; (8006894 <prvResetNextTaskUnblockTime+0x3c>)
 8006882:	6013      	str	r3, [r2, #0]
}
 8006884:	bf00      	nop
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr
 8006890:	20000f10 	.word	0x20000f10
 8006894:	20000f78 	.word	0x20000f78

08006898 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006898:	b480      	push	{r7}
 800689a:	b083      	sub	sp, #12
 800689c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800689e:	4b0b      	ldr	r3, [pc, #44]	; (80068cc <xTaskGetSchedulerState+0x34>)
 80068a0:	681b      	ldr	r3, [r3, #0]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d102      	bne.n	80068ac <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80068a6:	2301      	movs	r3, #1
 80068a8:	607b      	str	r3, [r7, #4]
 80068aa:	e008      	b.n	80068be <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ac:	4b08      	ldr	r3, [pc, #32]	; (80068d0 <xTaskGetSchedulerState+0x38>)
 80068ae:	681b      	ldr	r3, [r3, #0]
 80068b0:	2b00      	cmp	r3, #0
 80068b2:	d102      	bne.n	80068ba <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80068b4:	2302      	movs	r3, #2
 80068b6:	607b      	str	r3, [r7, #4]
 80068b8:	e001      	b.n	80068be <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80068ba:	2300      	movs	r3, #0
 80068bc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80068be:	687b      	ldr	r3, [r7, #4]
	}
 80068c0:	4618      	mov	r0, r3
 80068c2:	370c      	adds	r7, #12
 80068c4:	46bd      	mov	sp, r7
 80068c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ca:	4770      	bx	lr
 80068cc:	20000f64 	.word	0x20000f64
 80068d0:	20000f80 	.word	0x20000f80

080068d4 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b086      	sub	sp, #24
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 80068e0:	2300      	movs	r3, #0
 80068e2:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d056      	beq.n	8006998 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 80068ea:	4b2e      	ldr	r3, [pc, #184]	; (80069a4 <xTaskPriorityDisinherit+0xd0>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	693a      	ldr	r2, [r7, #16]
 80068f0:	429a      	cmp	r2, r3
 80068f2:	d00a      	beq.n	800690a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 80068f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068f8:	f383 8811 	msr	BASEPRI, r3
 80068fc:	f3bf 8f6f 	isb	sy
 8006900:	f3bf 8f4f 	dsb	sy
 8006904:	60fb      	str	r3, [r7, #12]
}
 8006906:	bf00      	nop
 8006908:	e7fe      	b.n	8006908 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800690a:	693b      	ldr	r3, [r7, #16]
 800690c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800690e:	2b00      	cmp	r3, #0
 8006910:	d10a      	bne.n	8006928 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8006912:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006916:	f383 8811 	msr	BASEPRI, r3
 800691a:	f3bf 8f6f 	isb	sy
 800691e:	f3bf 8f4f 	dsb	sy
 8006922:	60bb      	str	r3, [r7, #8]
}
 8006924:	bf00      	nop
 8006926:	e7fe      	b.n	8006926 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8006928:	693b      	ldr	r3, [r7, #16]
 800692a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800692c:	1e5a      	subs	r2, r3, #1
 800692e:	693b      	ldr	r3, [r7, #16]
 8006930:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006932:	693b      	ldr	r3, [r7, #16]
 8006934:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006936:	693b      	ldr	r3, [r7, #16]
 8006938:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800693a:	429a      	cmp	r2, r3
 800693c:	d02c      	beq.n	8006998 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800693e:	693b      	ldr	r3, [r7, #16]
 8006940:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006942:	2b00      	cmp	r3, #0
 8006944:	d128      	bne.n	8006998 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006946:	693b      	ldr	r3, [r7, #16]
 8006948:	3304      	adds	r3, #4
 800694a:	4618      	mov	r0, r3
 800694c:	f7fe fc46 	bl	80051dc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006950:	693b      	ldr	r3, [r7, #16]
 8006952:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8006954:	693b      	ldr	r3, [r7, #16]
 8006956:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006958:	693b      	ldr	r3, [r7, #16]
 800695a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800695c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006960:	693b      	ldr	r3, [r7, #16]
 8006962:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006964:	693b      	ldr	r3, [r7, #16]
 8006966:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006968:	4b0f      	ldr	r3, [pc, #60]	; (80069a8 <xTaskPriorityDisinherit+0xd4>)
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	429a      	cmp	r2, r3
 800696e:	d903      	bls.n	8006978 <xTaskPriorityDisinherit+0xa4>
 8006970:	693b      	ldr	r3, [r7, #16]
 8006972:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006974:	4a0c      	ldr	r2, [pc, #48]	; (80069a8 <xTaskPriorityDisinherit+0xd4>)
 8006976:	6013      	str	r3, [r2, #0]
 8006978:	693b      	ldr	r3, [r7, #16]
 800697a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800697c:	4613      	mov	r3, r2
 800697e:	009b      	lsls	r3, r3, #2
 8006980:	4413      	add	r3, r2
 8006982:	009b      	lsls	r3, r3, #2
 8006984:	4a09      	ldr	r2, [pc, #36]	; (80069ac <xTaskPriorityDisinherit+0xd8>)
 8006986:	441a      	add	r2, r3
 8006988:	693b      	ldr	r3, [r7, #16]
 800698a:	3304      	adds	r3, #4
 800698c:	4619      	mov	r1, r3
 800698e:	4610      	mov	r0, r2
 8006990:	f7fe fbc7 	bl	8005122 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006994:	2301      	movs	r3, #1
 8006996:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006998:	697b      	ldr	r3, [r7, #20]
	}
 800699a:	4618      	mov	r0, r3
 800699c:	3718      	adds	r7, #24
 800699e:	46bd      	mov	sp, r7
 80069a0:	bd80      	pop	{r7, pc}
 80069a2:	bf00      	nop
 80069a4:	20000a84 	.word	0x20000a84
 80069a8:	20000f60 	.word	0x20000f60
 80069ac:	20000a88 	.word	0x20000a88

080069b0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b084      	sub	sp, #16
 80069b4:	af00      	add	r7, sp, #0
 80069b6:	6078      	str	r0, [r7, #4]
 80069b8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80069ba:	4b21      	ldr	r3, [pc, #132]	; (8006a40 <prvAddCurrentTaskToDelayedList+0x90>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069c0:	4b20      	ldr	r3, [pc, #128]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069c2:	681b      	ldr	r3, [r3, #0]
 80069c4:	3304      	adds	r3, #4
 80069c6:	4618      	mov	r0, r3
 80069c8:	f7fe fc08 	bl	80051dc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80069d2:	d10a      	bne.n	80069ea <prvAddCurrentTaskToDelayedList+0x3a>
 80069d4:	683b      	ldr	r3, [r7, #0]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d007      	beq.n	80069ea <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80069da:	4b1a      	ldr	r3, [pc, #104]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069dc:	681b      	ldr	r3, [r3, #0]
 80069de:	3304      	adds	r3, #4
 80069e0:	4619      	mov	r1, r3
 80069e2:	4819      	ldr	r0, [pc, #100]	; (8006a48 <prvAddCurrentTaskToDelayedList+0x98>)
 80069e4:	f7fe fb9d 	bl	8005122 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80069e8:	e026      	b.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80069ea:	68fa      	ldr	r2, [r7, #12]
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	4413      	add	r3, r2
 80069f0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80069f2:	4b14      	ldr	r3, [pc, #80]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	68ba      	ldr	r2, [r7, #8]
 80069f8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80069fa:	68ba      	ldr	r2, [r7, #8]
 80069fc:	68fb      	ldr	r3, [r7, #12]
 80069fe:	429a      	cmp	r2, r3
 8006a00:	d209      	bcs.n	8006a16 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a02:	4b12      	ldr	r3, [pc, #72]	; (8006a4c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006a04:	681a      	ldr	r2, [r3, #0]
 8006a06:	4b0f      	ldr	r3, [pc, #60]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a08:	681b      	ldr	r3, [r3, #0]
 8006a0a:	3304      	adds	r3, #4
 8006a0c:	4619      	mov	r1, r3
 8006a0e:	4610      	mov	r0, r2
 8006a10:	f7fe fbab 	bl	800516a <vListInsert>
}
 8006a14:	e010      	b.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a16:	4b0e      	ldr	r3, [pc, #56]	; (8006a50 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006a18:	681a      	ldr	r2, [r3, #0]
 8006a1a:	4b0a      	ldr	r3, [pc, #40]	; (8006a44 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a1c:	681b      	ldr	r3, [r3, #0]
 8006a1e:	3304      	adds	r3, #4
 8006a20:	4619      	mov	r1, r3
 8006a22:	4610      	mov	r0, r2
 8006a24:	f7fe fba1 	bl	800516a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006a28:	4b0a      	ldr	r3, [pc, #40]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a2a:	681b      	ldr	r3, [r3, #0]
 8006a2c:	68ba      	ldr	r2, [r7, #8]
 8006a2e:	429a      	cmp	r2, r3
 8006a30:	d202      	bcs.n	8006a38 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006a32:	4a08      	ldr	r2, [pc, #32]	; (8006a54 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006a34:	68bb      	ldr	r3, [r7, #8]
 8006a36:	6013      	str	r3, [r2, #0]
}
 8006a38:	bf00      	nop
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}
 8006a40:	20000f5c 	.word	0x20000f5c
 8006a44:	20000a84 	.word	0x20000a84
 8006a48:	20000f44 	.word	0x20000f44
 8006a4c:	20000f14 	.word	0x20000f14
 8006a50:	20000f10 	.word	0x20000f10
 8006a54:	20000f78 	.word	0x20000f78

08006a58 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006a58:	b580      	push	{r7, lr}
 8006a5a:	b08a      	sub	sp, #40	; 0x28
 8006a5c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006a5e:	2300      	movs	r3, #0
 8006a60:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006a62:	f000 fb07 	bl	8007074 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006a66:	4b1c      	ldr	r3, [pc, #112]	; (8006ad8 <xTimerCreateTimerTask+0x80>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d021      	beq.n	8006ab2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006a6e:	2300      	movs	r3, #0
 8006a70:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006a72:	2300      	movs	r3, #0
 8006a74:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006a76:	1d3a      	adds	r2, r7, #4
 8006a78:	f107 0108 	add.w	r1, r7, #8
 8006a7c:	f107 030c 	add.w	r3, r7, #12
 8006a80:	4618      	mov	r0, r3
 8006a82:	f7fe fb07 	bl	8005094 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006a86:	6879      	ldr	r1, [r7, #4]
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	68fa      	ldr	r2, [r7, #12]
 8006a8c:	9202      	str	r2, [sp, #8]
 8006a8e:	9301      	str	r3, [sp, #4]
 8006a90:	2302      	movs	r3, #2
 8006a92:	9300      	str	r3, [sp, #0]
 8006a94:	2300      	movs	r3, #0
 8006a96:	460a      	mov	r2, r1
 8006a98:	4910      	ldr	r1, [pc, #64]	; (8006adc <xTimerCreateTimerTask+0x84>)
 8006a9a:	4811      	ldr	r0, [pc, #68]	; (8006ae0 <xTimerCreateTimerTask+0x88>)
 8006a9c:	f7ff f8b4 	bl	8005c08 <xTaskCreateStatic>
 8006aa0:	4603      	mov	r3, r0
 8006aa2:	4a10      	ldr	r2, [pc, #64]	; (8006ae4 <xTimerCreateTimerTask+0x8c>)
 8006aa4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006aa6:	4b0f      	ldr	r3, [pc, #60]	; (8006ae4 <xTimerCreateTimerTask+0x8c>)
 8006aa8:	681b      	ldr	r3, [r3, #0]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d001      	beq.n	8006ab2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006aae:	2301      	movs	r3, #1
 8006ab0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006ab2:	697b      	ldr	r3, [r7, #20]
 8006ab4:	2b00      	cmp	r3, #0
 8006ab6:	d10a      	bne.n	8006ace <xTimerCreateTimerTask+0x76>
	__asm volatile
 8006ab8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006abc:	f383 8811 	msr	BASEPRI, r3
 8006ac0:	f3bf 8f6f 	isb	sy
 8006ac4:	f3bf 8f4f 	dsb	sy
 8006ac8:	613b      	str	r3, [r7, #16]
}
 8006aca:	bf00      	nop
 8006acc:	e7fe      	b.n	8006acc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006ace:	697b      	ldr	r3, [r7, #20]
}
 8006ad0:	4618      	mov	r0, r3
 8006ad2:	3718      	adds	r7, #24
 8006ad4:	46bd      	mov	sp, r7
 8006ad6:	bd80      	pop	{r7, pc}
 8006ad8:	20000fb4 	.word	0x20000fb4
 8006adc:	08007b7c 	.word	0x08007b7c
 8006ae0:	08006c1d 	.word	0x08006c1d
 8006ae4:	20000fb8 	.word	0x20000fb8

08006ae8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006ae8:	b580      	push	{r7, lr}
 8006aea:	b08a      	sub	sp, #40	; 0x28
 8006aec:	af00      	add	r7, sp, #0
 8006aee:	60f8      	str	r0, [r7, #12]
 8006af0:	60b9      	str	r1, [r7, #8]
 8006af2:	607a      	str	r2, [r7, #4]
 8006af4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006afa:	68fb      	ldr	r3, [r7, #12]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10a      	bne.n	8006b16 <xTimerGenericCommand+0x2e>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	623b      	str	r3, [r7, #32]
}
 8006b12:	bf00      	nop
 8006b14:	e7fe      	b.n	8006b14 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006b16:	4b1a      	ldr	r3, [pc, #104]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d02a      	beq.n	8006b74 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006b1e:	68bb      	ldr	r3, [r7, #8]
 8006b20:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006b26:	68fb      	ldr	r3, [r7, #12]
 8006b28:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	2b05      	cmp	r3, #5
 8006b2e:	dc18      	bgt.n	8006b62 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006b30:	f7ff feb2 	bl	8006898 <xTaskGetSchedulerState>
 8006b34:	4603      	mov	r3, r0
 8006b36:	2b02      	cmp	r3, #2
 8006b38:	d109      	bne.n	8006b4e <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006b3a:	4b11      	ldr	r3, [pc, #68]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b3c:	6818      	ldr	r0, [r3, #0]
 8006b3e:	f107 0110 	add.w	r1, r7, #16
 8006b42:	2300      	movs	r3, #0
 8006b44:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b46:	f7fe fc77 	bl	8005438 <xQueueGenericSend>
 8006b4a:	6278      	str	r0, [r7, #36]	; 0x24
 8006b4c:	e012      	b.n	8006b74 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006b4e:	4b0c      	ldr	r3, [pc, #48]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b50:	6818      	ldr	r0, [r3, #0]
 8006b52:	f107 0110 	add.w	r1, r7, #16
 8006b56:	2300      	movs	r3, #0
 8006b58:	2200      	movs	r2, #0
 8006b5a:	f7fe fc6d 	bl	8005438 <xQueueGenericSend>
 8006b5e:	6278      	str	r0, [r7, #36]	; 0x24
 8006b60:	e008      	b.n	8006b74 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006b62:	4b07      	ldr	r3, [pc, #28]	; (8006b80 <xTimerGenericCommand+0x98>)
 8006b64:	6818      	ldr	r0, [r3, #0]
 8006b66:	f107 0110 	add.w	r1, r7, #16
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	683a      	ldr	r2, [r7, #0]
 8006b6e:	f7fe fd61 	bl	8005634 <xQueueGenericSendFromISR>
 8006b72:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006b74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006b76:	4618      	mov	r0, r3
 8006b78:	3728      	adds	r7, #40	; 0x28
 8006b7a:	46bd      	mov	sp, r7
 8006b7c:	bd80      	pop	{r7, pc}
 8006b7e:	bf00      	nop
 8006b80:	20000fb4 	.word	0x20000fb4

08006b84 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006b84:	b580      	push	{r7, lr}
 8006b86:	b088      	sub	sp, #32
 8006b88:	af02      	add	r7, sp, #8
 8006b8a:	6078      	str	r0, [r7, #4]
 8006b8c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b8e:	4b22      	ldr	r3, [pc, #136]	; (8006c18 <prvProcessExpiredTimer+0x94>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	68db      	ldr	r3, [r3, #12]
 8006b96:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006b98:	697b      	ldr	r3, [r7, #20]
 8006b9a:	3304      	adds	r3, #4
 8006b9c:	4618      	mov	r0, r3
 8006b9e:	f7fe fb1d 	bl	80051dc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ba8:	f003 0304 	and.w	r3, r3, #4
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d022      	beq.n	8006bf6 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006bb0:	697b      	ldr	r3, [r7, #20]
 8006bb2:	699a      	ldr	r2, [r3, #24]
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	18d1      	adds	r1, r2, r3
 8006bb8:	687b      	ldr	r3, [r7, #4]
 8006bba:	683a      	ldr	r2, [r7, #0]
 8006bbc:	6978      	ldr	r0, [r7, #20]
 8006bbe:	f000 f8d1 	bl	8006d64 <prvInsertTimerInActiveList>
 8006bc2:	4603      	mov	r3, r0
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01f      	beq.n	8006c08 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006bc8:	2300      	movs	r3, #0
 8006bca:	9300      	str	r3, [sp, #0]
 8006bcc:	2300      	movs	r3, #0
 8006bce:	687a      	ldr	r2, [r7, #4]
 8006bd0:	2100      	movs	r1, #0
 8006bd2:	6978      	ldr	r0, [r7, #20]
 8006bd4:	f7ff ff88 	bl	8006ae8 <xTimerGenericCommand>
 8006bd8:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006bda:	693b      	ldr	r3, [r7, #16]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d113      	bne.n	8006c08 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8006be0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006be4:	f383 8811 	msr	BASEPRI, r3
 8006be8:	f3bf 8f6f 	isb	sy
 8006bec:	f3bf 8f4f 	dsb	sy
 8006bf0:	60fb      	str	r3, [r7, #12]
}
 8006bf2:	bf00      	nop
 8006bf4:	e7fe      	b.n	8006bf4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006bf6:	697b      	ldr	r3, [r7, #20]
 8006bf8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006bfc:	f023 0301 	bic.w	r3, r3, #1
 8006c00:	b2da      	uxtb	r2, r3
 8006c02:	697b      	ldr	r3, [r7, #20]
 8006c04:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c08:	697b      	ldr	r3, [r7, #20]
 8006c0a:	6a1b      	ldr	r3, [r3, #32]
 8006c0c:	6978      	ldr	r0, [r7, #20]
 8006c0e:	4798      	blx	r3
}
 8006c10:	bf00      	nop
 8006c12:	3718      	adds	r7, #24
 8006c14:	46bd      	mov	sp, r7
 8006c16:	bd80      	pop	{r7, pc}
 8006c18:	20000fac 	.word	0x20000fac

08006c1c <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006c1c:	b580      	push	{r7, lr}
 8006c1e:	b084      	sub	sp, #16
 8006c20:	af00      	add	r7, sp, #0
 8006c22:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c24:	f107 0308 	add.w	r3, r7, #8
 8006c28:	4618      	mov	r0, r3
 8006c2a:	f000 f857 	bl	8006cdc <prvGetNextExpireTime>
 8006c2e:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	4619      	mov	r1, r3
 8006c34:	68f8      	ldr	r0, [r7, #12]
 8006c36:	f000 f803 	bl	8006c40 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006c3a:	f000 f8d5 	bl	8006de8 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006c3e:	e7f1      	b.n	8006c24 <prvTimerTask+0x8>

08006c40 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006c40:	b580      	push	{r7, lr}
 8006c42:	b084      	sub	sp, #16
 8006c44:	af00      	add	r7, sp, #0
 8006c46:	6078      	str	r0, [r7, #4]
 8006c48:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006c4a:	f7ff fa39 	bl	80060c0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006c4e:	f107 0308 	add.w	r3, r7, #8
 8006c52:	4618      	mov	r0, r3
 8006c54:	f000 f866 	bl	8006d24 <prvSampleTimeNow>
 8006c58:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006c5a:	68bb      	ldr	r3, [r7, #8]
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d130      	bne.n	8006cc2 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006c60:	683b      	ldr	r3, [r7, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d10a      	bne.n	8006c7c <prvProcessTimerOrBlockTask+0x3c>
 8006c66:	687a      	ldr	r2, [r7, #4]
 8006c68:	68fb      	ldr	r3, [r7, #12]
 8006c6a:	429a      	cmp	r2, r3
 8006c6c:	d806      	bhi.n	8006c7c <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006c6e:	f7ff fa35 	bl	80060dc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006c72:	68f9      	ldr	r1, [r7, #12]
 8006c74:	6878      	ldr	r0, [r7, #4]
 8006c76:	f7ff ff85 	bl	8006b84 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006c7a:	e024      	b.n	8006cc6 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006c7c:	683b      	ldr	r3, [r7, #0]
 8006c7e:	2b00      	cmp	r3, #0
 8006c80:	d008      	beq.n	8006c94 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006c82:	4b13      	ldr	r3, [pc, #76]	; (8006cd0 <prvProcessTimerOrBlockTask+0x90>)
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <prvProcessTimerOrBlockTask+0x50>
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e000      	b.n	8006c92 <prvProcessTimerOrBlockTask+0x52>
 8006c90:	2300      	movs	r3, #0
 8006c92:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006c94:	4b0f      	ldr	r3, [pc, #60]	; (8006cd4 <prvProcessTimerOrBlockTask+0x94>)
 8006c96:	6818      	ldr	r0, [r3, #0]
 8006c98:	687a      	ldr	r2, [r7, #4]
 8006c9a:	68fb      	ldr	r3, [r7, #12]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	683a      	ldr	r2, [r7, #0]
 8006ca0:	4619      	mov	r1, r3
 8006ca2:	f7fe ff7d 	bl	8005ba0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006ca6:	f7ff fa19 	bl	80060dc <xTaskResumeAll>
 8006caa:	4603      	mov	r3, r0
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	d10a      	bne.n	8006cc6 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006cb0:	4b09      	ldr	r3, [pc, #36]	; (8006cd8 <prvProcessTimerOrBlockTask+0x98>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
}
 8006cc0:	e001      	b.n	8006cc6 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006cc2:	f7ff fa0b 	bl	80060dc <xTaskResumeAll>
}
 8006cc6:	bf00      	nop
 8006cc8:	3710      	adds	r7, #16
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	bd80      	pop	{r7, pc}
 8006cce:	bf00      	nop
 8006cd0:	20000fb0 	.word	0x20000fb0
 8006cd4:	20000fb4 	.word	0x20000fb4
 8006cd8:	e000ed04 	.word	0xe000ed04

08006cdc <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006ce4:	4b0e      	ldr	r3, [pc, #56]	; (8006d20 <prvGetNextExpireTime+0x44>)
 8006ce6:	681b      	ldr	r3, [r3, #0]
 8006ce8:	681b      	ldr	r3, [r3, #0]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d101      	bne.n	8006cf2 <prvGetNextExpireTime+0x16>
 8006cee:	2201      	movs	r2, #1
 8006cf0:	e000      	b.n	8006cf4 <prvGetNextExpireTime+0x18>
 8006cf2:	2200      	movs	r2, #0
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d105      	bne.n	8006d0c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d00:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <prvGetNextExpireTime+0x44>)
 8006d02:	681b      	ldr	r3, [r3, #0]
 8006d04:	68db      	ldr	r3, [r3, #12]
 8006d06:	681b      	ldr	r3, [r3, #0]
 8006d08:	60fb      	str	r3, [r7, #12]
 8006d0a:	e001      	b.n	8006d10 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006d10:	68fb      	ldr	r3, [r7, #12]
}
 8006d12:	4618      	mov	r0, r3
 8006d14:	3714      	adds	r7, #20
 8006d16:	46bd      	mov	sp, r7
 8006d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d1c:	4770      	bx	lr
 8006d1e:	bf00      	nop
 8006d20:	20000fac 	.word	0x20000fac

08006d24 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b084      	sub	sp, #16
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006d2c:	f7ff fa74 	bl	8006218 <xTaskGetTickCount>
 8006d30:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006d32:	4b0b      	ldr	r3, [pc, #44]	; (8006d60 <prvSampleTimeNow+0x3c>)
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	68fa      	ldr	r2, [r7, #12]
 8006d38:	429a      	cmp	r2, r3
 8006d3a:	d205      	bcs.n	8006d48 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006d3c:	f000 f936 	bl	8006fac <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006d40:	687b      	ldr	r3, [r7, #4]
 8006d42:	2201      	movs	r2, #1
 8006d44:	601a      	str	r2, [r3, #0]
 8006d46:	e002      	b.n	8006d4e <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006d4e:	4a04      	ldr	r2, [pc, #16]	; (8006d60 <prvSampleTimeNow+0x3c>)
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006d54:	68fb      	ldr	r3, [r7, #12]
}
 8006d56:	4618      	mov	r0, r3
 8006d58:	3710      	adds	r7, #16
 8006d5a:	46bd      	mov	sp, r7
 8006d5c:	bd80      	pop	{r7, pc}
 8006d5e:	bf00      	nop
 8006d60:	20000fbc 	.word	0x20000fbc

08006d64 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006d64:	b580      	push	{r7, lr}
 8006d66:	b086      	sub	sp, #24
 8006d68:	af00      	add	r7, sp, #0
 8006d6a:	60f8      	str	r0, [r7, #12]
 8006d6c:	60b9      	str	r1, [r7, #8]
 8006d6e:	607a      	str	r2, [r7, #4]
 8006d70:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006d72:	2300      	movs	r3, #0
 8006d74:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	68ba      	ldr	r2, [r7, #8]
 8006d7a:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	68fa      	ldr	r2, [r7, #12]
 8006d80:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006d82:	68ba      	ldr	r2, [r7, #8]
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d812      	bhi.n	8006db0 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006d8a:	687a      	ldr	r2, [r7, #4]
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	1ad2      	subs	r2, r2, r3
 8006d90:	68fb      	ldr	r3, [r7, #12]
 8006d92:	699b      	ldr	r3, [r3, #24]
 8006d94:	429a      	cmp	r2, r3
 8006d96:	d302      	bcc.n	8006d9e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006d98:	2301      	movs	r3, #1
 8006d9a:	617b      	str	r3, [r7, #20]
 8006d9c:	e01b      	b.n	8006dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006d9e:	4b10      	ldr	r3, [pc, #64]	; (8006de0 <prvInsertTimerInActiveList+0x7c>)
 8006da0:	681a      	ldr	r2, [r3, #0]
 8006da2:	68fb      	ldr	r3, [r7, #12]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7fe f9de 	bl	800516a <vListInsert>
 8006dae:	e012      	b.n	8006dd6 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006db0:	687a      	ldr	r2, [r7, #4]
 8006db2:	683b      	ldr	r3, [r7, #0]
 8006db4:	429a      	cmp	r2, r3
 8006db6:	d206      	bcs.n	8006dc6 <prvInsertTimerInActiveList+0x62>
 8006db8:	68ba      	ldr	r2, [r7, #8]
 8006dba:	683b      	ldr	r3, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d302      	bcc.n	8006dc6 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	617b      	str	r3, [r7, #20]
 8006dc4:	e007      	b.n	8006dd6 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006dc6:	4b07      	ldr	r3, [pc, #28]	; (8006de4 <prvInsertTimerInActiveList+0x80>)
 8006dc8:	681a      	ldr	r2, [r3, #0]
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	3304      	adds	r3, #4
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4610      	mov	r0, r2
 8006dd2:	f7fe f9ca 	bl	800516a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006dd6:	697b      	ldr	r3, [r7, #20]
}
 8006dd8:	4618      	mov	r0, r3
 8006dda:	3718      	adds	r7, #24
 8006ddc:	46bd      	mov	sp, r7
 8006dde:	bd80      	pop	{r7, pc}
 8006de0:	20000fb0 	.word	0x20000fb0
 8006de4:	20000fac 	.word	0x20000fac

08006de8 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006de8:	b580      	push	{r7, lr}
 8006dea:	b08e      	sub	sp, #56	; 0x38
 8006dec:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006dee:	e0ca      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	da18      	bge.n	8006e28 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006df6:	1d3b      	adds	r3, r7, #4
 8006df8:	3304      	adds	r3, #4
 8006dfa:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006dfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006dfe:	2b00      	cmp	r3, #0
 8006e00:	d10a      	bne.n	8006e18 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8006e02:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e06:	f383 8811 	msr	BASEPRI, r3
 8006e0a:	f3bf 8f6f 	isb	sy
 8006e0e:	f3bf 8f4f 	dsb	sy
 8006e12:	61fb      	str	r3, [r7, #28]
}
 8006e14:	bf00      	nop
 8006e16:	e7fe      	b.n	8006e16 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006e18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e1e:	6850      	ldr	r0, [r2, #4]
 8006e20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e22:	6892      	ldr	r2, [r2, #8]
 8006e24:	4611      	mov	r1, r2
 8006e26:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	2b00      	cmp	r3, #0
 8006e2c:	f2c0 80ab 	blt.w	8006f86 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006e34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e36:	695b      	ldr	r3, [r3, #20]
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d004      	beq.n	8006e46 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	3304      	adds	r3, #4
 8006e40:	4618      	mov	r0, r3
 8006e42:	f7fe f9cb 	bl	80051dc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006e46:	463b      	mov	r3, r7
 8006e48:	4618      	mov	r0, r3
 8006e4a:	f7ff ff6b 	bl	8006d24 <prvSampleTimeNow>
 8006e4e:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	2b09      	cmp	r3, #9
 8006e54:	f200 8096 	bhi.w	8006f84 <prvProcessReceivedCommands+0x19c>
 8006e58:	a201      	add	r2, pc, #4	; (adr r2, 8006e60 <prvProcessReceivedCommands+0x78>)
 8006e5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e5e:	bf00      	nop
 8006e60:	08006e89 	.word	0x08006e89
 8006e64:	08006e89 	.word	0x08006e89
 8006e68:	08006e89 	.word	0x08006e89
 8006e6c:	08006efd 	.word	0x08006efd
 8006e70:	08006f11 	.word	0x08006f11
 8006e74:	08006f5b 	.word	0x08006f5b
 8006e78:	08006e89 	.word	0x08006e89
 8006e7c:	08006e89 	.word	0x08006e89
 8006e80:	08006efd 	.word	0x08006efd
 8006e84:	08006f11 	.word	0x08006f11
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006e88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	b2da      	uxtb	r2, r3
 8006e94:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e96:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006e9a:	68ba      	ldr	r2, [r7, #8]
 8006e9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e9e:	699b      	ldr	r3, [r3, #24]
 8006ea0:	18d1      	adds	r1, r2, r3
 8006ea2:	68bb      	ldr	r3, [r7, #8]
 8006ea4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006ea6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ea8:	f7ff ff5c 	bl	8006d64 <prvInsertTimerInActiveList>
 8006eac:	4603      	mov	r3, r0
 8006eae:	2b00      	cmp	r3, #0
 8006eb0:	d069      	beq.n	8006f86 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006eb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006eb4:	6a1b      	ldr	r3, [r3, #32]
 8006eb6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eb8:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006eba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ebc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006ec0:	f003 0304 	and.w	r3, r3, #4
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d05e      	beq.n	8006f86 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006ec8:	68ba      	ldr	r2, [r7, #8]
 8006eca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ecc:	699b      	ldr	r3, [r3, #24]
 8006ece:	441a      	add	r2, r3
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	9300      	str	r3, [sp, #0]
 8006ed4:	2300      	movs	r3, #0
 8006ed6:	2100      	movs	r1, #0
 8006ed8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eda:	f7ff fe05 	bl	8006ae8 <xTimerGenericCommand>
 8006ede:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006ee0:	6a3b      	ldr	r3, [r7, #32]
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d14f      	bne.n	8006f86 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8006ee6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006eea:	f383 8811 	msr	BASEPRI, r3
 8006eee:	f3bf 8f6f 	isb	sy
 8006ef2:	f3bf 8f4f 	dsb	sy
 8006ef6:	61bb      	str	r3, [r7, #24]
}
 8006ef8:	bf00      	nop
 8006efa:	e7fe      	b.n	8006efa <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006efc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006efe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f02:	f023 0301 	bic.w	r3, r3, #1
 8006f06:	b2da      	uxtb	r2, r3
 8006f08:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f0a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8006f0e:	e03a      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f16:	f043 0301 	orr.w	r3, r3, #1
 8006f1a:	b2da      	uxtb	r2, r3
 8006f1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006f22:	68ba      	ldr	r2, [r7, #8]
 8006f24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f26:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006f28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f2a:	699b      	ldr	r3, [r3, #24]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d10a      	bne.n	8006f46 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8006f30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f34:	f383 8811 	msr	BASEPRI, r3
 8006f38:	f3bf 8f6f 	isb	sy
 8006f3c:	f3bf 8f4f 	dsb	sy
 8006f40:	617b      	str	r3, [r7, #20]
}
 8006f42:	bf00      	nop
 8006f44:	e7fe      	b.n	8006f44 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006f46:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f48:	699a      	ldr	r2, [r3, #24]
 8006f4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f4c:	18d1      	adds	r1, r2, r3
 8006f4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8006f52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f54:	f7ff ff06 	bl	8006d64 <prvInsertTimerInActiveList>
					break;
 8006f58:	e015      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006f5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f60:	f003 0302 	and.w	r3, r3, #2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d103      	bne.n	8006f70 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8006f68:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006f6a:	f000 fbe1 	bl	8007730 <vPortFree>
 8006f6e:	e00a      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006f70:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f72:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006f76:	f023 0301 	bic.w	r3, r3, #1
 8006f7a:	b2da      	uxtb	r2, r3
 8006f7c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006f82:	e000      	b.n	8006f86 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8006f84:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006f86:	4b08      	ldr	r3, [pc, #32]	; (8006fa8 <prvProcessReceivedCommands+0x1c0>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	1d39      	adds	r1, r7, #4
 8006f8c:	2200      	movs	r2, #0
 8006f8e:	4618      	mov	r0, r3
 8006f90:	f7fe fbec 	bl	800576c <xQueueReceive>
 8006f94:	4603      	mov	r3, r0
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	f47f af2a 	bne.w	8006df0 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006f9c:	bf00      	nop
 8006f9e:	bf00      	nop
 8006fa0:	3730      	adds	r7, #48	; 0x30
 8006fa2:	46bd      	mov	sp, r7
 8006fa4:	bd80      	pop	{r7, pc}
 8006fa6:	bf00      	nop
 8006fa8:	20000fb4 	.word	0x20000fb4

08006fac <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006fac:	b580      	push	{r7, lr}
 8006fae:	b088      	sub	sp, #32
 8006fb0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006fb2:	e048      	b.n	8007046 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006fb4:	4b2d      	ldr	r3, [pc, #180]	; (800706c <prvSwitchTimerLists+0xc0>)
 8006fb6:	681b      	ldr	r3, [r3, #0]
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fbe:	4b2b      	ldr	r3, [pc, #172]	; (800706c <prvSwitchTimerLists+0xc0>)
 8006fc0:	681b      	ldr	r3, [r3, #0]
 8006fc2:	68db      	ldr	r3, [r3, #12]
 8006fc4:	68db      	ldr	r3, [r3, #12]
 8006fc6:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4618      	mov	r0, r3
 8006fce:	f7fe f905 	bl	80051dc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006fd2:	68fb      	ldr	r3, [r7, #12]
 8006fd4:	6a1b      	ldr	r3, [r3, #32]
 8006fd6:	68f8      	ldr	r0, [r7, #12]
 8006fd8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006fda:	68fb      	ldr	r3, [r7, #12]
 8006fdc:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8006fe0:	f003 0304 	and.w	r3, r3, #4
 8006fe4:	2b00      	cmp	r3, #0
 8006fe6:	d02e      	beq.n	8007046 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	699b      	ldr	r3, [r3, #24]
 8006fec:	693a      	ldr	r2, [r7, #16]
 8006fee:	4413      	add	r3, r2
 8006ff0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006ff2:	68ba      	ldr	r2, [r7, #8]
 8006ff4:	693b      	ldr	r3, [r7, #16]
 8006ff6:	429a      	cmp	r2, r3
 8006ff8:	d90e      	bls.n	8007018 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006ffa:	68fb      	ldr	r3, [r7, #12]
 8006ffc:	68ba      	ldr	r2, [r7, #8]
 8006ffe:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	68fa      	ldr	r2, [r7, #12]
 8007004:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007006:	4b19      	ldr	r3, [pc, #100]	; (800706c <prvSwitchTimerLists+0xc0>)
 8007008:	681a      	ldr	r2, [r3, #0]
 800700a:	68fb      	ldr	r3, [r7, #12]
 800700c:	3304      	adds	r3, #4
 800700e:	4619      	mov	r1, r3
 8007010:	4610      	mov	r0, r2
 8007012:	f7fe f8aa 	bl	800516a <vListInsert>
 8007016:	e016      	b.n	8007046 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007018:	2300      	movs	r3, #0
 800701a:	9300      	str	r3, [sp, #0]
 800701c:	2300      	movs	r3, #0
 800701e:	693a      	ldr	r2, [r7, #16]
 8007020:	2100      	movs	r1, #0
 8007022:	68f8      	ldr	r0, [r7, #12]
 8007024:	f7ff fd60 	bl	8006ae8 <xTimerGenericCommand>
 8007028:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800702a:	687b      	ldr	r3, [r7, #4]
 800702c:	2b00      	cmp	r3, #0
 800702e:	d10a      	bne.n	8007046 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007030:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007034:	f383 8811 	msr	BASEPRI, r3
 8007038:	f3bf 8f6f 	isb	sy
 800703c:	f3bf 8f4f 	dsb	sy
 8007040:	603b      	str	r3, [r7, #0]
}
 8007042:	bf00      	nop
 8007044:	e7fe      	b.n	8007044 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007046:	4b09      	ldr	r3, [pc, #36]	; (800706c <prvSwitchTimerLists+0xc0>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	2b00      	cmp	r3, #0
 800704e:	d1b1      	bne.n	8006fb4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007050:	4b06      	ldr	r3, [pc, #24]	; (800706c <prvSwitchTimerLists+0xc0>)
 8007052:	681b      	ldr	r3, [r3, #0]
 8007054:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007056:	4b06      	ldr	r3, [pc, #24]	; (8007070 <prvSwitchTimerLists+0xc4>)
 8007058:	681b      	ldr	r3, [r3, #0]
 800705a:	4a04      	ldr	r2, [pc, #16]	; (800706c <prvSwitchTimerLists+0xc0>)
 800705c:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800705e:	4a04      	ldr	r2, [pc, #16]	; (8007070 <prvSwitchTimerLists+0xc4>)
 8007060:	697b      	ldr	r3, [r7, #20]
 8007062:	6013      	str	r3, [r2, #0]
}
 8007064:	bf00      	nop
 8007066:	3718      	adds	r7, #24
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}
 800706c:	20000fac 	.word	0x20000fac
 8007070:	20000fb0 	.word	0x20000fb0

08007074 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800707a:	f000 f96b 	bl	8007354 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800707e:	4b15      	ldr	r3, [pc, #84]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	2b00      	cmp	r3, #0
 8007084:	d120      	bne.n	80070c8 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007086:	4814      	ldr	r0, [pc, #80]	; (80070d8 <prvCheckForValidListAndQueue+0x64>)
 8007088:	f7fe f81e 	bl	80050c8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800708c:	4813      	ldr	r0, [pc, #76]	; (80070dc <prvCheckForValidListAndQueue+0x68>)
 800708e:	f7fe f81b 	bl	80050c8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007092:	4b13      	ldr	r3, [pc, #76]	; (80070e0 <prvCheckForValidListAndQueue+0x6c>)
 8007094:	4a10      	ldr	r2, [pc, #64]	; (80070d8 <prvCheckForValidListAndQueue+0x64>)
 8007096:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007098:	4b12      	ldr	r3, [pc, #72]	; (80070e4 <prvCheckForValidListAndQueue+0x70>)
 800709a:	4a10      	ldr	r2, [pc, #64]	; (80070dc <prvCheckForValidListAndQueue+0x68>)
 800709c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800709e:	2300      	movs	r3, #0
 80070a0:	9300      	str	r3, [sp, #0]
 80070a2:	4b11      	ldr	r3, [pc, #68]	; (80070e8 <prvCheckForValidListAndQueue+0x74>)
 80070a4:	4a11      	ldr	r2, [pc, #68]	; (80070ec <prvCheckForValidListAndQueue+0x78>)
 80070a6:	2110      	movs	r1, #16
 80070a8:	200a      	movs	r0, #10
 80070aa:	f7fe f929 	bl	8005300 <xQueueGenericCreateStatic>
 80070ae:	4603      	mov	r3, r0
 80070b0:	4a08      	ldr	r2, [pc, #32]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 80070b2:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80070b4:	4b07      	ldr	r3, [pc, #28]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	2b00      	cmp	r3, #0
 80070ba:	d005      	beq.n	80070c8 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 80070bc:	4b05      	ldr	r3, [pc, #20]	; (80070d4 <prvCheckForValidListAndQueue+0x60>)
 80070be:	681b      	ldr	r3, [r3, #0]
 80070c0:	490b      	ldr	r1, [pc, #44]	; (80070f0 <prvCheckForValidListAndQueue+0x7c>)
 80070c2:	4618      	mov	r0, r3
 80070c4:	f7fe fd42 	bl	8005b4c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80070c8:	f000 f974 	bl	80073b4 <vPortExitCritical>
}
 80070cc:	bf00      	nop
 80070ce:	46bd      	mov	sp, r7
 80070d0:	bd80      	pop	{r7, pc}
 80070d2:	bf00      	nop
 80070d4:	20000fb4 	.word	0x20000fb4
 80070d8:	20000f84 	.word	0x20000f84
 80070dc:	20000f98 	.word	0x20000f98
 80070e0:	20000fac 	.word	0x20000fac
 80070e4:	20000fb0 	.word	0x20000fb0
 80070e8:	20001060 	.word	0x20001060
 80070ec:	20000fc0 	.word	0x20000fc0
 80070f0:	08007b84 	.word	0x08007b84

080070f4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80070f4:	b480      	push	{r7}
 80070f6:	b085      	sub	sp, #20
 80070f8:	af00      	add	r7, sp, #0
 80070fa:	60f8      	str	r0, [r7, #12]
 80070fc:	60b9      	str	r1, [r7, #8]
 80070fe:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	3b04      	subs	r3, #4
 8007104:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800710c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800710e:	68fb      	ldr	r3, [r7, #12]
 8007110:	3b04      	subs	r3, #4
 8007112:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	f023 0201 	bic.w	r2, r3, #1
 800711a:	68fb      	ldr	r3, [r7, #12]
 800711c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800711e:	68fb      	ldr	r3, [r7, #12]
 8007120:	3b04      	subs	r3, #4
 8007122:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007124:	4a0c      	ldr	r2, [pc, #48]	; (8007158 <pxPortInitialiseStack+0x64>)
 8007126:	68fb      	ldr	r3, [r7, #12]
 8007128:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800712a:	68fb      	ldr	r3, [r7, #12]
 800712c:	3b14      	subs	r3, #20
 800712e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007130:	687a      	ldr	r2, [r7, #4]
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007136:	68fb      	ldr	r3, [r7, #12]
 8007138:	3b04      	subs	r3, #4
 800713a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	f06f 0202 	mvn.w	r2, #2
 8007142:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007144:	68fb      	ldr	r3, [r7, #12]
 8007146:	3b20      	subs	r3, #32
 8007148:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800714a:	68fb      	ldr	r3, [r7, #12]
}
 800714c:	4618      	mov	r0, r3
 800714e:	3714      	adds	r7, #20
 8007150:	46bd      	mov	sp, r7
 8007152:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007156:	4770      	bx	lr
 8007158:	0800715d 	.word	0x0800715d

0800715c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800715c:	b480      	push	{r7}
 800715e:	b085      	sub	sp, #20
 8007160:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007162:	2300      	movs	r3, #0
 8007164:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007166:	4b12      	ldr	r3, [pc, #72]	; (80071b0 <prvTaskExitError+0x54>)
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800716e:	d00a      	beq.n	8007186 <prvTaskExitError+0x2a>
	__asm volatile
 8007170:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007174:	f383 8811 	msr	BASEPRI, r3
 8007178:	f3bf 8f6f 	isb	sy
 800717c:	f3bf 8f4f 	dsb	sy
 8007180:	60fb      	str	r3, [r7, #12]
}
 8007182:	bf00      	nop
 8007184:	e7fe      	b.n	8007184 <prvTaskExitError+0x28>
	__asm volatile
 8007186:	f04f 0350 	mov.w	r3, #80	; 0x50
 800718a:	f383 8811 	msr	BASEPRI, r3
 800718e:	f3bf 8f6f 	isb	sy
 8007192:	f3bf 8f4f 	dsb	sy
 8007196:	60bb      	str	r3, [r7, #8]
}
 8007198:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800719a:	bf00      	nop
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d0fc      	beq.n	800719c <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	3714      	adds	r7, #20
 80071a8:	46bd      	mov	sp, r7
 80071aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ae:	4770      	bx	lr
 80071b0:	20000010 	.word	0x20000010
	...

080071c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 80071c0:	4b07      	ldr	r3, [pc, #28]	; (80071e0 <pxCurrentTCBConst2>)
 80071c2:	6819      	ldr	r1, [r3, #0]
 80071c4:	6808      	ldr	r0, [r1, #0]
 80071c6:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ca:	f380 8809 	msr	PSP, r0
 80071ce:	f3bf 8f6f 	isb	sy
 80071d2:	f04f 0000 	mov.w	r0, #0
 80071d6:	f380 8811 	msr	BASEPRI, r0
 80071da:	4770      	bx	lr
 80071dc:	f3af 8000 	nop.w

080071e0 <pxCurrentTCBConst2>:
 80071e0:	20000a84 	.word	0x20000a84
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80071e4:	bf00      	nop
 80071e6:	bf00      	nop

080071e8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80071e8:	4808      	ldr	r0, [pc, #32]	; (800720c <prvPortStartFirstTask+0x24>)
 80071ea:	6800      	ldr	r0, [r0, #0]
 80071ec:	6800      	ldr	r0, [r0, #0]
 80071ee:	f380 8808 	msr	MSP, r0
 80071f2:	f04f 0000 	mov.w	r0, #0
 80071f6:	f380 8814 	msr	CONTROL, r0
 80071fa:	b662      	cpsie	i
 80071fc:	b661      	cpsie	f
 80071fe:	f3bf 8f4f 	dsb	sy
 8007202:	f3bf 8f6f 	isb	sy
 8007206:	df00      	svc	0
 8007208:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800720a:	bf00      	nop
 800720c:	e000ed08 	.word	0xe000ed08

08007210 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007210:	b580      	push	{r7, lr}
 8007212:	b086      	sub	sp, #24
 8007214:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007216:	4b46      	ldr	r3, [pc, #280]	; (8007330 <xPortStartScheduler+0x120>)
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a46      	ldr	r2, [pc, #280]	; (8007334 <xPortStartScheduler+0x124>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d10a      	bne.n	8007236 <xPortStartScheduler+0x26>
	__asm volatile
 8007220:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007224:	f383 8811 	msr	BASEPRI, r3
 8007228:	f3bf 8f6f 	isb	sy
 800722c:	f3bf 8f4f 	dsb	sy
 8007230:	613b      	str	r3, [r7, #16]
}
 8007232:	bf00      	nop
 8007234:	e7fe      	b.n	8007234 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007236:	4b3e      	ldr	r3, [pc, #248]	; (8007330 <xPortStartScheduler+0x120>)
 8007238:	681b      	ldr	r3, [r3, #0]
 800723a:	4a3f      	ldr	r2, [pc, #252]	; (8007338 <xPortStartScheduler+0x128>)
 800723c:	4293      	cmp	r3, r2
 800723e:	d10a      	bne.n	8007256 <xPortStartScheduler+0x46>
	__asm volatile
 8007240:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007244:	f383 8811 	msr	BASEPRI, r3
 8007248:	f3bf 8f6f 	isb	sy
 800724c:	f3bf 8f4f 	dsb	sy
 8007250:	60fb      	str	r3, [r7, #12]
}
 8007252:	bf00      	nop
 8007254:	e7fe      	b.n	8007254 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007256:	4b39      	ldr	r3, [pc, #228]	; (800733c <xPortStartScheduler+0x12c>)
 8007258:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	781b      	ldrb	r3, [r3, #0]
 800725e:	b2db      	uxtb	r3, r3
 8007260:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007262:	697b      	ldr	r3, [r7, #20]
 8007264:	22ff      	movs	r2, #255	; 0xff
 8007266:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007268:	697b      	ldr	r3, [r7, #20]
 800726a:	781b      	ldrb	r3, [r3, #0]
 800726c:	b2db      	uxtb	r3, r3
 800726e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007270:	78fb      	ldrb	r3, [r7, #3]
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007278:	b2da      	uxtb	r2, r3
 800727a:	4b31      	ldr	r3, [pc, #196]	; (8007340 <xPortStartScheduler+0x130>)
 800727c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800727e:	4b31      	ldr	r3, [pc, #196]	; (8007344 <xPortStartScheduler+0x134>)
 8007280:	2207      	movs	r2, #7
 8007282:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007284:	e009      	b.n	800729a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007286:	4b2f      	ldr	r3, [pc, #188]	; (8007344 <xPortStartScheduler+0x134>)
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	3b01      	subs	r3, #1
 800728c:	4a2d      	ldr	r2, [pc, #180]	; (8007344 <xPortStartScheduler+0x134>)
 800728e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007290:	78fb      	ldrb	r3, [r7, #3]
 8007292:	b2db      	uxtb	r3, r3
 8007294:	005b      	lsls	r3, r3, #1
 8007296:	b2db      	uxtb	r3, r3
 8007298:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800729a:	78fb      	ldrb	r3, [r7, #3]
 800729c:	b2db      	uxtb	r3, r3
 800729e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80072a2:	2b80      	cmp	r3, #128	; 0x80
 80072a4:	d0ef      	beq.n	8007286 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80072a6:	4b27      	ldr	r3, [pc, #156]	; (8007344 <xPortStartScheduler+0x134>)
 80072a8:	681b      	ldr	r3, [r3, #0]
 80072aa:	f1c3 0307 	rsb	r3, r3, #7
 80072ae:	2b04      	cmp	r3, #4
 80072b0:	d00a      	beq.n	80072c8 <xPortStartScheduler+0xb8>
	__asm volatile
 80072b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80072b6:	f383 8811 	msr	BASEPRI, r3
 80072ba:	f3bf 8f6f 	isb	sy
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	60bb      	str	r3, [r7, #8]
}
 80072c4:	bf00      	nop
 80072c6:	e7fe      	b.n	80072c6 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80072c8:	4b1e      	ldr	r3, [pc, #120]	; (8007344 <xPortStartScheduler+0x134>)
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	021b      	lsls	r3, r3, #8
 80072ce:	4a1d      	ldr	r2, [pc, #116]	; (8007344 <xPortStartScheduler+0x134>)
 80072d0:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80072d2:	4b1c      	ldr	r3, [pc, #112]	; (8007344 <xPortStartScheduler+0x134>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80072da:	4a1a      	ldr	r2, [pc, #104]	; (8007344 <xPortStartScheduler+0x134>)
 80072dc:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80072de:	687b      	ldr	r3, [r7, #4]
 80072e0:	b2da      	uxtb	r2, r3
 80072e2:	697b      	ldr	r3, [r7, #20]
 80072e4:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80072e6:	4b18      	ldr	r3, [pc, #96]	; (8007348 <xPortStartScheduler+0x138>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	4a17      	ldr	r2, [pc, #92]	; (8007348 <xPortStartScheduler+0x138>)
 80072ec:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80072f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80072f2:	4b15      	ldr	r3, [pc, #84]	; (8007348 <xPortStartScheduler+0x138>)
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	4a14      	ldr	r2, [pc, #80]	; (8007348 <xPortStartScheduler+0x138>)
 80072f8:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 80072fc:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80072fe:	f000 f8dd 	bl	80074bc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007302:	4b12      	ldr	r3, [pc, #72]	; (800734c <xPortStartScheduler+0x13c>)
 8007304:	2200      	movs	r2, #0
 8007306:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007308:	f000 f8fc 	bl	8007504 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800730c:	4b10      	ldr	r3, [pc, #64]	; (8007350 <xPortStartScheduler+0x140>)
 800730e:	681b      	ldr	r3, [r3, #0]
 8007310:	4a0f      	ldr	r2, [pc, #60]	; (8007350 <xPortStartScheduler+0x140>)
 8007312:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007316:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007318:	f7ff ff66 	bl	80071e8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800731c:	f7ff f846 	bl	80063ac <vTaskSwitchContext>
	prvTaskExitError();
 8007320:	f7ff ff1c 	bl	800715c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007324:	2300      	movs	r3, #0
}
 8007326:	4618      	mov	r0, r3
 8007328:	3718      	adds	r7, #24
 800732a:	46bd      	mov	sp, r7
 800732c:	bd80      	pop	{r7, pc}
 800732e:	bf00      	nop
 8007330:	e000ed00 	.word	0xe000ed00
 8007334:	410fc271 	.word	0x410fc271
 8007338:	410fc270 	.word	0x410fc270
 800733c:	e000e400 	.word	0xe000e400
 8007340:	200010b0 	.word	0x200010b0
 8007344:	200010b4 	.word	0x200010b4
 8007348:	e000ed20 	.word	0xe000ed20
 800734c:	20000010 	.word	0x20000010
 8007350:	e000ef34 	.word	0xe000ef34

08007354 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007354:	b480      	push	{r7}
 8007356:	b083      	sub	sp, #12
 8007358:	af00      	add	r7, sp, #0
	__asm volatile
 800735a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800735e:	f383 8811 	msr	BASEPRI, r3
 8007362:	f3bf 8f6f 	isb	sy
 8007366:	f3bf 8f4f 	dsb	sy
 800736a:	607b      	str	r3, [r7, #4]
}
 800736c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800736e:	4b0f      	ldr	r3, [pc, #60]	; (80073ac <vPortEnterCritical+0x58>)
 8007370:	681b      	ldr	r3, [r3, #0]
 8007372:	3301      	adds	r3, #1
 8007374:	4a0d      	ldr	r2, [pc, #52]	; (80073ac <vPortEnterCritical+0x58>)
 8007376:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007378:	4b0c      	ldr	r3, [pc, #48]	; (80073ac <vPortEnterCritical+0x58>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	2b01      	cmp	r3, #1
 800737e:	d10f      	bne.n	80073a0 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007380:	4b0b      	ldr	r3, [pc, #44]	; (80073b0 <vPortEnterCritical+0x5c>)
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	b2db      	uxtb	r3, r3
 8007386:	2b00      	cmp	r3, #0
 8007388:	d00a      	beq.n	80073a0 <vPortEnterCritical+0x4c>
	__asm volatile
 800738a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800738e:	f383 8811 	msr	BASEPRI, r3
 8007392:	f3bf 8f6f 	isb	sy
 8007396:	f3bf 8f4f 	dsb	sy
 800739a:	603b      	str	r3, [r7, #0]
}
 800739c:	bf00      	nop
 800739e:	e7fe      	b.n	800739e <vPortEnterCritical+0x4a>
	}
}
 80073a0:	bf00      	nop
 80073a2:	370c      	adds	r7, #12
 80073a4:	46bd      	mov	sp, r7
 80073a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073aa:	4770      	bx	lr
 80073ac:	20000010 	.word	0x20000010
 80073b0:	e000ed04 	.word	0xe000ed04

080073b4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80073b4:	b480      	push	{r7}
 80073b6:	b083      	sub	sp, #12
 80073b8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80073ba:	4b12      	ldr	r3, [pc, #72]	; (8007404 <vPortExitCritical+0x50>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	d10a      	bne.n	80073d8 <vPortExitCritical+0x24>
	__asm volatile
 80073c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80073c6:	f383 8811 	msr	BASEPRI, r3
 80073ca:	f3bf 8f6f 	isb	sy
 80073ce:	f3bf 8f4f 	dsb	sy
 80073d2:	607b      	str	r3, [r7, #4]
}
 80073d4:	bf00      	nop
 80073d6:	e7fe      	b.n	80073d6 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80073d8:	4b0a      	ldr	r3, [pc, #40]	; (8007404 <vPortExitCritical+0x50>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	3b01      	subs	r3, #1
 80073de:	4a09      	ldr	r2, [pc, #36]	; (8007404 <vPortExitCritical+0x50>)
 80073e0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80073e2:	4b08      	ldr	r3, [pc, #32]	; (8007404 <vPortExitCritical+0x50>)
 80073e4:	681b      	ldr	r3, [r3, #0]
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d105      	bne.n	80073f6 <vPortExitCritical+0x42>
 80073ea:	2300      	movs	r3, #0
 80073ec:	603b      	str	r3, [r7, #0]
	__asm volatile
 80073ee:	683b      	ldr	r3, [r7, #0]
 80073f0:	f383 8811 	msr	BASEPRI, r3
}
 80073f4:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80073f6:	bf00      	nop
 80073f8:	370c      	adds	r7, #12
 80073fa:	46bd      	mov	sp, r7
 80073fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007400:	4770      	bx	lr
 8007402:	bf00      	nop
 8007404:	20000010 	.word	0x20000010
	...

08007410 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007410:	f3ef 8009 	mrs	r0, PSP
 8007414:	f3bf 8f6f 	isb	sy
 8007418:	4b15      	ldr	r3, [pc, #84]	; (8007470 <pxCurrentTCBConst>)
 800741a:	681a      	ldr	r2, [r3, #0]
 800741c:	f01e 0f10 	tst.w	lr, #16
 8007420:	bf08      	it	eq
 8007422:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007426:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800742a:	6010      	str	r0, [r2, #0]
 800742c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007430:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007434:	f380 8811 	msr	BASEPRI, r0
 8007438:	f3bf 8f4f 	dsb	sy
 800743c:	f3bf 8f6f 	isb	sy
 8007440:	f7fe ffb4 	bl	80063ac <vTaskSwitchContext>
 8007444:	f04f 0000 	mov.w	r0, #0
 8007448:	f380 8811 	msr	BASEPRI, r0
 800744c:	bc09      	pop	{r0, r3}
 800744e:	6819      	ldr	r1, [r3, #0]
 8007450:	6808      	ldr	r0, [r1, #0]
 8007452:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007456:	f01e 0f10 	tst.w	lr, #16
 800745a:	bf08      	it	eq
 800745c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007460:	f380 8809 	msr	PSP, r0
 8007464:	f3bf 8f6f 	isb	sy
 8007468:	4770      	bx	lr
 800746a:	bf00      	nop
 800746c:	f3af 8000 	nop.w

08007470 <pxCurrentTCBConst>:
 8007470:	20000a84 	.word	0x20000a84
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007474:	bf00      	nop
 8007476:	bf00      	nop

08007478 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b082      	sub	sp, #8
 800747c:	af00      	add	r7, sp, #0
	__asm volatile
 800747e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007482:	f383 8811 	msr	BASEPRI, r3
 8007486:	f3bf 8f6f 	isb	sy
 800748a:	f3bf 8f4f 	dsb	sy
 800748e:	607b      	str	r3, [r7, #4]
}
 8007490:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007492:	f7fe fed1 	bl	8006238 <xTaskIncrementTick>
 8007496:	4603      	mov	r3, r0
 8007498:	2b00      	cmp	r3, #0
 800749a:	d003      	beq.n	80074a4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800749c:	4b06      	ldr	r3, [pc, #24]	; (80074b8 <xPortSysTickHandler+0x40>)
 800749e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80074a2:	601a      	str	r2, [r3, #0]
 80074a4:	2300      	movs	r3, #0
 80074a6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074a8:	683b      	ldr	r3, [r7, #0]
 80074aa:	f383 8811 	msr	BASEPRI, r3
}
 80074ae:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80074b0:	bf00      	nop
 80074b2:	3708      	adds	r7, #8
 80074b4:	46bd      	mov	sp, r7
 80074b6:	bd80      	pop	{r7, pc}
 80074b8:	e000ed04 	.word	0xe000ed04

080074bc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80074bc:	b480      	push	{r7}
 80074be:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80074c0:	4b0b      	ldr	r3, [pc, #44]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074c2:	2200      	movs	r2, #0
 80074c4:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80074c6:	4b0b      	ldr	r3, [pc, #44]	; (80074f4 <vPortSetupTimerInterrupt+0x38>)
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80074cc:	4b0a      	ldr	r3, [pc, #40]	; (80074f8 <vPortSetupTimerInterrupt+0x3c>)
 80074ce:	681b      	ldr	r3, [r3, #0]
 80074d0:	4a0a      	ldr	r2, [pc, #40]	; (80074fc <vPortSetupTimerInterrupt+0x40>)
 80074d2:	fba2 2303 	umull	r2, r3, r2, r3
 80074d6:	099b      	lsrs	r3, r3, #6
 80074d8:	4a09      	ldr	r2, [pc, #36]	; (8007500 <vPortSetupTimerInterrupt+0x44>)
 80074da:	3b01      	subs	r3, #1
 80074dc:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80074de:	4b04      	ldr	r3, [pc, #16]	; (80074f0 <vPortSetupTimerInterrupt+0x34>)
 80074e0:	2207      	movs	r2, #7
 80074e2:	601a      	str	r2, [r3, #0]
}
 80074e4:	bf00      	nop
 80074e6:	46bd      	mov	sp, r7
 80074e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ec:	4770      	bx	lr
 80074ee:	bf00      	nop
 80074f0:	e000e010 	.word	0xe000e010
 80074f4:	e000e018 	.word	0xe000e018
 80074f8:	20000004 	.word	0x20000004
 80074fc:	10624dd3 	.word	0x10624dd3
 8007500:	e000e014 	.word	0xe000e014

08007504 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007504:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007514 <vPortEnableVFP+0x10>
 8007508:	6801      	ldr	r1, [r0, #0]
 800750a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800750e:	6001      	str	r1, [r0, #0]
 8007510:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007512:	bf00      	nop
 8007514:	e000ed88 	.word	0xe000ed88

08007518 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800751e:	f3ef 8305 	mrs	r3, IPSR
 8007522:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	2b0f      	cmp	r3, #15
 8007528:	d914      	bls.n	8007554 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800752a:	4a17      	ldr	r2, [pc, #92]	; (8007588 <vPortValidateInterruptPriority+0x70>)
 800752c:	68fb      	ldr	r3, [r7, #12]
 800752e:	4413      	add	r3, r2
 8007530:	781b      	ldrb	r3, [r3, #0]
 8007532:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007534:	4b15      	ldr	r3, [pc, #84]	; (800758c <vPortValidateInterruptPriority+0x74>)
 8007536:	781b      	ldrb	r3, [r3, #0]
 8007538:	7afa      	ldrb	r2, [r7, #11]
 800753a:	429a      	cmp	r2, r3
 800753c:	d20a      	bcs.n	8007554 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
}
 8007550:	bf00      	nop
 8007552:	e7fe      	b.n	8007552 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007554:	4b0e      	ldr	r3, [pc, #56]	; (8007590 <vPortValidateInterruptPriority+0x78>)
 8007556:	681b      	ldr	r3, [r3, #0]
 8007558:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800755c:	4b0d      	ldr	r3, [pc, #52]	; (8007594 <vPortValidateInterruptPriority+0x7c>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	429a      	cmp	r2, r3
 8007562:	d90a      	bls.n	800757a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007564:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007568:	f383 8811 	msr	BASEPRI, r3
 800756c:	f3bf 8f6f 	isb	sy
 8007570:	f3bf 8f4f 	dsb	sy
 8007574:	603b      	str	r3, [r7, #0]
}
 8007576:	bf00      	nop
 8007578:	e7fe      	b.n	8007578 <vPortValidateInterruptPriority+0x60>
	}
 800757a:	bf00      	nop
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	e000e3f0 	.word	0xe000e3f0
 800758c:	200010b0 	.word	0x200010b0
 8007590:	e000ed0c 	.word	0xe000ed0c
 8007594:	200010b4 	.word	0x200010b4

08007598 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b08a      	sub	sp, #40	; 0x28
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80075a0:	2300      	movs	r3, #0
 80075a2:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80075a4:	f7fe fd8c 	bl	80060c0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80075a8:	4b5b      	ldr	r3, [pc, #364]	; (8007718 <pvPortMalloc+0x180>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	2b00      	cmp	r3, #0
 80075ae:	d101      	bne.n	80075b4 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80075b0:	f000 f920 	bl	80077f4 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80075b4:	4b59      	ldr	r3, [pc, #356]	; (800771c <pvPortMalloc+0x184>)
 80075b6:	681a      	ldr	r2, [r3, #0]
 80075b8:	687b      	ldr	r3, [r7, #4]
 80075ba:	4013      	ands	r3, r2
 80075bc:	2b00      	cmp	r3, #0
 80075be:	f040 8093 	bne.w	80076e8 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d01d      	beq.n	8007604 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 80075c8:	2208      	movs	r2, #8
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	4413      	add	r3, r2
 80075ce:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80075d0:	687b      	ldr	r3, [r7, #4]
 80075d2:	f003 0307 	and.w	r3, r3, #7
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d014      	beq.n	8007604 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	f023 0307 	bic.w	r3, r3, #7
 80075e0:	3308      	adds	r3, #8
 80075e2:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80075e4:	687b      	ldr	r3, [r7, #4]
 80075e6:	f003 0307 	and.w	r3, r3, #7
 80075ea:	2b00      	cmp	r3, #0
 80075ec:	d00a      	beq.n	8007604 <pvPortMalloc+0x6c>
	__asm volatile
 80075ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80075f2:	f383 8811 	msr	BASEPRI, r3
 80075f6:	f3bf 8f6f 	isb	sy
 80075fa:	f3bf 8f4f 	dsb	sy
 80075fe:	617b      	str	r3, [r7, #20]
}
 8007600:	bf00      	nop
 8007602:	e7fe      	b.n	8007602 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	2b00      	cmp	r3, #0
 8007608:	d06e      	beq.n	80076e8 <pvPortMalloc+0x150>
 800760a:	4b45      	ldr	r3, [pc, #276]	; (8007720 <pvPortMalloc+0x188>)
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	687a      	ldr	r2, [r7, #4]
 8007610:	429a      	cmp	r2, r3
 8007612:	d869      	bhi.n	80076e8 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007614:	4b43      	ldr	r3, [pc, #268]	; (8007724 <pvPortMalloc+0x18c>)
 8007616:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007618:	4b42      	ldr	r3, [pc, #264]	; (8007724 <pvPortMalloc+0x18c>)
 800761a:	681b      	ldr	r3, [r3, #0]
 800761c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800761e:	e004      	b.n	800762a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007620:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007622:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007624:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800762a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800762c:	685b      	ldr	r3, [r3, #4]
 800762e:	687a      	ldr	r2, [r7, #4]
 8007630:	429a      	cmp	r2, r3
 8007632:	d903      	bls.n	800763c <pvPortMalloc+0xa4>
 8007634:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	2b00      	cmp	r3, #0
 800763a:	d1f1      	bne.n	8007620 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800763c:	4b36      	ldr	r3, [pc, #216]	; (8007718 <pvPortMalloc+0x180>)
 800763e:	681b      	ldr	r3, [r3, #0]
 8007640:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007642:	429a      	cmp	r2, r3
 8007644:	d050      	beq.n	80076e8 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007646:	6a3b      	ldr	r3, [r7, #32]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	2208      	movs	r2, #8
 800764c:	4413      	add	r3, r2
 800764e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007650:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007652:	681a      	ldr	r2, [r3, #0]
 8007654:	6a3b      	ldr	r3, [r7, #32]
 8007656:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007658:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800765a:	685a      	ldr	r2, [r3, #4]
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	1ad2      	subs	r2, r2, r3
 8007660:	2308      	movs	r3, #8
 8007662:	005b      	lsls	r3, r3, #1
 8007664:	429a      	cmp	r2, r3
 8007666:	d91f      	bls.n	80076a8 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007668:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	4413      	add	r3, r2
 800766e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007670:	69bb      	ldr	r3, [r7, #24]
 8007672:	f003 0307 	and.w	r3, r3, #7
 8007676:	2b00      	cmp	r3, #0
 8007678:	d00a      	beq.n	8007690 <pvPortMalloc+0xf8>
	__asm volatile
 800767a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767e:	f383 8811 	msr	BASEPRI, r3
 8007682:	f3bf 8f6f 	isb	sy
 8007686:	f3bf 8f4f 	dsb	sy
 800768a:	613b      	str	r3, [r7, #16]
}
 800768c:	bf00      	nop
 800768e:	e7fe      	b.n	800768e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007690:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007692:	685a      	ldr	r2, [r3, #4]
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	1ad2      	subs	r2, r2, r3
 8007698:	69bb      	ldr	r3, [r7, #24]
 800769a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800769c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800769e:	687a      	ldr	r2, [r7, #4]
 80076a0:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80076a2:	69b8      	ldr	r0, [r7, #24]
 80076a4:	f000 f908 	bl	80078b8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80076a8:	4b1d      	ldr	r3, [pc, #116]	; (8007720 <pvPortMalloc+0x188>)
 80076aa:	681a      	ldr	r2, [r3, #0]
 80076ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076ae:	685b      	ldr	r3, [r3, #4]
 80076b0:	1ad3      	subs	r3, r2, r3
 80076b2:	4a1b      	ldr	r2, [pc, #108]	; (8007720 <pvPortMalloc+0x188>)
 80076b4:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80076b6:	4b1a      	ldr	r3, [pc, #104]	; (8007720 <pvPortMalloc+0x188>)
 80076b8:	681a      	ldr	r2, [r3, #0]
 80076ba:	4b1b      	ldr	r3, [pc, #108]	; (8007728 <pvPortMalloc+0x190>)
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	429a      	cmp	r2, r3
 80076c0:	d203      	bcs.n	80076ca <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80076c2:	4b17      	ldr	r3, [pc, #92]	; (8007720 <pvPortMalloc+0x188>)
 80076c4:	681b      	ldr	r3, [r3, #0]
 80076c6:	4a18      	ldr	r2, [pc, #96]	; (8007728 <pvPortMalloc+0x190>)
 80076c8:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80076ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076cc:	685a      	ldr	r2, [r3, #4]
 80076ce:	4b13      	ldr	r3, [pc, #76]	; (800771c <pvPortMalloc+0x184>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	431a      	orrs	r2, r3
 80076d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076d6:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80076d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076da:	2200      	movs	r2, #0
 80076dc:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80076de:	4b13      	ldr	r3, [pc, #76]	; (800772c <pvPortMalloc+0x194>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	3301      	adds	r3, #1
 80076e4:	4a11      	ldr	r2, [pc, #68]	; (800772c <pvPortMalloc+0x194>)
 80076e6:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80076e8:	f7fe fcf8 	bl	80060dc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80076ec:	69fb      	ldr	r3, [r7, #28]
 80076ee:	f003 0307 	and.w	r3, r3, #7
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d00a      	beq.n	800770c <pvPortMalloc+0x174>
	__asm volatile
 80076f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80076fa:	f383 8811 	msr	BASEPRI, r3
 80076fe:	f3bf 8f6f 	isb	sy
 8007702:	f3bf 8f4f 	dsb	sy
 8007706:	60fb      	str	r3, [r7, #12]
}
 8007708:	bf00      	nop
 800770a:	e7fe      	b.n	800770a <pvPortMalloc+0x172>
	return pvReturn;
 800770c:	69fb      	ldr	r3, [r7, #28]
}
 800770e:	4618      	mov	r0, r3
 8007710:	3728      	adds	r7, #40	; 0x28
 8007712:	46bd      	mov	sp, r7
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	20004cc0 	.word	0x20004cc0
 800771c:	20004cd4 	.word	0x20004cd4
 8007720:	20004cc4 	.word	0x20004cc4
 8007724:	20004cb8 	.word	0x20004cb8
 8007728:	20004cc8 	.word	0x20004cc8
 800772c:	20004ccc 	.word	0x20004ccc

08007730 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007730:	b580      	push	{r7, lr}
 8007732:	b086      	sub	sp, #24
 8007734:	af00      	add	r7, sp, #0
 8007736:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007738:	687b      	ldr	r3, [r7, #4]
 800773a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	2b00      	cmp	r3, #0
 8007740:	d04d      	beq.n	80077de <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007742:	2308      	movs	r3, #8
 8007744:	425b      	negs	r3, r3
 8007746:	697a      	ldr	r2, [r7, #20]
 8007748:	4413      	add	r3, r2
 800774a:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800774c:	697b      	ldr	r3, [r7, #20]
 800774e:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007750:	693b      	ldr	r3, [r7, #16]
 8007752:	685a      	ldr	r2, [r3, #4]
 8007754:	4b24      	ldr	r3, [pc, #144]	; (80077e8 <vPortFree+0xb8>)
 8007756:	681b      	ldr	r3, [r3, #0]
 8007758:	4013      	ands	r3, r2
 800775a:	2b00      	cmp	r3, #0
 800775c:	d10a      	bne.n	8007774 <vPortFree+0x44>
	__asm volatile
 800775e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007762:	f383 8811 	msr	BASEPRI, r3
 8007766:	f3bf 8f6f 	isb	sy
 800776a:	f3bf 8f4f 	dsb	sy
 800776e:	60fb      	str	r3, [r7, #12]
}
 8007770:	bf00      	nop
 8007772:	e7fe      	b.n	8007772 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007774:	693b      	ldr	r3, [r7, #16]
 8007776:	681b      	ldr	r3, [r3, #0]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d00a      	beq.n	8007792 <vPortFree+0x62>
	__asm volatile
 800777c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007780:	f383 8811 	msr	BASEPRI, r3
 8007784:	f3bf 8f6f 	isb	sy
 8007788:	f3bf 8f4f 	dsb	sy
 800778c:	60bb      	str	r3, [r7, #8]
}
 800778e:	bf00      	nop
 8007790:	e7fe      	b.n	8007790 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007792:	693b      	ldr	r3, [r7, #16]
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	4b14      	ldr	r3, [pc, #80]	; (80077e8 <vPortFree+0xb8>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	4013      	ands	r3, r2
 800779c:	2b00      	cmp	r3, #0
 800779e:	d01e      	beq.n	80077de <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80077a0:	693b      	ldr	r3, [r7, #16]
 80077a2:	681b      	ldr	r3, [r3, #0]
 80077a4:	2b00      	cmp	r3, #0
 80077a6:	d11a      	bne.n	80077de <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80077a8:	693b      	ldr	r3, [r7, #16]
 80077aa:	685a      	ldr	r2, [r3, #4]
 80077ac:	4b0e      	ldr	r3, [pc, #56]	; (80077e8 <vPortFree+0xb8>)
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	43db      	mvns	r3, r3
 80077b2:	401a      	ands	r2, r3
 80077b4:	693b      	ldr	r3, [r7, #16]
 80077b6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80077b8:	f7fe fc82 	bl	80060c0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80077bc:	693b      	ldr	r3, [r7, #16]
 80077be:	685a      	ldr	r2, [r3, #4]
 80077c0:	4b0a      	ldr	r3, [pc, #40]	; (80077ec <vPortFree+0xbc>)
 80077c2:	681b      	ldr	r3, [r3, #0]
 80077c4:	4413      	add	r3, r2
 80077c6:	4a09      	ldr	r2, [pc, #36]	; (80077ec <vPortFree+0xbc>)
 80077c8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80077ca:	6938      	ldr	r0, [r7, #16]
 80077cc:	f000 f874 	bl	80078b8 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 80077d0:	4b07      	ldr	r3, [pc, #28]	; (80077f0 <vPortFree+0xc0>)
 80077d2:	681b      	ldr	r3, [r3, #0]
 80077d4:	3301      	adds	r3, #1
 80077d6:	4a06      	ldr	r2, [pc, #24]	; (80077f0 <vPortFree+0xc0>)
 80077d8:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80077da:	f7fe fc7f 	bl	80060dc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80077de:	bf00      	nop
 80077e0:	3718      	adds	r7, #24
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20004cd4 	.word	0x20004cd4
 80077ec:	20004cc4 	.word	0x20004cc4
 80077f0:	20004cd0 	.word	0x20004cd0

080077f4 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80077f4:	b480      	push	{r7}
 80077f6:	b085      	sub	sp, #20
 80077f8:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80077fa:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 80077fe:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007800:	4b27      	ldr	r3, [pc, #156]	; (80078a0 <prvHeapInit+0xac>)
 8007802:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	f003 0307 	and.w	r3, r3, #7
 800780a:	2b00      	cmp	r3, #0
 800780c:	d00c      	beq.n	8007828 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	3307      	adds	r3, #7
 8007812:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	f023 0307 	bic.w	r3, r3, #7
 800781a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800781c:	68ba      	ldr	r2, [r7, #8]
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	1ad3      	subs	r3, r2, r3
 8007822:	4a1f      	ldr	r2, [pc, #124]	; (80078a0 <prvHeapInit+0xac>)
 8007824:	4413      	add	r3, r2
 8007826:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800782c:	4a1d      	ldr	r2, [pc, #116]	; (80078a4 <prvHeapInit+0xb0>)
 800782e:	687b      	ldr	r3, [r7, #4]
 8007830:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007832:	4b1c      	ldr	r3, [pc, #112]	; (80078a4 <prvHeapInit+0xb0>)
 8007834:	2200      	movs	r2, #0
 8007836:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	68ba      	ldr	r2, [r7, #8]
 800783c:	4413      	add	r3, r2
 800783e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007840:	2208      	movs	r2, #8
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	1a9b      	subs	r3, r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f023 0307 	bic.w	r3, r3, #7
 800784e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	4a15      	ldr	r2, [pc, #84]	; (80078a8 <prvHeapInit+0xb4>)
 8007854:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007856:	4b14      	ldr	r3, [pc, #80]	; (80078a8 <prvHeapInit+0xb4>)
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	2200      	movs	r2, #0
 800785c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800785e:	4b12      	ldr	r3, [pc, #72]	; (80078a8 <prvHeapInit+0xb4>)
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	2200      	movs	r2, #0
 8007864:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800786a:	683b      	ldr	r3, [r7, #0]
 800786c:	68fa      	ldr	r2, [r7, #12]
 800786e:	1ad2      	subs	r2, r2, r3
 8007870:	683b      	ldr	r3, [r7, #0]
 8007872:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007874:	4b0c      	ldr	r3, [pc, #48]	; (80078a8 <prvHeapInit+0xb4>)
 8007876:	681a      	ldr	r2, [r3, #0]
 8007878:	683b      	ldr	r3, [r7, #0]
 800787a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800787c:	683b      	ldr	r3, [r7, #0]
 800787e:	685b      	ldr	r3, [r3, #4]
 8007880:	4a0a      	ldr	r2, [pc, #40]	; (80078ac <prvHeapInit+0xb8>)
 8007882:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007884:	683b      	ldr	r3, [r7, #0]
 8007886:	685b      	ldr	r3, [r3, #4]
 8007888:	4a09      	ldr	r2, [pc, #36]	; (80078b0 <prvHeapInit+0xbc>)
 800788a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800788c:	4b09      	ldr	r3, [pc, #36]	; (80078b4 <prvHeapInit+0xc0>)
 800788e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8007892:	601a      	str	r2, [r3, #0]
}
 8007894:	bf00      	nop
 8007896:	3714      	adds	r7, #20
 8007898:	46bd      	mov	sp, r7
 800789a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789e:	4770      	bx	lr
 80078a0:	200010b8 	.word	0x200010b8
 80078a4:	20004cb8 	.word	0x20004cb8
 80078a8:	20004cc0 	.word	0x20004cc0
 80078ac:	20004cc8 	.word	0x20004cc8
 80078b0:	20004cc4 	.word	0x20004cc4
 80078b4:	20004cd4 	.word	0x20004cd4

080078b8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80078b8:	b480      	push	{r7}
 80078ba:	b085      	sub	sp, #20
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80078c0:	4b28      	ldr	r3, [pc, #160]	; (8007964 <prvInsertBlockIntoFreeList+0xac>)
 80078c2:	60fb      	str	r3, [r7, #12]
 80078c4:	e002      	b.n	80078cc <prvInsertBlockIntoFreeList+0x14>
 80078c6:	68fb      	ldr	r3, [r7, #12]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	60fb      	str	r3, [r7, #12]
 80078cc:	68fb      	ldr	r3, [r7, #12]
 80078ce:	681b      	ldr	r3, [r3, #0]
 80078d0:	687a      	ldr	r2, [r7, #4]
 80078d2:	429a      	cmp	r2, r3
 80078d4:	d8f7      	bhi.n	80078c6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	685b      	ldr	r3, [r3, #4]
 80078de:	68ba      	ldr	r2, [r7, #8]
 80078e0:	4413      	add	r3, r2
 80078e2:	687a      	ldr	r2, [r7, #4]
 80078e4:	429a      	cmp	r2, r3
 80078e6:	d108      	bne.n	80078fa <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	685a      	ldr	r2, [r3, #4]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	685b      	ldr	r3, [r3, #4]
 80078f0:	441a      	add	r2, r3
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80078f6:	68fb      	ldr	r3, [r7, #12]
 80078f8:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80078fe:	687b      	ldr	r3, [r7, #4]
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	68ba      	ldr	r2, [r7, #8]
 8007904:	441a      	add	r2, r3
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	429a      	cmp	r2, r3
 800790c:	d118      	bne.n	8007940 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681a      	ldr	r2, [r3, #0]
 8007912:	4b15      	ldr	r3, [pc, #84]	; (8007968 <prvInsertBlockIntoFreeList+0xb0>)
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	429a      	cmp	r2, r3
 8007918:	d00d      	beq.n	8007936 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	685a      	ldr	r2, [r3, #4]
 800791e:	68fb      	ldr	r3, [r7, #12]
 8007920:	681b      	ldr	r3, [r3, #0]
 8007922:	685b      	ldr	r3, [r3, #4]
 8007924:	441a      	add	r2, r3
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800792a:	68fb      	ldr	r3, [r7, #12]
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	681a      	ldr	r2, [r3, #0]
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	601a      	str	r2, [r3, #0]
 8007934:	e008      	b.n	8007948 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007936:	4b0c      	ldr	r3, [pc, #48]	; (8007968 <prvInsertBlockIntoFreeList+0xb0>)
 8007938:	681a      	ldr	r2, [r3, #0]
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	601a      	str	r2, [r3, #0]
 800793e:	e003      	b.n	8007948 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007948:	68fa      	ldr	r2, [r7, #12]
 800794a:	687b      	ldr	r3, [r7, #4]
 800794c:	429a      	cmp	r2, r3
 800794e:	d002      	beq.n	8007956 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	687a      	ldr	r2, [r7, #4]
 8007954:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007956:	bf00      	nop
 8007958:	3714      	adds	r7, #20
 800795a:	46bd      	mov	sp, r7
 800795c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007960:	4770      	bx	lr
 8007962:	bf00      	nop
 8007964:	20004cb8 	.word	0x20004cb8
 8007968:	20004cc0 	.word	0x20004cc0

0800796c <memset>:
 800796c:	4402      	add	r2, r0
 800796e:	4603      	mov	r3, r0
 8007970:	4293      	cmp	r3, r2
 8007972:	d100      	bne.n	8007976 <memset+0xa>
 8007974:	4770      	bx	lr
 8007976:	f803 1b01 	strb.w	r1, [r3], #1
 800797a:	e7f9      	b.n	8007970 <memset+0x4>

0800797c <_reclaim_reent>:
 800797c:	4b29      	ldr	r3, [pc, #164]	; (8007a24 <_reclaim_reent+0xa8>)
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4283      	cmp	r3, r0
 8007982:	b570      	push	{r4, r5, r6, lr}
 8007984:	4604      	mov	r4, r0
 8007986:	d04b      	beq.n	8007a20 <_reclaim_reent+0xa4>
 8007988:	69c3      	ldr	r3, [r0, #28]
 800798a:	b143      	cbz	r3, 800799e <_reclaim_reent+0x22>
 800798c:	68db      	ldr	r3, [r3, #12]
 800798e:	2b00      	cmp	r3, #0
 8007990:	d144      	bne.n	8007a1c <_reclaim_reent+0xa0>
 8007992:	69e3      	ldr	r3, [r4, #28]
 8007994:	6819      	ldr	r1, [r3, #0]
 8007996:	b111      	cbz	r1, 800799e <_reclaim_reent+0x22>
 8007998:	4620      	mov	r0, r4
 800799a:	f000 f879 	bl	8007a90 <_free_r>
 800799e:	6961      	ldr	r1, [r4, #20]
 80079a0:	b111      	cbz	r1, 80079a8 <_reclaim_reent+0x2c>
 80079a2:	4620      	mov	r0, r4
 80079a4:	f000 f874 	bl	8007a90 <_free_r>
 80079a8:	69e1      	ldr	r1, [r4, #28]
 80079aa:	b111      	cbz	r1, 80079b2 <_reclaim_reent+0x36>
 80079ac:	4620      	mov	r0, r4
 80079ae:	f000 f86f 	bl	8007a90 <_free_r>
 80079b2:	6b21      	ldr	r1, [r4, #48]	; 0x30
 80079b4:	b111      	cbz	r1, 80079bc <_reclaim_reent+0x40>
 80079b6:	4620      	mov	r0, r4
 80079b8:	f000 f86a 	bl	8007a90 <_free_r>
 80079bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80079be:	b111      	cbz	r1, 80079c6 <_reclaim_reent+0x4a>
 80079c0:	4620      	mov	r0, r4
 80079c2:	f000 f865 	bl	8007a90 <_free_r>
 80079c6:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 80079c8:	b111      	cbz	r1, 80079d0 <_reclaim_reent+0x54>
 80079ca:	4620      	mov	r0, r4
 80079cc:	f000 f860 	bl	8007a90 <_free_r>
 80079d0:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 80079d2:	b111      	cbz	r1, 80079da <_reclaim_reent+0x5e>
 80079d4:	4620      	mov	r0, r4
 80079d6:	f000 f85b 	bl	8007a90 <_free_r>
 80079da:	6c61      	ldr	r1, [r4, #68]	; 0x44
 80079dc:	b111      	cbz	r1, 80079e4 <_reclaim_reent+0x68>
 80079de:	4620      	mov	r0, r4
 80079e0:	f000 f856 	bl	8007a90 <_free_r>
 80079e4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 80079e6:	b111      	cbz	r1, 80079ee <_reclaim_reent+0x72>
 80079e8:	4620      	mov	r0, r4
 80079ea:	f000 f851 	bl	8007a90 <_free_r>
 80079ee:	6a23      	ldr	r3, [r4, #32]
 80079f0:	b1b3      	cbz	r3, 8007a20 <_reclaim_reent+0xa4>
 80079f2:	4620      	mov	r0, r4
 80079f4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80079f8:	4718      	bx	r3
 80079fa:	5949      	ldr	r1, [r1, r5]
 80079fc:	b941      	cbnz	r1, 8007a10 <_reclaim_reent+0x94>
 80079fe:	3504      	adds	r5, #4
 8007a00:	69e3      	ldr	r3, [r4, #28]
 8007a02:	2d80      	cmp	r5, #128	; 0x80
 8007a04:	68d9      	ldr	r1, [r3, #12]
 8007a06:	d1f8      	bne.n	80079fa <_reclaim_reent+0x7e>
 8007a08:	4620      	mov	r0, r4
 8007a0a:	f000 f841 	bl	8007a90 <_free_r>
 8007a0e:	e7c0      	b.n	8007992 <_reclaim_reent+0x16>
 8007a10:	680e      	ldr	r6, [r1, #0]
 8007a12:	4620      	mov	r0, r4
 8007a14:	f000 f83c 	bl	8007a90 <_free_r>
 8007a18:	4631      	mov	r1, r6
 8007a1a:	e7ef      	b.n	80079fc <_reclaim_reent+0x80>
 8007a1c:	2500      	movs	r5, #0
 8007a1e:	e7ef      	b.n	8007a00 <_reclaim_reent+0x84>
 8007a20:	bd70      	pop	{r4, r5, r6, pc}
 8007a22:	bf00      	nop
 8007a24:	20000060 	.word	0x20000060

08007a28 <__libc_init_array>:
 8007a28:	b570      	push	{r4, r5, r6, lr}
 8007a2a:	4d0d      	ldr	r5, [pc, #52]	; (8007a60 <__libc_init_array+0x38>)
 8007a2c:	4c0d      	ldr	r4, [pc, #52]	; (8007a64 <__libc_init_array+0x3c>)
 8007a2e:	1b64      	subs	r4, r4, r5
 8007a30:	10a4      	asrs	r4, r4, #2
 8007a32:	2600      	movs	r6, #0
 8007a34:	42a6      	cmp	r6, r4
 8007a36:	d109      	bne.n	8007a4c <__libc_init_array+0x24>
 8007a38:	4d0b      	ldr	r5, [pc, #44]	; (8007a68 <__libc_init_array+0x40>)
 8007a3a:	4c0c      	ldr	r4, [pc, #48]	; (8007a6c <__libc_init_array+0x44>)
 8007a3c:	f000 f880 	bl	8007b40 <_init>
 8007a40:	1b64      	subs	r4, r4, r5
 8007a42:	10a4      	asrs	r4, r4, #2
 8007a44:	2600      	movs	r6, #0
 8007a46:	42a6      	cmp	r6, r4
 8007a48:	d105      	bne.n	8007a56 <__libc_init_array+0x2e>
 8007a4a:	bd70      	pop	{r4, r5, r6, pc}
 8007a4c:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a50:	4798      	blx	r3
 8007a52:	3601      	adds	r6, #1
 8007a54:	e7ee      	b.n	8007a34 <__libc_init_array+0xc>
 8007a56:	f855 3b04 	ldr.w	r3, [r5], #4
 8007a5a:	4798      	blx	r3
 8007a5c:	3601      	adds	r6, #1
 8007a5e:	e7f2      	b.n	8007a46 <__libc_init_array+0x1e>
 8007a60:	08007bf4 	.word	0x08007bf4
 8007a64:	08007bf4 	.word	0x08007bf4
 8007a68:	08007bf4 	.word	0x08007bf4
 8007a6c:	08007bf8 	.word	0x08007bf8

08007a70 <__retarget_lock_acquire_recursive>:
 8007a70:	4770      	bx	lr

08007a72 <__retarget_lock_release_recursive>:
 8007a72:	4770      	bx	lr

08007a74 <memcpy>:
 8007a74:	440a      	add	r2, r1
 8007a76:	4291      	cmp	r1, r2
 8007a78:	f100 33ff 	add.w	r3, r0, #4294967295
 8007a7c:	d100      	bne.n	8007a80 <memcpy+0xc>
 8007a7e:	4770      	bx	lr
 8007a80:	b510      	push	{r4, lr}
 8007a82:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007a86:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007a8a:	4291      	cmp	r1, r2
 8007a8c:	d1f9      	bne.n	8007a82 <memcpy+0xe>
 8007a8e:	bd10      	pop	{r4, pc}

08007a90 <_free_r>:
 8007a90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007a92:	2900      	cmp	r1, #0
 8007a94:	d044      	beq.n	8007b20 <_free_r+0x90>
 8007a96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007a9a:	9001      	str	r0, [sp, #4]
 8007a9c:	2b00      	cmp	r3, #0
 8007a9e:	f1a1 0404 	sub.w	r4, r1, #4
 8007aa2:	bfb8      	it	lt
 8007aa4:	18e4      	addlt	r4, r4, r3
 8007aa6:	f000 f83f 	bl	8007b28 <__malloc_lock>
 8007aaa:	4a1e      	ldr	r2, [pc, #120]	; (8007b24 <_free_r+0x94>)
 8007aac:	9801      	ldr	r0, [sp, #4]
 8007aae:	6813      	ldr	r3, [r2, #0]
 8007ab0:	b933      	cbnz	r3, 8007ac0 <_free_r+0x30>
 8007ab2:	6063      	str	r3, [r4, #4]
 8007ab4:	6014      	str	r4, [r2, #0]
 8007ab6:	b003      	add	sp, #12
 8007ab8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007abc:	f000 b83a 	b.w	8007b34 <__malloc_unlock>
 8007ac0:	42a3      	cmp	r3, r4
 8007ac2:	d908      	bls.n	8007ad6 <_free_r+0x46>
 8007ac4:	6825      	ldr	r5, [r4, #0]
 8007ac6:	1961      	adds	r1, r4, r5
 8007ac8:	428b      	cmp	r3, r1
 8007aca:	bf01      	itttt	eq
 8007acc:	6819      	ldreq	r1, [r3, #0]
 8007ace:	685b      	ldreq	r3, [r3, #4]
 8007ad0:	1949      	addeq	r1, r1, r5
 8007ad2:	6021      	streq	r1, [r4, #0]
 8007ad4:	e7ed      	b.n	8007ab2 <_free_r+0x22>
 8007ad6:	461a      	mov	r2, r3
 8007ad8:	685b      	ldr	r3, [r3, #4]
 8007ada:	b10b      	cbz	r3, 8007ae0 <_free_r+0x50>
 8007adc:	42a3      	cmp	r3, r4
 8007ade:	d9fa      	bls.n	8007ad6 <_free_r+0x46>
 8007ae0:	6811      	ldr	r1, [r2, #0]
 8007ae2:	1855      	adds	r5, r2, r1
 8007ae4:	42a5      	cmp	r5, r4
 8007ae6:	d10b      	bne.n	8007b00 <_free_r+0x70>
 8007ae8:	6824      	ldr	r4, [r4, #0]
 8007aea:	4421      	add	r1, r4
 8007aec:	1854      	adds	r4, r2, r1
 8007aee:	42a3      	cmp	r3, r4
 8007af0:	6011      	str	r1, [r2, #0]
 8007af2:	d1e0      	bne.n	8007ab6 <_free_r+0x26>
 8007af4:	681c      	ldr	r4, [r3, #0]
 8007af6:	685b      	ldr	r3, [r3, #4]
 8007af8:	6053      	str	r3, [r2, #4]
 8007afa:	440c      	add	r4, r1
 8007afc:	6014      	str	r4, [r2, #0]
 8007afe:	e7da      	b.n	8007ab6 <_free_r+0x26>
 8007b00:	d902      	bls.n	8007b08 <_free_r+0x78>
 8007b02:	230c      	movs	r3, #12
 8007b04:	6003      	str	r3, [r0, #0]
 8007b06:	e7d6      	b.n	8007ab6 <_free_r+0x26>
 8007b08:	6825      	ldr	r5, [r4, #0]
 8007b0a:	1961      	adds	r1, r4, r5
 8007b0c:	428b      	cmp	r3, r1
 8007b0e:	bf04      	itt	eq
 8007b10:	6819      	ldreq	r1, [r3, #0]
 8007b12:	685b      	ldreq	r3, [r3, #4]
 8007b14:	6063      	str	r3, [r4, #4]
 8007b16:	bf04      	itt	eq
 8007b18:	1949      	addeq	r1, r1, r5
 8007b1a:	6021      	streq	r1, [r4, #0]
 8007b1c:	6054      	str	r4, [r2, #4]
 8007b1e:	e7ca      	b.n	8007ab6 <_free_r+0x26>
 8007b20:	b003      	add	sp, #12
 8007b22:	bd30      	pop	{r4, r5, pc}
 8007b24:	20004e14 	.word	0x20004e14

08007b28 <__malloc_lock>:
 8007b28:	4801      	ldr	r0, [pc, #4]	; (8007b30 <__malloc_lock+0x8>)
 8007b2a:	f7ff bfa1 	b.w	8007a70 <__retarget_lock_acquire_recursive>
 8007b2e:	bf00      	nop
 8007b30:	20004e10 	.word	0x20004e10

08007b34 <__malloc_unlock>:
 8007b34:	4801      	ldr	r0, [pc, #4]	; (8007b3c <__malloc_unlock+0x8>)
 8007b36:	f7ff bf9c 	b.w	8007a72 <__retarget_lock_release_recursive>
 8007b3a:	bf00      	nop
 8007b3c:	20004e10 	.word	0x20004e10

08007b40 <_init>:
 8007b40:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b42:	bf00      	nop
 8007b44:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b46:	bc08      	pop	{r3}
 8007b48:	469e      	mov	lr, r3
 8007b4a:	4770      	bx	lr

08007b4c <_fini>:
 8007b4c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007b4e:	bf00      	nop
 8007b50:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007b52:	bc08      	pop	{r3}
 8007b54:	469e      	mov	lr, r3
 8007b56:	4770      	bx	lr
