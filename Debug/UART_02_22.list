
UART_02_22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006624  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000098  080067c4  080067c4  000167c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800685c  0800685c  0002006c  2**0
                  CONTENTS
  4 .ARM          00000008  0800685c  0800685c  0001685c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006864  08006864  0002006c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006864  08006864  00016864  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006868  08006868  00016868  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000006c  20000000  0800686c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003c0  2000006c  080068d8  0002006c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000042c  080068d8  0002042c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002006c  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ed5b  00000000  00000000  000200df  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000252d  00000000  00000000  0002ee3a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000e20  00000000  00000000  00031368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000af3  00000000  00000000  00032188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00017a24  00000000  00000000  00032c7b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00010dc4  00000000  00000000  0004a69f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000903cc  00000000  00000000  0005b463  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004138  00000000  00000000  000eb830  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  000ef968  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	2000006c 	.word	0x2000006c
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080067ac 	.word	0x080067ac

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000070 	.word	0x20000070
 80001dc:	080067ac 	.word	0x080067ac

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_uldivmod>:
 8000280:	b953      	cbnz	r3, 8000298 <__aeabi_uldivmod+0x18>
 8000282:	b94a      	cbnz	r2, 8000298 <__aeabi_uldivmod+0x18>
 8000284:	2900      	cmp	r1, #0
 8000286:	bf08      	it	eq
 8000288:	2800      	cmpeq	r0, #0
 800028a:	bf1c      	itt	ne
 800028c:	f04f 31ff 	movne.w	r1, #4294967295
 8000290:	f04f 30ff 	movne.w	r0, #4294967295
 8000294:	f000 b970 	b.w	8000578 <__aeabi_idiv0>
 8000298:	f1ad 0c08 	sub.w	ip, sp, #8
 800029c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002a0:	f000 f806 	bl	80002b0 <__udivmoddi4>
 80002a4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ac:	b004      	add	sp, #16
 80002ae:	4770      	bx	lr

080002b0 <__udivmoddi4>:
 80002b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002b4:	9e08      	ldr	r6, [sp, #32]
 80002b6:	460d      	mov	r5, r1
 80002b8:	4604      	mov	r4, r0
 80002ba:	460f      	mov	r7, r1
 80002bc:	2b00      	cmp	r3, #0
 80002be:	d14a      	bne.n	8000356 <__udivmoddi4+0xa6>
 80002c0:	428a      	cmp	r2, r1
 80002c2:	4694      	mov	ip, r2
 80002c4:	d965      	bls.n	8000392 <__udivmoddi4+0xe2>
 80002c6:	fab2 f382 	clz	r3, r2
 80002ca:	b143      	cbz	r3, 80002de <__udivmoddi4+0x2e>
 80002cc:	fa02 fc03 	lsl.w	ip, r2, r3
 80002d0:	f1c3 0220 	rsb	r2, r3, #32
 80002d4:	409f      	lsls	r7, r3
 80002d6:	fa20 f202 	lsr.w	r2, r0, r2
 80002da:	4317      	orrs	r7, r2
 80002dc:	409c      	lsls	r4, r3
 80002de:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80002e2:	fa1f f58c 	uxth.w	r5, ip
 80002e6:	fbb7 f1fe 	udiv	r1, r7, lr
 80002ea:	0c22      	lsrs	r2, r4, #16
 80002ec:	fb0e 7711 	mls	r7, lr, r1, r7
 80002f0:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 80002f4:	fb01 f005 	mul.w	r0, r1, r5
 80002f8:	4290      	cmp	r0, r2
 80002fa:	d90a      	bls.n	8000312 <__udivmoddi4+0x62>
 80002fc:	eb1c 0202 	adds.w	r2, ip, r2
 8000300:	f101 37ff 	add.w	r7, r1, #4294967295
 8000304:	f080 811c 	bcs.w	8000540 <__udivmoddi4+0x290>
 8000308:	4290      	cmp	r0, r2
 800030a:	f240 8119 	bls.w	8000540 <__udivmoddi4+0x290>
 800030e:	3902      	subs	r1, #2
 8000310:	4462      	add	r2, ip
 8000312:	1a12      	subs	r2, r2, r0
 8000314:	b2a4      	uxth	r4, r4
 8000316:	fbb2 f0fe 	udiv	r0, r2, lr
 800031a:	fb0e 2210 	mls	r2, lr, r0, r2
 800031e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000322:	fb00 f505 	mul.w	r5, r0, r5
 8000326:	42a5      	cmp	r5, r4
 8000328:	d90a      	bls.n	8000340 <__udivmoddi4+0x90>
 800032a:	eb1c 0404 	adds.w	r4, ip, r4
 800032e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000332:	f080 8107 	bcs.w	8000544 <__udivmoddi4+0x294>
 8000336:	42a5      	cmp	r5, r4
 8000338:	f240 8104 	bls.w	8000544 <__udivmoddi4+0x294>
 800033c:	4464      	add	r4, ip
 800033e:	3802      	subs	r0, #2
 8000340:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000344:	1b64      	subs	r4, r4, r5
 8000346:	2100      	movs	r1, #0
 8000348:	b11e      	cbz	r6, 8000352 <__udivmoddi4+0xa2>
 800034a:	40dc      	lsrs	r4, r3
 800034c:	2300      	movs	r3, #0
 800034e:	e9c6 4300 	strd	r4, r3, [r6]
 8000352:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000356:	428b      	cmp	r3, r1
 8000358:	d908      	bls.n	800036c <__udivmoddi4+0xbc>
 800035a:	2e00      	cmp	r6, #0
 800035c:	f000 80ed 	beq.w	800053a <__udivmoddi4+0x28a>
 8000360:	2100      	movs	r1, #0
 8000362:	e9c6 0500 	strd	r0, r5, [r6]
 8000366:	4608      	mov	r0, r1
 8000368:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036c:	fab3 f183 	clz	r1, r3
 8000370:	2900      	cmp	r1, #0
 8000372:	d149      	bne.n	8000408 <__udivmoddi4+0x158>
 8000374:	42ab      	cmp	r3, r5
 8000376:	d302      	bcc.n	800037e <__udivmoddi4+0xce>
 8000378:	4282      	cmp	r2, r0
 800037a:	f200 80f8 	bhi.w	800056e <__udivmoddi4+0x2be>
 800037e:	1a84      	subs	r4, r0, r2
 8000380:	eb65 0203 	sbc.w	r2, r5, r3
 8000384:	2001      	movs	r0, #1
 8000386:	4617      	mov	r7, r2
 8000388:	2e00      	cmp	r6, #0
 800038a:	d0e2      	beq.n	8000352 <__udivmoddi4+0xa2>
 800038c:	e9c6 4700 	strd	r4, r7, [r6]
 8000390:	e7df      	b.n	8000352 <__udivmoddi4+0xa2>
 8000392:	b902      	cbnz	r2, 8000396 <__udivmoddi4+0xe6>
 8000394:	deff      	udf	#255	; 0xff
 8000396:	fab2 f382 	clz	r3, r2
 800039a:	2b00      	cmp	r3, #0
 800039c:	f040 8090 	bne.w	80004c0 <__udivmoddi4+0x210>
 80003a0:	1a8a      	subs	r2, r1, r2
 80003a2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003a6:	fa1f fe8c 	uxth.w	lr, ip
 80003aa:	2101      	movs	r1, #1
 80003ac:	fbb2 f5f7 	udiv	r5, r2, r7
 80003b0:	fb07 2015 	mls	r0, r7, r5, r2
 80003b4:	0c22      	lsrs	r2, r4, #16
 80003b6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ba:	fb0e f005 	mul.w	r0, lr, r5
 80003be:	4290      	cmp	r0, r2
 80003c0:	d908      	bls.n	80003d4 <__udivmoddi4+0x124>
 80003c2:	eb1c 0202 	adds.w	r2, ip, r2
 80003c6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003ca:	d202      	bcs.n	80003d2 <__udivmoddi4+0x122>
 80003cc:	4290      	cmp	r0, r2
 80003ce:	f200 80cb 	bhi.w	8000568 <__udivmoddi4+0x2b8>
 80003d2:	4645      	mov	r5, r8
 80003d4:	1a12      	subs	r2, r2, r0
 80003d6:	b2a4      	uxth	r4, r4
 80003d8:	fbb2 f0f7 	udiv	r0, r2, r7
 80003dc:	fb07 2210 	mls	r2, r7, r0, r2
 80003e0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80003e4:	fb0e fe00 	mul.w	lr, lr, r0
 80003e8:	45a6      	cmp	lr, r4
 80003ea:	d908      	bls.n	80003fe <__udivmoddi4+0x14e>
 80003ec:	eb1c 0404 	adds.w	r4, ip, r4
 80003f0:	f100 32ff 	add.w	r2, r0, #4294967295
 80003f4:	d202      	bcs.n	80003fc <__udivmoddi4+0x14c>
 80003f6:	45a6      	cmp	lr, r4
 80003f8:	f200 80bb 	bhi.w	8000572 <__udivmoddi4+0x2c2>
 80003fc:	4610      	mov	r0, r2
 80003fe:	eba4 040e 	sub.w	r4, r4, lr
 8000402:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000406:	e79f      	b.n	8000348 <__udivmoddi4+0x98>
 8000408:	f1c1 0720 	rsb	r7, r1, #32
 800040c:	408b      	lsls	r3, r1
 800040e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000412:	ea4c 0c03 	orr.w	ip, ip, r3
 8000416:	fa05 f401 	lsl.w	r4, r5, r1
 800041a:	fa20 f307 	lsr.w	r3, r0, r7
 800041e:	40fd      	lsrs	r5, r7
 8000420:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000424:	4323      	orrs	r3, r4
 8000426:	fbb5 f8f9 	udiv	r8, r5, r9
 800042a:	fa1f fe8c 	uxth.w	lr, ip
 800042e:	fb09 5518 	mls	r5, r9, r8, r5
 8000432:	0c1c      	lsrs	r4, r3, #16
 8000434:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000438:	fb08 f50e 	mul.w	r5, r8, lr
 800043c:	42a5      	cmp	r5, r4
 800043e:	fa02 f201 	lsl.w	r2, r2, r1
 8000442:	fa00 f001 	lsl.w	r0, r0, r1
 8000446:	d90b      	bls.n	8000460 <__udivmoddi4+0x1b0>
 8000448:	eb1c 0404 	adds.w	r4, ip, r4
 800044c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000450:	f080 8088 	bcs.w	8000564 <__udivmoddi4+0x2b4>
 8000454:	42a5      	cmp	r5, r4
 8000456:	f240 8085 	bls.w	8000564 <__udivmoddi4+0x2b4>
 800045a:	f1a8 0802 	sub.w	r8, r8, #2
 800045e:	4464      	add	r4, ip
 8000460:	1b64      	subs	r4, r4, r5
 8000462:	b29d      	uxth	r5, r3
 8000464:	fbb4 f3f9 	udiv	r3, r4, r9
 8000468:	fb09 4413 	mls	r4, r9, r3, r4
 800046c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000470:	fb03 fe0e 	mul.w	lr, r3, lr
 8000474:	45a6      	cmp	lr, r4
 8000476:	d908      	bls.n	800048a <__udivmoddi4+0x1da>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000480:	d26c      	bcs.n	800055c <__udivmoddi4+0x2ac>
 8000482:	45a6      	cmp	lr, r4
 8000484:	d96a      	bls.n	800055c <__udivmoddi4+0x2ac>
 8000486:	3b02      	subs	r3, #2
 8000488:	4464      	add	r4, ip
 800048a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800048e:	fba3 9502 	umull	r9, r5, r3, r2
 8000492:	eba4 040e 	sub.w	r4, r4, lr
 8000496:	42ac      	cmp	r4, r5
 8000498:	46c8      	mov	r8, r9
 800049a:	46ae      	mov	lr, r5
 800049c:	d356      	bcc.n	800054c <__udivmoddi4+0x29c>
 800049e:	d053      	beq.n	8000548 <__udivmoddi4+0x298>
 80004a0:	b156      	cbz	r6, 80004b8 <__udivmoddi4+0x208>
 80004a2:	ebb0 0208 	subs.w	r2, r0, r8
 80004a6:	eb64 040e 	sbc.w	r4, r4, lr
 80004aa:	fa04 f707 	lsl.w	r7, r4, r7
 80004ae:	40ca      	lsrs	r2, r1
 80004b0:	40cc      	lsrs	r4, r1
 80004b2:	4317      	orrs	r7, r2
 80004b4:	e9c6 7400 	strd	r7, r4, [r6]
 80004b8:	4618      	mov	r0, r3
 80004ba:	2100      	movs	r1, #0
 80004bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004c0:	f1c3 0120 	rsb	r1, r3, #32
 80004c4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004c8:	fa20 f201 	lsr.w	r2, r0, r1
 80004cc:	fa25 f101 	lsr.w	r1, r5, r1
 80004d0:	409d      	lsls	r5, r3
 80004d2:	432a      	orrs	r2, r5
 80004d4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004d8:	fa1f fe8c 	uxth.w	lr, ip
 80004dc:	fbb1 f0f7 	udiv	r0, r1, r7
 80004e0:	fb07 1510 	mls	r5, r7, r0, r1
 80004e4:	0c11      	lsrs	r1, r2, #16
 80004e6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80004ea:	fb00 f50e 	mul.w	r5, r0, lr
 80004ee:	428d      	cmp	r5, r1
 80004f0:	fa04 f403 	lsl.w	r4, r4, r3
 80004f4:	d908      	bls.n	8000508 <__udivmoddi4+0x258>
 80004f6:	eb1c 0101 	adds.w	r1, ip, r1
 80004fa:	f100 38ff 	add.w	r8, r0, #4294967295
 80004fe:	d22f      	bcs.n	8000560 <__udivmoddi4+0x2b0>
 8000500:	428d      	cmp	r5, r1
 8000502:	d92d      	bls.n	8000560 <__udivmoddi4+0x2b0>
 8000504:	3802      	subs	r0, #2
 8000506:	4461      	add	r1, ip
 8000508:	1b49      	subs	r1, r1, r5
 800050a:	b292      	uxth	r2, r2
 800050c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000510:	fb07 1115 	mls	r1, r7, r5, r1
 8000514:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000518:	fb05 f10e 	mul.w	r1, r5, lr
 800051c:	4291      	cmp	r1, r2
 800051e:	d908      	bls.n	8000532 <__udivmoddi4+0x282>
 8000520:	eb1c 0202 	adds.w	r2, ip, r2
 8000524:	f105 38ff 	add.w	r8, r5, #4294967295
 8000528:	d216      	bcs.n	8000558 <__udivmoddi4+0x2a8>
 800052a:	4291      	cmp	r1, r2
 800052c:	d914      	bls.n	8000558 <__udivmoddi4+0x2a8>
 800052e:	3d02      	subs	r5, #2
 8000530:	4462      	add	r2, ip
 8000532:	1a52      	subs	r2, r2, r1
 8000534:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000538:	e738      	b.n	80003ac <__udivmoddi4+0xfc>
 800053a:	4631      	mov	r1, r6
 800053c:	4630      	mov	r0, r6
 800053e:	e708      	b.n	8000352 <__udivmoddi4+0xa2>
 8000540:	4639      	mov	r1, r7
 8000542:	e6e6      	b.n	8000312 <__udivmoddi4+0x62>
 8000544:	4610      	mov	r0, r2
 8000546:	e6fb      	b.n	8000340 <__udivmoddi4+0x90>
 8000548:	4548      	cmp	r0, r9
 800054a:	d2a9      	bcs.n	80004a0 <__udivmoddi4+0x1f0>
 800054c:	ebb9 0802 	subs.w	r8, r9, r2
 8000550:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000554:	3b01      	subs	r3, #1
 8000556:	e7a3      	b.n	80004a0 <__udivmoddi4+0x1f0>
 8000558:	4645      	mov	r5, r8
 800055a:	e7ea      	b.n	8000532 <__udivmoddi4+0x282>
 800055c:	462b      	mov	r3, r5
 800055e:	e794      	b.n	800048a <__udivmoddi4+0x1da>
 8000560:	4640      	mov	r0, r8
 8000562:	e7d1      	b.n	8000508 <__udivmoddi4+0x258>
 8000564:	46d0      	mov	r8, sl
 8000566:	e77b      	b.n	8000460 <__udivmoddi4+0x1b0>
 8000568:	3d02      	subs	r5, #2
 800056a:	4462      	add	r2, ip
 800056c:	e732      	b.n	80003d4 <__udivmoddi4+0x124>
 800056e:	4608      	mov	r0, r1
 8000570:	e70a      	b.n	8000388 <__udivmoddi4+0xd8>
 8000572:	4464      	add	r4, ip
 8000574:	3802      	subs	r0, #2
 8000576:	e742      	b.n	80003fe <__udivmoddi4+0x14e>

08000578 <__aeabi_idiv0>:
 8000578:	4770      	bx	lr
 800057a:	bf00      	nop

0800057c <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 800057c:	b580      	push	{r7, lr}
 800057e:	b082      	sub	sp, #8
 8000580:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000582:	2300      	movs	r3, #0
 8000584:	607b      	str	r3, [r7, #4]
 8000586:	4b0c      	ldr	r3, [pc, #48]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000588:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800058a:	4a0b      	ldr	r2, [pc, #44]	; (80005b8 <MX_DMA_Init+0x3c>)
 800058c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000590:	6313      	str	r3, [r2, #48]	; 0x30
 8000592:	4b09      	ldr	r3, [pc, #36]	; (80005b8 <MX_DMA_Init+0x3c>)
 8000594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000596:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800059a:	607b      	str	r3, [r7, #4]
 800059c:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800059e:	2200      	movs	r2, #0
 80005a0:	2100      	movs	r1, #0
 80005a2:	2010      	movs	r0, #16
 80005a4:	f001 fc7d 	bl	8001ea2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80005a8:	2010      	movs	r0, #16
 80005aa:	f001 fc96 	bl	8001eda <HAL_NVIC_EnableIRQ>

}
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
 80005b6:	bf00      	nop
 80005b8:	40023800 	.word	0x40023800

080005bc <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005bc:	b580      	push	{r7, lr}
 80005be:	b08a      	sub	sp, #40	; 0x28
 80005c0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005c2:	f107 0314 	add.w	r3, r7, #20
 80005c6:	2200      	movs	r2, #0
 80005c8:	601a      	str	r2, [r3, #0]
 80005ca:	605a      	str	r2, [r3, #4]
 80005cc:	609a      	str	r2, [r3, #8]
 80005ce:	60da      	str	r2, [r3, #12]
 80005d0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005d2:	2300      	movs	r3, #0
 80005d4:	613b      	str	r3, [r7, #16]
 80005d6:	4b39      	ldr	r3, [pc, #228]	; (80006bc <MX_GPIO_Init+0x100>)
 80005d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005da:	4a38      	ldr	r2, [pc, #224]	; (80006bc <MX_GPIO_Init+0x100>)
 80005dc:	f043 0304 	orr.w	r3, r3, #4
 80005e0:	6313      	str	r3, [r2, #48]	; 0x30
 80005e2:	4b36      	ldr	r3, [pc, #216]	; (80006bc <MX_GPIO_Init+0x100>)
 80005e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005e6:	f003 0304 	and.w	r3, r3, #4
 80005ea:	613b      	str	r3, [r7, #16]
 80005ec:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80005ee:	2300      	movs	r3, #0
 80005f0:	60fb      	str	r3, [r7, #12]
 80005f2:	4b32      	ldr	r3, [pc, #200]	; (80006bc <MX_GPIO_Init+0x100>)
 80005f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005f6:	4a31      	ldr	r2, [pc, #196]	; (80006bc <MX_GPIO_Init+0x100>)
 80005f8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80005fc:	6313      	str	r3, [r2, #48]	; 0x30
 80005fe:	4b2f      	ldr	r3, [pc, #188]	; (80006bc <MX_GPIO_Init+0x100>)
 8000600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000602:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000606:	60fb      	str	r3, [r7, #12]
 8000608:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800060a:	2300      	movs	r3, #0
 800060c:	60bb      	str	r3, [r7, #8]
 800060e:	4b2b      	ldr	r3, [pc, #172]	; (80006bc <MX_GPIO_Init+0x100>)
 8000610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000612:	4a2a      	ldr	r2, [pc, #168]	; (80006bc <MX_GPIO_Init+0x100>)
 8000614:	f043 0301 	orr.w	r3, r3, #1
 8000618:	6313      	str	r3, [r2, #48]	; 0x30
 800061a:	4b28      	ldr	r3, [pc, #160]	; (80006bc <MX_GPIO_Init+0x100>)
 800061c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061e:	f003 0301 	and.w	r3, r3, #1
 8000622:	60bb      	str	r3, [r7, #8]
 8000624:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000626:	2300      	movs	r3, #0
 8000628:	607b      	str	r3, [r7, #4]
 800062a:	4b24      	ldr	r3, [pc, #144]	; (80006bc <MX_GPIO_Init+0x100>)
 800062c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800062e:	4a23      	ldr	r2, [pc, #140]	; (80006bc <MX_GPIO_Init+0x100>)
 8000630:	f043 0302 	orr.w	r3, r3, #2
 8000634:	6313      	str	r3, [r2, #48]	; 0x30
 8000636:	4b21      	ldr	r3, [pc, #132]	; (80006bc <MX_GPIO_Init+0x100>)
 8000638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800063a:	f003 0302 	and.w	r3, r3, #2
 800063e:	607b      	str	r3, [r7, #4]
 8000640:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TrigL_Pin|TrigC_Pin|IN1_Pin, GPIO_PIN_RESET);
 8000642:	2200      	movs	r2, #0
 8000644:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 8000648:	481d      	ldr	r0, [pc, #116]	; (80006c0 <MX_GPIO_Init+0x104>)
 800064a:	f002 f961 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TrigR_Pin|IN2_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 800064e:	2200      	movs	r2, #0
 8000650:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000654:	481b      	ldr	r0, [pc, #108]	; (80006c4 <MX_GPIO_Init+0x108>)
 8000656:	f002 f95b 	bl	8002910 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800065a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800065e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000660:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000664:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000666:	2300      	movs	r3, #0
 8000668:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800066a:	f107 0314 	add.w	r3, r7, #20
 800066e:	4619      	mov	r1, r3
 8000670:	4815      	ldr	r0, [pc, #84]	; (80006c8 <MX_GPIO_Init+0x10c>)
 8000672:	f001 ffc9 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TrigL_Pin|TrigC_Pin|IN1_Pin;
 8000676:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800067a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800067c:	2301      	movs	r3, #1
 800067e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000680:	2300      	movs	r3, #0
 8000682:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000684:	2300      	movs	r3, #0
 8000686:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000688:	f107 0314 	add.w	r3, r7, #20
 800068c:	4619      	mov	r1, r3
 800068e:	480c      	ldr	r0, [pc, #48]	; (80006c0 <MX_GPIO_Init+0x104>)
 8000690:	f001 ffba 	bl	8002608 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TrigR_Pin|IN2_Pin|IN4_Pin|IN3_Pin;
 8000694:	f44f 6387 	mov.w	r3, #1080	; 0x438
 8000698:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800069a:	2301      	movs	r3, #1
 800069c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800069e:	2300      	movs	r3, #0
 80006a0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a2:	2300      	movs	r3, #0
 80006a4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006a6:	f107 0314 	add.w	r3, r7, #20
 80006aa:	4619      	mov	r1, r3
 80006ac:	4805      	ldr	r0, [pc, #20]	; (80006c4 <MX_GPIO_Init+0x108>)
 80006ae:	f001 ffab 	bl	8002608 <HAL_GPIO_Init>

}
 80006b2:	bf00      	nop
 80006b4:	3728      	adds	r7, #40	; 0x28
 80006b6:	46bd      	mov	sp, r7
 80006b8:	bd80      	pop	{r7, pc}
 80006ba:	bf00      	nop
 80006bc:	40023800 	.word	0x40023800
 80006c0:	40020000 	.word	0x40020000
 80006c4:	40020400 	.word	0x40020400
 80006c8:	40020800 	.word	0x40020800

080006cc <delay_us>:
/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */

void delay_us(uint16_t us)
{
 80006cc:	b480      	push	{r7}
 80006ce:	b083      	sub	sp, #12
 80006d0:	af00      	add	r7, sp, #0
 80006d2:	4603      	mov	r3, r0
 80006d4:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80006d6:	4b09      	ldr	r3, [pc, #36]	; (80006fc <delay_us+0x30>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	2200      	movs	r2, #0
 80006dc:	625a      	str	r2, [r3, #36]	; 0x24

	while((__HAL_TIM_GET_COUNTER(&htim1)) < us);
 80006de:	bf00      	nop
 80006e0:	4b06      	ldr	r3, [pc, #24]	; (80006fc <delay_us+0x30>)
 80006e2:	681b      	ldr	r3, [r3, #0]
 80006e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80006e6:	88fb      	ldrh	r3, [r7, #6]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	d3f9      	bcc.n	80006e0 <delay_us+0x14>
}
 80006ec:	bf00      	nop
 80006ee:	bf00      	nop
 80006f0:	370c      	adds	r7, #12
 80006f2:	46bd      	mov	sp, r7
 80006f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006f8:	4770      	bx	lr
 80006fa:	bf00      	nop
 80006fc:	200000cc 	.word	0x200000cc

08000700 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000700:	b580      	push	{r7, lr}
 8000702:	b082      	sub	sp, #8
 8000704:	af00      	add	r7, sp, #0
 8000706:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM3)
 8000708:	687b      	ldr	r3, [r7, #4]
 800070a:	681b      	ldr	r3, [r3, #0]
 800070c:	4a88      	ldr	r2, [pc, #544]	; (8000930 <HAL_TIM_IC_CaptureCallback+0x230>)
 800070e:	4293      	cmp	r3, r2
 8000710:	d16e      	bne.n	80007f0 <HAL_TIM_IC_CaptureCallback+0xf0>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_2)	// if  interrupt source channel
 8000712:	687b      	ldr	r3, [r7, #4]
 8000714:	7f1b      	ldrb	r3, [r3, #28]
 8000716:	2b02      	cmp	r3, #2
 8000718:	d16a      	bne.n	80007f0 <HAL_TIM_IC_CaptureCallback+0xf0>
				{
					if(captureFlag1 == 0)	// first value is not capture
 800071a:	4b86      	ldr	r3, [pc, #536]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x234>)
 800071c:	781b      	ldrb	r3, [r3, #0]
 800071e:	b2db      	uxtb	r3, r3
 8000720:	2b00      	cmp	r3, #0
 8000722:	d11a      	bne.n	800075a <HAL_TIM_IC_CaptureCallback+0x5a>
					{
						INC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);	// read first value
 8000724:	2104      	movs	r1, #4
 8000726:	6878      	ldr	r0, [r7, #4]
 8000728:	f003 fbce 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 800072c:	4603      	mov	r3, r0
 800072e:	4a82      	ldr	r2, [pc, #520]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000730:	6013      	str	r3, [r2, #0]
						captureFlag1 = 1;	// first captured as true
 8000732:	4b80      	ldr	r3, [pc, #512]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x234>)
 8000734:	2201      	movs	r2, #1
 8000736:	701a      	strb	r2, [r3, #0]

						// change polarity rising edge to falling edge
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000738:	687b      	ldr	r3, [r7, #4]
 800073a:	681b      	ldr	r3, [r3, #0]
 800073c:	6a1a      	ldr	r2, [r3, #32]
 800073e:	687b      	ldr	r3, [r7, #4]
 8000740:	681b      	ldr	r3, [r3, #0]
 8000742:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 8000746:	621a      	str	r2, [r3, #32]
 8000748:	687b      	ldr	r3, [r7, #4]
 800074a:	681b      	ldr	r3, [r3, #0]
 800074c:	6a1a      	ldr	r2, [r3, #32]
 800074e:	687b      	ldr	r3, [r7, #4]
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	f042 0220 	orr.w	r2, r2, #32
 8000756:	621a      	str	r2, [r3, #32]
 8000758:	e04a      	b.n	80007f0 <HAL_TIM_IC_CaptureCallback+0xf0>
					}
					else if(captureFlag1 == 1)	// if first value already captured
 800075a:	4b76      	ldr	r3, [pc, #472]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x234>)
 800075c:	781b      	ldrb	r3, [r3, #0]
 800075e:	b2db      	uxtb	r3, r3
 8000760:	2b01      	cmp	r3, #1
 8000762:	d145      	bne.n	80007f0 <HAL_TIM_IC_CaptureCallback+0xf0>
					{
						INC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_2);
 8000764:	2104      	movs	r1, #4
 8000766:	6878      	ldr	r0, [r7, #4]
 8000768:	f003 fbae 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 800076c:	4603      	mov	r3, r0
 800076e:	4a73      	ldr	r2, [pc, #460]	; (800093c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000770:	6013      	str	r3, [r2, #0]

						if(INC_Value2 > INC_Value1)
 8000772:	4b72      	ldr	r3, [pc, #456]	; (800093c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000774:	681a      	ldr	r2, [r3, #0]
 8000776:	4b70      	ldr	r3, [pc, #448]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	429a      	cmp	r2, r3
 800077c:	d907      	bls.n	800078e <HAL_TIM_IC_CaptureCallback+0x8e>
						{
							echoTime_front = INC_Value2 - INC_Value1;
 800077e:	4b6f      	ldr	r3, [pc, #444]	; (800093c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000780:	681a      	ldr	r2, [r3, #0]
 8000782:	4b6d      	ldr	r3, [pc, #436]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000784:	681b      	ldr	r3, [r3, #0]
 8000786:	1ad3      	subs	r3, r2, r3
 8000788:	4a6d      	ldr	r2, [pc, #436]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x240>)
 800078a:	6013      	str	r3, [r2, #0]
 800078c:	e00f      	b.n	80007ae <HAL_TIM_IC_CaptureCallback+0xae>
						}
						else if(INC_Value2 < INC_Value1)
 800078e:	4b6b      	ldr	r3, [pc, #428]	; (800093c <HAL_TIM_IC_CaptureCallback+0x23c>)
 8000790:	681a      	ldr	r2, [r3, #0]
 8000792:	4b69      	ldr	r3, [pc, #420]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x238>)
 8000794:	681b      	ldr	r3, [r3, #0]
 8000796:	429a      	cmp	r2, r3
 8000798:	d209      	bcs.n	80007ae <HAL_TIM_IC_CaptureCallback+0xae>
						{
							echoTime_front = (0xffff - INC_Value1) + INC_Value2;
 800079a:	4b68      	ldr	r3, [pc, #416]	; (800093c <HAL_TIM_IC_CaptureCallback+0x23c>)
 800079c:	681a      	ldr	r2, [r3, #0]
 800079e:	4b66      	ldr	r3, [pc, #408]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x238>)
 80007a0:	681b      	ldr	r3, [r3, #0]
 80007a2:	1ad3      	subs	r3, r2, r3
 80007a4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80007a8:	33ff      	adds	r3, #255	; 0xff
 80007aa:	4a65      	ldr	r2, [pc, #404]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x240>)
 80007ac:	6013      	str	r3, [r2, #0]
						}

						distance_front = echoTime_front / 58;
 80007ae:	4b64      	ldr	r3, [pc, #400]	; (8000940 <HAL_TIM_IC_CaptureCallback+0x240>)
 80007b0:	681b      	ldr	r3, [r3, #0]
 80007b2:	4a64      	ldr	r2, [pc, #400]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x244>)
 80007b4:	fba2 2303 	umull	r2, r3, r2, r3
 80007b8:	095b      	lsrs	r3, r3, #5
 80007ba:	4a63      	ldr	r2, [pc, #396]	; (8000948 <HAL_TIM_IC_CaptureCallback+0x248>)
 80007bc:	6013      	str	r3, [r2, #0]
						captureFlag1 = 0;
 80007be:	4b5d      	ldr	r3, [pc, #372]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x234>)
 80007c0:	2200      	movs	r2, #0
 80007c2:	701a      	strb	r2, [r3, #0]

						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_2, TIM_INPUTCHANNELPOLARITY_RISING);
 80007c4:	687b      	ldr	r3, [r7, #4]
 80007c6:	681b      	ldr	r3, [r3, #0]
 80007c8:	6a1a      	ldr	r2, [r3, #32]
 80007ca:	687b      	ldr	r3, [r7, #4]
 80007cc:	681b      	ldr	r3, [r3, #0]
 80007ce:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 80007d2:	621a      	str	r2, [r3, #32]
 80007d4:	687b      	ldr	r3, [r7, #4]
 80007d6:	681a      	ldr	r2, [r3, #0]
 80007d8:	687b      	ldr	r3, [r7, #4]
 80007da:	681b      	ldr	r3, [r3, #0]
 80007dc:	6a12      	ldr	r2, [r2, #32]
 80007de:	621a      	str	r2, [r3, #32]
						__HAL_TIM_DISABLE_IT(&htim3, TIM_IT_CC2);
 80007e0:	4b5a      	ldr	r3, [pc, #360]	; (800094c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80007e2:	681b      	ldr	r3, [r3, #0]
 80007e4:	68da      	ldr	r2, [r3, #12]
 80007e6:	4b59      	ldr	r3, [pc, #356]	; (800094c <HAL_TIM_IC_CaptureCallback+0x24c>)
 80007e8:	681b      	ldr	r3, [r3, #0]
 80007ea:	f022 0204 	bic.w	r2, r2, #4
 80007ee:	60da      	str	r2, [r3, #12]
					}
				}
	}

	if(htim->Instance == TIM2)
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	681b      	ldr	r3, [r3, #0]
 80007f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80007f8:	d16e      	bne.n	80008d8 <HAL_TIM_IC_CaptureCallback+0x1d8>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	// if  interrupt source channel
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	7f1b      	ldrb	r3, [r3, #28]
 80007fe:	2b01      	cmp	r3, #1
 8000800:	d16a      	bne.n	80008d8 <HAL_TIM_IC_CaptureCallback+0x1d8>
				{
					if(captureFlag2 == 0)	// first value is not capture
 8000802:	4b53      	ldr	r3, [pc, #332]	; (8000950 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000804:	781b      	ldrb	r3, [r3, #0]
 8000806:	b2db      	uxtb	r3, r3
 8000808:	2b00      	cmp	r3, #0
 800080a:	d11a      	bne.n	8000842 <HAL_TIM_IC_CaptureCallback+0x142>
					{
						INC_Value3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// read first value
 800080c:	2100      	movs	r1, #0
 800080e:	6878      	ldr	r0, [r7, #4]
 8000810:	f003 fb5a 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 8000814:	4603      	mov	r3, r0
 8000816:	4a4f      	ldr	r2, [pc, #316]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000818:	6013      	str	r3, [r2, #0]
						captureFlag2 = 1;	// first captured as true
 800081a:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <HAL_TIM_IC_CaptureCallback+0x250>)
 800081c:	2201      	movs	r2, #1
 800081e:	701a      	strb	r2, [r3, #0]

						// change polarity rising edge to falling edge
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000820:	687b      	ldr	r3, [r7, #4]
 8000822:	681b      	ldr	r3, [r3, #0]
 8000824:	6a1a      	ldr	r2, [r3, #32]
 8000826:	687b      	ldr	r3, [r7, #4]
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	f022 020a 	bic.w	r2, r2, #10
 800082e:	621a      	str	r2, [r3, #32]
 8000830:	687b      	ldr	r3, [r7, #4]
 8000832:	681b      	ldr	r3, [r3, #0]
 8000834:	6a1a      	ldr	r2, [r3, #32]
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	f042 0202 	orr.w	r2, r2, #2
 800083e:	621a      	str	r2, [r3, #32]
 8000840:	e04a      	b.n	80008d8 <HAL_TIM_IC_CaptureCallback+0x1d8>
					}
					else if(captureFlag2 == 1)	// if first value already captured
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <HAL_TIM_IC_CaptureCallback+0x250>)
 8000844:	781b      	ldrb	r3, [r3, #0]
 8000846:	b2db      	uxtb	r3, r3
 8000848:	2b01      	cmp	r3, #1
 800084a:	d145      	bne.n	80008d8 <HAL_TIM_IC_CaptureCallback+0x1d8>
					{
						INC_Value4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800084c:	2100      	movs	r1, #0
 800084e:	6878      	ldr	r0, [r7, #4]
 8000850:	f003 fb3a 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 8000854:	4603      	mov	r3, r0
 8000856:	4a40      	ldr	r2, [pc, #256]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000858:	6013      	str	r3, [r2, #0]

						if(INC_Value4  > INC_Value3)
 800085a:	4b3f      	ldr	r3, [pc, #252]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x258>)
 800085c:	681a      	ldr	r2, [r3, #0]
 800085e:	4b3d      	ldr	r3, [pc, #244]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000860:	681b      	ldr	r3, [r3, #0]
 8000862:	429a      	cmp	r2, r3
 8000864:	d907      	bls.n	8000876 <HAL_TIM_IC_CaptureCallback+0x176>
						{
							echoTime_left = INC_Value4 - INC_Value3;
 8000866:	4b3c      	ldr	r3, [pc, #240]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000868:	681a      	ldr	r2, [r3, #0]
 800086a:	4b3a      	ldr	r3, [pc, #232]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x254>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	1ad3      	subs	r3, r2, r3
 8000870:	4a3a      	ldr	r2, [pc, #232]	; (800095c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000872:	6013      	str	r3, [r2, #0]
 8000874:	e00f      	b.n	8000896 <HAL_TIM_IC_CaptureCallback+0x196>
						}
						else if(INC_Value4 < INC_Value3)
 8000876:	4b38      	ldr	r3, [pc, #224]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000878:	681a      	ldr	r2, [r3, #0]
 800087a:	4b36      	ldr	r3, [pc, #216]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x254>)
 800087c:	681b      	ldr	r3, [r3, #0]
 800087e:	429a      	cmp	r2, r3
 8000880:	d209      	bcs.n	8000896 <HAL_TIM_IC_CaptureCallback+0x196>
						{
							echoTime_left = (0xffff - INC_Value3) + INC_Value4;
 8000882:	4b35      	ldr	r3, [pc, #212]	; (8000958 <HAL_TIM_IC_CaptureCallback+0x258>)
 8000884:	681a      	ldr	r2, [r3, #0]
 8000886:	4b33      	ldr	r3, [pc, #204]	; (8000954 <HAL_TIM_IC_CaptureCallback+0x254>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	1ad3      	subs	r3, r2, r3
 800088c:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000890:	33ff      	adds	r3, #255	; 0xff
 8000892:	4a32      	ldr	r2, [pc, #200]	; (800095c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000894:	6013      	str	r3, [r2, #0]
						}

						distance_left = echoTime_left / 58;
 8000896:	4b31      	ldr	r3, [pc, #196]	; (800095c <HAL_TIM_IC_CaptureCallback+0x25c>)
 8000898:	681b      	ldr	r3, [r3, #0]
 800089a:	4a2a      	ldr	r2, [pc, #168]	; (8000944 <HAL_TIM_IC_CaptureCallback+0x244>)
 800089c:	fba2 2303 	umull	r2, r3, r2, r3
 80008a0:	095b      	lsrs	r3, r3, #5
 80008a2:	4a2f      	ldr	r2, [pc, #188]	; (8000960 <HAL_TIM_IC_CaptureCallback+0x260>)
 80008a4:	6013      	str	r3, [r2, #0]
						captureFlag2 = 0;
 80008a6:	4b2a      	ldr	r3, [pc, #168]	; (8000950 <HAL_TIM_IC_CaptureCallback+0x250>)
 80008a8:	2200      	movs	r2, #0
 80008aa:	701a      	strb	r2, [r3, #0]

						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80008ac:	687b      	ldr	r3, [r7, #4]
 80008ae:	681b      	ldr	r3, [r3, #0]
 80008b0:	6a1a      	ldr	r2, [r3, #32]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	681b      	ldr	r3, [r3, #0]
 80008b6:	f022 020a 	bic.w	r2, r2, #10
 80008ba:	621a      	str	r2, [r3, #32]
 80008bc:	687b      	ldr	r3, [r7, #4]
 80008be:	681a      	ldr	r2, [r3, #0]
 80008c0:	687b      	ldr	r3, [r7, #4]
 80008c2:	681b      	ldr	r3, [r3, #0]
 80008c4:	6a12      	ldr	r2, [r2, #32]
 80008c6:	621a      	str	r2, [r3, #32]
						__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80008c8:	4b26      	ldr	r3, [pc, #152]	; (8000964 <HAL_TIM_IC_CaptureCallback+0x264>)
 80008ca:	681b      	ldr	r3, [r3, #0]
 80008cc:	68da      	ldr	r2, [r3, #12]
 80008ce:	4b25      	ldr	r3, [pc, #148]	; (8000964 <HAL_TIM_IC_CaptureCallback+0x264>)
 80008d0:	681b      	ldr	r3, [r3, #0]
 80008d2:	f022 0202 	bic.w	r2, r2, #2
 80008d6:	60da      	str	r2, [r3, #12]
					}
				}
	}

	if(htim->Instance == TIM1)
 80008d8:	687b      	ldr	r3, [r7, #4]
 80008da:	681b      	ldr	r3, [r3, #0]
 80008dc:	4a22      	ldr	r2, [pc, #136]	; (8000968 <HAL_TIM_IC_CaptureCallback+0x268>)
 80008de:	4293      	cmp	r3, r2
 80008e0:	f040 8093 	bne.w	8000a0a <HAL_TIM_IC_CaptureCallback+0x30a>
	{
		if(htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)	// if  interrupt source channel
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	7f1b      	ldrb	r3, [r3, #28]
 80008e8:	2b01      	cmp	r3, #1
 80008ea:	f040 808e 	bne.w	8000a0a <HAL_TIM_IC_CaptureCallback+0x30a>
					{
					if(captureFlag3 == 0)	// first value is not capture
 80008ee:	4b1f      	ldr	r3, [pc, #124]	; (800096c <HAL_TIM_IC_CaptureCallback+0x26c>)
 80008f0:	781b      	ldrb	r3, [r3, #0]
 80008f2:	b2db      	uxtb	r3, r3
 80008f4:	2b00      	cmp	r3, #0
 80008f6:	d13d      	bne.n	8000974 <HAL_TIM_IC_CaptureCallback+0x274>
					{
						INC_Value5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// read first value
 80008f8:	2100      	movs	r1, #0
 80008fa:	6878      	ldr	r0, [r7, #4]
 80008fc:	f003 fae4 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 8000900:	4603      	mov	r3, r0
 8000902:	4a1b      	ldr	r2, [pc, #108]	; (8000970 <HAL_TIM_IC_CaptureCallback+0x270>)
 8000904:	6013      	str	r3, [r2, #0]
						captureFlag3 = 1;	// first captured as true
 8000906:	4b19      	ldr	r3, [pc, #100]	; (800096c <HAL_TIM_IC_CaptureCallback+0x26c>)
 8000908:	2201      	movs	r2, #1
 800090a:	701a      	strb	r2, [r3, #0]

						// change polarity rising edge to falling edge
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 800090c:	687b      	ldr	r3, [r7, #4]
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	6a1a      	ldr	r2, [r3, #32]
 8000912:	687b      	ldr	r3, [r7, #4]
 8000914:	681b      	ldr	r3, [r3, #0]
 8000916:	f022 020a 	bic.w	r2, r2, #10
 800091a:	621a      	str	r2, [r3, #32]
 800091c:	687b      	ldr	r3, [r7, #4]
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	6a1a      	ldr	r2, [r3, #32]
 8000922:	687b      	ldr	r3, [r7, #4]
 8000924:	681b      	ldr	r3, [r3, #0]
 8000926:	f042 0202 	orr.w	r2, r2, #2
 800092a:	621a      	str	r2, [r3, #32]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
						__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
					}
				}
	}
}
 800092c:	e06d      	b.n	8000a0a <HAL_TIM_IC_CaptureCallback+0x30a>
 800092e:	bf00      	nop
 8000930:	40000400 	.word	0x40000400
 8000934:	20000098 	.word	0x20000098
 8000938:	2000008c 	.word	0x2000008c
 800093c:	20000090 	.word	0x20000090
 8000940:	20000094 	.word	0x20000094
 8000944:	8d3dcb09 	.word	0x8d3dcb09
 8000948:	2000009c 	.word	0x2000009c
 800094c:	2000015c 	.word	0x2000015c
 8000950:	200000ac 	.word	0x200000ac
 8000954:	200000a0 	.word	0x200000a0
 8000958:	200000a4 	.word	0x200000a4
 800095c:	200000a8 	.word	0x200000a8
 8000960:	200000b0 	.word	0x200000b0
 8000964:	20000114 	.word	0x20000114
 8000968:	40010000 	.word	0x40010000
 800096c:	200000c0 	.word	0x200000c0
 8000970:	200000b4 	.word	0x200000b4
					else if(captureFlag3 == 1)	// if first value already captured
 8000974:	4b27      	ldr	r3, [pc, #156]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0x314>)
 8000976:	781b      	ldrb	r3, [r3, #0]
 8000978:	b2db      	uxtb	r3, r3
 800097a:	2b01      	cmp	r3, #1
 800097c:	d145      	bne.n	8000a0a <HAL_TIM_IC_CaptureCallback+0x30a>
						INC_Value6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 800097e:	2100      	movs	r1, #0
 8000980:	6878      	ldr	r0, [r7, #4]
 8000982:	f003 faa1 	bl	8003ec8 <HAL_TIM_ReadCapturedValue>
 8000986:	4603      	mov	r3, r0
 8000988:	4a23      	ldr	r2, [pc, #140]	; (8000a18 <HAL_TIM_IC_CaptureCallback+0x318>)
 800098a:	6013      	str	r3, [r2, #0]
						if(INC_Value6 > INC_Value5)
 800098c:	4b22      	ldr	r3, [pc, #136]	; (8000a18 <HAL_TIM_IC_CaptureCallback+0x318>)
 800098e:	681a      	ldr	r2, [r3, #0]
 8000990:	4b22      	ldr	r3, [pc, #136]	; (8000a1c <HAL_TIM_IC_CaptureCallback+0x31c>)
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	429a      	cmp	r2, r3
 8000996:	d907      	bls.n	80009a8 <HAL_TIM_IC_CaptureCallback+0x2a8>
							echoTime_right = INC_Value6 - INC_Value5;
 8000998:	4b1f      	ldr	r3, [pc, #124]	; (8000a18 <HAL_TIM_IC_CaptureCallback+0x318>)
 800099a:	681a      	ldr	r2, [r3, #0]
 800099c:	4b1f      	ldr	r3, [pc, #124]	; (8000a1c <HAL_TIM_IC_CaptureCallback+0x31c>)
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	1ad3      	subs	r3, r2, r3
 80009a2:	4a1f      	ldr	r2, [pc, #124]	; (8000a20 <HAL_TIM_IC_CaptureCallback+0x320>)
 80009a4:	6013      	str	r3, [r2, #0]
 80009a6:	e00f      	b.n	80009c8 <HAL_TIM_IC_CaptureCallback+0x2c8>
						else if(INC_Value6 < INC_Value5)
 80009a8:	4b1b      	ldr	r3, [pc, #108]	; (8000a18 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009aa:	681a      	ldr	r2, [r3, #0]
 80009ac:	4b1b      	ldr	r3, [pc, #108]	; (8000a1c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	429a      	cmp	r2, r3
 80009b2:	d209      	bcs.n	80009c8 <HAL_TIM_IC_CaptureCallback+0x2c8>
							echoTime_right = (0xffff - INC_Value5) + INC_Value6;
 80009b4:	4b18      	ldr	r3, [pc, #96]	; (8000a18 <HAL_TIM_IC_CaptureCallback+0x318>)
 80009b6:	681a      	ldr	r2, [r3, #0]
 80009b8:	4b18      	ldr	r3, [pc, #96]	; (8000a1c <HAL_TIM_IC_CaptureCallback+0x31c>)
 80009ba:	681b      	ldr	r3, [r3, #0]
 80009bc:	1ad3      	subs	r3, r2, r3
 80009be:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80009c2:	33ff      	adds	r3, #255	; 0xff
 80009c4:	4a16      	ldr	r2, [pc, #88]	; (8000a20 <HAL_TIM_IC_CaptureCallback+0x320>)
 80009c6:	6013      	str	r3, [r2, #0]
						distance_right = echoTime_right / 58;
 80009c8:	4b15      	ldr	r3, [pc, #84]	; (8000a20 <HAL_TIM_IC_CaptureCallback+0x320>)
 80009ca:	681b      	ldr	r3, [r3, #0]
 80009cc:	4a15      	ldr	r2, [pc, #84]	; (8000a24 <HAL_TIM_IC_CaptureCallback+0x324>)
 80009ce:	fba2 2303 	umull	r2, r3, r2, r3
 80009d2:	095b      	lsrs	r3, r3, #5
 80009d4:	4a14      	ldr	r2, [pc, #80]	; (8000a28 <HAL_TIM_IC_CaptureCallback+0x328>)
 80009d6:	6013      	str	r3, [r2, #0]
						captureFlag3 = 0;
 80009d8:	4b0e      	ldr	r3, [pc, #56]	; (8000a14 <HAL_TIM_IC_CaptureCallback+0x314>)
 80009da:	2200      	movs	r2, #0
 80009dc:	701a      	strb	r2, [r3, #0]
						__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80009de:	687b      	ldr	r3, [r7, #4]
 80009e0:	681b      	ldr	r3, [r3, #0]
 80009e2:	6a1a      	ldr	r2, [r3, #32]
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	681b      	ldr	r3, [r3, #0]
 80009e8:	f022 020a 	bic.w	r2, r2, #10
 80009ec:	621a      	str	r2, [r3, #32]
 80009ee:	687b      	ldr	r3, [r7, #4]
 80009f0:	681a      	ldr	r2, [r3, #0]
 80009f2:	687b      	ldr	r3, [r7, #4]
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	6a12      	ldr	r2, [r2, #32]
 80009f8:	621a      	str	r2, [r3, #32]
						__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 80009fa:	4b0c      	ldr	r3, [pc, #48]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0x32c>)
 80009fc:	681b      	ldr	r3, [r3, #0]
 80009fe:	68da      	ldr	r2, [r3, #12]
 8000a00:	4b0a      	ldr	r3, [pc, #40]	; (8000a2c <HAL_TIM_IC_CaptureCallback+0x32c>)
 8000a02:	681b      	ldr	r3, [r3, #0]
 8000a04:	f022 0202 	bic.w	r2, r2, #2
 8000a08:	60da      	str	r2, [r3, #12]
}
 8000a0a:	bf00      	nop
 8000a0c:	3708      	adds	r7, #8
 8000a0e:	46bd      	mov	sp, r7
 8000a10:	bd80      	pop	{r7, pc}
 8000a12:	bf00      	nop
 8000a14:	200000c0 	.word	0x200000c0
 8000a18:	200000b8 	.word	0x200000b8
 8000a1c:	200000b4 	.word	0x200000b4
 8000a20:	200000bc 	.word	0x200000bc
 8000a24:	8d3dcb09 	.word	0x8d3dcb09
 8000a28:	200000c4 	.word	0x200000c4
 8000a2c:	200000cc 	.word	0x200000cc

08000a30 <Trig1>:

void Trig1(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigL_GPIO_Port, TrigL_Pin, 1);	// Trig Pin High
 8000a34:	2201      	movs	r2, #1
 8000a36:	2140      	movs	r1, #64	; 0x40
 8000a38:	480a      	ldr	r0, [pc, #40]	; (8000a64 <Trig1+0x34>)
 8000a3a:	f001 ff69 	bl	8002910 <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000a3e:	200a      	movs	r0, #10
 8000a40:	f7ff fe44 	bl	80006cc <delay_us>
	HAL_GPIO_WritePin(TrigL_GPIO_Port, TrigL_Pin, 0);	// Trig Pin Low
 8000a44:	2200      	movs	r2, #0
 8000a46:	2140      	movs	r1, #64	; 0x40
 8000a48:	4806      	ldr	r0, [pc, #24]	; (8000a64 <Trig1+0x34>)
 8000a4a:	f001 ff61 	bl	8002910 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);	// SET Timer Enable
 8000a4e:	4b06      	ldr	r3, [pc, #24]	; (8000a68 <Trig1+0x38>)
 8000a50:	681b      	ldr	r3, [r3, #0]
 8000a52:	68da      	ldr	r2, [r3, #12]
 8000a54:	4b04      	ldr	r3, [pc, #16]	; (8000a68 <Trig1+0x38>)
 8000a56:	681b      	ldr	r3, [r3, #0]
 8000a58:	f042 0202 	orr.w	r2, r2, #2
 8000a5c:	60da      	str	r2, [r3, #12]
}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	40020000 	.word	0x40020000
 8000a68:	20000114 	.word	0x20000114

08000a6c <Trig2>:

void Trig2(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigC_GPIO_Port, TrigC_Pin, 1);	// Trig Pin High
 8000a70:	2201      	movs	r2, #1
 8000a72:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a76:	480b      	ldr	r0, [pc, #44]	; (8000aa4 <Trig2+0x38>)
 8000a78:	f001 ff4a 	bl	8002910 <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000a7c:	200a      	movs	r0, #10
 8000a7e:	f7ff fe25 	bl	80006cc <delay_us>
	HAL_GPIO_WritePin(TrigC_GPIO_Port, TrigC_Pin, 0);	// Trig Pin Low
 8000a82:	2200      	movs	r2, #0
 8000a84:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000a88:	4806      	ldr	r0, [pc, #24]	; (8000aa4 <Trig2+0x38>)
 8000a8a:	f001 ff41 	bl	8002910 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC2);	// SET Timer Enable
 8000a8e:	4b06      	ldr	r3, [pc, #24]	; (8000aa8 <Trig2+0x3c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	68da      	ldr	r2, [r3, #12]
 8000a94:	4b04      	ldr	r3, [pc, #16]	; (8000aa8 <Trig2+0x3c>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	f042 0204 	orr.w	r2, r2, #4
 8000a9c:	60da      	str	r2, [r3, #12]
}
 8000a9e:	bf00      	nop
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	40020000 	.word	0x40020000
 8000aa8:	2000015c 	.word	0x2000015c

08000aac <Trig3>:

void Trig3(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigR_GPIO_Port, TrigR_Pin, 1);	// Trig Pin High
 8000ab0:	2201      	movs	r2, #1
 8000ab2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ab6:	480b      	ldr	r0, [pc, #44]	; (8000ae4 <Trig3+0x38>)
 8000ab8:	f001 ff2a 	bl	8002910 <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000abc:	200a      	movs	r0, #10
 8000abe:	f7ff fe05 	bl	80006cc <delay_us>
	HAL_GPIO_WritePin(TrigR_GPIO_Port, TrigR_Pin, 0);	// Trig Pin Low
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ac8:	4806      	ldr	r0, [pc, #24]	; (8000ae4 <Trig3+0x38>)
 8000aca:	f001 ff21 	bl	8002910 <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);	// SET Timer Enable
 8000ace:	4b06      	ldr	r3, [pc, #24]	; (8000ae8 <Trig3+0x3c>)
 8000ad0:	681b      	ldr	r3, [r3, #0]
 8000ad2:	68da      	ldr	r2, [r3, #12]
 8000ad4:	4b04      	ldr	r3, [pc, #16]	; (8000ae8 <Trig3+0x3c>)
 8000ad6:	681b      	ldr	r3, [r3, #0]
 8000ad8:	f042 0202 	orr.w	r2, r2, #2
 8000adc:	60da      	str	r2, [r3, #12]
}
 8000ade:	bf00      	nop
 8000ae0:	bd80      	pop	{r7, pc}
 8000ae2:	bf00      	nop
 8000ae4:	40020400 	.word	0x40020400
 8000ae8:	200000cc 	.word	0x200000cc

08000aec <go>:

int PWM = 400;
void go()		// ?���???? ?��?��
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);	// Right ?��?��?��
 8000af0:	2201      	movs	r2, #1
 8000af2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000af6:	480f      	ldr	r0, [pc, #60]	; (8000b34 <go+0x48>)
 8000af8:	f001 ff0a 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000afc:	2200      	movs	r2, #0
 8000afe:	2108      	movs	r1, #8
 8000b00:	480d      	ldr	r0, [pc, #52]	; (8000b38 <go+0x4c>)
 8000b02:	f001 ff05 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);	// Left ?��?��?��
 8000b06:	2201      	movs	r2, #1
 8000b08:	2120      	movs	r1, #32
 8000b0a:	480b      	ldr	r0, [pc, #44]	; (8000b38 <go+0x4c>)
 8000b0c:	f001 ff00 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000b10:	2200      	movs	r2, #0
 8000b12:	2110      	movs	r1, #16
 8000b14:	4808      	ldr	r0, [pc, #32]	; (8000b38 <go+0x4c>)
 8000b16:	f001 fefb 	bl	8002910 <HAL_GPIO_WritePin>
	htim4.Instance->CCR3 = PWM;		// PWM RIGHT?�� �???? ?��?��
 8000b1a:	4b08      	ldr	r3, [pc, #32]	; (8000b3c <go+0x50>)
 8000b1c:	681a      	ldr	r2, [r3, #0]
 8000b1e:	4b08      	ldr	r3, [pc, #32]	; (8000b40 <go+0x54>)
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR1 = PWM;		// PWM LEFT?�� �???? ?��?��
 8000b24:	4b05      	ldr	r3, [pc, #20]	; (8000b3c <go+0x50>)
 8000b26:	681a      	ldr	r2, [r3, #0]
 8000b28:	4b05      	ldr	r3, [pc, #20]	; (8000b40 <go+0x54>)
 8000b2a:	681b      	ldr	r3, [r3, #0]
 8000b2c:	635a      	str	r2, [r3, #52]	; 0x34
	//printf("This is Forward Function\r\n");	myDelay(500);
}
 8000b2e:	bf00      	nop
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40020000 	.word	0x40020000
 8000b38:	40020400 	.word	0x40020400
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	200001a4 	.word	0x200001a4

08000b44 <back>:

void back()		// ?���??? ?��?��
{
 8000b44:	b580      	push	{r7, lr}
 8000b46:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000b48:	2200      	movs	r2, #0
 8000b4a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000b4e:	480f      	ldr	r0, [pc, #60]	; (8000b8c <back+0x48>)
 8000b50:	f001 fede 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000b54:	2201      	movs	r2, #1
 8000b56:	2108      	movs	r1, #8
 8000b58:	480d      	ldr	r0, [pc, #52]	; (8000b90 <back+0x4c>)
 8000b5a:	f001 fed9 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000b5e:	2200      	movs	r2, #0
 8000b60:	2120      	movs	r1, #32
 8000b62:	480b      	ldr	r0, [pc, #44]	; (8000b90 <back+0x4c>)
 8000b64:	f001 fed4 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2110      	movs	r1, #16
 8000b6c:	4808      	ldr	r0, [pc, #32]	; (8000b90 <back+0x4c>)
 8000b6e:	f001 fecf 	bl	8002910 <HAL_GPIO_WritePin>
	htim4.Instance->CCR3 = PWM;		// PWM RIGHT?�� �???? ?��?��
 8000b72:	4b08      	ldr	r3, [pc, #32]	; (8000b94 <back+0x50>)
 8000b74:	681a      	ldr	r2, [r3, #0]
 8000b76:	4b08      	ldr	r3, [pc, #32]	; (8000b98 <back+0x54>)
 8000b78:	681b      	ldr	r3, [r3, #0]
 8000b7a:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR1 = PWM;		// PWM LEFT?�� �???? ?��?��
 8000b7c:	4b05      	ldr	r3, [pc, #20]	; (8000b94 <back+0x50>)
 8000b7e:	681a      	ldr	r2, [r3, #0]
 8000b80:	4b05      	ldr	r3, [pc, #20]	; (8000b98 <back+0x54>)
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	635a      	str	r2, [r3, #52]	; 0x34
	//printf("This is Backward Function\r\n");	myDelay(500);
} // end of Backward
 8000b86:	bf00      	nop
 8000b88:	bd80      	pop	{r7, pc}
 8000b8a:	bf00      	nop
 8000b8c:	40020000 	.word	0x40020000
 8000b90:	40020400 	.word	0x40020400
 8000b94:	20000000 	.word	0x20000000
 8000b98:	200001a4 	.word	0x200001a4

08000b9c <stop>:


void stop()
{
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ba6:	480a      	ldr	r0, [pc, #40]	; (8000bd0 <stop+0x34>)
 8000ba8:	f001 feb2 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000bac:	2200      	movs	r2, #0
 8000bae:	2108      	movs	r1, #8
 8000bb0:	4808      	ldr	r0, [pc, #32]	; (8000bd4 <stop+0x38>)
 8000bb2:	f001 fead 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	2120      	movs	r1, #32
 8000bba:	4806      	ldr	r0, [pc, #24]	; (8000bd4 <stop+0x38>)
 8000bbc:	f001 fea8 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000bc0:	2200      	movs	r2, #0
 8000bc2:	2110      	movs	r1, #16
 8000bc4:	4803      	ldr	r0, [pc, #12]	; (8000bd4 <stop+0x38>)
 8000bc6:	f001 fea3 	bl	8002910 <HAL_GPIO_WritePin>
} // end of Stop
 8000bca:	bf00      	nop
 8000bcc:	bd80      	pop	{r7, pc}
 8000bce:	bf00      	nop
 8000bd0:	40020000 	.word	0x40020000
 8000bd4:	40020400 	.word	0x40020400

08000bd8 <right>:


void right()		// ?��?��?�� ?��?��		// Left ?��?��?��, Right ?��?��?��
{
 8000bd8:	b580      	push	{r7, lr}
 8000bda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000bdc:	2200      	movs	r2, #0
 8000bde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000be2:	480f      	ldr	r0, [pc, #60]	; (8000c20 <right+0x48>)
 8000be4:	f001 fe94 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000be8:	2201      	movs	r2, #1
 8000bea:	2108      	movs	r1, #8
 8000bec:	480d      	ldr	r0, [pc, #52]	; (8000c24 <right+0x4c>)
 8000bee:	f001 fe8f 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);	// Left ?��?��?��
 8000bf2:	2201      	movs	r2, #1
 8000bf4:	2120      	movs	r1, #32
 8000bf6:	480b      	ldr	r0, [pc, #44]	; (8000c24 <right+0x4c>)
 8000bf8:	f001 fe8a 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000bfc:	2200      	movs	r2, #0
 8000bfe:	2110      	movs	r1, #16
 8000c00:	4808      	ldr	r0, [pc, #32]	; (8000c24 <right+0x4c>)
 8000c02:	f001 fe85 	bl	8002910 <HAL_GPIO_WritePin>
	htim4.Instance->CCR3 = PWM;		// PWM RIGHT?�� �???? ?��?��
 8000c06:	4b08      	ldr	r3, [pc, #32]	; (8000c28 <right+0x50>)
 8000c08:	681a      	ldr	r2, [r3, #0]
 8000c0a:	4b08      	ldr	r3, [pc, #32]	; (8000c2c <right+0x54>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR1 = PWM;		// PWM LEFT?�� �???? ?��?��
 8000c10:	4b05      	ldr	r3, [pc, #20]	; (8000c28 <right+0x50>)
 8000c12:	681a      	ldr	r2, [r3, #0]
 8000c14:	4b05      	ldr	r3, [pc, #20]	; (8000c2c <right+0x54>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	635a      	str	r2, [r3, #52]	; 0x34
	//printf("This is Rotate_Right Function\r\n"); myDelay(500);
} // end of Rotate_R
 8000c1a:	bf00      	nop
 8000c1c:	bd80      	pop	{r7, pc}
 8000c1e:	bf00      	nop
 8000c20:	40020000 	.word	0x40020000
 8000c24:	40020400 	.word	0x40020400
 8000c28:	20000000 	.word	0x20000000
 8000c2c:	200001a4 	.word	0x200001a4

08000c30 <left>:



void left()		// 좌회?�� ?��?��		// Left ?��?��?��, Right ?��?��?��
{
 8000c30:	b580      	push	{r7, lr}
 8000c32:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);	// Right ?��?��?��
 8000c34:	2201      	movs	r2, #1
 8000c36:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c3a:	480f      	ldr	r0, [pc, #60]	; (8000c78 <left+0x48>)
 8000c3c:	f001 fe68 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000c40:	2200      	movs	r2, #0
 8000c42:	2108      	movs	r1, #8
 8000c44:	480d      	ldr	r0, [pc, #52]	; (8000c7c <left+0x4c>)
 8000c46:	f001 fe63 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000c4a:	2200      	movs	r2, #0
 8000c4c:	2120      	movs	r1, #32
 8000c4e:	480b      	ldr	r0, [pc, #44]	; (8000c7c <left+0x4c>)
 8000c50:	f001 fe5e 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000c54:	2201      	movs	r2, #1
 8000c56:	2110      	movs	r1, #16
 8000c58:	4808      	ldr	r0, [pc, #32]	; (8000c7c <left+0x4c>)
 8000c5a:	f001 fe59 	bl	8002910 <HAL_GPIO_WritePin>
	htim4.Instance->CCR3 = PWM;		// PWM RIGHT?�� �???? ?��?��
 8000c5e:	4b08      	ldr	r3, [pc, #32]	; (8000c80 <left+0x50>)
 8000c60:	681a      	ldr	r2, [r3, #0]
 8000c62:	4b08      	ldr	r3, [pc, #32]	; (8000c84 <left+0x54>)
 8000c64:	681b      	ldr	r3, [r3, #0]
 8000c66:	63da      	str	r2, [r3, #60]	; 0x3c
	htim4.Instance->CCR1 = PWM;		// PWM LEFT?�� �???? ?��?��
 8000c68:	4b05      	ldr	r3, [pc, #20]	; (8000c80 <left+0x50>)
 8000c6a:	681a      	ldr	r2, [r3, #0]
 8000c6c:	4b05      	ldr	r3, [pc, #20]	; (8000c84 <left+0x54>)
 8000c6e:	681b      	ldr	r3, [r3, #0]
 8000c70:	635a      	str	r2, [r3, #52]	; 0x34
	//printf("This is Rotate_Left Function\r\n");	myDelay(500);
} // end of Rotate_L
 8000c72:	bf00      	nop
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	40020000 	.word	0x40020000
 8000c7c:	40020400 	.word	0x40020400
 8000c80:	20000000 	.word	0x20000000
 8000c84:	200001a4 	.word	0x200001a4

08000c88 <left_back>:

///////////////////////////////////////////////////코드 추�?2
//
//
void left_back()
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c92:	480a      	ldr	r0, [pc, #40]	; (8000cbc <left_back+0x34>)
 8000c94:	f001 fe3c 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000c98:	2201      	movs	r2, #1
 8000c9a:	2108      	movs	r1, #8
 8000c9c:	4808      	ldr	r0, [pc, #32]	; (8000cc0 <left_back+0x38>)
 8000c9e:	f001 fe37 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000ca2:	2200      	movs	r2, #0
 8000ca4:	2120      	movs	r1, #32
 8000ca6:	4806      	ldr	r0, [pc, #24]	; (8000cc0 <left_back+0x38>)
 8000ca8:	f001 fe32 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000cac:	2201      	movs	r2, #1
 8000cae:	2110      	movs	r1, #16
 8000cb0:	4803      	ldr	r0, [pc, #12]	; (8000cc0 <left_back+0x38>)
 8000cb2:	f001 fe2d 	bl	8002910 <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	bd80      	pop	{r7, pc}
 8000cba:	bf00      	nop
 8000cbc:	40020000 	.word	0x40020000
 8000cc0:	40020400 	.word	0x40020400

08000cc4 <right_back>:

void right_back()
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);
 8000cc8:	2200      	movs	r2, #0
 8000cca:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000cce:	480a      	ldr	r0, [pc, #40]	; (8000cf8 <right_back+0x34>)
 8000cd0:	f001 fe1e 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000cd4:	2201      	movs	r2, #1
 8000cd6:	2108      	movs	r1, #8
 8000cd8:	4808      	ldr	r0, [pc, #32]	; (8000cfc <right_back+0x38>)
 8000cda:	f001 fe19 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2120      	movs	r1, #32
 8000ce2:	4806      	ldr	r0, [pc, #24]	; (8000cfc <right_back+0x38>)
 8000ce4:	f001 fe14 	bl	8002910 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2110      	movs	r1, #16
 8000cec:	4803      	ldr	r0, [pc, #12]	; (8000cfc <right_back+0x38>)
 8000cee:	f001 fe0f 	bl	8002910 <HAL_GPIO_WritePin>
}
 8000cf2:	bf00      	nop
 8000cf4:	bd80      	pop	{r7, pc}
 8000cf6:	bf00      	nop
 8000cf8:	40020000 	.word	0x40020000
 8000cfc:	40020400 	.word	0x40020400

08000d00 <at_motor>:
//
//
//
void at_motor()
{
 8000d00:	b580      	push	{r7, lr}
 8000d02:	af00      	add	r7, sp, #0
	if(flag == 1)
 8000d04:	4b49      	ldr	r3, [pc, #292]	; (8000e2c <at_motor+0x12c>)
 8000d06:	781b      	ldrb	r3, [r3, #0]
 8000d08:	2b01      	cmp	r3, #1
 8000d0a:	f040 808c 	bne.w	8000e26 <at_motor+0x126>
	{
		if(distance_front < 10)
 8000d0e:	4b48      	ldr	r3, [pc, #288]	; (8000e30 <at_motor+0x130>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	2b09      	cmp	r3, #9
 8000d14:	d81d      	bhi.n	8000d52 <at_motor+0x52>
		{
			if(distance_right > distance_left)
 8000d16:	4b47      	ldr	r3, [pc, #284]	; (8000e34 <at_motor+0x134>)
 8000d18:	681a      	ldr	r2, [r3, #0]
 8000d1a:	4b47      	ldr	r3, [pc, #284]	; (8000e38 <at_motor+0x138>)
 8000d1c:	681b      	ldr	r3, [r3, #0]
 8000d1e:	429a      	cmp	r2, r3
 8000d20:	d90b      	bls.n	8000d3a <at_motor+0x3a>
			{
			  left_back();
 8000d22:	f7ff ffb1 	bl	8000c88 <left_back>
			  htim4.Instance->CCR3 = 1000;
 8000d26:	4b45      	ldr	r3, [pc, #276]	; (8000e3c <at_motor+0x13c>)
 8000d28:	681b      	ldr	r3, [r3, #0]
 8000d2a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d2e:	63da      	str	r2, [r3, #60]	; 0x3c
			  htim4.Instance->CCR1 = 0;
 8000d30:	4b42      	ldr	r3, [pc, #264]	; (8000e3c <at_motor+0x13c>)
 8000d32:	681b      	ldr	r3, [r3, #0]
 8000d34:	2200      	movs	r2, #0
 8000d36:	635a      	str	r2, [r3, #52]	; 0x34
			go();
			htim4.Instance->CCR3 = 1000;
			htim4.Instance->CCR1 = 1000;
		}
	}
}
 8000d38:	e075      	b.n	8000e26 <at_motor+0x126>
			  right_back();
 8000d3a:	f7ff ffc3 	bl	8000cc4 <right_back>
			  htim4.Instance->CCR3 = 0;
 8000d3e:	4b3f      	ldr	r3, [pc, #252]	; (8000e3c <at_motor+0x13c>)
 8000d40:	681b      	ldr	r3, [r3, #0]
 8000d42:	2200      	movs	r2, #0
 8000d44:	63da      	str	r2, [r3, #60]	; 0x3c
			  htim4.Instance->CCR1 = 1000;
 8000d46:	4b3d      	ldr	r3, [pc, #244]	; (8000e3c <at_motor+0x13c>)
 8000d48:	681b      	ldr	r3, [r3, #0]
 8000d4a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d4e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000d50:	e069      	b.n	8000e26 <at_motor+0x126>
		else if(distance_front < 60)
 8000d52:	4b37      	ldr	r3, [pc, #220]	; (8000e30 <at_motor+0x130>)
 8000d54:	681b      	ldr	r3, [r3, #0]
 8000d56:	2b3b      	cmp	r3, #59	; 0x3b
 8000d58:	d832      	bhi.n	8000dc0 <at_motor+0xc0>
			if(distance_left < 20 || distance_right < 20)
 8000d5a:	4b37      	ldr	r3, [pc, #220]	; (8000e38 <at_motor+0x138>)
 8000d5c:	681b      	ldr	r3, [r3, #0]
 8000d5e:	2b13      	cmp	r3, #19
 8000d60:	d903      	bls.n	8000d6a <at_motor+0x6a>
 8000d62:	4b34      	ldr	r3, [pc, #208]	; (8000e34 <at_motor+0x134>)
 8000d64:	681b      	ldr	r3, [r3, #0]
 8000d66:	2b13      	cmp	r3, #19
 8000d68:	d81d      	bhi.n	8000da6 <at_motor+0xa6>
				if(distance_left < distance_right)
 8000d6a:	4b33      	ldr	r3, [pc, #204]	; (8000e38 <at_motor+0x138>)
 8000d6c:	681a      	ldr	r2, [r3, #0]
 8000d6e:	4b31      	ldr	r3, [pc, #196]	; (8000e34 <at_motor+0x134>)
 8000d70:	681b      	ldr	r3, [r3, #0]
 8000d72:	429a      	cmp	r2, r3
 8000d74:	d20b      	bcs.n	8000d8e <at_motor+0x8e>
					right();
 8000d76:	f7ff ff2f 	bl	8000bd8 <right>
					htim4.Instance->CCR3 = 0;
 8000d7a:	4b30      	ldr	r3, [pc, #192]	; (8000e3c <at_motor+0x13c>)
 8000d7c:	681b      	ldr	r3, [r3, #0]
 8000d7e:	2200      	movs	r2, #0
 8000d80:	63da      	str	r2, [r3, #60]	; 0x3c
					htim4.Instance->CCR1 = 1000;
 8000d82:	4b2e      	ldr	r3, [pc, #184]	; (8000e3c <at_motor+0x13c>)
 8000d84:	681b      	ldr	r3, [r3, #0]
 8000d86:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d8a:	635a      	str	r2, [r3, #52]	; 0x34
				if(distance_left < distance_right)
 8000d8c:	e04b      	b.n	8000e26 <at_motor+0x126>
					left();
 8000d8e:	f7ff ff4f 	bl	8000c30 <left>
					htim4.Instance->CCR3 = 1000;
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <at_motor+0x13c>)
 8000d94:	681b      	ldr	r3, [r3, #0]
 8000d96:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000d9a:	63da      	str	r2, [r3, #60]	; 0x3c
					htim4.Instance->CCR1 = 0;
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <at_motor+0x13c>)
 8000d9e:	681b      	ldr	r3, [r3, #0]
 8000da0:	2200      	movs	r2, #0
 8000da2:	635a      	str	r2, [r3, #52]	; 0x34
				if(distance_left < distance_right)
 8000da4:	e03f      	b.n	8000e26 <at_motor+0x126>
				go();
 8000da6:	f7ff fea1 	bl	8000aec <go>
				htim4.Instance->CCR3 = 1000;
 8000daa:	4b24      	ldr	r3, [pc, #144]	; (8000e3c <at_motor+0x13c>)
 8000dac:	681b      	ldr	r3, [r3, #0]
 8000dae:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000db2:	63da      	str	r2, [r3, #60]	; 0x3c
				htim4.Instance->CCR1 = 1000;
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <at_motor+0x13c>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000dbc:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000dbe:	e032      	b.n	8000e26 <at_motor+0x126>
		else if(distance_left < 14 || distance_right < 14)
 8000dc0:	4b1d      	ldr	r3, [pc, #116]	; (8000e38 <at_motor+0x138>)
 8000dc2:	681b      	ldr	r3, [r3, #0]
 8000dc4:	2b0d      	cmp	r3, #13
 8000dc6:	d903      	bls.n	8000dd0 <at_motor+0xd0>
 8000dc8:	4b1a      	ldr	r3, [pc, #104]	; (8000e34 <at_motor+0x134>)
 8000dca:	681b      	ldr	r3, [r3, #0]
 8000dcc:	2b0d      	cmp	r3, #13
 8000dce:	d81d      	bhi.n	8000e0c <at_motor+0x10c>
			if(distance_left < distance_right)
 8000dd0:	4b19      	ldr	r3, [pc, #100]	; (8000e38 <at_motor+0x138>)
 8000dd2:	681a      	ldr	r2, [r3, #0]
 8000dd4:	4b17      	ldr	r3, [pc, #92]	; (8000e34 <at_motor+0x134>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	429a      	cmp	r2, r3
 8000dda:	d20b      	bcs.n	8000df4 <at_motor+0xf4>
				right();
 8000ddc:	f7ff fefc 	bl	8000bd8 <right>
				htim4.Instance->CCR3 = 0;
 8000de0:	4b16      	ldr	r3, [pc, #88]	; (8000e3c <at_motor+0x13c>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	2200      	movs	r2, #0
 8000de6:	63da      	str	r2, [r3, #60]	; 0x3c
				htim4.Instance->CCR1 = 1000;
 8000de8:	4b14      	ldr	r3, [pc, #80]	; (8000e3c <at_motor+0x13c>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000df0:	635a      	str	r2, [r3, #52]	; 0x34
			if(distance_left < distance_right)
 8000df2:	e018      	b.n	8000e26 <at_motor+0x126>
				left();
 8000df4:	f7ff ff1c 	bl	8000c30 <left>
				htim4.Instance->CCR3 = 1000;
 8000df8:	4b10      	ldr	r3, [pc, #64]	; (8000e3c <at_motor+0x13c>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e00:	63da      	str	r2, [r3, #60]	; 0x3c
				htim4.Instance->CCR1 = 0;
 8000e02:	4b0e      	ldr	r3, [pc, #56]	; (8000e3c <at_motor+0x13c>)
 8000e04:	681b      	ldr	r3, [r3, #0]
 8000e06:	2200      	movs	r2, #0
 8000e08:	635a      	str	r2, [r3, #52]	; 0x34
			if(distance_left < distance_right)
 8000e0a:	e00c      	b.n	8000e26 <at_motor+0x126>
			go();
 8000e0c:	f7ff fe6e 	bl	8000aec <go>
			htim4.Instance->CCR3 = 1000;
 8000e10:	4b0a      	ldr	r3, [pc, #40]	; (8000e3c <at_motor+0x13c>)
 8000e12:	681b      	ldr	r3, [r3, #0]
 8000e14:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e18:	63da      	str	r2, [r3, #60]	; 0x3c
			htim4.Instance->CCR1 = 1000;
 8000e1a:	4b08      	ldr	r3, [pc, #32]	; (8000e3c <at_motor+0x13c>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8000e22:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e24:	e7ff      	b.n	8000e26 <at_motor+0x126>
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	2000008a 	.word	0x2000008a
 8000e30:	2000009c 	.word	0x2000009c
 8000e34:	200000c4 	.word	0x200000c4
 8000e38:	200000b0 	.word	0x200000b0
 8000e3c:	200001a4 	.word	0x200001a4

08000e40 <bt_motor>:
/////////////////////////////////////////////////코드 추�?2



void bt_motor()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	af00      	add	r7, sp, #0

	if(rx_Data[0] == 'H')
 8000e44:	4b32      	ldr	r3, [pc, #200]	; (8000f10 <bt_motor+0xd0>)
 8000e46:	781b      	ldrb	r3, [r3, #0]
 8000e48:	2b48      	cmp	r3, #72	; 0x48
 8000e4a:	d104      	bne.n	8000e56 <bt_motor+0x16>
	{
		PWM = 600;
 8000e4c:	4b31      	ldr	r3, [pc, #196]	; (8000f14 <bt_motor+0xd4>)
 8000e4e:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000e52:	601a      	str	r2, [r3, #0]
 8000e54:	e037      	b.n	8000ec6 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'M')
 8000e56:	4b2e      	ldr	r3, [pc, #184]	; (8000f10 <bt_motor+0xd0>)
 8000e58:	781b      	ldrb	r3, [r3, #0]
 8000e5a:	2b4d      	cmp	r3, #77	; 0x4d
 8000e5c:	d104      	bne.n	8000e68 <bt_motor+0x28>
	{
		PWM = 300;
 8000e5e:	4b2d      	ldr	r3, [pc, #180]	; (8000f14 <bt_motor+0xd4>)
 8000e60:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8000e64:	601a      	str	r2, [r3, #0]
 8000e66:	e02e      	b.n	8000ec6 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'L')
 8000e68:	4b29      	ldr	r3, [pc, #164]	; (8000f10 <bt_motor+0xd0>)
 8000e6a:	781b      	ldrb	r3, [r3, #0]
 8000e6c:	2b4c      	cmp	r3, #76	; 0x4c
 8000e6e:	d103      	bne.n	8000e78 <bt_motor+0x38>
	{
		PWM = 100;
 8000e70:	4b28      	ldr	r3, [pc, #160]	; (8000f14 <bt_motor+0xd4>)
 8000e72:	2264      	movs	r2, #100	; 0x64
 8000e74:	601a      	str	r2, [r3, #0]
 8000e76:	e026      	b.n	8000ec6 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'f')
 8000e78:	4b25      	ldr	r3, [pc, #148]	; (8000f10 <bt_motor+0xd0>)
 8000e7a:	781b      	ldrb	r3, [r3, #0]
 8000e7c:	2b66      	cmp	r3, #102	; 0x66
 8000e7e:	d103      	bne.n	8000e88 <bt_motor+0x48>
	{
	  state = 'f';
 8000e80:	4b25      	ldr	r3, [pc, #148]	; (8000f18 <bt_motor+0xd8>)
 8000e82:	2266      	movs	r2, #102	; 0x66
 8000e84:	701a      	strb	r2, [r3, #0]
 8000e86:	e01e      	b.n	8000ec6 <bt_motor+0x86>
	}
	else if(rx_Data[0] == 's')
 8000e88:	4b21      	ldr	r3, [pc, #132]	; (8000f10 <bt_motor+0xd0>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	2b73      	cmp	r3, #115	; 0x73
 8000e8e:	d103      	bne.n	8000e98 <bt_motor+0x58>
	{
	  state = 's';
 8000e90:	4b21      	ldr	r3, [pc, #132]	; (8000f18 <bt_motor+0xd8>)
 8000e92:	2273      	movs	r2, #115	; 0x73
 8000e94:	701a      	strb	r2, [r3, #0]
 8000e96:	e016      	b.n	8000ec6 <bt_motor+0x86>
	}
  else if(rx_Data[0] == 'l')
 8000e98:	4b1d      	ldr	r3, [pc, #116]	; (8000f10 <bt_motor+0xd0>)
 8000e9a:	781b      	ldrb	r3, [r3, #0]
 8000e9c:	2b6c      	cmp	r3, #108	; 0x6c
 8000e9e:	d103      	bne.n	8000ea8 <bt_motor+0x68>
	{
	  state = 'l';
 8000ea0:	4b1d      	ldr	r3, [pc, #116]	; (8000f18 <bt_motor+0xd8>)
 8000ea2:	226c      	movs	r2, #108	; 0x6c
 8000ea4:	701a      	strb	r2, [r3, #0]
 8000ea6:	e00e      	b.n	8000ec6 <bt_motor+0x86>

	}
  else if(rx_Data[0] == 'r')
 8000ea8:	4b19      	ldr	r3, [pc, #100]	; (8000f10 <bt_motor+0xd0>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b72      	cmp	r3, #114	; 0x72
 8000eae:	d103      	bne.n	8000eb8 <bt_motor+0x78>
	{
	  state = 'r';
 8000eb0:	4b19      	ldr	r3, [pc, #100]	; (8000f18 <bt_motor+0xd8>)
 8000eb2:	2272      	movs	r2, #114	; 0x72
 8000eb4:	701a      	strb	r2, [r3, #0]
 8000eb6:	e006      	b.n	8000ec6 <bt_motor+0x86>

	}
  else if(rx_Data[0] == 'b')
 8000eb8:	4b15      	ldr	r3, [pc, #84]	; (8000f10 <bt_motor+0xd0>)
 8000eba:	781b      	ldrb	r3, [r3, #0]
 8000ebc:	2b62      	cmp	r3, #98	; 0x62
 8000ebe:	d102      	bne.n	8000ec6 <bt_motor+0x86>
	{
	  state = 'b';
 8000ec0:	4b15      	ldr	r3, [pc, #84]	; (8000f18 <bt_motor+0xd8>)
 8000ec2:	2262      	movs	r2, #98	; 0x62
 8000ec4:	701a      	strb	r2, [r3, #0]
	}

	if(state == 'f'){
 8000ec6:	4b14      	ldr	r3, [pc, #80]	; (8000f18 <bt_motor+0xd8>)
 8000ec8:	781b      	ldrb	r3, [r3, #0]
 8000eca:	2b66      	cmp	r3, #102	; 0x66
 8000ecc:	d102      	bne.n	8000ed4 <bt_motor+0x94>
		go();
 8000ece:	f7ff fe0d 	bl	8000aec <go>
	}
	else if(state == 'b')
	{
		back();
	}
}
 8000ed2:	e01a      	b.n	8000f0a <bt_motor+0xca>
	else if(state == 's')
 8000ed4:	4b10      	ldr	r3, [pc, #64]	; (8000f18 <bt_motor+0xd8>)
 8000ed6:	781b      	ldrb	r3, [r3, #0]
 8000ed8:	2b73      	cmp	r3, #115	; 0x73
 8000eda:	d102      	bne.n	8000ee2 <bt_motor+0xa2>
		stop();
 8000edc:	f7ff fe5e 	bl	8000b9c <stop>
}
 8000ee0:	e013      	b.n	8000f0a <bt_motor+0xca>
	else if(state == 'l'){
 8000ee2:	4b0d      	ldr	r3, [pc, #52]	; (8000f18 <bt_motor+0xd8>)
 8000ee4:	781b      	ldrb	r3, [r3, #0]
 8000ee6:	2b6c      	cmp	r3, #108	; 0x6c
 8000ee8:	d102      	bne.n	8000ef0 <bt_motor+0xb0>
		left();
 8000eea:	f7ff fea1 	bl	8000c30 <left>
}
 8000eee:	e00c      	b.n	8000f0a <bt_motor+0xca>
	else if(state == 'r'){
 8000ef0:	4b09      	ldr	r3, [pc, #36]	; (8000f18 <bt_motor+0xd8>)
 8000ef2:	781b      	ldrb	r3, [r3, #0]
 8000ef4:	2b72      	cmp	r3, #114	; 0x72
 8000ef6:	d102      	bne.n	8000efe <bt_motor+0xbe>
		right();
 8000ef8:	f7ff fe6e 	bl	8000bd8 <right>
}
 8000efc:	e005      	b.n	8000f0a <bt_motor+0xca>
	else if(state == 'b')
 8000efe:	4b06      	ldr	r3, [pc, #24]	; (8000f18 <bt_motor+0xd8>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b62      	cmp	r3, #98	; 0x62
 8000f04:	d101      	bne.n	8000f0a <bt_motor+0xca>
		back();
 8000f06:	f7ff fe1d 	bl	8000b44 <back>
}
 8000f0a:	bf00      	nop
 8000f0c:	bd80      	pop	{r7, pc}
 8000f0e:	bf00      	nop
 8000f10:	20000088 	.word	0x20000088
 8000f14:	20000000 	.word	0x20000000
 8000f18:	20000089 	.word	0x20000089

08000f1c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f1c:	b580      	push	{r7, lr}
 8000f1e:	b082      	sub	sp, #8
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000f24:	687b      	ldr	r3, [r7, #4]
 8000f26:	681a      	ldr	r2, [r3, #0]
 8000f28:	4b06      	ldr	r3, [pc, #24]	; (8000f44 <HAL_UART_RxCpltCallback+0x28>)
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	429a      	cmp	r2, r3
 8000f2e:	d104      	bne.n	8000f3a <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 8000f30:	2201      	movs	r2, #1
 8000f32:	4905      	ldr	r1, [pc, #20]	; (8000f48 <HAL_UART_RxCpltCallback+0x2c>)
 8000f34:	4803      	ldr	r0, [pc, #12]	; (8000f44 <HAL_UART_RxCpltCallback+0x28>)
 8000f36:	f003 fd86 	bl	8004a46 <HAL_UART_Receive_IT>
	}

}
 8000f3a:	bf00      	nop
 8000f3c:	3708      	adds	r7, #8
 8000f3e:	46bd      	mov	sp, r7
 8000f40:	bd80      	pop	{r7, pc}
 8000f42:	bf00      	nop
 8000f44:	200001ec 	.word	0x200001ec
 8000f48:	20000088 	.word	0x20000088

08000f4c <__io_putchar>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
int __io_putchar(int ch) // printf
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
 8000f52:	6078      	str	r0, [r7, #4]
	// console output function

	HAL_UART_Transmit(&huart2, &ch, 1, 10); // 1byte transfer
 8000f54:	1d39      	adds	r1, r7, #4
 8000f56:	230a      	movs	r3, #10
 8000f58:	2201      	movs	r2, #1
 8000f5a:	4804      	ldr	r0, [pc, #16]	; (8000f6c <__io_putchar+0x20>)
 8000f5c:	f003 fce8 	bl	8004930 <HAL_UART_Transmit>
	// &ch is stack pointer(ch's data address)

	return ch;
 8000f60:	687b      	ldr	r3, [r7, #4]
}
 8000f62:	4618      	mov	r0, r3
 8000f64:	3708      	adds	r7, #8
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	20000234 	.word	0x20000234

08000f70 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f74:	f000 fe48 	bl	8001c08 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f78:	f000 f87e 	bl	8001078 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f7c:	f7ff fb1e 	bl	80005bc <MX_GPIO_Init>
  MX_DMA_Init();
 8000f80:	f7ff fafc 	bl	800057c <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f84:	f000 fd0e 	bl	80019a4 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f88:	f000 fce2 	bl	8001950 <MX_USART1_UART_Init>
  MX_TIM3_Init();
 8000f8c:	f000 faee 	bl	800156c <MX_TIM3_Init>
  MX_TIM4_Init();
 8000f90:	f000 fb40 	bl	8001614 <MX_TIM4_Init>
  MX_TIM1_Init();
 8000f94:	f000 fa24 	bl	80013e0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f98:	f000 fa96 	bl	80014c8 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f9c:	2108      	movs	r1, #8
 8000f9e:	4828      	ldr	r0, [pc, #160]	; (8001040 <main+0xd0>)
 8000fa0:	f002 fa62 	bl	8003468 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000fa4:	2100      	movs	r1, #0
 8000fa6:	4826      	ldr	r0, [pc, #152]	; (8001040 <main+0xd0>)
 8000fa8:	f002 fa5e 	bl	8003468 <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1); // delay_us
 8000fac:	4825      	ldr	r0, [pc, #148]	; (8001044 <main+0xd4>)
 8000fae:	f002 f9b1 	bl	8003314 <HAL_TIM_Base_Start>
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1);
 8000fb2:	2100      	movs	r1, #0
 8000fb4:	4824      	ldr	r0, [pc, #144]	; (8001048 <main+0xd8>)
 8000fb6:	f002 fb57 	bl	8003668 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim3, TIM_CHANNEL_2);
 8000fba:	2104      	movs	r1, #4
 8000fbc:	4823      	ldr	r0, [pc, #140]	; (800104c <main+0xdc>)
 8000fbe:	f002 fb53 	bl	8003668 <HAL_TIM_IC_Start_IT>
	HAL_TIM_IC_Start_IT(&htim1, TIM_CHANNEL_1);
 8000fc2:	2100      	movs	r1, #0
 8000fc4:	481f      	ldr	r0, [pc, #124]	; (8001044 <main+0xd4>)
 8000fc6:	f002 fb4f 	bl	8003668 <HAL_TIM_IC_Start_IT>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
//	  Forward();
	  HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 8000fca:	2201      	movs	r2, #1
 8000fcc:	4920      	ldr	r1, [pc, #128]	; (8001050 <main+0xe0>)
 8000fce:	4821      	ldr	r0, [pc, #132]	; (8001054 <main+0xe4>)
 8000fd0:	f003 fd39 	bl	8004a46 <HAL_UART_Receive_IT>
	  printf("%c\r\n", rx_Data[0]);
 8000fd4:	4b1e      	ldr	r3, [pc, #120]	; (8001050 <main+0xe0>)
 8000fd6:	781b      	ldrb	r3, [r3, #0]
 8000fd8:	4619      	mov	r1, r3
 8000fda:	481f      	ldr	r0, [pc, #124]	; (8001058 <main+0xe8>)
 8000fdc:	f004 fd70 	bl	8005ac0 <iprintf>
	  if(rx_Data[0] == 'a') flag = !flag;
 8000fe0:	4b1b      	ldr	r3, [pc, #108]	; (8001050 <main+0xe0>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	2b61      	cmp	r3, #97	; 0x61
 8000fe6:	d109      	bne.n	8000ffc <main+0x8c>
 8000fe8:	4b1c      	ldr	r3, [pc, #112]	; (800105c <main+0xec>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	bf0c      	ite	eq
 8000ff0:	2301      	moveq	r3, #1
 8000ff2:	2300      	movne	r3, #0
 8000ff4:	b2db      	uxtb	r3, r3
 8000ff6:	461a      	mov	r2, r3
 8000ff8:	4b18      	ldr	r3, [pc, #96]	; (800105c <main+0xec>)
 8000ffa:	701a      	strb	r2, [r3, #0]
	  if(!flag) bt_motor();
 8000ffc:	4b17      	ldr	r3, [pc, #92]	; (800105c <main+0xec>)
 8000ffe:	781b      	ldrb	r3, [r3, #0]
 8001000:	2b00      	cmp	r3, #0
 8001002:	d102      	bne.n	800100a <main+0x9a>
 8001004:	f7ff ff1c 	bl	8000e40 <bt_motor>
 8001008:	e001      	b.n	800100e <main+0x9e>
	  else at_motor();
 800100a:	f7ff fe79 	bl	8000d00 <at_motor>
	  Trig1();
 800100e:	f7ff fd0f 	bl	8000a30 <Trig1>
//	  HAL_Delay(10);
	  Trig2();
 8001012:	f7ff fd2b 	bl	8000a6c <Trig2>
//	  HAL_Delay(10);
	  Trig3();
 8001016:	f7ff fd49 	bl	8000aac <Trig3>
//	  printf("%c\r\n", rx_Data[0]);
	  printf("sonic left: %d\r\n", distance_left);
 800101a:	4b11      	ldr	r3, [pc, #68]	; (8001060 <main+0xf0>)
 800101c:	681b      	ldr	r3, [r3, #0]
 800101e:	4619      	mov	r1, r3
 8001020:	4810      	ldr	r0, [pc, #64]	; (8001064 <main+0xf4>)
 8001022:	f004 fd4d 	bl	8005ac0 <iprintf>
	  printf("sonic center: %d\r\n", distance_front);
 8001026:	4b10      	ldr	r3, [pc, #64]	; (8001068 <main+0xf8>)
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	4619      	mov	r1, r3
 800102c:	480f      	ldr	r0, [pc, #60]	; (800106c <main+0xfc>)
 800102e:	f004 fd47 	bl	8005ac0 <iprintf>
	  printf("sonic right: %d\r\n", distance_right);
 8001032:	4b0f      	ldr	r3, [pc, #60]	; (8001070 <main+0x100>)
 8001034:	681b      	ldr	r3, [r3, #0]
 8001036:	4619      	mov	r1, r3
 8001038:	480e      	ldr	r0, [pc, #56]	; (8001074 <main+0x104>)
 800103a:	f004 fd41 	bl	8005ac0 <iprintf>
  {
 800103e:	e7c4      	b.n	8000fca <main+0x5a>
 8001040:	200001a4 	.word	0x200001a4
 8001044:	200000cc 	.word	0x200000cc
 8001048:	20000114 	.word	0x20000114
 800104c:	2000015c 	.word	0x2000015c
 8001050:	20000088 	.word	0x20000088
 8001054:	200001ec 	.word	0x200001ec
 8001058:	080067c4 	.word	0x080067c4
 800105c:	2000008a 	.word	0x2000008a
 8001060:	200000b0 	.word	0x200000b0
 8001064:	080067cc 	.word	0x080067cc
 8001068:	2000009c 	.word	0x2000009c
 800106c:	080067e0 	.word	0x080067e0
 8001070:	200000c4 	.word	0x200000c4
 8001074:	080067f4 	.word	0x080067f4

08001078 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001078:	b580      	push	{r7, lr}
 800107a:	b094      	sub	sp, #80	; 0x50
 800107c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800107e:	f107 0320 	add.w	r3, r7, #32
 8001082:	2230      	movs	r2, #48	; 0x30
 8001084:	2100      	movs	r1, #0
 8001086:	4618      	mov	r0, r3
 8001088:	f004 fd6f 	bl	8005b6a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800108c:	f107 030c 	add.w	r3, r7, #12
 8001090:	2200      	movs	r2, #0
 8001092:	601a      	str	r2, [r3, #0]
 8001094:	605a      	str	r2, [r3, #4]
 8001096:	609a      	str	r2, [r3, #8]
 8001098:	60da      	str	r2, [r3, #12]
 800109a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800109c:	2300      	movs	r3, #0
 800109e:	60bb      	str	r3, [r7, #8]
 80010a0:	4b28      	ldr	r3, [pc, #160]	; (8001144 <SystemClock_Config+0xcc>)
 80010a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010a4:	4a27      	ldr	r2, [pc, #156]	; (8001144 <SystemClock_Config+0xcc>)
 80010a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010aa:	6413      	str	r3, [r2, #64]	; 0x40
 80010ac:	4b25      	ldr	r3, [pc, #148]	; (8001144 <SystemClock_Config+0xcc>)
 80010ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010b4:	60bb      	str	r3, [r7, #8]
 80010b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80010b8:	2300      	movs	r3, #0
 80010ba:	607b      	str	r3, [r7, #4]
 80010bc:	4b22      	ldr	r3, [pc, #136]	; (8001148 <SystemClock_Config+0xd0>)
 80010be:	681b      	ldr	r3, [r3, #0]
 80010c0:	4a21      	ldr	r2, [pc, #132]	; (8001148 <SystemClock_Config+0xd0>)
 80010c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80010c6:	6013      	str	r3, [r2, #0]
 80010c8:	4b1f      	ldr	r3, [pc, #124]	; (8001148 <SystemClock_Config+0xd0>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010d0:	607b      	str	r3, [r7, #4]
 80010d2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80010d4:	2302      	movs	r3, #2
 80010d6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80010d8:	2301      	movs	r3, #1
 80010da:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80010dc:	2310      	movs	r3, #16
 80010de:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80010e0:	2302      	movs	r3, #2
 80010e2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80010e4:	2300      	movs	r3, #0
 80010e6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80010e8:	2310      	movs	r3, #16
 80010ea:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80010ec:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80010f0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80010f2:	2304      	movs	r3, #4
 80010f4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80010f6:	2304      	movs	r3, #4
 80010f8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80010fa:	f107 0320 	add.w	r3, r7, #32
 80010fe:	4618      	mov	r0, r3
 8001100:	f001 fc20 	bl	8002944 <HAL_RCC_OscConfig>
 8001104:	4603      	mov	r3, r0
 8001106:	2b00      	cmp	r3, #0
 8001108:	d001      	beq.n	800110e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800110a:	f000 f81f 	bl	800114c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800110e:	230f      	movs	r3, #15
 8001110:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001112:	2302      	movs	r3, #2
 8001114:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001116:	2300      	movs	r3, #0
 8001118:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800111a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001120:	2300      	movs	r3, #0
 8001122:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001124:	f107 030c 	add.w	r3, r7, #12
 8001128:	2102      	movs	r1, #2
 800112a:	4618      	mov	r0, r3
 800112c:	f001 fe82 	bl	8002e34 <HAL_RCC_ClockConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001136:	f000 f809 	bl	800114c <Error_Handler>
  }
}
 800113a:	bf00      	nop
 800113c:	3750      	adds	r7, #80	; 0x50
 800113e:	46bd      	mov	sp, r7
 8001140:	bd80      	pop	{r7, pc}
 8001142:	bf00      	nop
 8001144:	40023800 	.word	0x40023800
 8001148:	40007000 	.word	0x40007000

0800114c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800114c:	b480      	push	{r7}
 800114e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001150:	b672      	cpsid	i
}
 8001152:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001154:	e7fe      	b.n	8001154 <Error_Handler+0x8>
	...

08001158 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	b082      	sub	sp, #8
 800115c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800115e:	2300      	movs	r3, #0
 8001160:	607b      	str	r3, [r7, #4]
 8001162:	4b10      	ldr	r3, [pc, #64]	; (80011a4 <HAL_MspInit+0x4c>)
 8001164:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001166:	4a0f      	ldr	r2, [pc, #60]	; (80011a4 <HAL_MspInit+0x4c>)
 8001168:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800116c:	6453      	str	r3, [r2, #68]	; 0x44
 800116e:	4b0d      	ldr	r3, [pc, #52]	; (80011a4 <HAL_MspInit+0x4c>)
 8001170:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001172:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001176:	607b      	str	r3, [r7, #4]
 8001178:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800117a:	2300      	movs	r3, #0
 800117c:	603b      	str	r3, [r7, #0]
 800117e:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <HAL_MspInit+0x4c>)
 8001180:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001182:	4a08      	ldr	r2, [pc, #32]	; (80011a4 <HAL_MspInit+0x4c>)
 8001184:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001188:	6413      	str	r3, [r2, #64]	; 0x40
 800118a:	4b06      	ldr	r3, [pc, #24]	; (80011a4 <HAL_MspInit+0x4c>)
 800118c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001192:	603b      	str	r3, [r7, #0]
 8001194:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001196:	2007      	movs	r0, #7
 8001198:	f000 fe78 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800119c:	bf00      	nop
 800119e:	3708      	adds	r7, #8
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	40023800 	.word	0x40023800

080011a8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80011a8:	b480      	push	{r7}
 80011aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80011ac:	e7fe      	b.n	80011ac <NMI_Handler+0x4>

080011ae <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80011ae:	b480      	push	{r7}
 80011b0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80011b2:	e7fe      	b.n	80011b2 <HardFault_Handler+0x4>

080011b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80011b4:	b480      	push	{r7}
 80011b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80011b8:	e7fe      	b.n	80011b8 <MemManage_Handler+0x4>

080011ba <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80011ba:	b480      	push	{r7}
 80011bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80011be:	e7fe      	b.n	80011be <BusFault_Handler+0x4>

080011c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80011c4:	e7fe      	b.n	80011c4 <UsageFault_Handler+0x4>

080011c6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80011c6:	b480      	push	{r7}
 80011c8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80011ca:	bf00      	nop
 80011cc:	46bd      	mov	sp, r7
 80011ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011d2:	4770      	bx	lr

080011d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80011d4:	b480      	push	{r7}
 80011d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80011d8:	bf00      	nop
 80011da:	46bd      	mov	sp, r7
 80011dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e0:	4770      	bx	lr

080011e2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80011e2:	b480      	push	{r7}
 80011e4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80011e6:	bf00      	nop
 80011e8:	46bd      	mov	sp, r7
 80011ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011ee:	4770      	bx	lr

080011f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80011f0:	b580      	push	{r7, lr}
 80011f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80011f4:	f000 fd5a 	bl	8001cac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80011f8:	bf00      	nop
 80011fa:	bd80      	pop	{r7, pc}

080011fc <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 80011fc:	b580      	push	{r7, lr}
 80011fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8001200:	4802      	ldr	r0, [pc, #8]	; (800120c <DMA1_Stream5_IRQHandler+0x10>)
 8001202:	f000 ffc5 	bl	8002190 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001206:	bf00      	nop
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	2000027c 	.word	0x2000027c

08001210 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001210:	b580      	push	{r7, lr}
 8001212:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001214:	4802      	ldr	r0, [pc, #8]	; (8001220 <TIM1_CC_IRQHandler+0x10>)
 8001216:	f002 fb41 	bl	800389c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800121a:	bf00      	nop
 800121c:	bd80      	pop	{r7, pc}
 800121e:	bf00      	nop
 8001220:	200000cc 	.word	0x200000cc

08001224 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001228:	4802      	ldr	r0, [pc, #8]	; (8001234 <TIM2_IRQHandler+0x10>)
 800122a:	f002 fb37 	bl	800389c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	bd80      	pop	{r7, pc}
 8001232:	bf00      	nop
 8001234:	20000114 	.word	0x20000114

08001238 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800123c:	4802      	ldr	r0, [pc, #8]	; (8001248 <TIM3_IRQHandler+0x10>)
 800123e:	f002 fb2d 	bl	800389c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	2000015c 	.word	0x2000015c

0800124c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800124c:	b580      	push	{r7, lr}
 800124e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001250:	4802      	ldr	r0, [pc, #8]	; (800125c <USART1_IRQHandler+0x10>)
 8001252:	f003 fc1d 	bl	8004a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001256:	bf00      	nop
 8001258:	bd80      	pop	{r7, pc}
 800125a:	bf00      	nop
 800125c:	200001ec 	.word	0x200001ec

08001260 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001260:	b580      	push	{r7, lr}
 8001262:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001264:	4802      	ldr	r0, [pc, #8]	; (8001270 <USART2_IRQHandler+0x10>)
 8001266:	f003 fc13 	bl	8004a90 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800126a:	bf00      	nop
 800126c:	bd80      	pop	{r7, pc}
 800126e:	bf00      	nop
 8001270:	20000234 	.word	0x20000234

08001274 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001274:	b580      	push	{r7, lr}
 8001276:	b086      	sub	sp, #24
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001280:	2300      	movs	r3, #0
 8001282:	617b      	str	r3, [r7, #20]
 8001284:	e00a      	b.n	800129c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001286:	f3af 8000 	nop.w
 800128a:	4601      	mov	r1, r0
 800128c:	68bb      	ldr	r3, [r7, #8]
 800128e:	1c5a      	adds	r2, r3, #1
 8001290:	60ba      	str	r2, [r7, #8]
 8001292:	b2ca      	uxtb	r2, r1
 8001294:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001296:	697b      	ldr	r3, [r7, #20]
 8001298:	3301      	adds	r3, #1
 800129a:	617b      	str	r3, [r7, #20]
 800129c:	697a      	ldr	r2, [r7, #20]
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	429a      	cmp	r2, r3
 80012a2:	dbf0      	blt.n	8001286 <_read+0x12>
  }

  return len;
 80012a4:	687b      	ldr	r3, [r7, #4]
}
 80012a6:	4618      	mov	r0, r3
 80012a8:	3718      	adds	r7, #24
 80012aa:	46bd      	mov	sp, r7
 80012ac:	bd80      	pop	{r7, pc}

080012ae <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80012ae:	b580      	push	{r7, lr}
 80012b0:	b086      	sub	sp, #24
 80012b2:	af00      	add	r7, sp, #0
 80012b4:	60f8      	str	r0, [r7, #12]
 80012b6:	60b9      	str	r1, [r7, #8]
 80012b8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ba:	2300      	movs	r3, #0
 80012bc:	617b      	str	r3, [r7, #20]
 80012be:	e009      	b.n	80012d4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80012c0:	68bb      	ldr	r3, [r7, #8]
 80012c2:	1c5a      	adds	r2, r3, #1
 80012c4:	60ba      	str	r2, [r7, #8]
 80012c6:	781b      	ldrb	r3, [r3, #0]
 80012c8:	4618      	mov	r0, r3
 80012ca:	f7ff fe3f 	bl	8000f4c <__io_putchar>
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80012ce:	697b      	ldr	r3, [r7, #20]
 80012d0:	3301      	adds	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
 80012d4:	697a      	ldr	r2, [r7, #20]
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	429a      	cmp	r2, r3
 80012da:	dbf1      	blt.n	80012c0 <_write+0x12>
  }
  return len;
 80012dc:	687b      	ldr	r3, [r7, #4]
}
 80012de:	4618      	mov	r0, r3
 80012e0:	3718      	adds	r7, #24
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}

080012e6 <_close>:

int _close(int file)
{
 80012e6:	b480      	push	{r7}
 80012e8:	b083      	sub	sp, #12
 80012ea:	af00      	add	r7, sp, #0
 80012ec:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80012ee:	f04f 33ff 	mov.w	r3, #4294967295
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	370c      	adds	r7, #12
 80012f6:	46bd      	mov	sp, r7
 80012f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fc:	4770      	bx	lr

080012fe <_fstat>:


int _fstat(int file, struct stat *st)
{
 80012fe:	b480      	push	{r7}
 8001300:	b083      	sub	sp, #12
 8001302:	af00      	add	r7, sp, #0
 8001304:	6078      	str	r0, [r7, #4]
 8001306:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800130e:	605a      	str	r2, [r3, #4]
  return 0;
 8001310:	2300      	movs	r3, #0
}
 8001312:	4618      	mov	r0, r3
 8001314:	370c      	adds	r7, #12
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr

0800131e <_isatty>:

int _isatty(int file)
{
 800131e:	b480      	push	{r7}
 8001320:	b083      	sub	sp, #12
 8001322:	af00      	add	r7, sp, #0
 8001324:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001326:	2301      	movs	r3, #1
}
 8001328:	4618      	mov	r0, r3
 800132a:	370c      	adds	r7, #12
 800132c:	46bd      	mov	sp, r7
 800132e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001332:	4770      	bx	lr

08001334 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001334:	b480      	push	{r7}
 8001336:	b085      	sub	sp, #20
 8001338:	af00      	add	r7, sp, #0
 800133a:	60f8      	str	r0, [r7, #12]
 800133c:	60b9      	str	r1, [r7, #8]
 800133e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001340:	2300      	movs	r3, #0
}
 8001342:	4618      	mov	r0, r3
 8001344:	3714      	adds	r7, #20
 8001346:	46bd      	mov	sp, r7
 8001348:	f85d 7b04 	ldr.w	r7, [sp], #4
 800134c:	4770      	bx	lr
	...

08001350 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0
 8001356:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001358:	4a14      	ldr	r2, [pc, #80]	; (80013ac <_sbrk+0x5c>)
 800135a:	4b15      	ldr	r3, [pc, #84]	; (80013b0 <_sbrk+0x60>)
 800135c:	1ad3      	subs	r3, r2, r3
 800135e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001360:	697b      	ldr	r3, [r7, #20]
 8001362:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001364:	4b13      	ldr	r3, [pc, #76]	; (80013b4 <_sbrk+0x64>)
 8001366:	681b      	ldr	r3, [r3, #0]
 8001368:	2b00      	cmp	r3, #0
 800136a:	d102      	bne.n	8001372 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800136c:	4b11      	ldr	r3, [pc, #68]	; (80013b4 <_sbrk+0x64>)
 800136e:	4a12      	ldr	r2, [pc, #72]	; (80013b8 <_sbrk+0x68>)
 8001370:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001372:	4b10      	ldr	r3, [pc, #64]	; (80013b4 <_sbrk+0x64>)
 8001374:	681a      	ldr	r2, [r3, #0]
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	4413      	add	r3, r2
 800137a:	693a      	ldr	r2, [r7, #16]
 800137c:	429a      	cmp	r2, r3
 800137e:	d207      	bcs.n	8001390 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001380:	f004 fc42 	bl	8005c08 <__errno>
 8001384:	4603      	mov	r3, r0
 8001386:	220c      	movs	r2, #12
 8001388:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800138a:	f04f 33ff 	mov.w	r3, #4294967295
 800138e:	e009      	b.n	80013a4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001390:	4b08      	ldr	r3, [pc, #32]	; (80013b4 <_sbrk+0x64>)
 8001392:	681b      	ldr	r3, [r3, #0]
 8001394:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001396:	4b07      	ldr	r3, [pc, #28]	; (80013b4 <_sbrk+0x64>)
 8001398:	681a      	ldr	r2, [r3, #0]
 800139a:	687b      	ldr	r3, [r7, #4]
 800139c:	4413      	add	r3, r2
 800139e:	4a05      	ldr	r2, [pc, #20]	; (80013b4 <_sbrk+0x64>)
 80013a0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80013a2:	68fb      	ldr	r3, [r7, #12]
}
 80013a4:	4618      	mov	r0, r3
 80013a6:	3718      	adds	r7, #24
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bd80      	pop	{r7, pc}
 80013ac:	20020000 	.word	0x20020000
 80013b0:	00000400 	.word	0x00000400
 80013b4:	200000c8 	.word	0x200000c8
 80013b8:	20000430 	.word	0x20000430

080013bc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80013bc:	b480      	push	{r7}
 80013be:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80013c0:	4b06      	ldr	r3, [pc, #24]	; (80013dc <SystemInit+0x20>)
 80013c2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80013c6:	4a05      	ldr	r2, [pc, #20]	; (80013dc <SystemInit+0x20>)
 80013c8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80013cc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80013d0:	bf00      	nop
 80013d2:	46bd      	mov	sp, r7
 80013d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013d8:	4770      	bx	lr
 80013da:	bf00      	nop
 80013dc:	e000ed00 	.word	0xe000ed00

080013e0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim4;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08a      	sub	sp, #40	; 0x28
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0318 	add.w	r3, r7, #24
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	f107 0310 	add.w	r3, r7, #16
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013fe:	463b      	mov	r3, r7
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800140a:	4b2d      	ldr	r3, [pc, #180]	; (80014c0 <MX_TIM1_Init+0xe0>)
 800140c:	4a2d      	ldr	r2, [pc, #180]	; (80014c4 <MX_TIM1_Init+0xe4>)
 800140e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001410:	4b2b      	ldr	r3, [pc, #172]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001412:	2253      	movs	r2, #83	; 0x53
 8001414:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001418:	2200      	movs	r2, #0
 800141a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800141c:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_TIM1_Init+0xe0>)
 800141e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001422:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001426:	2200      	movs	r2, #0
 8001428:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800142a:	4b25      	ldr	r3, [pc, #148]	; (80014c0 <MX_TIM1_Init+0xe0>)
 800142c:	2200      	movs	r2, #0
 800142e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001436:	4822      	ldr	r0, [pc, #136]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001438:	f001 ff1c 	bl	8003274 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001442:	f7ff fe83 	bl	800114c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0318 	add.w	r3, r7, #24
 8001450:	4619      	mov	r1, r3
 8001452:	481b      	ldr	r0, [pc, #108]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001454:	f002 fc70 	bl	8003d38 <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800145e:	f7ff fe75 	bl	800114c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001462:	4817      	ldr	r0, [pc, #92]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001464:	f002 f8b0 	bl	80035c8 <HAL_TIM_IC_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800146e:	f7ff fe6d 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800147a:	f107 0310 	add.w	r3, r7, #16
 800147e:	4619      	mov	r1, r3
 8001480:	480f      	ldr	r0, [pc, #60]	; (80014c0 <MX_TIM1_Init+0xe0>)
 8001482:	f003 f983 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800148c:	f7ff fe5e 	bl	800114c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8001490:	2300      	movs	r3, #0
 8001492:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001494:	2301      	movs	r3, #1
 8001496:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001498:	2300      	movs	r3, #0
 800149a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 800149c:	230f      	movs	r3, #15
 800149e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014a0:	463b      	mov	r3, r7
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	4806      	ldr	r0, [pc, #24]	; (80014c0 <MX_TIM1_Init+0xe0>)
 80014a8:	f002 fae8 	bl	8003a7c <HAL_TIM_IC_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80014b2:	f7ff fe4b 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80014b6:	bf00      	nop
 80014b8:	3728      	adds	r7, #40	; 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200000cc 	.word	0x200000cc
 80014c4:	40010000 	.word	0x40010000

080014c8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b086      	sub	sp, #24
 80014cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014ce:	f107 0310 	add.w	r3, r7, #16
 80014d2:	2200      	movs	r2, #0
 80014d4:	601a      	str	r2, [r3, #0]
 80014d6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80014d8:	463b      	mov	r3, r7
 80014da:	2200      	movs	r2, #0
 80014dc:	601a      	str	r2, [r3, #0]
 80014de:	605a      	str	r2, [r3, #4]
 80014e0:	609a      	str	r2, [r3, #8]
 80014e2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014e4:	4b20      	ldr	r3, [pc, #128]	; (8001568 <MX_TIM2_Init+0xa0>)
 80014e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80014ec:	4b1e      	ldr	r3, [pc, #120]	; (8001568 <MX_TIM2_Init+0xa0>)
 80014ee:	2253      	movs	r2, #83	; 0x53
 80014f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014f2:	4b1d      	ldr	r3, [pc, #116]	; (8001568 <MX_TIM2_Init+0xa0>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 80014f8:	4b1b      	ldr	r3, [pc, #108]	; (8001568 <MX_TIM2_Init+0xa0>)
 80014fa:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 80014fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001500:	4b19      	ldr	r3, [pc, #100]	; (8001568 <MX_TIM2_Init+0xa0>)
 8001502:	2200      	movs	r2, #0
 8001504:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001506:	4b18      	ldr	r3, [pc, #96]	; (8001568 <MX_TIM2_Init+0xa0>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800150c:	4816      	ldr	r0, [pc, #88]	; (8001568 <MX_TIM2_Init+0xa0>)
 800150e:	f002 f85b 	bl	80035c8 <HAL_TIM_IC_Init>
 8001512:	4603      	mov	r3, r0
 8001514:	2b00      	cmp	r3, #0
 8001516:	d001      	beq.n	800151c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001518:	f7ff fe18 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800151c:	2300      	movs	r3, #0
 800151e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001520:	2300      	movs	r3, #0
 8001522:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001524:	f107 0310 	add.w	r3, r7, #16
 8001528:	4619      	mov	r1, r3
 800152a:	480f      	ldr	r0, [pc, #60]	; (8001568 <MX_TIM2_Init+0xa0>)
 800152c:	f003 f92e 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001536:	f7ff fe09 	bl	800114c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800153a:	2300      	movs	r3, #0
 800153c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800153e:	2301      	movs	r3, #1
 8001540:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001542:	2300      	movs	r3, #0
 8001544:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001546:	230f      	movs	r3, #15
 8001548:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800154a:	463b      	mov	r3, r7
 800154c:	2200      	movs	r2, #0
 800154e:	4619      	mov	r1, r3
 8001550:	4805      	ldr	r0, [pc, #20]	; (8001568 <MX_TIM2_Init+0xa0>)
 8001552:	f002 fa93 	bl	8003a7c <HAL_TIM_IC_ConfigChannel>
 8001556:	4603      	mov	r3, r0
 8001558:	2b00      	cmp	r3, #0
 800155a:	d001      	beq.n	8001560 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800155c:	f7ff fdf6 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001560:	bf00      	nop
 8001562:	3718      	adds	r7, #24
 8001564:	46bd      	mov	sp, r7
 8001566:	bd80      	pop	{r7, pc}
 8001568:	20000114 	.word	0x20000114

0800156c <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800156c:	b580      	push	{r7, lr}
 800156e:	b086      	sub	sp, #24
 8001570:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001572:	f107 0310 	add.w	r3, r7, #16
 8001576:	2200      	movs	r2, #0
 8001578:	601a      	str	r2, [r3, #0]
 800157a:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800157c:	463b      	mov	r3, r7
 800157e:	2200      	movs	r2, #0
 8001580:	601a      	str	r2, [r3, #0]
 8001582:	605a      	str	r2, [r3, #4]
 8001584:	609a      	str	r2, [r3, #8]
 8001586:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001588:	4b20      	ldr	r3, [pc, #128]	; (800160c <MX_TIM3_Init+0xa0>)
 800158a:	4a21      	ldr	r2, [pc, #132]	; (8001610 <MX_TIM3_Init+0xa4>)
 800158c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 84-1;
 800158e:	4b1f      	ldr	r3, [pc, #124]	; (800160c <MX_TIM3_Init+0xa0>)
 8001590:	2253      	movs	r2, #83	; 0x53
 8001592:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001594:	4b1d      	ldr	r3, [pc, #116]	; (800160c <MX_TIM3_Init+0xa0>)
 8001596:	2200      	movs	r2, #0
 8001598:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800159a:	4b1c      	ldr	r3, [pc, #112]	; (800160c <MX_TIM3_Init+0xa0>)
 800159c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80015a0:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015a2:	4b1a      	ldr	r3, [pc, #104]	; (800160c <MX_TIM3_Init+0xa0>)
 80015a4:	2200      	movs	r2, #0
 80015a6:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015a8:	4b18      	ldr	r3, [pc, #96]	; (800160c <MX_TIM3_Init+0xa0>)
 80015aa:	2200      	movs	r2, #0
 80015ac:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim3) != HAL_OK)
 80015ae:	4817      	ldr	r0, [pc, #92]	; (800160c <MX_TIM3_Init+0xa0>)
 80015b0:	f002 f80a 	bl	80035c8 <HAL_TIM_IC_Init>
 80015b4:	4603      	mov	r3, r0
 80015b6:	2b00      	cmp	r3, #0
 80015b8:	d001      	beq.n	80015be <MX_TIM3_Init+0x52>
  {
    Error_Handler();
 80015ba:	f7ff fdc7 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015c2:	2300      	movs	r3, #0
 80015c4:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015c6:	f107 0310 	add.w	r3, r7, #16
 80015ca:	4619      	mov	r1, r3
 80015cc:	480f      	ldr	r0, [pc, #60]	; (800160c <MX_TIM3_Init+0xa0>)
 80015ce:	f003 f8dd 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 80015d2:	4603      	mov	r3, r0
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	d001      	beq.n	80015dc <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80015d8:	f7ff fdb8 	bl	800114c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015dc:	2300      	movs	r3, #0
 80015de:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015e0:	2301      	movs	r3, #1
 80015e2:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015e4:	2300      	movs	r3, #0
 80015e6:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80015e8:	2300      	movs	r3, #0
 80015ea:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim3, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80015ec:	463b      	mov	r3, r7
 80015ee:	2204      	movs	r2, #4
 80015f0:	4619      	mov	r1, r3
 80015f2:	4806      	ldr	r0, [pc, #24]	; (800160c <MX_TIM3_Init+0xa0>)
 80015f4:	f002 fa42 	bl	8003a7c <HAL_TIM_IC_ConfigChannel>
 80015f8:	4603      	mov	r3, r0
 80015fa:	2b00      	cmp	r3, #0
 80015fc:	d001      	beq.n	8001602 <MX_TIM3_Init+0x96>
  {
    Error_Handler();
 80015fe:	f7ff fda5 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8001602:	bf00      	nop
 8001604:	3718      	adds	r7, #24
 8001606:	46bd      	mov	sp, r7
 8001608:	bd80      	pop	{r7, pc}
 800160a:	bf00      	nop
 800160c:	2000015c 	.word	0x2000015c
 8001610:	40000400 	.word	0x40000400

08001614 <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b08a      	sub	sp, #40	; 0x28
 8001618:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800161a:	f107 0320 	add.w	r3, r7, #32
 800161e:	2200      	movs	r2, #0
 8001620:	601a      	str	r2, [r3, #0]
 8001622:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001624:	1d3b      	adds	r3, r7, #4
 8001626:	2200      	movs	r2, #0
 8001628:	601a      	str	r2, [r3, #0]
 800162a:	605a      	str	r2, [r3, #4]
 800162c:	609a      	str	r2, [r3, #8]
 800162e:	60da      	str	r2, [r3, #12]
 8001630:	611a      	str	r2, [r3, #16]
 8001632:	615a      	str	r2, [r3, #20]
 8001634:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001636:	4b28      	ldr	r3, [pc, #160]	; (80016d8 <MX_TIM4_Init+0xc4>)
 8001638:	4a28      	ldr	r2, [pc, #160]	; (80016dc <MX_TIM4_Init+0xc8>)
 800163a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 800163c:	4b26      	ldr	r3, [pc, #152]	; (80016d8 <MX_TIM4_Init+0xc4>)
 800163e:	f242 02cf 	movw	r2, #8399	; 0x20cf
 8001642:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001644:	4b24      	ldr	r3, [pc, #144]	; (80016d8 <MX_TIM4_Init+0xc4>)
 8001646:	2200      	movs	r2, #0
 8001648:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 800164a:	4b23      	ldr	r3, [pc, #140]	; (80016d8 <MX_TIM4_Init+0xc4>)
 800164c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001650:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001652:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_TIM4_Init+0xc4>)
 8001654:	2200      	movs	r2, #0
 8001656:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001658:	4b1f      	ldr	r3, [pc, #124]	; (80016d8 <MX_TIM4_Init+0xc4>)
 800165a:	2200      	movs	r2, #0
 800165c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800165e:	481e      	ldr	r0, [pc, #120]	; (80016d8 <MX_TIM4_Init+0xc4>)
 8001660:	f001 feb2 	bl	80033c8 <HAL_TIM_PWM_Init>
 8001664:	4603      	mov	r3, r0
 8001666:	2b00      	cmp	r3, #0
 8001668:	d001      	beq.n	800166e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800166a:	f7ff fd6f 	bl	800114c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800166e:	2300      	movs	r3, #0
 8001670:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001672:	2300      	movs	r3, #0
 8001674:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001676:	f107 0320 	add.w	r3, r7, #32
 800167a:	4619      	mov	r1, r3
 800167c:	4816      	ldr	r0, [pc, #88]	; (80016d8 <MX_TIM4_Init+0xc4>)
 800167e:	f003 f885 	bl	800478c <HAL_TIMEx_MasterConfigSynchronization>
 8001682:	4603      	mov	r3, r0
 8001684:	2b00      	cmp	r3, #0
 8001686:	d001      	beq.n	800168c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001688:	f7ff fd60 	bl	800114c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800168c:	2360      	movs	r3, #96	; 0x60
 800168e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001690:	2300      	movs	r3, #0
 8001692:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001694:	2300      	movs	r3, #0
 8001696:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001698:	2300      	movs	r3, #0
 800169a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800169c:	1d3b      	adds	r3, r7, #4
 800169e:	2200      	movs	r2, #0
 80016a0:	4619      	mov	r1, r3
 80016a2:	480d      	ldr	r0, [pc, #52]	; (80016d8 <MX_TIM4_Init+0xc4>)
 80016a4:	f002 fa86 	bl	8003bb4 <HAL_TIM_PWM_ConfigChannel>
 80016a8:	4603      	mov	r3, r0
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d001      	beq.n	80016b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80016ae:	f7ff fd4d 	bl	800114c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80016b2:	1d3b      	adds	r3, r7, #4
 80016b4:	2208      	movs	r2, #8
 80016b6:	4619      	mov	r1, r3
 80016b8:	4807      	ldr	r0, [pc, #28]	; (80016d8 <MX_TIM4_Init+0xc4>)
 80016ba:	f002 fa7b 	bl	8003bb4 <HAL_TIM_PWM_ConfigChannel>
 80016be:	4603      	mov	r3, r0
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d001      	beq.n	80016c8 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 80016c4:	f7ff fd42 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <MX_TIM4_Init+0xc4>)
 80016ca:	f000 f907 	bl	80018dc <HAL_TIM_MspPostInit>

}
 80016ce:	bf00      	nop
 80016d0:	3728      	adds	r7, #40	; 0x28
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	200001a4 	.word	0x200001a4
 80016dc:	40000800 	.word	0x40000800

080016e0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b08a      	sub	sp, #40	; 0x28
 80016e4:	af00      	add	r7, sp, #0
 80016e6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e8:	f107 0314 	add.w	r3, r7, #20
 80016ec:	2200      	movs	r2, #0
 80016ee:	601a      	str	r2, [r3, #0]
 80016f0:	605a      	str	r2, [r3, #4]
 80016f2:	609a      	str	r2, [r3, #8]
 80016f4:	60da      	str	r2, [r3, #12]
 80016f6:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	4a1d      	ldr	r2, [pc, #116]	; (8001774 <HAL_TIM_Base_MspInit+0x94>)
 80016fe:	4293      	cmp	r3, r2
 8001700:	d134      	bne.n	800176c <HAL_TIM_Base_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001702:	2300      	movs	r3, #0
 8001704:	613b      	str	r3, [r7, #16]
 8001706:	4b1c      	ldr	r3, [pc, #112]	; (8001778 <HAL_TIM_Base_MspInit+0x98>)
 8001708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800170a:	4a1b      	ldr	r2, [pc, #108]	; (8001778 <HAL_TIM_Base_MspInit+0x98>)
 800170c:	f043 0301 	orr.w	r3, r3, #1
 8001710:	6453      	str	r3, [r2, #68]	; 0x44
 8001712:	4b19      	ldr	r3, [pc, #100]	; (8001778 <HAL_TIM_Base_MspInit+0x98>)
 8001714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001716:	f003 0301 	and.w	r3, r3, #1
 800171a:	613b      	str	r3, [r7, #16]
 800171c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800171e:	2300      	movs	r3, #0
 8001720:	60fb      	str	r3, [r7, #12]
 8001722:	4b15      	ldr	r3, [pc, #84]	; (8001778 <HAL_TIM_Base_MspInit+0x98>)
 8001724:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001726:	4a14      	ldr	r2, [pc, #80]	; (8001778 <HAL_TIM_Base_MspInit+0x98>)
 8001728:	f043 0301 	orr.w	r3, r3, #1
 800172c:	6313      	str	r3, [r2, #48]	; 0x30
 800172e:	4b12      	ldr	r3, [pc, #72]	; (8001778 <HAL_TIM_Base_MspInit+0x98>)
 8001730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001732:	f003 0301 	and.w	r3, r3, #1
 8001736:	60fb      	str	r3, [r7, #12]
 8001738:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EchoR_Pin;
 800173a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800173e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001740:	2302      	movs	r3, #2
 8001742:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001744:	2300      	movs	r3, #0
 8001746:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001748:	2300      	movs	r3, #0
 800174a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800174c:	2301      	movs	r3, #1
 800174e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EchoR_GPIO_Port, &GPIO_InitStruct);
 8001750:	f107 0314 	add.w	r3, r7, #20
 8001754:	4619      	mov	r1, r3
 8001756:	4809      	ldr	r0, [pc, #36]	; (800177c <HAL_TIM_Base_MspInit+0x9c>)
 8001758:	f000 ff56 	bl	8002608 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 0, 0);
 800175c:	2200      	movs	r2, #0
 800175e:	2100      	movs	r1, #0
 8001760:	201b      	movs	r0, #27
 8001762:	f000 fb9e 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001766:	201b      	movs	r0, #27
 8001768:	f000 fbb7 	bl	8001eda <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800176c:	bf00      	nop
 800176e:	3728      	adds	r7, #40	; 0x28
 8001770:	46bd      	mov	sp, r7
 8001772:	bd80      	pop	{r7, pc}
 8001774:	40010000 	.word	0x40010000
 8001778:	40023800 	.word	0x40023800
 800177c:	40020000 	.word	0x40020000

08001780 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b08c      	sub	sp, #48	; 0x30
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001788:	f107 031c 	add.w	r3, r7, #28
 800178c:	2200      	movs	r2, #0
 800178e:	601a      	str	r2, [r3, #0]
 8001790:	605a      	str	r2, [r3, #4]
 8001792:	609a      	str	r2, [r3, #8]
 8001794:	60da      	str	r2, [r3, #12]
 8001796:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	681b      	ldr	r3, [r3, #0]
 800179c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80017a0:	d134      	bne.n	800180c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	61bb      	str	r3, [r7, #24]
 80017a6:	4b38      	ldr	r3, [pc, #224]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 80017a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017aa:	4a37      	ldr	r2, [pc, #220]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 80017ac:	f043 0301 	orr.w	r3, r3, #1
 80017b0:	6413      	str	r3, [r2, #64]	; 0x40
 80017b2:	4b35      	ldr	r3, [pc, #212]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 80017b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017b6:	f003 0301 	and.w	r3, r3, #1
 80017ba:	61bb      	str	r3, [r7, #24]
 80017bc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017be:	2300      	movs	r3, #0
 80017c0:	617b      	str	r3, [r7, #20]
 80017c2:	4b31      	ldr	r3, [pc, #196]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 80017c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c6:	4a30      	ldr	r2, [pc, #192]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 80017c8:	f043 0301 	orr.w	r3, r3, #1
 80017cc:	6313      	str	r3, [r2, #48]	; 0x30
 80017ce:	4b2e      	ldr	r3, [pc, #184]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	f003 0301 	and.w	r3, r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
 80017d8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = EchoL_Pin;
 80017da:	2320      	movs	r3, #32
 80017dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017de:	2302      	movs	r3, #2
 80017e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017e2:	2300      	movs	r3, #0
 80017e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017e6:	2300      	movs	r3, #0
 80017e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80017ea:	2301      	movs	r3, #1
 80017ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EchoL_GPIO_Port, &GPIO_InitStruct);
 80017ee:	f107 031c 	add.w	r3, r7, #28
 80017f2:	4619      	mov	r1, r3
 80017f4:	4825      	ldr	r0, [pc, #148]	; (800188c <HAL_TIM_IC_MspInit+0x10c>)
 80017f6:	f000 ff07 	bl	8002608 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80017fa:	2200      	movs	r2, #0
 80017fc:	2100      	movs	r1, #0
 80017fe:	201c      	movs	r0, #28
 8001800:	f000 fb4f 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001804:	201c      	movs	r0, #28
 8001806:	f000 fb68 	bl	8001eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800180a:	e038      	b.n	800187e <HAL_TIM_IC_MspInit+0xfe>
  else if(tim_icHandle->Instance==TIM3)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a1f      	ldr	r2, [pc, #124]	; (8001890 <HAL_TIM_IC_MspInit+0x110>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d133      	bne.n	800187e <HAL_TIM_IC_MspInit+0xfe>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001816:	2300      	movs	r3, #0
 8001818:	613b      	str	r3, [r7, #16]
 800181a:	4b1b      	ldr	r3, [pc, #108]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 800181c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800181e:	4a1a      	ldr	r2, [pc, #104]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 8001820:	f043 0302 	orr.w	r3, r3, #2
 8001824:	6413      	str	r3, [r2, #64]	; 0x40
 8001826:	4b18      	ldr	r3, [pc, #96]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 8001828:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800182a:	f003 0302 	and.w	r3, r3, #2
 800182e:	613b      	str	r3, [r7, #16]
 8001830:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001832:	2300      	movs	r3, #0
 8001834:	60fb      	str	r3, [r7, #12]
 8001836:	4b14      	ldr	r3, [pc, #80]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 8001838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800183a:	4a13      	ldr	r2, [pc, #76]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 800183c:	f043 0304 	orr.w	r3, r3, #4
 8001840:	6313      	str	r3, [r2, #48]	; 0x30
 8001842:	4b11      	ldr	r3, [pc, #68]	; (8001888 <HAL_TIM_IC_MspInit+0x108>)
 8001844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001846:	f003 0304 	and.w	r3, r3, #4
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EchoC_Pin;
 800184e:	2380      	movs	r3, #128	; 0x80
 8001850:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001852:	2302      	movs	r3, #2
 8001854:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001856:	2300      	movs	r3, #0
 8001858:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800185a:	2300      	movs	r3, #0
 800185c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800185e:	2302      	movs	r3, #2
 8001860:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EchoC_GPIO_Port, &GPIO_InitStruct);
 8001862:	f107 031c 	add.w	r3, r7, #28
 8001866:	4619      	mov	r1, r3
 8001868:	480a      	ldr	r0, [pc, #40]	; (8001894 <HAL_TIM_IC_MspInit+0x114>)
 800186a:	f000 fecd 	bl	8002608 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800186e:	2200      	movs	r2, #0
 8001870:	2100      	movs	r1, #0
 8001872:	201d      	movs	r0, #29
 8001874:	f000 fb15 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8001878:	201d      	movs	r0, #29
 800187a:	f000 fb2e 	bl	8001eda <HAL_NVIC_EnableIRQ>
}
 800187e:	bf00      	nop
 8001880:	3730      	adds	r7, #48	; 0x30
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	40023800 	.word	0x40023800
 800188c:	40020000 	.word	0x40020000
 8001890:	40000400 	.word	0x40000400
 8001894:	40020800 	.word	0x40020800

08001898 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 8001898:	b480      	push	{r7}
 800189a:	b085      	sub	sp, #20
 800189c:	af00      	add	r7, sp, #0
 800189e:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a0b      	ldr	r2, [pc, #44]	; (80018d4 <HAL_TIM_PWM_MspInit+0x3c>)
 80018a6:	4293      	cmp	r3, r2
 80018a8:	d10d      	bne.n	80018c6 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	4b0a      	ldr	r3, [pc, #40]	; (80018d8 <HAL_TIM_PWM_MspInit+0x40>)
 80018b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018b2:	4a09      	ldr	r2, [pc, #36]	; (80018d8 <HAL_TIM_PWM_MspInit+0x40>)
 80018b4:	f043 0304 	orr.w	r3, r3, #4
 80018b8:	6413      	str	r3, [r2, #64]	; 0x40
 80018ba:	4b07      	ldr	r3, [pc, #28]	; (80018d8 <HAL_TIM_PWM_MspInit+0x40>)
 80018bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80018be:	f003 0304 	and.w	r3, r3, #4
 80018c2:	60fb      	str	r3, [r7, #12]
 80018c4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80018c6:	bf00      	nop
 80018c8:	3714      	adds	r7, #20
 80018ca:	46bd      	mov	sp, r7
 80018cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018d0:	4770      	bx	lr
 80018d2:	bf00      	nop
 80018d4:	40000800 	.word	0x40000800
 80018d8:	40023800 	.word	0x40023800

080018dc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80018dc:	b580      	push	{r7, lr}
 80018de:	b088      	sub	sp, #32
 80018e0:	af00      	add	r7, sp, #0
 80018e2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e4:	f107 030c 	add.w	r3, r7, #12
 80018e8:	2200      	movs	r2, #0
 80018ea:	601a      	str	r2, [r3, #0]
 80018ec:	605a      	str	r2, [r3, #4]
 80018ee:	609a      	str	r2, [r3, #8]
 80018f0:	60da      	str	r2, [r3, #12]
 80018f2:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	4a12      	ldr	r2, [pc, #72]	; (8001944 <HAL_TIM_MspPostInit+0x68>)
 80018fa:	4293      	cmp	r3, r2
 80018fc:	d11e      	bne.n	800193c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80018fe:	2300      	movs	r3, #0
 8001900:	60bb      	str	r3, [r7, #8]
 8001902:	4b11      	ldr	r3, [pc, #68]	; (8001948 <HAL_TIM_MspPostInit+0x6c>)
 8001904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001906:	4a10      	ldr	r2, [pc, #64]	; (8001948 <HAL_TIM_MspPostInit+0x6c>)
 8001908:	f043 0302 	orr.w	r3, r3, #2
 800190c:	6313      	str	r3, [r2, #48]	; 0x30
 800190e:	4b0e      	ldr	r3, [pc, #56]	; (8001948 <HAL_TIM_MspPostInit+0x6c>)
 8001910:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001912:	f003 0302 	and.w	r3, r3, #2
 8001916:	60bb      	str	r3, [r7, #8]
 8001918:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = ENB_Pin|ENA_Pin;
 800191a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800191e:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001920:	2302      	movs	r3, #2
 8001922:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001928:	2300      	movs	r3, #0
 800192a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800192c:	2302      	movs	r3, #2
 800192e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001930:	f107 030c 	add.w	r3, r7, #12
 8001934:	4619      	mov	r1, r3
 8001936:	4805      	ldr	r0, [pc, #20]	; (800194c <HAL_TIM_MspPostInit+0x70>)
 8001938:	f000 fe66 	bl	8002608 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800193c:	bf00      	nop
 800193e:	3720      	adds	r7, #32
 8001940:	46bd      	mov	sp, r7
 8001942:	bd80      	pop	{r7, pc}
 8001944:	40000800 	.word	0x40000800
 8001948:	40023800 	.word	0x40023800
 800194c:	40020400 	.word	0x40020400

08001950 <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001954:	4b11      	ldr	r3, [pc, #68]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001956:	4a12      	ldr	r2, [pc, #72]	; (80019a0 <MX_USART1_UART_Init+0x50>)
 8001958:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800195a:	4b10      	ldr	r3, [pc, #64]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800195c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001960:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001962:	4b0e      	ldr	r3, [pc, #56]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001964:	2200      	movs	r2, #0
 8001966:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001968:	4b0c      	ldr	r3, [pc, #48]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800196a:	2200      	movs	r2, #0
 800196c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800196e:	4b0b      	ldr	r3, [pc, #44]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001970:	2200      	movs	r2, #0
 8001972:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001974:	4b09      	ldr	r3, [pc, #36]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001976:	220c      	movs	r2, #12
 8001978:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800197a:	4b08      	ldr	r3, [pc, #32]	; (800199c <MX_USART1_UART_Init+0x4c>)
 800197c:	2200      	movs	r2, #0
 800197e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001980:	4b06      	ldr	r3, [pc, #24]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001982:	2200      	movs	r2, #0
 8001984:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001986:	4805      	ldr	r0, [pc, #20]	; (800199c <MX_USART1_UART_Init+0x4c>)
 8001988:	f002 ff82 	bl	8004890 <HAL_UART_Init>
 800198c:	4603      	mov	r3, r0
 800198e:	2b00      	cmp	r3, #0
 8001990:	d001      	beq.n	8001996 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001992:	f7ff fbdb 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	200001ec 	.word	0x200001ec
 80019a0:	40011000 	.word	0x40011000

080019a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80019a8:	4b11      	ldr	r3, [pc, #68]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019aa:	4a12      	ldr	r2, [pc, #72]	; (80019f4 <MX_USART2_UART_Init+0x50>)
 80019ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80019b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80019b6:	4b0e      	ldr	r3, [pc, #56]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019b8:	2200      	movs	r2, #0
 80019ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80019bc:	4b0c      	ldr	r3, [pc, #48]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019be:	2200      	movs	r2, #0
 80019c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80019c2:	4b0b      	ldr	r3, [pc, #44]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019c4:	2200      	movs	r2, #0
 80019c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019ca:	220c      	movs	r2, #12
 80019cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80019ce:	4b08      	ldr	r3, [pc, #32]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80019d4:	4b06      	ldr	r3, [pc, #24]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019d6:	2200      	movs	r2, #0
 80019d8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80019da:	4805      	ldr	r0, [pc, #20]	; (80019f0 <MX_USART2_UART_Init+0x4c>)
 80019dc:	f002 ff58 	bl	8004890 <HAL_UART_Init>
 80019e0:	4603      	mov	r3, r0
 80019e2:	2b00      	cmp	r3, #0
 80019e4:	d001      	beq.n	80019ea <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80019e6:	f7ff fbb1 	bl	800114c <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80019ea:	bf00      	nop
 80019ec:	bd80      	pop	{r7, pc}
 80019ee:	bf00      	nop
 80019f0:	20000234 	.word	0x20000234
 80019f4:	40004400 	.word	0x40004400

080019f8 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a00:	f107 031c 	add.w	r3, r7, #28
 8001a04:	2200      	movs	r2, #0
 8001a06:	601a      	str	r2, [r3, #0]
 8001a08:	605a      	str	r2, [r3, #4]
 8001a0a:	609a      	str	r2, [r3, #8]
 8001a0c:	60da      	str	r2, [r3, #12]
 8001a0e:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	681b      	ldr	r3, [r3, #0]
 8001a14:	4a60      	ldr	r2, [pc, #384]	; (8001b98 <HAL_UART_MspInit+0x1a0>)
 8001a16:	4293      	cmp	r3, r2
 8001a18:	d153      	bne.n	8001ac2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001a1a:	2300      	movs	r3, #0
 8001a1c:	61bb      	str	r3, [r7, #24]
 8001a1e:	4b5f      	ldr	r3, [pc, #380]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a20:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a22:	4a5e      	ldr	r2, [pc, #376]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a24:	f043 0310 	orr.w	r3, r3, #16
 8001a28:	6453      	str	r3, [r2, #68]	; 0x44
 8001a2a:	4b5c      	ldr	r3, [pc, #368]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a2c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a2e:	f003 0310 	and.w	r3, r3, #16
 8001a32:	61bb      	str	r3, [r7, #24]
 8001a34:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a36:	2300      	movs	r3, #0
 8001a38:	617b      	str	r3, [r7, #20]
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a3e:	4a57      	ldr	r2, [pc, #348]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a40:	f043 0301 	orr.w	r3, r3, #1
 8001a44:	6313      	str	r3, [r2, #48]	; 0x30
 8001a46:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a4a:	f003 0301 	and.w	r3, r3, #1
 8001a4e:	617b      	str	r3, [r7, #20]
 8001a50:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a52:	2300      	movs	r3, #0
 8001a54:	613b      	str	r3, [r7, #16]
 8001a56:	4b51      	ldr	r3, [pc, #324]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5a:	4a50      	ldr	r2, [pc, #320]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a5c:	f043 0302 	orr.w	r3, r3, #2
 8001a60:	6313      	str	r3, [r2, #48]	; 0x30
 8001a62:	4b4e      	ldr	r3, [pc, #312]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a66:	f003 0302 	and.w	r3, r3, #2
 8001a6a:	613b      	str	r3, [r7, #16]
 8001a6c:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001a6e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001a72:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a74:	2302      	movs	r3, #2
 8001a76:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a78:	2300      	movs	r3, #0
 8001a7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a7c:	2303      	movs	r3, #3
 8001a7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001a80:	2307      	movs	r3, #7
 8001a82:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a84:	f107 031c 	add.w	r3, r7, #28
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4845      	ldr	r0, [pc, #276]	; (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001a8c:	f000 fdbc 	bl	8002608 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001a90:	2380      	movs	r3, #128	; 0x80
 8001a92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a94:	2302      	movs	r3, #2
 8001a96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a98:	2300      	movs	r3, #0
 8001a9a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a9c:	2303      	movs	r3, #3
 8001a9e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001aa0:	2307      	movs	r3, #7
 8001aa2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001aa4:	f107 031c 	add.w	r3, r7, #28
 8001aa8:	4619      	mov	r1, r3
 8001aaa:	483e      	ldr	r0, [pc, #248]	; (8001ba4 <HAL_UART_MspInit+0x1ac>)
 8001aac:	f000 fdac 	bl	8002608 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	2100      	movs	r1, #0
 8001ab4:	2025      	movs	r0, #37	; 0x25
 8001ab6:	f000 f9f4 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8001aba:	2025      	movs	r0, #37	; 0x25
 8001abc:	f000 fa0d 	bl	8001eda <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 8001ac0:	e066      	b.n	8001b90 <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	681b      	ldr	r3, [r3, #0]
 8001ac6:	4a38      	ldr	r2, [pc, #224]	; (8001ba8 <HAL_UART_MspInit+0x1b0>)
 8001ac8:	4293      	cmp	r3, r2
 8001aca:	d161      	bne.n	8001b90 <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 8001acc:	2300      	movs	r3, #0
 8001ace:	60fb      	str	r3, [r7, #12]
 8001ad0:	4b32      	ldr	r3, [pc, #200]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ad4:	4a31      	ldr	r2, [pc, #196]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001ad6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ada:	6413      	str	r3, [r2, #64]	; 0x40
 8001adc:	4b2f      	ldr	r3, [pc, #188]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001ade:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ae0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001ae4:	60fb      	str	r3, [r7, #12]
 8001ae6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ae8:	2300      	movs	r3, #0
 8001aea:	60bb      	str	r3, [r7, #8]
 8001aec:	4b2b      	ldr	r3, [pc, #172]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001af0:	4a2a      	ldr	r2, [pc, #168]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001af2:	f043 0301 	orr.w	r3, r3, #1
 8001af6:	6313      	str	r3, [r2, #48]	; 0x30
 8001af8:	4b28      	ldr	r3, [pc, #160]	; (8001b9c <HAL_UART_MspInit+0x1a4>)
 8001afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001afc:	f003 0301 	and.w	r3, r3, #1
 8001b00:	60bb      	str	r3, [r7, #8]
 8001b02:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001b04:	230c      	movs	r3, #12
 8001b06:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b08:	2302      	movs	r3, #2
 8001b0a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b10:	2303      	movs	r3, #3
 8001b12:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001b14:	2307      	movs	r3, #7
 8001b16:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b18:	f107 031c 	add.w	r3, r7, #28
 8001b1c:	4619      	mov	r1, r3
 8001b1e:	4820      	ldr	r0, [pc, #128]	; (8001ba0 <HAL_UART_MspInit+0x1a8>)
 8001b20:	f000 fd72 	bl	8002608 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8001b24:	4b21      	ldr	r3, [pc, #132]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b26:	4a22      	ldr	r2, [pc, #136]	; (8001bb0 <HAL_UART_MspInit+0x1b8>)
 8001b28:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8001b2a:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b2c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001b30:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b32:	4b1e      	ldr	r3, [pc, #120]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b38:	4b1c      	ldr	r3, [pc, #112]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b3e:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b40:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b44:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b46:	4b19      	ldr	r3, [pc, #100]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b48:	2200      	movs	r2, #0
 8001b4a:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b4c:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b4e:	2200      	movs	r2, #0
 8001b50:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001b52:	4b16      	ldr	r3, [pc, #88]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b54:	2200      	movs	r2, #0
 8001b56:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b58:	4b14      	ldr	r3, [pc, #80]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b5a:	2200      	movs	r2, #0
 8001b5c:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b5e:	4b13      	ldr	r3, [pc, #76]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b60:	2200      	movs	r2, #0
 8001b62:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001b64:	4811      	ldr	r0, [pc, #68]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b66:	f000 f9d3 	bl	8001f10 <HAL_DMA_Init>
 8001b6a:	4603      	mov	r3, r0
 8001b6c:	2b00      	cmp	r3, #0
 8001b6e:	d001      	beq.n	8001b74 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8001b70:	f7ff faec 	bl	800114c <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	4a0d      	ldr	r2, [pc, #52]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b78:	63da      	str	r2, [r3, #60]	; 0x3c
 8001b7a:	4a0c      	ldr	r2, [pc, #48]	; (8001bac <HAL_UART_MspInit+0x1b4>)
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001b80:	2200      	movs	r2, #0
 8001b82:	2100      	movs	r1, #0
 8001b84:	2026      	movs	r0, #38	; 0x26
 8001b86:	f000 f98c 	bl	8001ea2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001b8a:	2026      	movs	r0, #38	; 0x26
 8001b8c:	f000 f9a5 	bl	8001eda <HAL_NVIC_EnableIRQ>
}
 8001b90:	bf00      	nop
 8001b92:	3730      	adds	r7, #48	; 0x30
 8001b94:	46bd      	mov	sp, r7
 8001b96:	bd80      	pop	{r7, pc}
 8001b98:	40011000 	.word	0x40011000
 8001b9c:	40023800 	.word	0x40023800
 8001ba0:	40020000 	.word	0x40020000
 8001ba4:	40020400 	.word	0x40020400
 8001ba8:	40004400 	.word	0x40004400
 8001bac:	2000027c 	.word	0x2000027c
 8001bb0:	40026088 	.word	0x40026088

08001bb4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bb4:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001bec <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001bb8:	f7ff fc00 	bl	80013bc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bbc:	480c      	ldr	r0, [pc, #48]	; (8001bf0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bbe:	490d      	ldr	r1, [pc, #52]	; (8001bf4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bc0:	4a0d      	ldr	r2, [pc, #52]	; (8001bf8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bc2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bc4:	e002      	b.n	8001bcc <LoopCopyDataInit>

08001bc6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bc6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bc8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bca:	3304      	adds	r3, #4

08001bcc <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bcc:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bce:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bd0:	d3f9      	bcc.n	8001bc6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bd2:	4a0a      	ldr	r2, [pc, #40]	; (8001bfc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bd4:	4c0a      	ldr	r4, [pc, #40]	; (8001c00 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bd6:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bd8:	e001      	b.n	8001bde <LoopFillZerobss>

08001bda <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bda:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bdc:	3204      	adds	r2, #4

08001bde <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bde:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001be0:	d3fb      	bcc.n	8001bda <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001be2:	f004 f817 	bl	8005c14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001be6:	f7ff f9c3 	bl	8000f70 <main>
  bx  lr    
 8001bea:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001bec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bf0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bf4:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bf8:	0800686c 	.word	0x0800686c
  ldr r2, =_sbss
 8001bfc:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001c00:	2000042c 	.word	0x2000042c

08001c04 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001c04:	e7fe      	b.n	8001c04 <ADC_IRQHandler>
	...

08001c08 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001c08:	b580      	push	{r7, lr}
 8001c0a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c0c:	4b0e      	ldr	r3, [pc, #56]	; (8001c48 <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0d      	ldr	r2, [pc, #52]	; (8001c48 <HAL_Init+0x40>)
 8001c12:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c18:	4b0b      	ldr	r3, [pc, #44]	; (8001c48 <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a0a      	ldr	r2, [pc, #40]	; (8001c48 <HAL_Init+0x40>)
 8001c1e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c24:	4b08      	ldr	r3, [pc, #32]	; (8001c48 <HAL_Init+0x40>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4a07      	ldr	r2, [pc, #28]	; (8001c48 <HAL_Init+0x40>)
 8001c2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001c2e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c30:	2003      	movs	r0, #3
 8001c32:	f000 f92b 	bl	8001e8c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c36:	2000      	movs	r0, #0
 8001c38:	f000 f808 	bl	8001c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c3c:	f7ff fa8c 	bl	8001158 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c40:	2300      	movs	r3, #0
}
 8001c42:	4618      	mov	r0, r3
 8001c44:	bd80      	pop	{r7, pc}
 8001c46:	bf00      	nop
 8001c48:	40023c00 	.word	0x40023c00

08001c4c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c4c:	b580      	push	{r7, lr}
 8001c4e:	b082      	sub	sp, #8
 8001c50:	af00      	add	r7, sp, #0
 8001c52:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c54:	4b12      	ldr	r3, [pc, #72]	; (8001ca0 <HAL_InitTick+0x54>)
 8001c56:	681a      	ldr	r2, [r3, #0]
 8001c58:	4b12      	ldr	r3, [pc, #72]	; (8001ca4 <HAL_InitTick+0x58>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	4619      	mov	r1, r3
 8001c5e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001c62:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c66:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	f000 f943 	bl	8001ef6 <HAL_SYSTICK_Config>
 8001c70:	4603      	mov	r3, r0
 8001c72:	2b00      	cmp	r3, #0
 8001c74:	d001      	beq.n	8001c7a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c76:	2301      	movs	r3, #1
 8001c78:	e00e      	b.n	8001c98 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	2b0f      	cmp	r3, #15
 8001c7e:	d80a      	bhi.n	8001c96 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c80:	2200      	movs	r2, #0
 8001c82:	6879      	ldr	r1, [r7, #4]
 8001c84:	f04f 30ff 	mov.w	r0, #4294967295
 8001c88:	f000 f90b 	bl	8001ea2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c8c:	4a06      	ldr	r2, [pc, #24]	; (8001ca8 <HAL_InitTick+0x5c>)
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c92:	2300      	movs	r3, #0
 8001c94:	e000      	b.n	8001c98 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
}
 8001c98:	4618      	mov	r0, r3
 8001c9a:	3708      	adds	r7, #8
 8001c9c:	46bd      	mov	sp, r7
 8001c9e:	bd80      	pop	{r7, pc}
 8001ca0:	20000004 	.word	0x20000004
 8001ca4:	2000000c 	.word	0x2000000c
 8001ca8:	20000008 	.word	0x20000008

08001cac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001cb0:	4b06      	ldr	r3, [pc, #24]	; (8001ccc <HAL_IncTick+0x20>)
 8001cb2:	781b      	ldrb	r3, [r3, #0]
 8001cb4:	461a      	mov	r2, r3
 8001cb6:	4b06      	ldr	r3, [pc, #24]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	4413      	add	r3, r2
 8001cbc:	4a04      	ldr	r2, [pc, #16]	; (8001cd0 <HAL_IncTick+0x24>)
 8001cbe:	6013      	str	r3, [r2, #0]
}
 8001cc0:	bf00      	nop
 8001cc2:	46bd      	mov	sp, r7
 8001cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cc8:	4770      	bx	lr
 8001cca:	bf00      	nop
 8001ccc:	2000000c 	.word	0x2000000c
 8001cd0:	200002dc 	.word	0x200002dc

08001cd4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  return uwTick;
 8001cd8:	4b03      	ldr	r3, [pc, #12]	; (8001ce8 <HAL_GetTick+0x14>)
 8001cda:	681b      	ldr	r3, [r3, #0]
}
 8001cdc:	4618      	mov	r0, r3
 8001cde:	46bd      	mov	sp, r7
 8001ce0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce4:	4770      	bx	lr
 8001ce6:	bf00      	nop
 8001ce8:	200002dc 	.word	0x200002dc

08001cec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001cec:	b480      	push	{r7}
 8001cee:	b085      	sub	sp, #20
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	f003 0307 	and.w	r3, r3, #7
 8001cfa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001cfc:	4b0c      	ldr	r3, [pc, #48]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d02:	68ba      	ldr	r2, [r7, #8]
 8001d04:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001d08:	4013      	ands	r3, r2
 8001d0a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d0c:	68fb      	ldr	r3, [r7, #12]
 8001d0e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d10:	68bb      	ldr	r3, [r7, #8]
 8001d12:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d14:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001d18:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001d1c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d1e:	4a04      	ldr	r2, [pc, #16]	; (8001d30 <__NVIC_SetPriorityGrouping+0x44>)
 8001d20:	68bb      	ldr	r3, [r7, #8]
 8001d22:	60d3      	str	r3, [r2, #12]
}
 8001d24:	bf00      	nop
 8001d26:	3714      	adds	r7, #20
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d2e:	4770      	bx	lr
 8001d30:	e000ed00 	.word	0xe000ed00

08001d34 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d38:	4b04      	ldr	r3, [pc, #16]	; (8001d4c <__NVIC_GetPriorityGrouping+0x18>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	0a1b      	lsrs	r3, r3, #8
 8001d3e:	f003 0307 	and.w	r3, r3, #7
}
 8001d42:	4618      	mov	r0, r3
 8001d44:	46bd      	mov	sp, r7
 8001d46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d4a:	4770      	bx	lr
 8001d4c:	e000ed00 	.word	0xe000ed00

08001d50 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b480      	push	{r7}
 8001d52:	b083      	sub	sp, #12
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	2b00      	cmp	r3, #0
 8001d60:	db0b      	blt.n	8001d7a <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d62:	79fb      	ldrb	r3, [r7, #7]
 8001d64:	f003 021f 	and.w	r2, r3, #31
 8001d68:	4907      	ldr	r1, [pc, #28]	; (8001d88 <__NVIC_EnableIRQ+0x38>)
 8001d6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d6e:	095b      	lsrs	r3, r3, #5
 8001d70:	2001      	movs	r0, #1
 8001d72:	fa00 f202 	lsl.w	r2, r0, r2
 8001d76:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001d7a:	bf00      	nop
 8001d7c:	370c      	adds	r7, #12
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d84:	4770      	bx	lr
 8001d86:	bf00      	nop
 8001d88:	e000e100 	.word	0xe000e100

08001d8c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	6039      	str	r1, [r7, #0]
 8001d96:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	db0a      	blt.n	8001db6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001da0:	683b      	ldr	r3, [r7, #0]
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	490c      	ldr	r1, [pc, #48]	; (8001dd8 <__NVIC_SetPriority+0x4c>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	0112      	lsls	r2, r2, #4
 8001dac:	b2d2      	uxtb	r2, r2
 8001dae:	440b      	add	r3, r1
 8001db0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001db4:	e00a      	b.n	8001dcc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001db6:	683b      	ldr	r3, [r7, #0]
 8001db8:	b2da      	uxtb	r2, r3
 8001dba:	4908      	ldr	r1, [pc, #32]	; (8001ddc <__NVIC_SetPriority+0x50>)
 8001dbc:	79fb      	ldrb	r3, [r7, #7]
 8001dbe:	f003 030f 	and.w	r3, r3, #15
 8001dc2:	3b04      	subs	r3, #4
 8001dc4:	0112      	lsls	r2, r2, #4
 8001dc6:	b2d2      	uxtb	r2, r2
 8001dc8:	440b      	add	r3, r1
 8001dca:	761a      	strb	r2, [r3, #24]
}
 8001dcc:	bf00      	nop
 8001dce:	370c      	adds	r7, #12
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dd6:	4770      	bx	lr
 8001dd8:	e000e100 	.word	0xe000e100
 8001ddc:	e000ed00 	.word	0xe000ed00

08001de0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001de0:	b480      	push	{r7}
 8001de2:	b089      	sub	sp, #36	; 0x24
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	60f8      	str	r0, [r7, #12]
 8001de8:	60b9      	str	r1, [r7, #8]
 8001dea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	f003 0307 	and.w	r3, r3, #7
 8001df2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001df4:	69fb      	ldr	r3, [r7, #28]
 8001df6:	f1c3 0307 	rsb	r3, r3, #7
 8001dfa:	2b04      	cmp	r3, #4
 8001dfc:	bf28      	it	cs
 8001dfe:	2304      	movcs	r3, #4
 8001e00:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e02:	69fb      	ldr	r3, [r7, #28]
 8001e04:	3304      	adds	r3, #4
 8001e06:	2b06      	cmp	r3, #6
 8001e08:	d902      	bls.n	8001e10 <NVIC_EncodePriority+0x30>
 8001e0a:	69fb      	ldr	r3, [r7, #28]
 8001e0c:	3b03      	subs	r3, #3
 8001e0e:	e000      	b.n	8001e12 <NVIC_EncodePriority+0x32>
 8001e10:	2300      	movs	r3, #0
 8001e12:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e14:	f04f 32ff 	mov.w	r2, #4294967295
 8001e18:	69bb      	ldr	r3, [r7, #24]
 8001e1a:	fa02 f303 	lsl.w	r3, r2, r3
 8001e1e:	43da      	mvns	r2, r3
 8001e20:	68bb      	ldr	r3, [r7, #8]
 8001e22:	401a      	ands	r2, r3
 8001e24:	697b      	ldr	r3, [r7, #20]
 8001e26:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e28:	f04f 31ff 	mov.w	r1, #4294967295
 8001e2c:	697b      	ldr	r3, [r7, #20]
 8001e2e:	fa01 f303 	lsl.w	r3, r1, r3
 8001e32:	43d9      	mvns	r1, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e38:	4313      	orrs	r3, r2
         );
}
 8001e3a:	4618      	mov	r0, r3
 8001e3c:	3724      	adds	r7, #36	; 0x24
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e44:	4770      	bx	lr
	...

08001e48 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b082      	sub	sp, #8
 8001e4c:	af00      	add	r7, sp, #0
 8001e4e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3b01      	subs	r3, #1
 8001e54:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001e58:	d301      	bcc.n	8001e5e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	e00f      	b.n	8001e7e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e5e:	4a0a      	ldr	r2, [pc, #40]	; (8001e88 <SysTick_Config+0x40>)
 8001e60:	687b      	ldr	r3, [r7, #4]
 8001e62:	3b01      	subs	r3, #1
 8001e64:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001e66:	210f      	movs	r1, #15
 8001e68:	f04f 30ff 	mov.w	r0, #4294967295
 8001e6c:	f7ff ff8e 	bl	8001d8c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001e70:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <SysTick_Config+0x40>)
 8001e72:	2200      	movs	r2, #0
 8001e74:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001e76:	4b04      	ldr	r3, [pc, #16]	; (8001e88 <SysTick_Config+0x40>)
 8001e78:	2207      	movs	r2, #7
 8001e7a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001e7c:	2300      	movs	r3, #0
}
 8001e7e:	4618      	mov	r0, r3
 8001e80:	3708      	adds	r7, #8
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	e000e010 	.word	0xe000e010

08001e8c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	b082      	sub	sp, #8
 8001e90:	af00      	add	r7, sp, #0
 8001e92:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001e94:	6878      	ldr	r0, [r7, #4]
 8001e96:	f7ff ff29 	bl	8001cec <__NVIC_SetPriorityGrouping>
}
 8001e9a:	bf00      	nop
 8001e9c:	3708      	adds	r7, #8
 8001e9e:	46bd      	mov	sp, r7
 8001ea0:	bd80      	pop	{r7, pc}

08001ea2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ea2:	b580      	push	{r7, lr}
 8001ea4:	b086      	sub	sp, #24
 8001ea6:	af00      	add	r7, sp, #0
 8001ea8:	4603      	mov	r3, r0
 8001eaa:	60b9      	str	r1, [r7, #8]
 8001eac:	607a      	str	r2, [r7, #4]
 8001eae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eb0:	2300      	movs	r3, #0
 8001eb2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001eb4:	f7ff ff3e 	bl	8001d34 <__NVIC_GetPriorityGrouping>
 8001eb8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001eba:	687a      	ldr	r2, [r7, #4]
 8001ebc:	68b9      	ldr	r1, [r7, #8]
 8001ebe:	6978      	ldr	r0, [r7, #20]
 8001ec0:	f7ff ff8e 	bl	8001de0 <NVIC_EncodePriority>
 8001ec4:	4602      	mov	r2, r0
 8001ec6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001eca:	4611      	mov	r1, r2
 8001ecc:	4618      	mov	r0, r3
 8001ece:	f7ff ff5d 	bl	8001d8c <__NVIC_SetPriority>
}
 8001ed2:	bf00      	nop
 8001ed4:	3718      	adds	r7, #24
 8001ed6:	46bd      	mov	sp, r7
 8001ed8:	bd80      	pop	{r7, pc}

08001eda <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001eda:	b580      	push	{r7, lr}
 8001edc:	b082      	sub	sp, #8
 8001ede:	af00      	add	r7, sp, #0
 8001ee0:	4603      	mov	r3, r0
 8001ee2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ee4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee8:	4618      	mov	r0, r3
 8001eea:	f7ff ff31 	bl	8001d50 <__NVIC_EnableIRQ>
}
 8001eee:	bf00      	nop
 8001ef0:	3708      	adds	r7, #8
 8001ef2:	46bd      	mov	sp, r7
 8001ef4:	bd80      	pop	{r7, pc}

08001ef6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ef6:	b580      	push	{r7, lr}
 8001ef8:	b082      	sub	sp, #8
 8001efa:	af00      	add	r7, sp, #0
 8001efc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001efe:	6878      	ldr	r0, [r7, #4]
 8001f00:	f7ff ffa2 	bl	8001e48 <SysTick_Config>
 8001f04:	4603      	mov	r3, r0
}
 8001f06:	4618      	mov	r0, r3
 8001f08:	3708      	adds	r7, #8
 8001f0a:	46bd      	mov	sp, r7
 8001f0c:	bd80      	pop	{r7, pc}
	...

08001f10 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f10:	b580      	push	{r7, lr}
 8001f12:	b086      	sub	sp, #24
 8001f14:	af00      	add	r7, sp, #0
 8001f16:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f18:	2300      	movs	r3, #0
 8001f1a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f1c:	f7ff feda 	bl	8001cd4 <HAL_GetTick>
 8001f20:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	2b00      	cmp	r3, #0
 8001f26:	d101      	bne.n	8001f2c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f28:	2301      	movs	r3, #1
 8001f2a:	e099      	b.n	8002060 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f2c:	687b      	ldr	r3, [r7, #4]
 8001f2e:	2202      	movs	r2, #2
 8001f30:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	2200      	movs	r2, #0
 8001f38:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	681a      	ldr	r2, [r3, #0]
 8001f42:	687b      	ldr	r3, [r7, #4]
 8001f44:	681b      	ldr	r3, [r3, #0]
 8001f46:	f022 0201 	bic.w	r2, r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4c:	e00f      	b.n	8001f6e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4e:	f7ff fec1 	bl	8001cd4 <HAL_GetTick>
 8001f52:	4602      	mov	r2, r0
 8001f54:	693b      	ldr	r3, [r7, #16]
 8001f56:	1ad3      	subs	r3, r2, r3
 8001f58:	2b05      	cmp	r3, #5
 8001f5a:	d908      	bls.n	8001f6e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5c:	687b      	ldr	r3, [r7, #4]
 8001f5e:	2220      	movs	r2, #32
 8001f60:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2203      	movs	r2, #3
 8001f66:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001f6a:	2303      	movs	r3, #3
 8001f6c:	e078      	b.n	8002060 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f6e:	687b      	ldr	r3, [r7, #4]
 8001f70:	681b      	ldr	r3, [r3, #0]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	f003 0301 	and.w	r3, r3, #1
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d1e8      	bne.n	8001f4e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001f84:	697a      	ldr	r2, [r7, #20]
 8001f86:	4b38      	ldr	r3, [pc, #224]	; (8002068 <HAL_DMA_Init+0x158>)
 8001f88:	4013      	ands	r3, r2
 8001f8a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	685a      	ldr	r2, [r3, #4]
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	689b      	ldr	r3, [r3, #8]
 8001f94:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001f9a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	691b      	ldr	r3, [r3, #16]
 8001fa0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fa6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fa8:	687b      	ldr	r3, [r7, #4]
 8001faa:	699b      	ldr	r3, [r3, #24]
 8001fac:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fb2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	6a1b      	ldr	r3, [r3, #32]
 8001fb8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fba:	697a      	ldr	r2, [r7, #20]
 8001fbc:	4313      	orrs	r3, r2
 8001fbe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fc4:	2b04      	cmp	r3, #4
 8001fc6:	d107      	bne.n	8001fd8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd0:	4313      	orrs	r3, r2
 8001fd2:	697a      	ldr	r2, [r7, #20]
 8001fd4:	4313      	orrs	r3, r2
 8001fd6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001fd8:	687b      	ldr	r3, [r7, #4]
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	697a      	ldr	r2, [r7, #20]
 8001fde:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001fe0:	687b      	ldr	r3, [r7, #4]
 8001fe2:	681b      	ldr	r3, [r3, #0]
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001fe8:	697b      	ldr	r3, [r7, #20]
 8001fea:	f023 0307 	bic.w	r3, r3, #7
 8001fee:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ff4:	697a      	ldr	r2, [r7, #20]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ffe:	2b04      	cmp	r3, #4
 8002000:	d117      	bne.n	8002032 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002006:	697a      	ldr	r2, [r7, #20]
 8002008:	4313      	orrs	r3, r2
 800200a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002010:	2b00      	cmp	r3, #0
 8002012:	d00e      	beq.n	8002032 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002014:	6878      	ldr	r0, [r7, #4]
 8002016:	f000 fa7b 	bl	8002510 <DMA_CheckFifoParam>
 800201a:	4603      	mov	r3, r0
 800201c:	2b00      	cmp	r3, #0
 800201e:	d008      	beq.n	8002032 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	2240      	movs	r2, #64	; 0x40
 8002024:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002026:	687b      	ldr	r3, [r7, #4]
 8002028:	2201      	movs	r2, #1
 800202a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800202e:	2301      	movs	r3, #1
 8002030:	e016      	b.n	8002060 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002032:	687b      	ldr	r3, [r7, #4]
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	697a      	ldr	r2, [r7, #20]
 8002038:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800203a:	6878      	ldr	r0, [r7, #4]
 800203c:	f000 fa32 	bl	80024a4 <DMA_CalcBaseAndBitshift>
 8002040:	4603      	mov	r3, r0
 8002042:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002048:	223f      	movs	r2, #63	; 0x3f
 800204a:	409a      	lsls	r2, r3
 800204c:	68fb      	ldr	r3, [r7, #12]
 800204e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002050:	687b      	ldr	r3, [r7, #4]
 8002052:	2200      	movs	r2, #0
 8002054:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	2201      	movs	r2, #1
 800205a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800205e:	2300      	movs	r3, #0
}
 8002060:	4618      	mov	r0, r3
 8002062:	3718      	adds	r7, #24
 8002064:	46bd      	mov	sp, r7
 8002066:	bd80      	pop	{r7, pc}
 8002068:	f010803f 	.word	0xf010803f

0800206c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b084      	sub	sp, #16
 8002070:	af00      	add	r7, sp, #0
 8002072:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002074:	687b      	ldr	r3, [r7, #4]
 8002076:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002078:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800207a:	f7ff fe2b 	bl	8001cd4 <HAL_GetTick>
 800207e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002086:	b2db      	uxtb	r3, r3
 8002088:	2b02      	cmp	r3, #2
 800208a:	d008      	beq.n	800209e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	2280      	movs	r2, #128	; 0x80
 8002090:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	2200      	movs	r2, #0
 8002096:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800209a:	2301      	movs	r3, #1
 800209c:	e052      	b.n	8002144 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681a      	ldr	r2, [r3, #0]
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	681b      	ldr	r3, [r3, #0]
 80020a8:	f022 0216 	bic.w	r2, r2, #22
 80020ac:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	695a      	ldr	r2, [r3, #20]
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80020bc:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d103      	bne.n	80020ce <HAL_DMA_Abort+0x62>
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80020ca:	2b00      	cmp	r3, #0
 80020cc:	d007      	beq.n	80020de <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	681a      	ldr	r2, [r3, #0]
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 0208 	bic.w	r2, r2, #8
 80020dc:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681a      	ldr	r2, [r3, #0]
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	f022 0201 	bic.w	r2, r2, #1
 80020ec:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80020ee:	e013      	b.n	8002118 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80020f0:	f7ff fdf0 	bl	8001cd4 <HAL_GetTick>
 80020f4:	4602      	mov	r2, r0
 80020f6:	68bb      	ldr	r3, [r7, #8]
 80020f8:	1ad3      	subs	r3, r2, r3
 80020fa:	2b05      	cmp	r3, #5
 80020fc:	d90c      	bls.n	8002118 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80020fe:	687b      	ldr	r3, [r7, #4]
 8002100:	2220      	movs	r2, #32
 8002102:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002104:	687b      	ldr	r3, [r7, #4]
 8002106:	2203      	movs	r2, #3
 8002108:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	2200      	movs	r2, #0
 8002110:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8002114:	2303      	movs	r3, #3
 8002116:	e015      	b.n	8002144 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	681b      	ldr	r3, [r3, #0]
 800211c:	681b      	ldr	r3, [r3, #0]
 800211e:	f003 0301 	and.w	r3, r3, #1
 8002122:	2b00      	cmp	r3, #0
 8002124:	d1e4      	bne.n	80020f0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002126:	687b      	ldr	r3, [r7, #4]
 8002128:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800212a:	223f      	movs	r2, #63	; 0x3f
 800212c:	409a      	lsls	r2, r3
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	2201      	movs	r2, #1
 8002136:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	2200      	movs	r2, #0
 800213e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8002142:	2300      	movs	r3, #0
}
 8002144:	4618      	mov	r0, r3
 8002146:	3710      	adds	r7, #16
 8002148:	46bd      	mov	sp, r7
 800214a:	bd80      	pop	{r7, pc}

0800214c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800214c:	b480      	push	{r7}
 800214e:	b083      	sub	sp, #12
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800215a:	b2db      	uxtb	r3, r3
 800215c:	2b02      	cmp	r3, #2
 800215e:	d004      	beq.n	800216a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	2280      	movs	r2, #128	; 0x80
 8002164:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002166:	2301      	movs	r3, #1
 8002168:	e00c      	b.n	8002184 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2205      	movs	r2, #5
 800216e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	681a      	ldr	r2, [r3, #0]
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	f022 0201 	bic.w	r2, r2, #1
 8002180:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002182:	2300      	movs	r3, #0
}
 8002184:	4618      	mov	r0, r3
 8002186:	370c      	adds	r7, #12
 8002188:	46bd      	mov	sp, r7
 800218a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218e:	4770      	bx	lr

08002190 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	b086      	sub	sp, #24
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8002198:	2300      	movs	r3, #0
 800219a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800219c:	4b8e      	ldr	r3, [pc, #568]	; (80023d8 <HAL_DMA_IRQHandler+0x248>)
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	4a8e      	ldr	r2, [pc, #568]	; (80023dc <HAL_DMA_IRQHandler+0x24c>)
 80021a2:	fba2 2303 	umull	r2, r3, r2, r3
 80021a6:	0a9b      	lsrs	r3, r3, #10
 80021a8:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80021ae:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021ba:	2208      	movs	r2, #8
 80021bc:	409a      	lsls	r2, r3
 80021be:	68fb      	ldr	r3, [r7, #12]
 80021c0:	4013      	ands	r3, r2
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d01a      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681b      	ldr	r3, [r3, #0]
 80021cc:	f003 0304 	and.w	r3, r3, #4
 80021d0:	2b00      	cmp	r3, #0
 80021d2:	d013      	beq.n	80021fc <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	681b      	ldr	r3, [r3, #0]
 80021d8:	681a      	ldr	r2, [r3, #0]
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f022 0204 	bic.w	r2, r2, #4
 80021e2:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021e8:	2208      	movs	r2, #8
 80021ea:	409a      	lsls	r2, r3
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021f4:	f043 0201 	orr.w	r2, r3, #1
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002200:	2201      	movs	r2, #1
 8002202:	409a      	lsls	r2, r3
 8002204:	68fb      	ldr	r3, [r7, #12]
 8002206:	4013      	ands	r3, r2
 8002208:	2b00      	cmp	r3, #0
 800220a:	d012      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800220c:	687b      	ldr	r3, [r7, #4]
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	695b      	ldr	r3, [r3, #20]
 8002212:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002216:	2b00      	cmp	r3, #0
 8002218:	d00b      	beq.n	8002232 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800221e:	2201      	movs	r2, #1
 8002220:	409a      	lsls	r2, r3
 8002222:	693b      	ldr	r3, [r7, #16]
 8002224:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800222a:	f043 0202 	orr.w	r2, r3, #2
 800222e:	687b      	ldr	r3, [r7, #4]
 8002230:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002236:	2204      	movs	r2, #4
 8002238:	409a      	lsls	r2, r3
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	4013      	ands	r3, r2
 800223e:	2b00      	cmp	r3, #0
 8002240:	d012      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	681b      	ldr	r3, [r3, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d00b      	beq.n	8002268 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002254:	2204      	movs	r2, #4
 8002256:	409a      	lsls	r2, r3
 8002258:	693b      	ldr	r3, [r7, #16]
 800225a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002260:	f043 0204 	orr.w	r2, r3, #4
 8002264:	687b      	ldr	r3, [r7, #4]
 8002266:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800226c:	2210      	movs	r2, #16
 800226e:	409a      	lsls	r2, r3
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	4013      	ands	r3, r2
 8002274:	2b00      	cmp	r3, #0
 8002276:	d043      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002278:	687b      	ldr	r3, [r7, #4]
 800227a:	681b      	ldr	r3, [r3, #0]
 800227c:	681b      	ldr	r3, [r3, #0]
 800227e:	f003 0308 	and.w	r3, r3, #8
 8002282:	2b00      	cmp	r3, #0
 8002284:	d03c      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800228a:	2210      	movs	r2, #16
 800228c:	409a      	lsls	r2, r3
 800228e:	693b      	ldr	r3, [r7, #16]
 8002290:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d018      	beq.n	80022d2 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80022aa:	2b00      	cmp	r3, #0
 80022ac:	d108      	bne.n	80022c0 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b2:	2b00      	cmp	r3, #0
 80022b4:	d024      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	4798      	blx	r3
 80022be:	e01f      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022c4:	2b00      	cmp	r3, #0
 80022c6:	d01b      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022cc:	6878      	ldr	r0, [r7, #4]
 80022ce:	4798      	blx	r3
 80022d0:	e016      	b.n	8002300 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	681b      	ldr	r3, [r3, #0]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d107      	bne.n	80022f0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022e0:	687b      	ldr	r3, [r7, #4]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	681a      	ldr	r2, [r3, #0]
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f022 0208 	bic.w	r2, r2, #8
 80022ee:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d003      	beq.n	8002300 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022f8:	687b      	ldr	r3, [r7, #4]
 80022fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022fc:	6878      	ldr	r0, [r7, #4]
 80022fe:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002304:	2220      	movs	r2, #32
 8002306:	409a      	lsls	r2, r3
 8002308:	68fb      	ldr	r3, [r7, #12]
 800230a:	4013      	ands	r3, r2
 800230c:	2b00      	cmp	r3, #0
 800230e:	f000 808f 	beq.w	8002430 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	f003 0310 	and.w	r3, r3, #16
 800231c:	2b00      	cmp	r3, #0
 800231e:	f000 8087 	beq.w	8002430 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002326:	2220      	movs	r2, #32
 8002328:	409a      	lsls	r2, r3
 800232a:	693b      	ldr	r3, [r7, #16]
 800232c:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002334:	b2db      	uxtb	r3, r3
 8002336:	2b05      	cmp	r3, #5
 8002338:	d136      	bne.n	80023a8 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	681b      	ldr	r3, [r3, #0]
 800233e:	681a      	ldr	r2, [r3, #0]
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	681b      	ldr	r3, [r3, #0]
 8002344:	f022 0216 	bic.w	r2, r2, #22
 8002348:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	695a      	ldr	r2, [r3, #20]
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002358:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800235e:	2b00      	cmp	r3, #0
 8002360:	d103      	bne.n	800236a <HAL_DMA_IRQHandler+0x1da>
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002366:	2b00      	cmp	r3, #0
 8002368:	d007      	beq.n	800237a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	681a      	ldr	r2, [r3, #0]
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	681b      	ldr	r3, [r3, #0]
 8002374:	f022 0208 	bic.w	r2, r2, #8
 8002378:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800237e:	223f      	movs	r2, #63	; 0x3f
 8002380:	409a      	lsls	r2, r3
 8002382:	693b      	ldr	r3, [r7, #16]
 8002384:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002386:	687b      	ldr	r3, [r7, #4]
 8002388:	2201      	movs	r2, #1
 800238a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800239a:	2b00      	cmp	r3, #0
 800239c:	d07e      	beq.n	800249c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80023a2:	6878      	ldr	r0, [r7, #4]
 80023a4:	4798      	blx	r3
        }
        return;
 80023a6:	e079      	b.n	800249c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023b2:	2b00      	cmp	r3, #0
 80023b4:	d01d      	beq.n	80023f2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	681b      	ldr	r3, [r3, #0]
 80023bc:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d10d      	bne.n	80023e0 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d031      	beq.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023d0:	6878      	ldr	r0, [r7, #4]
 80023d2:	4798      	blx	r3
 80023d4:	e02c      	b.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
 80023d6:	bf00      	nop
 80023d8:	20000004 	.word	0x20000004
 80023dc:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d023      	beq.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023e8:	687b      	ldr	r3, [r7, #4]
 80023ea:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	4798      	blx	r3
 80023f0:	e01e      	b.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	681b      	ldr	r3, [r3, #0]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023fc:	2b00      	cmp	r3, #0
 80023fe:	d10f      	bne.n	8002420 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	681a      	ldr	r2, [r3, #0]
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	f022 0210 	bic.w	r2, r2, #16
 800240e:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	2201      	movs	r2, #1
 8002414:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002418:	687b      	ldr	r3, [r7, #4]
 800241a:	2200      	movs	r2, #0
 800241c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002424:	2b00      	cmp	r3, #0
 8002426:	d003      	beq.n	8002430 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800242c:	6878      	ldr	r0, [r7, #4]
 800242e:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002434:	2b00      	cmp	r3, #0
 8002436:	d032      	beq.n	800249e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800243c:	f003 0301 	and.w	r3, r3, #1
 8002440:	2b00      	cmp	r3, #0
 8002442:	d022      	beq.n	800248a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	2205      	movs	r2, #5
 8002448:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681a      	ldr	r2, [r3, #0]
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f022 0201 	bic.w	r2, r2, #1
 800245a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800245c:	68bb      	ldr	r3, [r7, #8]
 800245e:	3301      	adds	r3, #1
 8002460:	60bb      	str	r3, [r7, #8]
 8002462:	697a      	ldr	r2, [r7, #20]
 8002464:	429a      	cmp	r2, r3
 8002466:	d307      	bcc.n	8002478 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f2      	bne.n	800245c <HAL_DMA_IRQHandler+0x2cc>
 8002476:	e000      	b.n	800247a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8002478:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800247a:	687b      	ldr	r3, [r7, #4]
 800247c:	2201      	movs	r2, #1
 800247e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	2200      	movs	r2, #0
 8002486:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 800248a:	687b      	ldr	r3, [r7, #4]
 800248c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800248e:	2b00      	cmp	r3, #0
 8002490:	d005      	beq.n	800249e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002496:	6878      	ldr	r0, [r7, #4]
 8002498:	4798      	blx	r3
 800249a:	e000      	b.n	800249e <HAL_DMA_IRQHandler+0x30e>
        return;
 800249c:	bf00      	nop
    }
  }
}
 800249e:	3718      	adds	r7, #24
 80024a0:	46bd      	mov	sp, r7
 80024a2:	bd80      	pop	{r7, pc}

080024a4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024a4:	b480      	push	{r7}
 80024a6:	b085      	sub	sp, #20
 80024a8:	af00      	add	r7, sp, #0
 80024aa:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	b2db      	uxtb	r3, r3
 80024b2:	3b10      	subs	r3, #16
 80024b4:	4a14      	ldr	r2, [pc, #80]	; (8002508 <DMA_CalcBaseAndBitshift+0x64>)
 80024b6:	fba2 2303 	umull	r2, r3, r2, r3
 80024ba:	091b      	lsrs	r3, r3, #4
 80024bc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024be:	4a13      	ldr	r2, [pc, #76]	; (800250c <DMA_CalcBaseAndBitshift+0x68>)
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	4413      	add	r3, r2
 80024c4:	781b      	ldrb	r3, [r3, #0]
 80024c6:	461a      	mov	r2, r3
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	2b03      	cmp	r3, #3
 80024d0:	d909      	bls.n	80024e6 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024da:	f023 0303 	bic.w	r3, r3, #3
 80024de:	1d1a      	adds	r2, r3, #4
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	659a      	str	r2, [r3, #88]	; 0x58
 80024e4:	e007      	b.n	80024f6 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80024ee:	f023 0303 	bic.w	r3, r3, #3
 80024f2:	687a      	ldr	r2, [r7, #4]
 80024f4:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 80024fa:	4618      	mov	r0, r3
 80024fc:	3714      	adds	r7, #20
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	aaaaaaab 	.word	0xaaaaaaab
 800250c:	08006820 	.word	0x08006820

08002510 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002510:	b480      	push	{r7}
 8002512:	b085      	sub	sp, #20
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002518:	2300      	movs	r3, #0
 800251a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002520:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	699b      	ldr	r3, [r3, #24]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d11f      	bne.n	800256a <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800252a:	68bb      	ldr	r3, [r7, #8]
 800252c:	2b03      	cmp	r3, #3
 800252e:	d856      	bhi.n	80025de <DMA_CheckFifoParam+0xce>
 8002530:	a201      	add	r2, pc, #4	; (adr r2, 8002538 <DMA_CheckFifoParam+0x28>)
 8002532:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002536:	bf00      	nop
 8002538:	08002549 	.word	0x08002549
 800253c:	0800255b 	.word	0x0800255b
 8002540:	08002549 	.word	0x08002549
 8002544:	080025df 	.word	0x080025df
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800254c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002550:	2b00      	cmp	r3, #0
 8002552:	d046      	beq.n	80025e2 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8002554:	2301      	movs	r3, #1
 8002556:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002558:	e043      	b.n	80025e2 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800255e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8002562:	d140      	bne.n	80025e6 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8002564:	2301      	movs	r3, #1
 8002566:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002568:	e03d      	b.n	80025e6 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	699b      	ldr	r3, [r3, #24]
 800256e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002572:	d121      	bne.n	80025b8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8002574:	68bb      	ldr	r3, [r7, #8]
 8002576:	2b03      	cmp	r3, #3
 8002578:	d837      	bhi.n	80025ea <DMA_CheckFifoParam+0xda>
 800257a:	a201      	add	r2, pc, #4	; (adr r2, 8002580 <DMA_CheckFifoParam+0x70>)
 800257c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002580:	08002591 	.word	0x08002591
 8002584:	08002597 	.word	0x08002597
 8002588:	08002591 	.word	0x08002591
 800258c:	080025a9 	.word	0x080025a9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8002590:	2301      	movs	r3, #1
 8002592:	73fb      	strb	r3, [r7, #15]
      break;
 8002594:	e030      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800259a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800259e:	2b00      	cmp	r3, #0
 80025a0:	d025      	beq.n	80025ee <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025a2:	2301      	movs	r3, #1
 80025a4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a6:	e022      	b.n	80025ee <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025ac:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025b0:	d11f      	bne.n	80025f2 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025b6:	e01c      	b.n	80025f2 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025b8:	68bb      	ldr	r3, [r7, #8]
 80025ba:	2b02      	cmp	r3, #2
 80025bc:	d903      	bls.n	80025c6 <DMA_CheckFifoParam+0xb6>
 80025be:	68bb      	ldr	r3, [r7, #8]
 80025c0:	2b03      	cmp	r3, #3
 80025c2:	d003      	beq.n	80025cc <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025c4:	e018      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025c6:	2301      	movs	r3, #1
 80025c8:	73fb      	strb	r3, [r7, #15]
      break;
 80025ca:	e015      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	d00e      	beq.n	80025f6 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80025d8:	2301      	movs	r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
      break;
 80025dc:	e00b      	b.n	80025f6 <DMA_CheckFifoParam+0xe6>
      break;
 80025de:	bf00      	nop
 80025e0:	e00a      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e2:	bf00      	nop
 80025e4:	e008      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025e6:	bf00      	nop
 80025e8:	e006      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ea:	bf00      	nop
 80025ec:	e004      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025ee:	bf00      	nop
 80025f0:	e002      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;   
 80025f2:	bf00      	nop
 80025f4:	e000      	b.n	80025f8 <DMA_CheckFifoParam+0xe8>
      break;
 80025f6:	bf00      	nop
    }
  } 
  
  return status; 
 80025f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80025fa:	4618      	mov	r0, r3
 80025fc:	3714      	adds	r7, #20
 80025fe:	46bd      	mov	sp, r7
 8002600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002604:	4770      	bx	lr
 8002606:	bf00      	nop

08002608 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002608:	b480      	push	{r7}
 800260a:	b089      	sub	sp, #36	; 0x24
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002612:	2300      	movs	r3, #0
 8002614:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002616:	2300      	movs	r3, #0
 8002618:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800261a:	2300      	movs	r3, #0
 800261c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800261e:	2300      	movs	r3, #0
 8002620:	61fb      	str	r3, [r7, #28]
 8002622:	e159      	b.n	80028d8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002624:	2201      	movs	r2, #1
 8002626:	69fb      	ldr	r3, [r7, #28]
 8002628:	fa02 f303 	lsl.w	r3, r2, r3
 800262c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800262e:	683b      	ldr	r3, [r7, #0]
 8002630:	681b      	ldr	r3, [r3, #0]
 8002632:	697a      	ldr	r2, [r7, #20]
 8002634:	4013      	ands	r3, r2
 8002636:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002638:	693a      	ldr	r2, [r7, #16]
 800263a:	697b      	ldr	r3, [r7, #20]
 800263c:	429a      	cmp	r2, r3
 800263e:	f040 8148 	bne.w	80028d2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002642:	683b      	ldr	r3, [r7, #0]
 8002644:	685b      	ldr	r3, [r3, #4]
 8002646:	f003 0303 	and.w	r3, r3, #3
 800264a:	2b01      	cmp	r3, #1
 800264c:	d005      	beq.n	800265a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800264e:	683b      	ldr	r3, [r7, #0]
 8002650:	685b      	ldr	r3, [r3, #4]
 8002652:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002656:	2b02      	cmp	r3, #2
 8002658:	d130      	bne.n	80026bc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002660:	69fb      	ldr	r3, [r7, #28]
 8002662:	005b      	lsls	r3, r3, #1
 8002664:	2203      	movs	r2, #3
 8002666:	fa02 f303 	lsl.w	r3, r2, r3
 800266a:	43db      	mvns	r3, r3
 800266c:	69ba      	ldr	r2, [r7, #24]
 800266e:	4013      	ands	r3, r2
 8002670:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002672:	683b      	ldr	r3, [r7, #0]
 8002674:	68da      	ldr	r2, [r3, #12]
 8002676:	69fb      	ldr	r3, [r7, #28]
 8002678:	005b      	lsls	r3, r3, #1
 800267a:	fa02 f303 	lsl.w	r3, r2, r3
 800267e:	69ba      	ldr	r2, [r7, #24]
 8002680:	4313      	orrs	r3, r2
 8002682:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	69ba      	ldr	r2, [r7, #24]
 8002688:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002690:	2201      	movs	r2, #1
 8002692:	69fb      	ldr	r3, [r7, #28]
 8002694:	fa02 f303 	lsl.w	r3, r2, r3
 8002698:	43db      	mvns	r3, r3
 800269a:	69ba      	ldr	r2, [r7, #24]
 800269c:	4013      	ands	r3, r2
 800269e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026a0:	683b      	ldr	r3, [r7, #0]
 80026a2:	685b      	ldr	r3, [r3, #4]
 80026a4:	091b      	lsrs	r3, r3, #4
 80026a6:	f003 0201 	and.w	r2, r3, #1
 80026aa:	69fb      	ldr	r3, [r7, #28]
 80026ac:	fa02 f303 	lsl.w	r3, r2, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4313      	orrs	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80026bc:	683b      	ldr	r3, [r7, #0]
 80026be:	685b      	ldr	r3, [r3, #4]
 80026c0:	f003 0303 	and.w	r3, r3, #3
 80026c4:	2b03      	cmp	r3, #3
 80026c6:	d017      	beq.n	80026f8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	68db      	ldr	r3, [r3, #12]
 80026cc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80026ce:	69fb      	ldr	r3, [r7, #28]
 80026d0:	005b      	lsls	r3, r3, #1
 80026d2:	2203      	movs	r2, #3
 80026d4:	fa02 f303 	lsl.w	r3, r2, r3
 80026d8:	43db      	mvns	r3, r3
 80026da:	69ba      	ldr	r2, [r7, #24]
 80026dc:	4013      	ands	r3, r2
 80026de:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80026e0:	683b      	ldr	r3, [r7, #0]
 80026e2:	689a      	ldr	r2, [r3, #8]
 80026e4:	69fb      	ldr	r3, [r7, #28]
 80026e6:	005b      	lsls	r3, r3, #1
 80026e8:	fa02 f303 	lsl.w	r3, r2, r3
 80026ec:	69ba      	ldr	r2, [r7, #24]
 80026ee:	4313      	orrs	r3, r2
 80026f0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80026f8:	683b      	ldr	r3, [r7, #0]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	f003 0303 	and.w	r3, r3, #3
 8002700:	2b02      	cmp	r3, #2
 8002702:	d123      	bne.n	800274c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	08da      	lsrs	r2, r3, #3
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	3208      	adds	r2, #8
 800270c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002710:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002712:	69fb      	ldr	r3, [r7, #28]
 8002714:	f003 0307 	and.w	r3, r3, #7
 8002718:	009b      	lsls	r3, r3, #2
 800271a:	220f      	movs	r2, #15
 800271c:	fa02 f303 	lsl.w	r3, r2, r3
 8002720:	43db      	mvns	r3, r3
 8002722:	69ba      	ldr	r2, [r7, #24]
 8002724:	4013      	ands	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002728:	683b      	ldr	r3, [r7, #0]
 800272a:	691a      	ldr	r2, [r3, #16]
 800272c:	69fb      	ldr	r3, [r7, #28]
 800272e:	f003 0307 	and.w	r3, r3, #7
 8002732:	009b      	lsls	r3, r3, #2
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800273e:	69fb      	ldr	r3, [r7, #28]
 8002740:	08da      	lsrs	r2, r3, #3
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	3208      	adds	r2, #8
 8002746:	69b9      	ldr	r1, [r7, #24]
 8002748:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	005b      	lsls	r3, r3, #1
 8002756:	2203      	movs	r2, #3
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	685b      	ldr	r3, [r3, #4]
 8002768:	f003 0203 	and.w	r2, r3, #3
 800276c:	69fb      	ldr	r3, [r7, #28]
 800276e:	005b      	lsls	r3, r3, #1
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800277a:	687b      	ldr	r3, [r7, #4]
 800277c:	69ba      	ldr	r2, [r7, #24]
 800277e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 80a2 	beq.w	80028d2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800278e:	2300      	movs	r3, #0
 8002790:	60fb      	str	r3, [r7, #12]
 8002792:	4b57      	ldr	r3, [pc, #348]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	4a56      	ldr	r2, [pc, #344]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 8002798:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800279c:	6453      	str	r3, [r2, #68]	; 0x44
 800279e:	4b54      	ldr	r3, [pc, #336]	; (80028f0 <HAL_GPIO_Init+0x2e8>)
 80027a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027a6:	60fb      	str	r3, [r7, #12]
 80027a8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027aa:	4a52      	ldr	r2, [pc, #328]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 80027ac:	69fb      	ldr	r3, [r7, #28]
 80027ae:	089b      	lsrs	r3, r3, #2
 80027b0:	3302      	adds	r3, #2
 80027b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027b6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	f003 0303 	and.w	r3, r3, #3
 80027be:	009b      	lsls	r3, r3, #2
 80027c0:	220f      	movs	r2, #15
 80027c2:	fa02 f303 	lsl.w	r3, r2, r3
 80027c6:	43db      	mvns	r3, r3
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	4013      	ands	r3, r2
 80027cc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	4a49      	ldr	r2, [pc, #292]	; (80028f8 <HAL_GPIO_Init+0x2f0>)
 80027d2:	4293      	cmp	r3, r2
 80027d4:	d019      	beq.n	800280a <HAL_GPIO_Init+0x202>
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	4a48      	ldr	r2, [pc, #288]	; (80028fc <HAL_GPIO_Init+0x2f4>)
 80027da:	4293      	cmp	r3, r2
 80027dc:	d013      	beq.n	8002806 <HAL_GPIO_Init+0x1fe>
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	4a47      	ldr	r2, [pc, #284]	; (8002900 <HAL_GPIO_Init+0x2f8>)
 80027e2:	4293      	cmp	r3, r2
 80027e4:	d00d      	beq.n	8002802 <HAL_GPIO_Init+0x1fa>
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	4a46      	ldr	r2, [pc, #280]	; (8002904 <HAL_GPIO_Init+0x2fc>)
 80027ea:	4293      	cmp	r3, r2
 80027ec:	d007      	beq.n	80027fe <HAL_GPIO_Init+0x1f6>
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	4a45      	ldr	r2, [pc, #276]	; (8002908 <HAL_GPIO_Init+0x300>)
 80027f2:	4293      	cmp	r3, r2
 80027f4:	d101      	bne.n	80027fa <HAL_GPIO_Init+0x1f2>
 80027f6:	2304      	movs	r3, #4
 80027f8:	e008      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fa:	2307      	movs	r3, #7
 80027fc:	e006      	b.n	800280c <HAL_GPIO_Init+0x204>
 80027fe:	2303      	movs	r3, #3
 8002800:	e004      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002802:	2302      	movs	r3, #2
 8002804:	e002      	b.n	800280c <HAL_GPIO_Init+0x204>
 8002806:	2301      	movs	r3, #1
 8002808:	e000      	b.n	800280c <HAL_GPIO_Init+0x204>
 800280a:	2300      	movs	r3, #0
 800280c:	69fa      	ldr	r2, [r7, #28]
 800280e:	f002 0203 	and.w	r2, r2, #3
 8002812:	0092      	lsls	r2, r2, #2
 8002814:	4093      	lsls	r3, r2
 8002816:	69ba      	ldr	r2, [r7, #24]
 8002818:	4313      	orrs	r3, r2
 800281a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800281c:	4935      	ldr	r1, [pc, #212]	; (80028f4 <HAL_GPIO_Init+0x2ec>)
 800281e:	69fb      	ldr	r3, [r7, #28]
 8002820:	089b      	lsrs	r3, r3, #2
 8002822:	3302      	adds	r3, #2
 8002824:	69ba      	ldr	r2, [r7, #24]
 8002826:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800282a:	4b38      	ldr	r3, [pc, #224]	; (800290c <HAL_GPIO_Init+0x304>)
 800282c:	689b      	ldr	r3, [r3, #8]
 800282e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002830:	693b      	ldr	r3, [r7, #16]
 8002832:	43db      	mvns	r3, r3
 8002834:	69ba      	ldr	r2, [r7, #24]
 8002836:	4013      	ands	r3, r2
 8002838:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800283a:	683b      	ldr	r3, [r7, #0]
 800283c:	685b      	ldr	r3, [r3, #4]
 800283e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002842:	2b00      	cmp	r3, #0
 8002844:	d003      	beq.n	800284e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002846:	69ba      	ldr	r2, [r7, #24]
 8002848:	693b      	ldr	r3, [r7, #16]
 800284a:	4313      	orrs	r3, r2
 800284c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800284e:	4a2f      	ldr	r2, [pc, #188]	; (800290c <HAL_GPIO_Init+0x304>)
 8002850:	69bb      	ldr	r3, [r7, #24]
 8002852:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002854:	4b2d      	ldr	r3, [pc, #180]	; (800290c <HAL_GPIO_Init+0x304>)
 8002856:	68db      	ldr	r3, [r3, #12]
 8002858:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	43db      	mvns	r3, r3
 800285e:	69ba      	ldr	r2, [r7, #24]
 8002860:	4013      	ands	r3, r2
 8002862:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800286c:	2b00      	cmp	r3, #0
 800286e:	d003      	beq.n	8002878 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	693b      	ldr	r3, [r7, #16]
 8002874:	4313      	orrs	r3, r2
 8002876:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002878:	4a24      	ldr	r2, [pc, #144]	; (800290c <HAL_GPIO_Init+0x304>)
 800287a:	69bb      	ldr	r3, [r7, #24]
 800287c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800287e:	4b23      	ldr	r3, [pc, #140]	; (800290c <HAL_GPIO_Init+0x304>)
 8002880:	685b      	ldr	r3, [r3, #4]
 8002882:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002884:	693b      	ldr	r3, [r7, #16]
 8002886:	43db      	mvns	r3, r3
 8002888:	69ba      	ldr	r2, [r7, #24]
 800288a:	4013      	ands	r3, r2
 800288c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800288e:	683b      	ldr	r3, [r7, #0]
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002896:	2b00      	cmp	r3, #0
 8002898:	d003      	beq.n	80028a2 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800289a:	69ba      	ldr	r2, [r7, #24]
 800289c:	693b      	ldr	r3, [r7, #16]
 800289e:	4313      	orrs	r3, r2
 80028a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028a2:	4a1a      	ldr	r2, [pc, #104]	; (800290c <HAL_GPIO_Init+0x304>)
 80028a4:	69bb      	ldr	r3, [r7, #24]
 80028a6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028a8:	4b18      	ldr	r3, [pc, #96]	; (800290c <HAL_GPIO_Init+0x304>)
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ae:	693b      	ldr	r3, [r7, #16]
 80028b0:	43db      	mvns	r3, r3
 80028b2:	69ba      	ldr	r2, [r7, #24]
 80028b4:	4013      	ands	r3, r2
 80028b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80028b8:	683b      	ldr	r3, [r7, #0]
 80028ba:	685b      	ldr	r3, [r3, #4]
 80028bc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028c0:	2b00      	cmp	r3, #0
 80028c2:	d003      	beq.n	80028cc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80028c4:	69ba      	ldr	r2, [r7, #24]
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	4313      	orrs	r3, r2
 80028ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028cc:	4a0f      	ldr	r2, [pc, #60]	; (800290c <HAL_GPIO_Init+0x304>)
 80028ce:	69bb      	ldr	r3, [r7, #24]
 80028d0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80028d2:	69fb      	ldr	r3, [r7, #28]
 80028d4:	3301      	adds	r3, #1
 80028d6:	61fb      	str	r3, [r7, #28]
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	2b0f      	cmp	r3, #15
 80028dc:	f67f aea2 	bls.w	8002624 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80028e0:	bf00      	nop
 80028e2:	bf00      	nop
 80028e4:	3724      	adds	r7, #36	; 0x24
 80028e6:	46bd      	mov	sp, r7
 80028e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ec:	4770      	bx	lr
 80028ee:	bf00      	nop
 80028f0:	40023800 	.word	0x40023800
 80028f4:	40013800 	.word	0x40013800
 80028f8:	40020000 	.word	0x40020000
 80028fc:	40020400 	.word	0x40020400
 8002900:	40020800 	.word	0x40020800
 8002904:	40020c00 	.word	0x40020c00
 8002908:	40021000 	.word	0x40021000
 800290c:	40013c00 	.word	0x40013c00

08002910 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002910:	b480      	push	{r7}
 8002912:	b083      	sub	sp, #12
 8002914:	af00      	add	r7, sp, #0
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	807b      	strh	r3, [r7, #2]
 800291c:	4613      	mov	r3, r2
 800291e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002920:	787b      	ldrb	r3, [r7, #1]
 8002922:	2b00      	cmp	r3, #0
 8002924:	d003      	beq.n	800292e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002926:	887a      	ldrh	r2, [r7, #2]
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800292c:	e003      	b.n	8002936 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800292e:	887b      	ldrh	r3, [r7, #2]
 8002930:	041a      	lsls	r2, r3, #16
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	619a      	str	r2, [r3, #24]
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
	...

08002944 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b086      	sub	sp, #24
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2b00      	cmp	r3, #0
 8002950:	d101      	bne.n	8002956 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002952:	2301      	movs	r3, #1
 8002954:	e267      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	681b      	ldr	r3, [r3, #0]
 800295a:	f003 0301 	and.w	r3, r3, #1
 800295e:	2b00      	cmp	r3, #0
 8002960:	d075      	beq.n	8002a4e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002962:	4b88      	ldr	r3, [pc, #544]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002964:	689b      	ldr	r3, [r3, #8]
 8002966:	f003 030c 	and.w	r3, r3, #12
 800296a:	2b04      	cmp	r3, #4
 800296c:	d00c      	beq.n	8002988 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800296e:	4b85      	ldr	r3, [pc, #532]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002970:	689b      	ldr	r3, [r3, #8]
 8002972:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002976:	2b08      	cmp	r3, #8
 8002978:	d112      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800297a:	4b82      	ldr	r3, [pc, #520]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002982:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002986:	d10b      	bne.n	80029a0 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002988:	4b7e      	ldr	r3, [pc, #504]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002990:	2b00      	cmp	r3, #0
 8002992:	d05b      	beq.n	8002a4c <HAL_RCC_OscConfig+0x108>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	685b      	ldr	r3, [r3, #4]
 8002998:	2b00      	cmp	r3, #0
 800299a:	d157      	bne.n	8002a4c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800299c:	2301      	movs	r3, #1
 800299e:	e242      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80029a8:	d106      	bne.n	80029b8 <HAL_RCC_OscConfig+0x74>
 80029aa:	4b76      	ldr	r3, [pc, #472]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	4a75      	ldr	r2, [pc, #468]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029b0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029b4:	6013      	str	r3, [r2, #0]
 80029b6:	e01d      	b.n	80029f4 <HAL_RCC_OscConfig+0xb0>
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80029c0:	d10c      	bne.n	80029dc <HAL_RCC_OscConfig+0x98>
 80029c2:	4b70      	ldr	r3, [pc, #448]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	4a6f      	ldr	r2, [pc, #444]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029c8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80029cc:	6013      	str	r3, [r2, #0]
 80029ce:	4b6d      	ldr	r3, [pc, #436]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a6c      	ldr	r2, [pc, #432]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029d4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80029d8:	6013      	str	r3, [r2, #0]
 80029da:	e00b      	b.n	80029f4 <HAL_RCC_OscConfig+0xb0>
 80029dc:	4b69      	ldr	r3, [pc, #420]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	4a68      	ldr	r2, [pc, #416]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029e2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80029e6:	6013      	str	r3, [r2, #0]
 80029e8:	4b66      	ldr	r3, [pc, #408]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a65      	ldr	r2, [pc, #404]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 80029ee:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80029f2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	2b00      	cmp	r3, #0
 80029fa:	d013      	beq.n	8002a24 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80029fc:	f7ff f96a 	bl	8001cd4 <HAL_GetTick>
 8002a00:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a02:	e008      	b.n	8002a16 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a04:	f7ff f966 	bl	8001cd4 <HAL_GetTick>
 8002a08:	4602      	mov	r2, r0
 8002a0a:	693b      	ldr	r3, [r7, #16]
 8002a0c:	1ad3      	subs	r3, r2, r3
 8002a0e:	2b64      	cmp	r3, #100	; 0x64
 8002a10:	d901      	bls.n	8002a16 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002a12:	2303      	movs	r3, #3
 8002a14:	e207      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002a16:	4b5b      	ldr	r3, [pc, #364]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a1e:	2b00      	cmp	r3, #0
 8002a20:	d0f0      	beq.n	8002a04 <HAL_RCC_OscConfig+0xc0>
 8002a22:	e014      	b.n	8002a4e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002a24:	f7ff f956 	bl	8001cd4 <HAL_GetTick>
 8002a28:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a2a:	e008      	b.n	8002a3e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002a2c:	f7ff f952 	bl	8001cd4 <HAL_GetTick>
 8002a30:	4602      	mov	r2, r0
 8002a32:	693b      	ldr	r3, [r7, #16]
 8002a34:	1ad3      	subs	r3, r2, r3
 8002a36:	2b64      	cmp	r3, #100	; 0x64
 8002a38:	d901      	bls.n	8002a3e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002a3a:	2303      	movs	r3, #3
 8002a3c:	e1f3      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002a3e:	4b51      	ldr	r3, [pc, #324]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a40:	681b      	ldr	r3, [r3, #0]
 8002a42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002a46:	2b00      	cmp	r3, #0
 8002a48:	d1f0      	bne.n	8002a2c <HAL_RCC_OscConfig+0xe8>
 8002a4a:	e000      	b.n	8002a4e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002a4c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	f003 0302 	and.w	r3, r3, #2
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	d063      	beq.n	8002b22 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a5a:	4b4a      	ldr	r3, [pc, #296]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a5c:	689b      	ldr	r3, [r3, #8]
 8002a5e:	f003 030c 	and.w	r3, r3, #12
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	d00b      	beq.n	8002a7e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a66:	4b47      	ldr	r3, [pc, #284]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002a6e:	2b08      	cmp	r3, #8
 8002a70:	d11c      	bne.n	8002aac <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002a72:	4b44      	ldr	r3, [pc, #272]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a74:	685b      	ldr	r3, [r3, #4]
 8002a76:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d116      	bne.n	8002aac <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002a7e:	4b41      	ldr	r3, [pc, #260]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f003 0302 	and.w	r3, r3, #2
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d005      	beq.n	8002a96 <HAL_RCC_OscConfig+0x152>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	68db      	ldr	r3, [r3, #12]
 8002a8e:	2b01      	cmp	r3, #1
 8002a90:	d001      	beq.n	8002a96 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002a92:	2301      	movs	r3, #1
 8002a94:	e1c7      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002a98:	681b      	ldr	r3, [r3, #0]
 8002a9a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002a9e:	687b      	ldr	r3, [r7, #4]
 8002aa0:	691b      	ldr	r3, [r3, #16]
 8002aa2:	00db      	lsls	r3, r3, #3
 8002aa4:	4937      	ldr	r1, [pc, #220]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002aa6:	4313      	orrs	r3, r2
 8002aa8:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002aaa:	e03a      	b.n	8002b22 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	68db      	ldr	r3, [r3, #12]
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d020      	beq.n	8002af6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002ab4:	4b34      	ldr	r3, [pc, #208]	; (8002b88 <HAL_RCC_OscConfig+0x244>)
 8002ab6:	2201      	movs	r2, #1
 8002ab8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002aba:	f7ff f90b 	bl	8001cd4 <HAL_GetTick>
 8002abe:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ac0:	e008      	b.n	8002ad4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002ac2:	f7ff f907 	bl	8001cd4 <HAL_GetTick>
 8002ac6:	4602      	mov	r2, r0
 8002ac8:	693b      	ldr	r3, [r7, #16]
 8002aca:	1ad3      	subs	r3, r2, r3
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d901      	bls.n	8002ad4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002ad0:	2303      	movs	r3, #3
 8002ad2:	e1a8      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002ad4:	4b2b      	ldr	r3, [pc, #172]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f003 0302 	and.w	r3, r3, #2
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d0f0      	beq.n	8002ac2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002ae0:	4b28      	ldr	r3, [pc, #160]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	691b      	ldr	r3, [r3, #16]
 8002aec:	00db      	lsls	r3, r3, #3
 8002aee:	4925      	ldr	r1, [pc, #148]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002af0:	4313      	orrs	r3, r2
 8002af2:	600b      	str	r3, [r1, #0]
 8002af4:	e015      	b.n	8002b22 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002af6:	4b24      	ldr	r3, [pc, #144]	; (8002b88 <HAL_RCC_OscConfig+0x244>)
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002afc:	f7ff f8ea 	bl	8001cd4 <HAL_GetTick>
 8002b00:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b02:	e008      	b.n	8002b16 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002b04:	f7ff f8e6 	bl	8001cd4 <HAL_GetTick>
 8002b08:	4602      	mov	r2, r0
 8002b0a:	693b      	ldr	r3, [r7, #16]
 8002b0c:	1ad3      	subs	r3, r2, r3
 8002b0e:	2b02      	cmp	r3, #2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e187      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002b16:	4b1b      	ldr	r3, [pc, #108]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1f0      	bne.n	8002b04 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	f003 0308 	and.w	r3, r3, #8
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d036      	beq.n	8002b9c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	695b      	ldr	r3, [r3, #20]
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d016      	beq.n	8002b64 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002b36:	4b15      	ldr	r3, [pc, #84]	; (8002b8c <HAL_RCC_OscConfig+0x248>)
 8002b38:	2201      	movs	r2, #1
 8002b3a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b3c:	f7ff f8ca 	bl	8001cd4 <HAL_GetTick>
 8002b40:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b42:	e008      	b.n	8002b56 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b44:	f7ff f8c6 	bl	8001cd4 <HAL_GetTick>
 8002b48:	4602      	mov	r2, r0
 8002b4a:	693b      	ldr	r3, [r7, #16]
 8002b4c:	1ad3      	subs	r3, r2, r3
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d901      	bls.n	8002b56 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002b52:	2303      	movs	r3, #3
 8002b54:	e167      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002b56:	4b0b      	ldr	r3, [pc, #44]	; (8002b84 <HAL_RCC_OscConfig+0x240>)
 8002b58:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b5a:	f003 0302 	and.w	r3, r3, #2
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d0f0      	beq.n	8002b44 <HAL_RCC_OscConfig+0x200>
 8002b62:	e01b      	b.n	8002b9c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002b64:	4b09      	ldr	r3, [pc, #36]	; (8002b8c <HAL_RCC_OscConfig+0x248>)
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b6a:	f7ff f8b3 	bl	8001cd4 <HAL_GetTick>
 8002b6e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b70:	e00e      	b.n	8002b90 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002b72:	f7ff f8af 	bl	8001cd4 <HAL_GetTick>
 8002b76:	4602      	mov	r2, r0
 8002b78:	693b      	ldr	r3, [r7, #16]
 8002b7a:	1ad3      	subs	r3, r2, r3
 8002b7c:	2b02      	cmp	r3, #2
 8002b7e:	d907      	bls.n	8002b90 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002b80:	2303      	movs	r3, #3
 8002b82:	e150      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
 8002b84:	40023800 	.word	0x40023800
 8002b88:	42470000 	.word	0x42470000
 8002b8c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002b90:	4b88      	ldr	r3, [pc, #544]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002b92:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002b94:	f003 0302 	and.w	r3, r3, #2
 8002b98:	2b00      	cmp	r3, #0
 8002b9a:	d1ea      	bne.n	8002b72 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f003 0304 	and.w	r3, r3, #4
 8002ba4:	2b00      	cmp	r3, #0
 8002ba6:	f000 8097 	beq.w	8002cd8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002baa:	2300      	movs	r3, #0
 8002bac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002bae:	4b81      	ldr	r3, [pc, #516]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	d10f      	bne.n	8002bda <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002bba:	2300      	movs	r3, #0
 8002bbc:	60bb      	str	r3, [r7, #8]
 8002bbe:	4b7d      	ldr	r3, [pc, #500]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc2:	4a7c      	ldr	r2, [pc, #496]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bc4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8002bca:	4b7a      	ldr	r3, [pc, #488]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002bd2:	60bb      	str	r3, [r7, #8]
 8002bd4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002bd6:	2301      	movs	r3, #1
 8002bd8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bda:	4b77      	ldr	r3, [pc, #476]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002be2:	2b00      	cmp	r3, #0
 8002be4:	d118      	bne.n	8002c18 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002be6:	4b74      	ldr	r3, [pc, #464]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	4a73      	ldr	r2, [pc, #460]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002bec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002bf0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002bf2:	f7ff f86f 	bl	8001cd4 <HAL_GetTick>
 8002bf6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002bf8:	e008      	b.n	8002c0c <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002bfa:	f7ff f86b 	bl	8001cd4 <HAL_GetTick>
 8002bfe:	4602      	mov	r2, r0
 8002c00:	693b      	ldr	r3, [r7, #16]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	2b02      	cmp	r3, #2
 8002c06:	d901      	bls.n	8002c0c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002c08:	2303      	movs	r3, #3
 8002c0a:	e10c      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002c0c:	4b6a      	ldr	r3, [pc, #424]	; (8002db8 <HAL_RCC_OscConfig+0x474>)
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c14:	2b00      	cmp	r3, #0
 8002c16:	d0f0      	beq.n	8002bfa <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	689b      	ldr	r3, [r3, #8]
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x2ea>
 8002c20:	4b64      	ldr	r3, [pc, #400]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c22:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c24:	4a63      	ldr	r2, [pc, #396]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c26:	f043 0301 	orr.w	r3, r3, #1
 8002c2a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c2c:	e01c      	b.n	8002c68 <HAL_RCC_OscConfig+0x324>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	689b      	ldr	r3, [r3, #8]
 8002c32:	2b05      	cmp	r3, #5
 8002c34:	d10c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x30c>
 8002c36:	4b5f      	ldr	r3, [pc, #380]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	4a5e      	ldr	r2, [pc, #376]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c3c:	f043 0304 	orr.w	r3, r3, #4
 8002c40:	6713      	str	r3, [r2, #112]	; 0x70
 8002c42:	4b5c      	ldr	r3, [pc, #368]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c46:	4a5b      	ldr	r2, [pc, #364]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c48:	f043 0301 	orr.w	r3, r3, #1
 8002c4c:	6713      	str	r3, [r2, #112]	; 0x70
 8002c4e:	e00b      	b.n	8002c68 <HAL_RCC_OscConfig+0x324>
 8002c50:	4b58      	ldr	r3, [pc, #352]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c54:	4a57      	ldr	r2, [pc, #348]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c56:	f023 0301 	bic.w	r3, r3, #1
 8002c5a:	6713      	str	r3, [r2, #112]	; 0x70
 8002c5c:	4b55      	ldr	r3, [pc, #340]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c60:	4a54      	ldr	r2, [pc, #336]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c62:	f023 0304 	bic.w	r3, r3, #4
 8002c66:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	689b      	ldr	r3, [r3, #8]
 8002c6c:	2b00      	cmp	r3, #0
 8002c6e:	d015      	beq.n	8002c9c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002c70:	f7ff f830 	bl	8001cd4 <HAL_GetTick>
 8002c74:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c76:	e00a      	b.n	8002c8e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c78:	f7ff f82c 	bl	8001cd4 <HAL_GetTick>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	693b      	ldr	r3, [r7, #16]
 8002c80:	1ad3      	subs	r3, r2, r3
 8002c82:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c86:	4293      	cmp	r3, r2
 8002c88:	d901      	bls.n	8002c8e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002c8a:	2303      	movs	r3, #3
 8002c8c:	e0cb      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	4b49      	ldr	r3, [pc, #292]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002c90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c92:	f003 0302 	and.w	r3, r3, #2
 8002c96:	2b00      	cmp	r3, #0
 8002c98:	d0ee      	beq.n	8002c78 <HAL_RCC_OscConfig+0x334>
 8002c9a:	e014      	b.n	8002cc6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002c9c:	f7ff f81a 	bl	8001cd4 <HAL_GetTick>
 8002ca0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002ca2:	e00a      	b.n	8002cba <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ca4:	f7ff f816 	bl	8001cd4 <HAL_GetTick>
 8002ca8:	4602      	mov	r2, r0
 8002caa:	693b      	ldr	r3, [r7, #16]
 8002cac:	1ad3      	subs	r3, r2, r3
 8002cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8002cb2:	4293      	cmp	r3, r2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e0b5      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002cba:	4b3e      	ldr	r3, [pc, #248]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1ee      	bne.n	8002ca4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002cc6:	7dfb      	ldrb	r3, [r7, #23]
 8002cc8:	2b01      	cmp	r3, #1
 8002cca:	d105      	bne.n	8002cd8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002ccc:	4b39      	ldr	r3, [pc, #228]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cd0:	4a38      	ldr	r2, [pc, #224]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002cd2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002cd6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	699b      	ldr	r3, [r3, #24]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f000 80a1 	beq.w	8002e24 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002ce2:	4b34      	ldr	r3, [pc, #208]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002ce4:	689b      	ldr	r3, [r3, #8]
 8002ce6:	f003 030c 	and.w	r3, r3, #12
 8002cea:	2b08      	cmp	r3, #8
 8002cec:	d05c      	beq.n	8002da8 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	699b      	ldr	r3, [r3, #24]
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d141      	bne.n	8002d7a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002cf6:	4b31      	ldr	r3, [pc, #196]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002cfc:	f7fe ffea 	bl	8001cd4 <HAL_GetTick>
 8002d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d02:	e008      	b.n	8002d16 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d04:	f7fe ffe6 	bl	8001cd4 <HAL_GetTick>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	693b      	ldr	r3, [r7, #16]
 8002d0c:	1ad3      	subs	r3, r2, r3
 8002d0e:	2b02      	cmp	r3, #2
 8002d10:	d901      	bls.n	8002d16 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002d12:	2303      	movs	r3, #3
 8002d14:	e087      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d16:	4b27      	ldr	r3, [pc, #156]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d1f0      	bne.n	8002d04 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	69da      	ldr	r2, [r3, #28]
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	6a1b      	ldr	r3, [r3, #32]
 8002d2a:	431a      	orrs	r2, r3
 8002d2c:	687b      	ldr	r3, [r7, #4]
 8002d2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d30:	019b      	lsls	r3, r3, #6
 8002d32:	431a      	orrs	r2, r3
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002d38:	085b      	lsrs	r3, r3, #1
 8002d3a:	3b01      	subs	r3, #1
 8002d3c:	041b      	lsls	r3, r3, #16
 8002d3e:	431a      	orrs	r2, r3
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d44:	061b      	lsls	r3, r3, #24
 8002d46:	491b      	ldr	r1, [pc, #108]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d48:	4313      	orrs	r3, r2
 8002d4a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002d4c:	4b1b      	ldr	r3, [pc, #108]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002d4e:	2201      	movs	r2, #1
 8002d50:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d52:	f7fe ffbf 	bl	8001cd4 <HAL_GetTick>
 8002d56:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d58:	e008      	b.n	8002d6c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d5a:	f7fe ffbb 	bl	8001cd4 <HAL_GetTick>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	693b      	ldr	r3, [r7, #16]
 8002d62:	1ad3      	subs	r3, r2, r3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d901      	bls.n	8002d6c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002d68:	2303      	movs	r3, #3
 8002d6a:	e05c      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d6c:	4b11      	ldr	r3, [pc, #68]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d6e:	681b      	ldr	r3, [r3, #0]
 8002d70:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d74:	2b00      	cmp	r3, #0
 8002d76:	d0f0      	beq.n	8002d5a <HAL_RCC_OscConfig+0x416>
 8002d78:	e054      	b.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002d7a:	4b10      	ldr	r3, [pc, #64]	; (8002dbc <HAL_RCC_OscConfig+0x478>)
 8002d7c:	2200      	movs	r2, #0
 8002d7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002d80:	f7fe ffa8 	bl	8001cd4 <HAL_GetTick>
 8002d84:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d86:	e008      	b.n	8002d9a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002d88:	f7fe ffa4 	bl	8001cd4 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	693b      	ldr	r3, [r7, #16]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	2b02      	cmp	r3, #2
 8002d94:	d901      	bls.n	8002d9a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002d96:	2303      	movs	r3, #3
 8002d98:	e045      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002d9a:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <HAL_RCC_OscConfig+0x470>)
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d1f0      	bne.n	8002d88 <HAL_RCC_OscConfig+0x444>
 8002da6:	e03d      	b.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	699b      	ldr	r3, [r3, #24]
 8002dac:	2b01      	cmp	r3, #1
 8002dae:	d107      	bne.n	8002dc0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002db0:	2301      	movs	r3, #1
 8002db2:	e038      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
 8002db4:	40023800 	.word	0x40023800
 8002db8:	40007000 	.word	0x40007000
 8002dbc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002dc0:	4b1b      	ldr	r3, [pc, #108]	; (8002e30 <HAL_RCC_OscConfig+0x4ec>)
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	699b      	ldr	r3, [r3, #24]
 8002dca:	2b01      	cmp	r3, #1
 8002dcc:	d028      	beq.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002dd8:	429a      	cmp	r2, r3
 8002dda:	d121      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002de2:	687b      	ldr	r3, [r7, #4]
 8002de4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002de6:	429a      	cmp	r2, r3
 8002de8:	d11a      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002dea:	68fa      	ldr	r2, [r7, #12]
 8002dec:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002df0:	4013      	ands	r3, r2
 8002df2:	687a      	ldr	r2, [r7, #4]
 8002df4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002df6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d111      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002e06:	085b      	lsrs	r3, r3, #1
 8002e08:	3b01      	subs	r3, #1
 8002e0a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002e0c:	429a      	cmp	r2, r3
 8002e0e:	d107      	bne.n	8002e20 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002e10:	68fb      	ldr	r3, [r7, #12]
 8002e12:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e1a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002e1c:	429a      	cmp	r2, r3
 8002e1e:	d001      	beq.n	8002e24 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002e20:	2301      	movs	r3, #1
 8002e22:	e000      	b.n	8002e26 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002e24:	2300      	movs	r3, #0
}
 8002e26:	4618      	mov	r0, r3
 8002e28:	3718      	adds	r7, #24
 8002e2a:	46bd      	mov	sp, r7
 8002e2c:	bd80      	pop	{r7, pc}
 8002e2e:	bf00      	nop
 8002e30:	40023800 	.word	0x40023800

08002e34 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002e34:	b580      	push	{r7, lr}
 8002e36:	b084      	sub	sp, #16
 8002e38:	af00      	add	r7, sp, #0
 8002e3a:	6078      	str	r0, [r7, #4]
 8002e3c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002e3e:	687b      	ldr	r3, [r7, #4]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	d101      	bne.n	8002e48 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002e44:	2301      	movs	r3, #1
 8002e46:	e0cc      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002e48:	4b68      	ldr	r3, [pc, #416]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	f003 0307 	and.w	r3, r3, #7
 8002e50:	683a      	ldr	r2, [r7, #0]
 8002e52:	429a      	cmp	r2, r3
 8002e54:	d90c      	bls.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002e56:	4b65      	ldr	r3, [pc, #404]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e58:	683a      	ldr	r2, [r7, #0]
 8002e5a:	b2d2      	uxtb	r2, r2
 8002e5c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002e5e:	4b63      	ldr	r3, [pc, #396]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	f003 0307 	and.w	r3, r3, #7
 8002e66:	683a      	ldr	r2, [r7, #0]
 8002e68:	429a      	cmp	r2, r3
 8002e6a:	d001      	beq.n	8002e70 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002e6c:	2301      	movs	r3, #1
 8002e6e:	e0b8      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	681b      	ldr	r3, [r3, #0]
 8002e74:	f003 0302 	and.w	r3, r3, #2
 8002e78:	2b00      	cmp	r3, #0
 8002e7a:	d020      	beq.n	8002ebe <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	f003 0304 	and.w	r3, r3, #4
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d005      	beq.n	8002e94 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002e88:	4b59      	ldr	r3, [pc, #356]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8a:	689b      	ldr	r3, [r3, #8]
 8002e8c:	4a58      	ldr	r2, [pc, #352]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002e8e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002e92:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	681b      	ldr	r3, [r3, #0]
 8002e98:	f003 0308 	and.w	r3, r3, #8
 8002e9c:	2b00      	cmp	r3, #0
 8002e9e:	d005      	beq.n	8002eac <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002ea0:	4b53      	ldr	r3, [pc, #332]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea2:	689b      	ldr	r3, [r3, #8]
 8002ea4:	4a52      	ldr	r2, [pc, #328]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ea6:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002eaa:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002eac:	4b50      	ldr	r3, [pc, #320]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	689b      	ldr	r3, [r3, #8]
 8002eb8:	494d      	ldr	r1, [pc, #308]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002eba:	4313      	orrs	r3, r2
 8002ebc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	681b      	ldr	r3, [r3, #0]
 8002ec2:	f003 0301 	and.w	r3, r3, #1
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d044      	beq.n	8002f54 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	685b      	ldr	r3, [r3, #4]
 8002ece:	2b01      	cmp	r3, #1
 8002ed0:	d107      	bne.n	8002ee2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ed2:	4b47      	ldr	r3, [pc, #284]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ed4:	681b      	ldr	r3, [r3, #0]
 8002ed6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002eda:	2b00      	cmp	r3, #0
 8002edc:	d119      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002ede:	2301      	movs	r3, #1
 8002ee0:	e07f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	685b      	ldr	r3, [r3, #4]
 8002ee6:	2b02      	cmp	r3, #2
 8002ee8:	d003      	beq.n	8002ef2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002eee:	2b03      	cmp	r3, #3
 8002ef0:	d107      	bne.n	8002f02 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002ef2:	4b3f      	ldr	r3, [pc, #252]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d109      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e06f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f02:	4b3b      	ldr	r3, [pc, #236]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f04:	681b      	ldr	r3, [r3, #0]
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d101      	bne.n	8002f12 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002f0e:	2301      	movs	r3, #1
 8002f10:	e067      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002f12:	4b37      	ldr	r3, [pc, #220]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f14:	689b      	ldr	r3, [r3, #8]
 8002f16:	f023 0203 	bic.w	r2, r3, #3
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	4934      	ldr	r1, [pc, #208]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f20:	4313      	orrs	r3, r2
 8002f22:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002f24:	f7fe fed6 	bl	8001cd4 <HAL_GetTick>
 8002f28:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f2a:	e00a      	b.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002f2c:	f7fe fed2 	bl	8001cd4 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	f241 3288 	movw	r2, #5000	; 0x1388
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d901      	bls.n	8002f42 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002f3e:	2303      	movs	r3, #3
 8002f40:	e04f      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002f42:	4b2b      	ldr	r3, [pc, #172]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 020c 	and.w	r2, r3, #12
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	685b      	ldr	r3, [r3, #4]
 8002f4e:	009b      	lsls	r3, r3, #2
 8002f50:	429a      	cmp	r2, r3
 8002f52:	d1eb      	bne.n	8002f2c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002f54:	4b25      	ldr	r3, [pc, #148]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f56:	681b      	ldr	r3, [r3, #0]
 8002f58:	f003 0307 	and.w	r3, r3, #7
 8002f5c:	683a      	ldr	r2, [r7, #0]
 8002f5e:	429a      	cmp	r2, r3
 8002f60:	d20c      	bcs.n	8002f7c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002f62:	4b22      	ldr	r3, [pc, #136]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f64:	683a      	ldr	r2, [r7, #0]
 8002f66:	b2d2      	uxtb	r2, r2
 8002f68:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002f6a:	4b20      	ldr	r3, [pc, #128]	; (8002fec <HAL_RCC_ClockConfig+0x1b8>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	f003 0307 	and.w	r3, r3, #7
 8002f72:	683a      	ldr	r2, [r7, #0]
 8002f74:	429a      	cmp	r2, r3
 8002f76:	d001      	beq.n	8002f7c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002f78:	2301      	movs	r3, #1
 8002f7a:	e032      	b.n	8002fe2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	f003 0304 	and.w	r3, r3, #4
 8002f84:	2b00      	cmp	r3, #0
 8002f86:	d008      	beq.n	8002f9a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002f88:	4b19      	ldr	r3, [pc, #100]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f8a:	689b      	ldr	r3, [r3, #8]
 8002f8c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	68db      	ldr	r3, [r3, #12]
 8002f94:	4916      	ldr	r1, [pc, #88]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002f96:	4313      	orrs	r3, r2
 8002f98:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f003 0308 	and.w	r3, r3, #8
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d009      	beq.n	8002fba <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002fa6:	4b12      	ldr	r3, [pc, #72]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002fae:	687b      	ldr	r3, [r7, #4]
 8002fb0:	691b      	ldr	r3, [r3, #16]
 8002fb2:	00db      	lsls	r3, r3, #3
 8002fb4:	490e      	ldr	r1, [pc, #56]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fb6:	4313      	orrs	r3, r2
 8002fb8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002fba:	f000 f821 	bl	8003000 <HAL_RCC_GetSysClockFreq>
 8002fbe:	4602      	mov	r2, r0
 8002fc0:	4b0b      	ldr	r3, [pc, #44]	; (8002ff0 <HAL_RCC_ClockConfig+0x1bc>)
 8002fc2:	689b      	ldr	r3, [r3, #8]
 8002fc4:	091b      	lsrs	r3, r3, #4
 8002fc6:	f003 030f 	and.w	r3, r3, #15
 8002fca:	490a      	ldr	r1, [pc, #40]	; (8002ff4 <HAL_RCC_ClockConfig+0x1c0>)
 8002fcc:	5ccb      	ldrb	r3, [r1, r3]
 8002fce:	fa22 f303 	lsr.w	r3, r2, r3
 8002fd2:	4a09      	ldr	r2, [pc, #36]	; (8002ff8 <HAL_RCC_ClockConfig+0x1c4>)
 8002fd4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002fd6:	4b09      	ldr	r3, [pc, #36]	; (8002ffc <HAL_RCC_ClockConfig+0x1c8>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fe fe36 	bl	8001c4c <HAL_InitTick>

  return HAL_OK;
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3710      	adds	r7, #16
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	40023c00 	.word	0x40023c00
 8002ff0:	40023800 	.word	0x40023800
 8002ff4:	08006808 	.word	0x08006808
 8002ff8:	20000004 	.word	0x20000004
 8002ffc:	20000008 	.word	0x20000008

08003000 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003000:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003004:	b094      	sub	sp, #80	; 0x50
 8003006:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003008:	2300      	movs	r3, #0
 800300a:	647b      	str	r3, [r7, #68]	; 0x44
 800300c:	2300      	movs	r3, #0
 800300e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003010:	2300      	movs	r3, #0
 8003012:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003014:	2300      	movs	r3, #0
 8003016:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003018:	4b79      	ldr	r3, [pc, #484]	; (8003200 <HAL_RCC_GetSysClockFreq+0x200>)
 800301a:	689b      	ldr	r3, [r3, #8]
 800301c:	f003 030c 	and.w	r3, r3, #12
 8003020:	2b08      	cmp	r3, #8
 8003022:	d00d      	beq.n	8003040 <HAL_RCC_GetSysClockFreq+0x40>
 8003024:	2b08      	cmp	r3, #8
 8003026:	f200 80e1 	bhi.w	80031ec <HAL_RCC_GetSysClockFreq+0x1ec>
 800302a:	2b00      	cmp	r3, #0
 800302c:	d002      	beq.n	8003034 <HAL_RCC_GetSysClockFreq+0x34>
 800302e:	2b04      	cmp	r3, #4
 8003030:	d003      	beq.n	800303a <HAL_RCC_GetSysClockFreq+0x3a>
 8003032:	e0db      	b.n	80031ec <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003034:	4b73      	ldr	r3, [pc, #460]	; (8003204 <HAL_RCC_GetSysClockFreq+0x204>)
 8003036:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8003038:	e0db      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800303a:	4b73      	ldr	r3, [pc, #460]	; (8003208 <HAL_RCC_GetSysClockFreq+0x208>)
 800303c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800303e:	e0d8      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003040:	4b6f      	ldr	r3, [pc, #444]	; (8003200 <HAL_RCC_GetSysClockFreq+0x200>)
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003048:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800304a:	4b6d      	ldr	r3, [pc, #436]	; (8003200 <HAL_RCC_GetSysClockFreq+0x200>)
 800304c:	685b      	ldr	r3, [r3, #4]
 800304e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003052:	2b00      	cmp	r3, #0
 8003054:	d063      	beq.n	800311e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003056:	4b6a      	ldr	r3, [pc, #424]	; (8003200 <HAL_RCC_GetSysClockFreq+0x200>)
 8003058:	685b      	ldr	r3, [r3, #4]
 800305a:	099b      	lsrs	r3, r3, #6
 800305c:	2200      	movs	r2, #0
 800305e:	63bb      	str	r3, [r7, #56]	; 0x38
 8003060:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003062:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003064:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003068:	633b      	str	r3, [r7, #48]	; 0x30
 800306a:	2300      	movs	r3, #0
 800306c:	637b      	str	r3, [r7, #52]	; 0x34
 800306e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003072:	4622      	mov	r2, r4
 8003074:	462b      	mov	r3, r5
 8003076:	f04f 0000 	mov.w	r0, #0
 800307a:	f04f 0100 	mov.w	r1, #0
 800307e:	0159      	lsls	r1, r3, #5
 8003080:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003084:	0150      	lsls	r0, r2, #5
 8003086:	4602      	mov	r2, r0
 8003088:	460b      	mov	r3, r1
 800308a:	4621      	mov	r1, r4
 800308c:	1a51      	subs	r1, r2, r1
 800308e:	6139      	str	r1, [r7, #16]
 8003090:	4629      	mov	r1, r5
 8003092:	eb63 0301 	sbc.w	r3, r3, r1
 8003096:	617b      	str	r3, [r7, #20]
 8003098:	f04f 0200 	mov.w	r2, #0
 800309c:	f04f 0300 	mov.w	r3, #0
 80030a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80030a4:	4659      	mov	r1, fp
 80030a6:	018b      	lsls	r3, r1, #6
 80030a8:	4651      	mov	r1, sl
 80030aa:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80030ae:	4651      	mov	r1, sl
 80030b0:	018a      	lsls	r2, r1, #6
 80030b2:	4651      	mov	r1, sl
 80030b4:	ebb2 0801 	subs.w	r8, r2, r1
 80030b8:	4659      	mov	r1, fp
 80030ba:	eb63 0901 	sbc.w	r9, r3, r1
 80030be:	f04f 0200 	mov.w	r2, #0
 80030c2:	f04f 0300 	mov.w	r3, #0
 80030c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80030ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80030ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80030d2:	4690      	mov	r8, r2
 80030d4:	4699      	mov	r9, r3
 80030d6:	4623      	mov	r3, r4
 80030d8:	eb18 0303 	adds.w	r3, r8, r3
 80030dc:	60bb      	str	r3, [r7, #8]
 80030de:	462b      	mov	r3, r5
 80030e0:	eb49 0303 	adc.w	r3, r9, r3
 80030e4:	60fb      	str	r3, [r7, #12]
 80030e6:	f04f 0200 	mov.w	r2, #0
 80030ea:	f04f 0300 	mov.w	r3, #0
 80030ee:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80030f2:	4629      	mov	r1, r5
 80030f4:	024b      	lsls	r3, r1, #9
 80030f6:	4621      	mov	r1, r4
 80030f8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80030fc:	4621      	mov	r1, r4
 80030fe:	024a      	lsls	r2, r1, #9
 8003100:	4610      	mov	r0, r2
 8003102:	4619      	mov	r1, r3
 8003104:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003106:	2200      	movs	r2, #0
 8003108:	62bb      	str	r3, [r7, #40]	; 0x28
 800310a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800310c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003110:	f7fd f8b6 	bl	8000280 <__aeabi_uldivmod>
 8003114:	4602      	mov	r2, r0
 8003116:	460b      	mov	r3, r1
 8003118:	4613      	mov	r3, r2
 800311a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800311c:	e058      	b.n	80031d0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800311e:	4b38      	ldr	r3, [pc, #224]	; (8003200 <HAL_RCC_GetSysClockFreq+0x200>)
 8003120:	685b      	ldr	r3, [r3, #4]
 8003122:	099b      	lsrs	r3, r3, #6
 8003124:	2200      	movs	r2, #0
 8003126:	4618      	mov	r0, r3
 8003128:	4611      	mov	r1, r2
 800312a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800312e:	623b      	str	r3, [r7, #32]
 8003130:	2300      	movs	r3, #0
 8003132:	627b      	str	r3, [r7, #36]	; 0x24
 8003134:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003138:	4642      	mov	r2, r8
 800313a:	464b      	mov	r3, r9
 800313c:	f04f 0000 	mov.w	r0, #0
 8003140:	f04f 0100 	mov.w	r1, #0
 8003144:	0159      	lsls	r1, r3, #5
 8003146:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800314a:	0150      	lsls	r0, r2, #5
 800314c:	4602      	mov	r2, r0
 800314e:	460b      	mov	r3, r1
 8003150:	4641      	mov	r1, r8
 8003152:	ebb2 0a01 	subs.w	sl, r2, r1
 8003156:	4649      	mov	r1, r9
 8003158:	eb63 0b01 	sbc.w	fp, r3, r1
 800315c:	f04f 0200 	mov.w	r2, #0
 8003160:	f04f 0300 	mov.w	r3, #0
 8003164:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003168:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800316c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003170:	ebb2 040a 	subs.w	r4, r2, sl
 8003174:	eb63 050b 	sbc.w	r5, r3, fp
 8003178:	f04f 0200 	mov.w	r2, #0
 800317c:	f04f 0300 	mov.w	r3, #0
 8003180:	00eb      	lsls	r3, r5, #3
 8003182:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003186:	00e2      	lsls	r2, r4, #3
 8003188:	4614      	mov	r4, r2
 800318a:	461d      	mov	r5, r3
 800318c:	4643      	mov	r3, r8
 800318e:	18e3      	adds	r3, r4, r3
 8003190:	603b      	str	r3, [r7, #0]
 8003192:	464b      	mov	r3, r9
 8003194:	eb45 0303 	adc.w	r3, r5, r3
 8003198:	607b      	str	r3, [r7, #4]
 800319a:	f04f 0200 	mov.w	r2, #0
 800319e:	f04f 0300 	mov.w	r3, #0
 80031a2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80031a6:	4629      	mov	r1, r5
 80031a8:	028b      	lsls	r3, r1, #10
 80031aa:	4621      	mov	r1, r4
 80031ac:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80031b0:	4621      	mov	r1, r4
 80031b2:	028a      	lsls	r2, r1, #10
 80031b4:	4610      	mov	r0, r2
 80031b6:	4619      	mov	r1, r3
 80031b8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80031ba:	2200      	movs	r2, #0
 80031bc:	61bb      	str	r3, [r7, #24]
 80031be:	61fa      	str	r2, [r7, #28]
 80031c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80031c4:	f7fd f85c 	bl	8000280 <__aeabi_uldivmod>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	4613      	mov	r3, r2
 80031ce:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80031d0:	4b0b      	ldr	r3, [pc, #44]	; (8003200 <HAL_RCC_GetSysClockFreq+0x200>)
 80031d2:	685b      	ldr	r3, [r3, #4]
 80031d4:	0c1b      	lsrs	r3, r3, #16
 80031d6:	f003 0303 	and.w	r3, r3, #3
 80031da:	3301      	adds	r3, #1
 80031dc:	005b      	lsls	r3, r3, #1
 80031de:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80031e0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80031e2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80031e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80031e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031ea:	e002      	b.n	80031f2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80031ec:	4b05      	ldr	r3, [pc, #20]	; (8003204 <HAL_RCC_GetSysClockFreq+0x204>)
 80031ee:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80031f0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80031f2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80031f4:	4618      	mov	r0, r3
 80031f6:	3750      	adds	r7, #80	; 0x50
 80031f8:	46bd      	mov	sp, r7
 80031fa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80031fe:	bf00      	nop
 8003200:	40023800 	.word	0x40023800
 8003204:	00f42400 	.word	0x00f42400
 8003208:	007a1200 	.word	0x007a1200

0800320c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800320c:	b480      	push	{r7}
 800320e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003210:	4b03      	ldr	r3, [pc, #12]	; (8003220 <HAL_RCC_GetHCLKFreq+0x14>)
 8003212:	681b      	ldr	r3, [r3, #0]
}
 8003214:	4618      	mov	r0, r3
 8003216:	46bd      	mov	sp, r7
 8003218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800321c:	4770      	bx	lr
 800321e:	bf00      	nop
 8003220:	20000004 	.word	0x20000004

08003224 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003224:	b580      	push	{r7, lr}
 8003226:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003228:	f7ff fff0 	bl	800320c <HAL_RCC_GetHCLKFreq>
 800322c:	4602      	mov	r2, r0
 800322e:	4b05      	ldr	r3, [pc, #20]	; (8003244 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003230:	689b      	ldr	r3, [r3, #8]
 8003232:	0a9b      	lsrs	r3, r3, #10
 8003234:	f003 0307 	and.w	r3, r3, #7
 8003238:	4903      	ldr	r1, [pc, #12]	; (8003248 <HAL_RCC_GetPCLK1Freq+0x24>)
 800323a:	5ccb      	ldrb	r3, [r1, r3]
 800323c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003240:	4618      	mov	r0, r3
 8003242:	bd80      	pop	{r7, pc}
 8003244:	40023800 	.word	0x40023800
 8003248:	08006818 	.word	0x08006818

0800324c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003250:	f7ff ffdc 	bl	800320c <HAL_RCC_GetHCLKFreq>
 8003254:	4602      	mov	r2, r0
 8003256:	4b05      	ldr	r3, [pc, #20]	; (800326c <HAL_RCC_GetPCLK2Freq+0x20>)
 8003258:	689b      	ldr	r3, [r3, #8]
 800325a:	0b5b      	lsrs	r3, r3, #13
 800325c:	f003 0307 	and.w	r3, r3, #7
 8003260:	4903      	ldr	r1, [pc, #12]	; (8003270 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003262:	5ccb      	ldrb	r3, [r1, r3]
 8003264:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003268:	4618      	mov	r0, r3
 800326a:	bd80      	pop	{r7, pc}
 800326c:	40023800 	.word	0x40023800
 8003270:	08006818 	.word	0x08006818

08003274 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003274:	b580      	push	{r7, lr}
 8003276:	b082      	sub	sp, #8
 8003278:	af00      	add	r7, sp, #0
 800327a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e041      	b.n	800330a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800328c:	b2db      	uxtb	r3, r3
 800328e:	2b00      	cmp	r3, #0
 8003290:	d106      	bne.n	80032a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2200      	movs	r2, #0
 8003296:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800329a:	6878      	ldr	r0, [r7, #4]
 800329c:	f7fe fa20 	bl	80016e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681a      	ldr	r2, [r3, #0]
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	3304      	adds	r3, #4
 80032b0:	4619      	mov	r1, r3
 80032b2:	4610      	mov	r0, r2
 80032b4:	f000 fe74 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	2201      	movs	r2, #1
 80032bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2201      	movs	r2, #1
 80032c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2201      	movs	r2, #1
 80032d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2201      	movs	r2, #1
 80032dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	2201      	movs	r2, #1
 80032e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2201      	movs	r2, #1
 80032ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2201      	movs	r2, #1
 80032f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	2201      	movs	r2, #1
 80032fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	2201      	movs	r2, #1
 8003304:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003308:	2300      	movs	r3, #0
}
 800330a:	4618      	mov	r0, r3
 800330c:	3708      	adds	r7, #8
 800330e:	46bd      	mov	sp, r7
 8003310:	bd80      	pop	{r7, pc}
	...

08003314 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003314:	b480      	push	{r7}
 8003316:	b085      	sub	sp, #20
 8003318:	af00      	add	r7, sp, #0
 800331a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003322:	b2db      	uxtb	r3, r3
 8003324:	2b01      	cmp	r3, #1
 8003326:	d001      	beq.n	800332c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003328:	2301      	movs	r3, #1
 800332a:	e03c      	b.n	80033a6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2202      	movs	r2, #2
 8003330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a1e      	ldr	r2, [pc, #120]	; (80033b4 <HAL_TIM_Base_Start+0xa0>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d018      	beq.n	8003370 <HAL_TIM_Base_Start+0x5c>
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003346:	d013      	beq.n	8003370 <HAL_TIM_Base_Start+0x5c>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a1a      	ldr	r2, [pc, #104]	; (80033b8 <HAL_TIM_Base_Start+0xa4>)
 800334e:	4293      	cmp	r3, r2
 8003350:	d00e      	beq.n	8003370 <HAL_TIM_Base_Start+0x5c>
 8003352:	687b      	ldr	r3, [r7, #4]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	4a19      	ldr	r2, [pc, #100]	; (80033bc <HAL_TIM_Base_Start+0xa8>)
 8003358:	4293      	cmp	r3, r2
 800335a:	d009      	beq.n	8003370 <HAL_TIM_Base_Start+0x5c>
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	4a17      	ldr	r2, [pc, #92]	; (80033c0 <HAL_TIM_Base_Start+0xac>)
 8003362:	4293      	cmp	r3, r2
 8003364:	d004      	beq.n	8003370 <HAL_TIM_Base_Start+0x5c>
 8003366:	687b      	ldr	r3, [r7, #4]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4a16      	ldr	r2, [pc, #88]	; (80033c4 <HAL_TIM_Base_Start+0xb0>)
 800336c:	4293      	cmp	r3, r2
 800336e:	d111      	bne.n	8003394 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	689b      	ldr	r3, [r3, #8]
 8003376:	f003 0307 	and.w	r3, r3, #7
 800337a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	2b06      	cmp	r3, #6
 8003380:	d010      	beq.n	80033a4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	681a      	ldr	r2, [r3, #0]
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f042 0201 	orr.w	r2, r2, #1
 8003390:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003392:	e007      	b.n	80033a4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	681a      	ldr	r2, [r3, #0]
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f042 0201 	orr.w	r2, r2, #1
 80033a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80033a4:	2300      	movs	r3, #0
}
 80033a6:	4618      	mov	r0, r3
 80033a8:	3714      	adds	r7, #20
 80033aa:	46bd      	mov	sp, r7
 80033ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b0:	4770      	bx	lr
 80033b2:	bf00      	nop
 80033b4:	40010000 	.word	0x40010000
 80033b8:	40000400 	.word	0x40000400
 80033bc:	40000800 	.word	0x40000800
 80033c0:	40000c00 	.word	0x40000c00
 80033c4:	40014000 	.word	0x40014000

080033c8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	b082      	sub	sp, #8
 80033cc:	af00      	add	r7, sp, #0
 80033ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d101      	bne.n	80033da <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80033d6:	2301      	movs	r3, #1
 80033d8:	e041      	b.n	800345e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033e0:	b2db      	uxtb	r3, r3
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	d106      	bne.n	80033f4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	2200      	movs	r2, #0
 80033ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80033ee:	6878      	ldr	r0, [r7, #4]
 80033f0:	f7fe fa52 	bl	8001898 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681a      	ldr	r2, [r3, #0]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	3304      	adds	r3, #4
 8003404:	4619      	mov	r1, r3
 8003406:	4610      	mov	r0, r2
 8003408:	f000 fdca 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2201      	movs	r2, #1
 8003410:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2201      	movs	r2, #1
 8003420:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	2201      	movs	r2, #1
 8003428:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2201      	movs	r2, #1
 8003430:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	2201      	movs	r2, #1
 8003438:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2201      	movs	r2, #1
 8003440:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2201      	movs	r2, #1
 8003448:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	2201      	movs	r2, #1
 8003458:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800345c:	2300      	movs	r3, #0
}
 800345e:	4618      	mov	r0, r3
 8003460:	3708      	adds	r7, #8
 8003462:	46bd      	mov	sp, r7
 8003464:	bd80      	pop	{r7, pc}
	...

08003468 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b084      	sub	sp, #16
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
 8003470:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003472:	683b      	ldr	r3, [r7, #0]
 8003474:	2b00      	cmp	r3, #0
 8003476:	d109      	bne.n	800348c <HAL_TIM_PWM_Start+0x24>
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800347e:	b2db      	uxtb	r3, r3
 8003480:	2b01      	cmp	r3, #1
 8003482:	bf14      	ite	ne
 8003484:	2301      	movne	r3, #1
 8003486:	2300      	moveq	r3, #0
 8003488:	b2db      	uxtb	r3, r3
 800348a:	e022      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 800348c:	683b      	ldr	r3, [r7, #0]
 800348e:	2b04      	cmp	r3, #4
 8003490:	d109      	bne.n	80034a6 <HAL_TIM_PWM_Start+0x3e>
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b01      	cmp	r3, #1
 800349c:	bf14      	ite	ne
 800349e:	2301      	movne	r3, #1
 80034a0:	2300      	moveq	r3, #0
 80034a2:	b2db      	uxtb	r3, r3
 80034a4:	e015      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034a6:	683b      	ldr	r3, [r7, #0]
 80034a8:	2b08      	cmp	r3, #8
 80034aa:	d109      	bne.n	80034c0 <HAL_TIM_PWM_Start+0x58>
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034b2:	b2db      	uxtb	r3, r3
 80034b4:	2b01      	cmp	r3, #1
 80034b6:	bf14      	ite	ne
 80034b8:	2301      	movne	r3, #1
 80034ba:	2300      	moveq	r3, #0
 80034bc:	b2db      	uxtb	r3, r3
 80034be:	e008      	b.n	80034d2 <HAL_TIM_PWM_Start+0x6a>
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80034c6:	b2db      	uxtb	r3, r3
 80034c8:	2b01      	cmp	r3, #1
 80034ca:	bf14      	ite	ne
 80034cc:	2301      	movne	r3, #1
 80034ce:	2300      	moveq	r3, #0
 80034d0:	b2db      	uxtb	r3, r3
 80034d2:	2b00      	cmp	r3, #0
 80034d4:	d001      	beq.n	80034da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80034d6:	2301      	movs	r3, #1
 80034d8:	e068      	b.n	80035ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	2b00      	cmp	r3, #0
 80034de:	d104      	bne.n	80034ea <HAL_TIM_PWM_Start+0x82>
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	2202      	movs	r2, #2
 80034e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80034e8:	e013      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034ea:	683b      	ldr	r3, [r7, #0]
 80034ec:	2b04      	cmp	r3, #4
 80034ee:	d104      	bne.n	80034fa <HAL_TIM_PWM_Start+0x92>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2202      	movs	r2, #2
 80034f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80034f8:	e00b      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d104      	bne.n	800350a <HAL_TIM_PWM_Start+0xa2>
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	2202      	movs	r2, #2
 8003504:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003508:	e003      	b.n	8003512 <HAL_TIM_PWM_Start+0xaa>
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	2201      	movs	r2, #1
 8003518:	6839      	ldr	r1, [r7, #0]
 800351a:	4618      	mov	r0, r3
 800351c:	f001 f910 	bl	8004740 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	4a23      	ldr	r2, [pc, #140]	; (80035b4 <HAL_TIM_PWM_Start+0x14c>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d107      	bne.n	800353a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	681b      	ldr	r3, [r3, #0]
 8003534:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003538:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	4a1d      	ldr	r2, [pc, #116]	; (80035b4 <HAL_TIM_PWM_Start+0x14c>)
 8003540:	4293      	cmp	r3, r2
 8003542:	d018      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800354c:	d013      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	4a19      	ldr	r2, [pc, #100]	; (80035b8 <HAL_TIM_PWM_Start+0x150>)
 8003554:	4293      	cmp	r3, r2
 8003556:	d00e      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	4a17      	ldr	r2, [pc, #92]	; (80035bc <HAL_TIM_PWM_Start+0x154>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d009      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	4a16      	ldr	r2, [pc, #88]	; (80035c0 <HAL_TIM_PWM_Start+0x158>)
 8003568:	4293      	cmp	r3, r2
 800356a:	d004      	beq.n	8003576 <HAL_TIM_PWM_Start+0x10e>
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	4a14      	ldr	r2, [pc, #80]	; (80035c4 <HAL_TIM_PWM_Start+0x15c>)
 8003572:	4293      	cmp	r3, r2
 8003574:	d111      	bne.n	800359a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689b      	ldr	r3, [r3, #8]
 800357c:	f003 0307 	and.w	r3, r3, #7
 8003580:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2b06      	cmp	r3, #6
 8003586:	d010      	beq.n	80035aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	681a      	ldr	r2, [r3, #0]
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f042 0201 	orr.w	r2, r2, #1
 8003596:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003598:	e007      	b.n	80035aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	681a      	ldr	r2, [r3, #0]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f042 0201 	orr.w	r2, r2, #1
 80035a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80035aa:	2300      	movs	r3, #0
}
 80035ac:	4618      	mov	r0, r3
 80035ae:	3710      	adds	r7, #16
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40010000 	.word	0x40010000
 80035b8:	40000400 	.word	0x40000400
 80035bc:	40000800 	.word	0x40000800
 80035c0:	40000c00 	.word	0x40000c00
 80035c4:	40014000 	.word	0x40014000

080035c8 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b082      	sub	sp, #8
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2b00      	cmp	r3, #0
 80035d4:	d101      	bne.n	80035da <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80035d6:	2301      	movs	r3, #1
 80035d8:	e041      	b.n	800365e <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80035e0:	b2db      	uxtb	r3, r3
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d106      	bne.n	80035f4 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	2200      	movs	r2, #0
 80035ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7fe f8c6 	bl	8001780 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	2202      	movs	r2, #2
 80035f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681a      	ldr	r2, [r3, #0]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	3304      	adds	r3, #4
 8003604:	4619      	mov	r1, r3
 8003606:	4610      	mov	r0, r2
 8003608:	f000 fcca 	bl	8003fa0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2201      	movs	r2, #1
 8003610:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	2201      	movs	r2, #1
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	2201      	movs	r2, #1
 8003620:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	2201      	movs	r2, #1
 8003628:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	2201      	movs	r2, #1
 8003630:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	2201      	movs	r2, #1
 8003638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	2201      	movs	r2, #1
 8003640:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2201      	movs	r2, #1
 8003648:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2201      	movs	r2, #1
 8003650:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2201      	movs	r2, #1
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800365c:	2300      	movs	r3, #0
}
 800365e:	4618      	mov	r0, r3
 8003660:	3708      	adds	r7, #8
 8003662:	46bd      	mov	sp, r7
 8003664:	bd80      	pop	{r7, pc}
	...

08003668 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003668:	b580      	push	{r7, lr}
 800366a:	b084      	sub	sp, #16
 800366c:	af00      	add	r7, sp, #0
 800366e:	6078      	str	r0, [r7, #4]
 8003670:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003672:	2300      	movs	r3, #0
 8003674:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8003676:	683b      	ldr	r3, [r7, #0]
 8003678:	2b00      	cmp	r3, #0
 800367a:	d104      	bne.n	8003686 <HAL_TIM_IC_Start_IT+0x1e>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003682:	b2db      	uxtb	r3, r3
 8003684:	e013      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x46>
 8003686:	683b      	ldr	r3, [r7, #0]
 8003688:	2b04      	cmp	r3, #4
 800368a:	d104      	bne.n	8003696 <HAL_TIM_IC_Start_IT+0x2e>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003692:	b2db      	uxtb	r3, r3
 8003694:	e00b      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x46>
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	2b08      	cmp	r3, #8
 800369a:	d104      	bne.n	80036a6 <HAL_TIM_IC_Start_IT+0x3e>
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80036a2:	b2db      	uxtb	r3, r3
 80036a4:	e003      	b.n	80036ae <HAL_TIM_IC_Start_IT+0x46>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80036ac:	b2db      	uxtb	r3, r3
 80036ae:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80036b0:	683b      	ldr	r3, [r7, #0]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d104      	bne.n	80036c0 <HAL_TIM_IC_Start_IT+0x58>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80036bc:	b2db      	uxtb	r3, r3
 80036be:	e013      	b.n	80036e8 <HAL_TIM_IC_Start_IT+0x80>
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	2b04      	cmp	r3, #4
 80036c4:	d104      	bne.n	80036d0 <HAL_TIM_IC_Start_IT+0x68>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80036cc:	b2db      	uxtb	r3, r3
 80036ce:	e00b      	b.n	80036e8 <HAL_TIM_IC_Start_IT+0x80>
 80036d0:	683b      	ldr	r3, [r7, #0]
 80036d2:	2b08      	cmp	r3, #8
 80036d4:	d104      	bne.n	80036e0 <HAL_TIM_IC_Start_IT+0x78>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	e003      	b.n	80036e8 <HAL_TIM_IC_Start_IT+0x80>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80036e6:	b2db      	uxtb	r3, r3
 80036e8:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80036ea:	7bbb      	ldrb	r3, [r7, #14]
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d102      	bne.n	80036f6 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80036f0:	7b7b      	ldrb	r3, [r7, #13]
 80036f2:	2b01      	cmp	r3, #1
 80036f4:	d001      	beq.n	80036fa <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e0c2      	b.n	8003880 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036fa:	683b      	ldr	r3, [r7, #0]
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d104      	bne.n	800370a <HAL_TIM_IC_Start_IT+0xa2>
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	2202      	movs	r2, #2
 8003704:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003708:	e013      	b.n	8003732 <HAL_TIM_IC_Start_IT+0xca>
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	2b04      	cmp	r3, #4
 800370e:	d104      	bne.n	800371a <HAL_TIM_IC_Start_IT+0xb2>
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	2202      	movs	r2, #2
 8003714:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003718:	e00b      	b.n	8003732 <HAL_TIM_IC_Start_IT+0xca>
 800371a:	683b      	ldr	r3, [r7, #0]
 800371c:	2b08      	cmp	r3, #8
 800371e:	d104      	bne.n	800372a <HAL_TIM_IC_Start_IT+0xc2>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2202      	movs	r2, #2
 8003724:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003728:	e003      	b.n	8003732 <HAL_TIM_IC_Start_IT+0xca>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	2202      	movs	r2, #2
 800372e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003732:	683b      	ldr	r3, [r7, #0]
 8003734:	2b00      	cmp	r3, #0
 8003736:	d104      	bne.n	8003742 <HAL_TIM_IC_Start_IT+0xda>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	2202      	movs	r2, #2
 800373c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003740:	e013      	b.n	800376a <HAL_TIM_IC_Start_IT+0x102>
 8003742:	683b      	ldr	r3, [r7, #0]
 8003744:	2b04      	cmp	r3, #4
 8003746:	d104      	bne.n	8003752 <HAL_TIM_IC_Start_IT+0xea>
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	2202      	movs	r2, #2
 800374c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003750:	e00b      	b.n	800376a <HAL_TIM_IC_Start_IT+0x102>
 8003752:	683b      	ldr	r3, [r7, #0]
 8003754:	2b08      	cmp	r3, #8
 8003756:	d104      	bne.n	8003762 <HAL_TIM_IC_Start_IT+0xfa>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2202      	movs	r2, #2
 800375c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003760:	e003      	b.n	800376a <HAL_TIM_IC_Start_IT+0x102>
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2202      	movs	r2, #2
 8003766:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800376a:	683b      	ldr	r3, [r7, #0]
 800376c:	2b0c      	cmp	r3, #12
 800376e:	d841      	bhi.n	80037f4 <HAL_TIM_IC_Start_IT+0x18c>
 8003770:	a201      	add	r2, pc, #4	; (adr r2, 8003778 <HAL_TIM_IC_Start_IT+0x110>)
 8003772:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003776:	bf00      	nop
 8003778:	080037ad 	.word	0x080037ad
 800377c:	080037f5 	.word	0x080037f5
 8003780:	080037f5 	.word	0x080037f5
 8003784:	080037f5 	.word	0x080037f5
 8003788:	080037bf 	.word	0x080037bf
 800378c:	080037f5 	.word	0x080037f5
 8003790:	080037f5 	.word	0x080037f5
 8003794:	080037f5 	.word	0x080037f5
 8003798:	080037d1 	.word	0x080037d1
 800379c:	080037f5 	.word	0x080037f5
 80037a0:	080037f5 	.word	0x080037f5
 80037a4:	080037f5 	.word	0x080037f5
 80037a8:	080037e3 	.word	0x080037e3
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	68da      	ldr	r2, [r3, #12]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f042 0202 	orr.w	r2, r2, #2
 80037ba:	60da      	str	r2, [r3, #12]
      break;
 80037bc:	e01d      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	681b      	ldr	r3, [r3, #0]
 80037c2:	68da      	ldr	r2, [r3, #12]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	f042 0204 	orr.w	r2, r2, #4
 80037cc:	60da      	str	r2, [r3, #12]
      break;
 80037ce:	e014      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	68da      	ldr	r2, [r3, #12]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f042 0208 	orr.w	r2, r2, #8
 80037de:	60da      	str	r2, [r3, #12]
      break;
 80037e0:	e00b      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	68da      	ldr	r2, [r3, #12]
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f042 0210 	orr.w	r2, r2, #16
 80037f0:	60da      	str	r2, [r3, #12]
      break;
 80037f2:	e002      	b.n	80037fa <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80037f4:	2301      	movs	r3, #1
 80037f6:	73fb      	strb	r3, [r7, #15]
      break;
 80037f8:	bf00      	nop
  }

  if (status == HAL_OK)
 80037fa:	7bfb      	ldrb	r3, [r7, #15]
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d13e      	bne.n	800387e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	2201      	movs	r2, #1
 8003806:	6839      	ldr	r1, [r7, #0]
 8003808:	4618      	mov	r0, r3
 800380a:	f000 ff99 	bl	8004740 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	4a1d      	ldr	r2, [pc, #116]	; (8003888 <HAL_TIM_IC_Start_IT+0x220>)
 8003814:	4293      	cmp	r3, r2
 8003816:	d018      	beq.n	800384a <HAL_TIM_IC_Start_IT+0x1e2>
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003820:	d013      	beq.n	800384a <HAL_TIM_IC_Start_IT+0x1e2>
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4a19      	ldr	r2, [pc, #100]	; (800388c <HAL_TIM_IC_Start_IT+0x224>)
 8003828:	4293      	cmp	r3, r2
 800382a:	d00e      	beq.n	800384a <HAL_TIM_IC_Start_IT+0x1e2>
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	4a17      	ldr	r2, [pc, #92]	; (8003890 <HAL_TIM_IC_Start_IT+0x228>)
 8003832:	4293      	cmp	r3, r2
 8003834:	d009      	beq.n	800384a <HAL_TIM_IC_Start_IT+0x1e2>
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	4a16      	ldr	r2, [pc, #88]	; (8003894 <HAL_TIM_IC_Start_IT+0x22c>)
 800383c:	4293      	cmp	r3, r2
 800383e:	d004      	beq.n	800384a <HAL_TIM_IC_Start_IT+0x1e2>
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a14      	ldr	r2, [pc, #80]	; (8003898 <HAL_TIM_IC_Start_IT+0x230>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d111      	bne.n	800386e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	681b      	ldr	r3, [r3, #0]
 800384e:	689b      	ldr	r3, [r3, #8]
 8003850:	f003 0307 	and.w	r3, r3, #7
 8003854:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003856:	68bb      	ldr	r3, [r7, #8]
 8003858:	2b06      	cmp	r3, #6
 800385a:	d010      	beq.n	800387e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	681a      	ldr	r2, [r3, #0]
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	f042 0201 	orr.w	r2, r2, #1
 800386a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	e007      	b.n	800387e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	681b      	ldr	r3, [r3, #0]
 8003872:	681a      	ldr	r2, [r3, #0]
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	f042 0201 	orr.w	r2, r2, #1
 800387c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800387e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003880:	4618      	mov	r0, r3
 8003882:	3710      	adds	r7, #16
 8003884:	46bd      	mov	sp, r7
 8003886:	bd80      	pop	{r7, pc}
 8003888:	40010000 	.word	0x40010000
 800388c:	40000400 	.word	0x40000400
 8003890:	40000800 	.word	0x40000800
 8003894:	40000c00 	.word	0x40000c00
 8003898:	40014000 	.word	0x40014000

0800389c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800389c:	b580      	push	{r7, lr}
 800389e:	b084      	sub	sp, #16
 80038a0:	af00      	add	r7, sp, #0
 80038a2:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	68db      	ldr	r3, [r3, #12]
 80038aa:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	691b      	ldr	r3, [r3, #16]
 80038b2:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80038b4:	68bb      	ldr	r3, [r7, #8]
 80038b6:	f003 0302 	and.w	r3, r3, #2
 80038ba:	2b00      	cmp	r3, #0
 80038bc:	d020      	beq.n	8003900 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	f003 0302 	and.w	r3, r3, #2
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d01b      	beq.n	8003900 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f06f 0202 	mvn.w	r2, #2
 80038d0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	2201      	movs	r2, #1
 80038d6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	f003 0303 	and.w	r3, r3, #3
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d003      	beq.n	80038ee <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80038e6:	6878      	ldr	r0, [r7, #4]
 80038e8:	f7fc ff0a 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 80038ec:	e005      	b.n	80038fa <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f000 fb38 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038f4:	6878      	ldr	r0, [r7, #4]
 80038f6:	f000 fb3f 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2200      	movs	r2, #0
 80038fe:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003900:	68bb      	ldr	r3, [r7, #8]
 8003902:	f003 0304 	and.w	r3, r3, #4
 8003906:	2b00      	cmp	r3, #0
 8003908:	d020      	beq.n	800394c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	f003 0304 	and.w	r3, r3, #4
 8003910:	2b00      	cmp	r3, #0
 8003912:	d01b      	beq.n	800394c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	f06f 0204 	mvn.w	r2, #4
 800391c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	2202      	movs	r2, #2
 8003922:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	699b      	ldr	r3, [r3, #24]
 800392a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800392e:	2b00      	cmp	r3, #0
 8003930:	d003      	beq.n	800393a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003932:	6878      	ldr	r0, [r7, #4]
 8003934:	f7fc fee4 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 8003938:	e005      	b.n	8003946 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 fb12 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003940:	6878      	ldr	r0, [r7, #4]
 8003942:	f000 fb19 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	2200      	movs	r2, #0
 800394a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800394c:	68bb      	ldr	r3, [r7, #8]
 800394e:	f003 0308 	and.w	r3, r3, #8
 8003952:	2b00      	cmp	r3, #0
 8003954:	d020      	beq.n	8003998 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f003 0308 	and.w	r3, r3, #8
 800395c:	2b00      	cmp	r3, #0
 800395e:	d01b      	beq.n	8003998 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	f06f 0208 	mvn.w	r2, #8
 8003968:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	2204      	movs	r2, #4
 800396e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	69db      	ldr	r3, [r3, #28]
 8003976:	f003 0303 	and.w	r3, r3, #3
 800397a:	2b00      	cmp	r3, #0
 800397c:	d003      	beq.n	8003986 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f7fc febe 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 8003984:	e005      	b.n	8003992 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 faec 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800398c:	6878      	ldr	r0, [r7, #4]
 800398e:	f000 faf3 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	f003 0310 	and.w	r3, r3, #16
 800399e:	2b00      	cmp	r3, #0
 80039a0:	d020      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	f003 0310 	and.w	r3, r3, #16
 80039a8:	2b00      	cmp	r3, #0
 80039aa:	d01b      	beq.n	80039e4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f06f 0210 	mvn.w	r2, #16
 80039b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	2208      	movs	r2, #8
 80039ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	69db      	ldr	r3, [r3, #28]
 80039c2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d003      	beq.n	80039d2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80039ca:	6878      	ldr	r0, [r7, #4]
 80039cc:	f7fc fe98 	bl	8000700 <HAL_TIM_IC_CaptureCallback>
 80039d0:	e005      	b.n	80039de <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80039d2:	6878      	ldr	r0, [r7, #4]
 80039d4:	f000 fac6 	bl	8003f64 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 facd 	bl	8003f78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039de:	687b      	ldr	r3, [r7, #4]
 80039e0:	2200      	movs	r2, #0
 80039e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80039e4:	68bb      	ldr	r3, [r7, #8]
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00c      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d007      	beq.n	8003a08 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	f06f 0201 	mvn.w	r2, #1
 8003a00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003a02:	6878      	ldr	r0, [r7, #4]
 8003a04:	f000 faa4 	bl	8003f50 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003a08:	68bb      	ldr	r3, [r7, #8]
 8003a0a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	d00c      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d007      	beq.n	8003a2c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003a24:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003a26:	6878      	ldr	r0, [r7, #4]
 8003a28:	f000 ff28 	bl	800487c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003a2c:	68bb      	ldr	r3, [r7, #8]
 8003a2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d00c      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d007      	beq.n	8003a50 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003a48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003a4a:	6878      	ldr	r0, [r7, #4]
 8003a4c:	f000 fa9e 	bl	8003f8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003a50:	68bb      	ldr	r3, [r7, #8]
 8003a52:	f003 0320 	and.w	r3, r3, #32
 8003a56:	2b00      	cmp	r3, #0
 8003a58:	d00c      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	f003 0320 	and.w	r3, r3, #32
 8003a60:	2b00      	cmp	r3, #0
 8003a62:	d007      	beq.n	8003a74 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	f06f 0220 	mvn.w	r2, #32
 8003a6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003a6e:	6878      	ldr	r0, [r7, #4]
 8003a70:	f000 fefa 	bl	8004868 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003a74:	bf00      	nop
 8003a76:	3710      	adds	r7, #16
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	bd80      	pop	{r7, pc}

08003a7c <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	b086      	sub	sp, #24
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a92:	2b01      	cmp	r3, #1
 8003a94:	d101      	bne.n	8003a9a <HAL_TIM_IC_ConfigChannel+0x1e>
 8003a96:	2302      	movs	r3, #2
 8003a98:	e088      	b.n	8003bac <HAL_TIM_IC_ConfigChannel+0x130>
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2201      	movs	r2, #1
 8003a9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d11b      	bne.n	8003ae0 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003aac:	68bb      	ldr	r3, [r7, #8]
 8003aae:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003ab0:	68bb      	ldr	r3, [r7, #8]
 8003ab2:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003ab4:	68bb      	ldr	r3, [r7, #8]
 8003ab6:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 8003ab8:	f000 fc8a 	bl	80043d0 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	699a      	ldr	r2, [r3, #24]
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	f022 020c 	bic.w	r2, r2, #12
 8003aca:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	6999      	ldr	r1, [r3, #24]
 8003ad2:	68bb      	ldr	r3, [r7, #8]
 8003ad4:	689a      	ldr	r2, [r3, #8]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	430a      	orrs	r2, r1
 8003adc:	619a      	str	r2, [r3, #24]
 8003ade:	e060      	b.n	8003ba2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	2b04      	cmp	r3, #4
 8003ae4:	d11c      	bne.n	8003b20 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003aea:	68bb      	ldr	r3, [r7, #8]
 8003aec:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003aee:	68bb      	ldr	r3, [r7, #8]
 8003af0:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003af2:	68bb      	ldr	r3, [r7, #8]
 8003af4:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 8003af6:	f000 fd02 	bl	80044fe <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	699a      	ldr	r2, [r3, #24]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b08:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	6999      	ldr	r1, [r3, #24]
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	021a      	lsls	r2, r3, #8
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	430a      	orrs	r2, r1
 8003b1c:	619a      	str	r2, [r3, #24]
 8003b1e:	e040      	b.n	8003ba2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2b08      	cmp	r3, #8
 8003b24:	d11b      	bne.n	8003b5e <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003b26:	68fb      	ldr	r3, [r7, #12]
 8003b28:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b2a:	68bb      	ldr	r3, [r7, #8]
 8003b2c:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b2e:	68bb      	ldr	r3, [r7, #8]
 8003b30:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b32:	68bb      	ldr	r3, [r7, #8]
 8003b34:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003b36:	f000 fd4f 	bl	80045d8 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	69da      	ldr	r2, [r3, #28]
 8003b40:	68fb      	ldr	r3, [r7, #12]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f022 020c 	bic.w	r2, r2, #12
 8003b48:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	69d9      	ldr	r1, [r3, #28]
 8003b50:	68bb      	ldr	r3, [r7, #8]
 8003b52:	689a      	ldr	r2, [r3, #8]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	61da      	str	r2, [r3, #28]
 8003b5c:	e021      	b.n	8003ba2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2b0c      	cmp	r3, #12
 8003b62:	d11c      	bne.n	8003b9e <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003b68:	68bb      	ldr	r3, [r7, #8]
 8003b6a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003b74:	f000 fd6c 	bl	8004650 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003b78:	68fb      	ldr	r3, [r7, #12]
 8003b7a:	681b      	ldr	r3, [r3, #0]
 8003b7c:	69da      	ldr	r2, [r3, #28]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003b86:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	69d9      	ldr	r1, [r3, #28]
 8003b8e:	68bb      	ldr	r3, [r7, #8]
 8003b90:	689b      	ldr	r3, [r3, #8]
 8003b92:	021a      	lsls	r2, r3, #8
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	430a      	orrs	r2, r1
 8003b9a:	61da      	str	r2, [r3, #28]
 8003b9c:	e001      	b.n	8003ba2 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	2200      	movs	r2, #0
 8003ba6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003baa:	7dfb      	ldrb	r3, [r7, #23]
}
 8003bac:	4618      	mov	r0, r3
 8003bae:	3718      	adds	r7, #24
 8003bb0:	46bd      	mov	sp, r7
 8003bb2:	bd80      	pop	{r7, pc}

08003bb4 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb4:	b580      	push	{r7, lr}
 8003bb6:	b086      	sub	sp, #24
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	60f8      	str	r0, [r7, #12]
 8003bbc:	60b9      	str	r1, [r7, #8]
 8003bbe:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bc0:	2300      	movs	r3, #0
 8003bc2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d101      	bne.n	8003bd2 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bce:	2302      	movs	r3, #2
 8003bd0:	e0ae      	b.n	8003d30 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	2201      	movs	r2, #1
 8003bd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2b0c      	cmp	r3, #12
 8003bde:	f200 809f 	bhi.w	8003d20 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003be2:	a201      	add	r2, pc, #4	; (adr r2, 8003be8 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003be4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be8:	08003c1d 	.word	0x08003c1d
 8003bec:	08003d21 	.word	0x08003d21
 8003bf0:	08003d21 	.word	0x08003d21
 8003bf4:	08003d21 	.word	0x08003d21
 8003bf8:	08003c5d 	.word	0x08003c5d
 8003bfc:	08003d21 	.word	0x08003d21
 8003c00:	08003d21 	.word	0x08003d21
 8003c04:	08003d21 	.word	0x08003d21
 8003c08:	08003c9f 	.word	0x08003c9f
 8003c0c:	08003d21 	.word	0x08003d21
 8003c10:	08003d21 	.word	0x08003d21
 8003c14:	08003d21 	.word	0x08003d21
 8003c18:	08003cdf 	.word	0x08003cdf
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	68b9      	ldr	r1, [r7, #8]
 8003c22:	4618      	mov	r0, r3
 8003c24:	f000 fa48 	bl	80040b8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	699a      	ldr	r2, [r3, #24]
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	f042 0208 	orr.w	r2, r2, #8
 8003c36:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	699a      	ldr	r2, [r3, #24]
 8003c3e:	68fb      	ldr	r3, [r7, #12]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f022 0204 	bic.w	r2, r2, #4
 8003c46:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	6999      	ldr	r1, [r3, #24]
 8003c4e:	68bb      	ldr	r3, [r7, #8]
 8003c50:	691a      	ldr	r2, [r3, #16]
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	430a      	orrs	r2, r1
 8003c58:	619a      	str	r2, [r3, #24]
      break;
 8003c5a:	e064      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	68b9      	ldr	r1, [r7, #8]
 8003c62:	4618      	mov	r0, r3
 8003c64:	f000 fa8e 	bl	8004184 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	699a      	ldr	r2, [r3, #24]
 8003c6e:	68fb      	ldr	r3, [r7, #12]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c76:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	699a      	ldr	r2, [r3, #24]
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c86:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	681b      	ldr	r3, [r3, #0]
 8003c8c:	6999      	ldr	r1, [r3, #24]
 8003c8e:	68bb      	ldr	r3, [r7, #8]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	021a      	lsls	r2, r3, #8
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	430a      	orrs	r2, r1
 8003c9a:	619a      	str	r2, [r3, #24]
      break;
 8003c9c:	e043      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9e:	68fb      	ldr	r3, [r7, #12]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	68b9      	ldr	r1, [r7, #8]
 8003ca4:	4618      	mov	r0, r3
 8003ca6:	f000 fad9 	bl	800425c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	69da      	ldr	r2, [r3, #28]
 8003cb0:	68fb      	ldr	r3, [r7, #12]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0208 	orr.w	r2, r2, #8
 8003cb8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69da      	ldr	r2, [r3, #28]
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	f022 0204 	bic.w	r2, r2, #4
 8003cc8:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cca:	68fb      	ldr	r3, [r7, #12]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	69d9      	ldr	r1, [r3, #28]
 8003cd0:	68bb      	ldr	r3, [r7, #8]
 8003cd2:	691a      	ldr	r2, [r3, #16]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	430a      	orrs	r2, r1
 8003cda:	61da      	str	r2, [r3, #28]
      break;
 8003cdc:	e023      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	68b9      	ldr	r1, [r7, #8]
 8003ce4:	4618      	mov	r0, r3
 8003ce6:	f000 fb23 	bl	8004330 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	69da      	ldr	r2, [r3, #28]
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf8:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	69da      	ldr	r2, [r3, #28]
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d08:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	69d9      	ldr	r1, [r3, #28]
 8003d10:	68bb      	ldr	r3, [r7, #8]
 8003d12:	691b      	ldr	r3, [r3, #16]
 8003d14:	021a      	lsls	r2, r3, #8
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	430a      	orrs	r2, r1
 8003d1c:	61da      	str	r2, [r3, #28]
      break;
 8003d1e:	e002      	b.n	8003d26 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d20:	2301      	movs	r3, #1
 8003d22:	75fb      	strb	r3, [r7, #23]
      break;
 8003d24:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d2e:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d30:	4618      	mov	r0, r3
 8003d32:	3718      	adds	r7, #24
 8003d34:	46bd      	mov	sp, r7
 8003d36:	bd80      	pop	{r7, pc}

08003d38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b084      	sub	sp, #16
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
 8003d40:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d42:	2300      	movs	r3, #0
 8003d44:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d4c:	2b01      	cmp	r3, #1
 8003d4e:	d101      	bne.n	8003d54 <HAL_TIM_ConfigClockSource+0x1c>
 8003d50:	2302      	movs	r3, #2
 8003d52:	e0b4      	b.n	8003ebe <HAL_TIM_ConfigClockSource+0x186>
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2202      	movs	r2, #2
 8003d60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d6c:	68bb      	ldr	r3, [r7, #8]
 8003d6e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d7a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	68ba      	ldr	r2, [r7, #8]
 8003d82:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d84:	683b      	ldr	r3, [r7, #0]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8c:	d03e      	beq.n	8003e0c <HAL_TIM_ConfigClockSource+0xd4>
 8003d8e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d92:	f200 8087 	bhi.w	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9a:	f000 8086 	beq.w	8003eaa <HAL_TIM_ConfigClockSource+0x172>
 8003d9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003da2:	d87f      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003da4:	2b70      	cmp	r3, #112	; 0x70
 8003da6:	d01a      	beq.n	8003dde <HAL_TIM_ConfigClockSource+0xa6>
 8003da8:	2b70      	cmp	r3, #112	; 0x70
 8003daa:	d87b      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d050      	beq.n	8003e52 <HAL_TIM_ConfigClockSource+0x11a>
 8003db0:	2b60      	cmp	r3, #96	; 0x60
 8003db2:	d877      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003db4:	2b50      	cmp	r3, #80	; 0x50
 8003db6:	d03c      	beq.n	8003e32 <HAL_TIM_ConfigClockSource+0xfa>
 8003db8:	2b50      	cmp	r3, #80	; 0x50
 8003dba:	d873      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d058      	beq.n	8003e72 <HAL_TIM_ConfigClockSource+0x13a>
 8003dc0:	2b40      	cmp	r3, #64	; 0x40
 8003dc2:	d86f      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc4:	2b30      	cmp	r3, #48	; 0x30
 8003dc6:	d064      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15a>
 8003dc8:	2b30      	cmp	r3, #48	; 0x30
 8003dca:	d86b      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d060      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd0:	2b20      	cmp	r3, #32
 8003dd2:	d867      	bhi.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d05c      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15a>
 8003dd8:	2b10      	cmp	r3, #16
 8003dda:	d05a      	beq.n	8003e92 <HAL_TIM_ConfigClockSource+0x15a>
 8003ddc:	e062      	b.n	8003ea4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003dee:	f000 fc87 	bl	8004700 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003dfa:	68bb      	ldr	r3, [r7, #8]
 8003dfc:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003e00:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	68ba      	ldr	r2, [r7, #8]
 8003e08:	609a      	str	r2, [r3, #8]
      break;
 8003e0a:	e04f      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003e18:	683b      	ldr	r3, [r7, #0]
 8003e1a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003e1c:	f000 fc70 	bl	8004700 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	689a      	ldr	r2, [r3, #8]
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2e:	609a      	str	r2, [r3, #8]
      break;
 8003e30:	e03c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e3a:	683b      	ldr	r3, [r7, #0]
 8003e3c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e3e:	461a      	mov	r2, r3
 8003e40:	f000 fb2e 	bl	80044a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	2150      	movs	r1, #80	; 0x50
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	f000 fc3d 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003e50:	e02c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e5e:	461a      	mov	r2, r3
 8003e60:	f000 fb8a 	bl	8004578 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	2160      	movs	r1, #96	; 0x60
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f000 fc2d 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003e70:	e01c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e7e:	461a      	mov	r2, r3
 8003e80:	f000 fb0e 	bl	80044a0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	2140      	movs	r1, #64	; 0x40
 8003e8a:	4618      	mov	r0, r3
 8003e8c:	f000 fc1d 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003e90:	e00c      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4619      	mov	r1, r3
 8003e9c:	4610      	mov	r0, r2
 8003e9e:	f000 fc14 	bl	80046ca <TIM_ITRx_SetConfig>
      break;
 8003ea2:	e003      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea8:	e000      	b.n	8003eac <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003eaa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003ebc:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	3710      	adds	r7, #16
 8003ec2:	46bd      	mov	sp, r7
 8003ec4:	bd80      	pop	{r7, pc}
	...

08003ec8 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ec8:	b480      	push	{r7}
 8003eca:	b085      	sub	sp, #20
 8003ecc:	af00      	add	r7, sp, #0
 8003ece:	6078      	str	r0, [r7, #4]
 8003ed0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003ed6:	683b      	ldr	r3, [r7, #0]
 8003ed8:	2b0c      	cmp	r3, #12
 8003eda:	d831      	bhi.n	8003f40 <HAL_TIM_ReadCapturedValue+0x78>
 8003edc:	a201      	add	r2, pc, #4	; (adr r2, 8003ee4 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003ede:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ee2:	bf00      	nop
 8003ee4:	08003f19 	.word	0x08003f19
 8003ee8:	08003f41 	.word	0x08003f41
 8003eec:	08003f41 	.word	0x08003f41
 8003ef0:	08003f41 	.word	0x08003f41
 8003ef4:	08003f23 	.word	0x08003f23
 8003ef8:	08003f41 	.word	0x08003f41
 8003efc:	08003f41 	.word	0x08003f41
 8003f00:	08003f41 	.word	0x08003f41
 8003f04:	08003f2d 	.word	0x08003f2d
 8003f08:	08003f41 	.word	0x08003f41
 8003f0c:	08003f41 	.word	0x08003f41
 8003f10:	08003f41 	.word	0x08003f41
 8003f14:	08003f37 	.word	0x08003f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003f1e:	60fb      	str	r3, [r7, #12]

      break;
 8003f20:	e00f      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f28:	60fb      	str	r3, [r7, #12]

      break;
 8003f2a:	e00a      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003f32:	60fb      	str	r3, [r7, #12]

      break;
 8003f34:	e005      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f3c:	60fb      	str	r3, [r7, #12]

      break;
 8003f3e:	e000      	b.n	8003f42 <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003f40:	bf00      	nop
  }

  return tmpreg;
 8003f42:	68fb      	ldr	r3, [r7, #12]
}
 8003f44:	4618      	mov	r0, r3
 8003f46:	3714      	adds	r7, #20
 8003f48:	46bd      	mov	sp, r7
 8003f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f4e:	4770      	bx	lr

08003f50 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f50:	b480      	push	{r7}
 8003f52:	b083      	sub	sp, #12
 8003f54:	af00      	add	r7, sp, #0
 8003f56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003f58:	bf00      	nop
 8003f5a:	370c      	adds	r7, #12
 8003f5c:	46bd      	mov	sp, r7
 8003f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f62:	4770      	bx	lr

08003f64 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f64:	b480      	push	{r7}
 8003f66:	b083      	sub	sp, #12
 8003f68:	af00      	add	r7, sp, #0
 8003f6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f6c:	bf00      	nop
 8003f6e:	370c      	adds	r7, #12
 8003f70:	46bd      	mov	sp, r7
 8003f72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f76:	4770      	bx	lr

08003f78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f78:	b480      	push	{r7}
 8003f7a:	b083      	sub	sp, #12
 8003f7c:	af00      	add	r7, sp, #0
 8003f7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003f80:	bf00      	nop
 8003f82:	370c      	adds	r7, #12
 8003f84:	46bd      	mov	sp, r7
 8003f86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f8a:	4770      	bx	lr

08003f8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003f8c:	b480      	push	{r7}
 8003f8e:	b083      	sub	sp, #12
 8003f90:	af00      	add	r7, sp, #0
 8003f92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f94:	bf00      	nop
 8003f96:	370c      	adds	r7, #12
 8003f98:	46bd      	mov	sp, r7
 8003f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f9e:	4770      	bx	lr

08003fa0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fa0:	b480      	push	{r7}
 8003fa2:	b085      	sub	sp, #20
 8003fa4:	af00      	add	r7, sp, #0
 8003fa6:	6078      	str	r0, [r7, #4]
 8003fa8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	4a3a      	ldr	r2, [pc, #232]	; (800409c <TIM_Base_SetConfig+0xfc>)
 8003fb4:	4293      	cmp	r3, r2
 8003fb6:	d00f      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003fbe:	d00b      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	4a37      	ldr	r2, [pc, #220]	; (80040a0 <TIM_Base_SetConfig+0x100>)
 8003fc4:	4293      	cmp	r3, r2
 8003fc6:	d007      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	4a36      	ldr	r2, [pc, #216]	; (80040a4 <TIM_Base_SetConfig+0x104>)
 8003fcc:	4293      	cmp	r3, r2
 8003fce:	d003      	beq.n	8003fd8 <TIM_Base_SetConfig+0x38>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a35      	ldr	r2, [pc, #212]	; (80040a8 <TIM_Base_SetConfig+0x108>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d108      	bne.n	8003fea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003fe0:	683b      	ldr	r3, [r7, #0]
 8003fe2:	685b      	ldr	r3, [r3, #4]
 8003fe4:	68fa      	ldr	r2, [r7, #12]
 8003fe6:	4313      	orrs	r3, r2
 8003fe8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	4a2b      	ldr	r2, [pc, #172]	; (800409c <TIM_Base_SetConfig+0xfc>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d01b      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ff8:	d017      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	4a28      	ldr	r2, [pc, #160]	; (80040a0 <TIM_Base_SetConfig+0x100>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d013      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	4a27      	ldr	r2, [pc, #156]	; (80040a4 <TIM_Base_SetConfig+0x104>)
 8004006:	4293      	cmp	r3, r2
 8004008:	d00f      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	4a26      	ldr	r2, [pc, #152]	; (80040a8 <TIM_Base_SetConfig+0x108>)
 800400e:	4293      	cmp	r3, r2
 8004010:	d00b      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a25      	ldr	r2, [pc, #148]	; (80040ac <TIM_Base_SetConfig+0x10c>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d007      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	4a24      	ldr	r2, [pc, #144]	; (80040b0 <TIM_Base_SetConfig+0x110>)
 800401e:	4293      	cmp	r3, r2
 8004020:	d003      	beq.n	800402a <TIM_Base_SetConfig+0x8a>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a23      	ldr	r2, [pc, #140]	; (80040b4 <TIM_Base_SetConfig+0x114>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d108      	bne.n	800403c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800402a:	68fb      	ldr	r3, [r7, #12]
 800402c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004030:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	68db      	ldr	r3, [r3, #12]
 8004036:	68fa      	ldr	r2, [r7, #12]
 8004038:	4313      	orrs	r3, r2
 800403a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	695b      	ldr	r3, [r3, #20]
 8004046:	4313      	orrs	r3, r2
 8004048:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	68fa      	ldr	r2, [r7, #12]
 800404e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004050:	683b      	ldr	r3, [r7, #0]
 8004052:	689a      	ldr	r2, [r3, #8]
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004058:	683b      	ldr	r3, [r7, #0]
 800405a:	681a      	ldr	r2, [r3, #0]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	4a0e      	ldr	r2, [pc, #56]	; (800409c <TIM_Base_SetConfig+0xfc>)
 8004064:	4293      	cmp	r3, r2
 8004066:	d103      	bne.n	8004070 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	691a      	ldr	r2, [r3, #16]
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2201      	movs	r2, #1
 8004074:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	691b      	ldr	r3, [r3, #16]
 800407a:	f003 0301 	and.w	r3, r3, #1
 800407e:	2b01      	cmp	r3, #1
 8004080:	d105      	bne.n	800408e <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	691b      	ldr	r3, [r3, #16]
 8004086:	f023 0201 	bic.w	r2, r3, #1
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	611a      	str	r2, [r3, #16]
  }
}
 800408e:	bf00      	nop
 8004090:	3714      	adds	r7, #20
 8004092:	46bd      	mov	sp, r7
 8004094:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004098:	4770      	bx	lr
 800409a:	bf00      	nop
 800409c:	40010000 	.word	0x40010000
 80040a0:	40000400 	.word	0x40000400
 80040a4:	40000800 	.word	0x40000800
 80040a8:	40000c00 	.word	0x40000c00
 80040ac:	40014000 	.word	0x40014000
 80040b0:	40014400 	.word	0x40014400
 80040b4:	40014800 	.word	0x40014800

080040b8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040b8:	b480      	push	{r7}
 80040ba:	b087      	sub	sp, #28
 80040bc:	af00      	add	r7, sp, #0
 80040be:	6078      	str	r0, [r7, #4]
 80040c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6a1b      	ldr	r3, [r3, #32]
 80040c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	6a1b      	ldr	r3, [r3, #32]
 80040cc:	f023 0201 	bic.w	r2, r3, #1
 80040d0:	687b      	ldr	r3, [r7, #4]
 80040d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	685b      	ldr	r3, [r3, #4]
 80040d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	699b      	ldr	r3, [r3, #24]
 80040de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80040e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	f023 0303 	bic.w	r3, r3, #3
 80040ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	68fa      	ldr	r2, [r7, #12]
 80040f6:	4313      	orrs	r3, r2
 80040f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80040fa:	697b      	ldr	r3, [r7, #20]
 80040fc:	f023 0302 	bic.w	r3, r3, #2
 8004100:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004102:	683b      	ldr	r3, [r7, #0]
 8004104:	689b      	ldr	r3, [r3, #8]
 8004106:	697a      	ldr	r2, [r7, #20]
 8004108:	4313      	orrs	r3, r2
 800410a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	4a1c      	ldr	r2, [pc, #112]	; (8004180 <TIM_OC1_SetConfig+0xc8>)
 8004110:	4293      	cmp	r3, r2
 8004112:	d10c      	bne.n	800412e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004114:	697b      	ldr	r3, [r7, #20]
 8004116:	f023 0308 	bic.w	r3, r3, #8
 800411a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800411c:	683b      	ldr	r3, [r7, #0]
 800411e:	68db      	ldr	r3, [r3, #12]
 8004120:	697a      	ldr	r2, [r7, #20]
 8004122:	4313      	orrs	r3, r2
 8004124:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004126:	697b      	ldr	r3, [r7, #20]
 8004128:	f023 0304 	bic.w	r3, r3, #4
 800412c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a13      	ldr	r2, [pc, #76]	; (8004180 <TIM_OC1_SetConfig+0xc8>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d111      	bne.n	800415a <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800413c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800413e:	693b      	ldr	r3, [r7, #16]
 8004140:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004144:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8004146:	683b      	ldr	r3, [r7, #0]
 8004148:	695b      	ldr	r3, [r3, #20]
 800414a:	693a      	ldr	r2, [r7, #16]
 800414c:	4313      	orrs	r3, r2
 800414e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004150:	683b      	ldr	r3, [r7, #0]
 8004152:	699b      	ldr	r3, [r3, #24]
 8004154:	693a      	ldr	r2, [r7, #16]
 8004156:	4313      	orrs	r3, r2
 8004158:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	693a      	ldr	r2, [r7, #16]
 800415e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	68fa      	ldr	r2, [r7, #12]
 8004164:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	685a      	ldr	r2, [r3, #4]
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	697a      	ldr	r2, [r7, #20]
 8004172:	621a      	str	r2, [r3, #32]
}
 8004174:	bf00      	nop
 8004176:	371c      	adds	r7, #28
 8004178:	46bd      	mov	sp, r7
 800417a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417e:	4770      	bx	lr
 8004180:	40010000 	.word	0x40010000

08004184 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004184:	b480      	push	{r7}
 8004186:	b087      	sub	sp, #28
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
 800418c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	6a1b      	ldr	r3, [r3, #32]
 8004192:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	6a1b      	ldr	r3, [r3, #32]
 8004198:	f023 0210 	bic.w	r2, r3, #16
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	685b      	ldr	r3, [r3, #4]
 80041a4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	699b      	ldr	r3, [r3, #24]
 80041aa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80041b2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	021b      	lsls	r3, r3, #8
 80041c2:	68fa      	ldr	r2, [r7, #12]
 80041c4:	4313      	orrs	r3, r2
 80041c6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041c8:	697b      	ldr	r3, [r7, #20]
 80041ca:	f023 0320 	bic.w	r3, r3, #32
 80041ce:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	689b      	ldr	r3, [r3, #8]
 80041d4:	011b      	lsls	r3, r3, #4
 80041d6:	697a      	ldr	r2, [r7, #20]
 80041d8:	4313      	orrs	r3, r2
 80041da:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a1e      	ldr	r2, [pc, #120]	; (8004258 <TIM_OC2_SetConfig+0xd4>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d10d      	bne.n	8004200 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80041e4:	697b      	ldr	r3, [r7, #20]
 80041e6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80041ea:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80041ec:	683b      	ldr	r3, [r7, #0]
 80041ee:	68db      	ldr	r3, [r3, #12]
 80041f0:	011b      	lsls	r3, r3, #4
 80041f2:	697a      	ldr	r2, [r7, #20]
 80041f4:	4313      	orrs	r3, r2
 80041f6:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80041f8:	697b      	ldr	r3, [r7, #20]
 80041fa:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80041fe:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	4a15      	ldr	r2, [pc, #84]	; (8004258 <TIM_OC2_SetConfig+0xd4>)
 8004204:	4293      	cmp	r3, r2
 8004206:	d113      	bne.n	8004230 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004208:	693b      	ldr	r3, [r7, #16]
 800420a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800420e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004210:	693b      	ldr	r3, [r7, #16]
 8004212:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004216:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	695b      	ldr	r3, [r3, #20]
 800421c:	009b      	lsls	r3, r3, #2
 800421e:	693a      	ldr	r2, [r7, #16]
 8004220:	4313      	orrs	r3, r2
 8004222:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004224:	683b      	ldr	r3, [r7, #0]
 8004226:	699b      	ldr	r3, [r3, #24]
 8004228:	009b      	lsls	r3, r3, #2
 800422a:	693a      	ldr	r2, [r7, #16]
 800422c:	4313      	orrs	r3, r2
 800422e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	693a      	ldr	r2, [r7, #16]
 8004234:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	68fa      	ldr	r2, [r7, #12]
 800423a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800423c:	683b      	ldr	r3, [r7, #0]
 800423e:	685a      	ldr	r2, [r3, #4]
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	697a      	ldr	r2, [r7, #20]
 8004248:	621a      	str	r2, [r3, #32]
}
 800424a:	bf00      	nop
 800424c:	371c      	adds	r7, #28
 800424e:	46bd      	mov	sp, r7
 8004250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004254:	4770      	bx	lr
 8004256:	bf00      	nop
 8004258:	40010000 	.word	0x40010000

0800425c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800425c:	b480      	push	{r7}
 800425e:	b087      	sub	sp, #28
 8004260:	af00      	add	r7, sp, #0
 8004262:	6078      	str	r0, [r7, #4]
 8004264:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6a1b      	ldr	r3, [r3, #32]
 800426a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6a1b      	ldr	r3, [r3, #32]
 8004270:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	685b      	ldr	r3, [r3, #4]
 800427c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	69db      	ldr	r3, [r3, #28]
 8004282:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800428a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	f023 0303 	bic.w	r3, r3, #3
 8004292:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	4313      	orrs	r3, r2
 800429c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800429e:	697b      	ldr	r3, [r7, #20]
 80042a0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80042a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042a6:	683b      	ldr	r3, [r7, #0]
 80042a8:	689b      	ldr	r3, [r3, #8]
 80042aa:	021b      	lsls	r3, r3, #8
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	4313      	orrs	r3, r2
 80042b0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a1d      	ldr	r2, [pc, #116]	; (800432c <TIM_OC3_SetConfig+0xd0>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d10d      	bne.n	80042d6 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042ba:	697b      	ldr	r3, [r7, #20]
 80042bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80042c0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042c2:	683b      	ldr	r3, [r7, #0]
 80042c4:	68db      	ldr	r3, [r3, #12]
 80042c6:	021b      	lsls	r3, r3, #8
 80042c8:	697a      	ldr	r2, [r7, #20]
 80042ca:	4313      	orrs	r3, r2
 80042cc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042ce:	697b      	ldr	r3, [r7, #20]
 80042d0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80042d4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a14      	ldr	r2, [pc, #80]	; (800432c <TIM_OC3_SetConfig+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d113      	bne.n	8004306 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80042de:	693b      	ldr	r3, [r7, #16]
 80042e0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80042e4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042ec:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80042ee:	683b      	ldr	r3, [r7, #0]
 80042f0:	695b      	ldr	r3, [r3, #20]
 80042f2:	011b      	lsls	r3, r3, #4
 80042f4:	693a      	ldr	r2, [r7, #16]
 80042f6:	4313      	orrs	r3, r2
 80042f8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	699b      	ldr	r3, [r3, #24]
 80042fe:	011b      	lsls	r3, r3, #4
 8004300:	693a      	ldr	r2, [r7, #16]
 8004302:	4313      	orrs	r3, r2
 8004304:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	693a      	ldr	r2, [r7, #16]
 800430a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	68fa      	ldr	r2, [r7, #12]
 8004310:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	685a      	ldr	r2, [r3, #4]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	697a      	ldr	r2, [r7, #20]
 800431e:	621a      	str	r2, [r3, #32]
}
 8004320:	bf00      	nop
 8004322:	371c      	adds	r7, #28
 8004324:	46bd      	mov	sp, r7
 8004326:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432a:	4770      	bx	lr
 800432c:	40010000 	.word	0x40010000

08004330 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004330:	b480      	push	{r7}
 8004332:	b087      	sub	sp, #28
 8004334:	af00      	add	r7, sp, #0
 8004336:	6078      	str	r0, [r7, #4]
 8004338:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6a1b      	ldr	r3, [r3, #32]
 800433e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	6a1b      	ldr	r3, [r3, #32]
 8004344:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	685b      	ldr	r3, [r3, #4]
 8004350:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	69db      	ldr	r3, [r3, #28]
 8004356:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004358:	68fb      	ldr	r3, [r7, #12]
 800435a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800435e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004366:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004368:	683b      	ldr	r3, [r7, #0]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	021b      	lsls	r3, r3, #8
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	4313      	orrs	r3, r2
 8004372:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004374:	693b      	ldr	r3, [r7, #16]
 8004376:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800437a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800437c:	683b      	ldr	r3, [r7, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	031b      	lsls	r3, r3, #12
 8004382:	693a      	ldr	r2, [r7, #16]
 8004384:	4313      	orrs	r3, r2
 8004386:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	4a10      	ldr	r2, [pc, #64]	; (80043cc <TIM_OC4_SetConfig+0x9c>)
 800438c:	4293      	cmp	r3, r2
 800438e:	d109      	bne.n	80043a4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004390:	697b      	ldr	r3, [r7, #20]
 8004392:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004396:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	695b      	ldr	r3, [r3, #20]
 800439c:	019b      	lsls	r3, r3, #6
 800439e:	697a      	ldr	r2, [r7, #20]
 80043a0:	4313      	orrs	r3, r2
 80043a2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	697a      	ldr	r2, [r7, #20]
 80043a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	685a      	ldr	r2, [r3, #4]
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	693a      	ldr	r2, [r7, #16]
 80043bc:	621a      	str	r2, [r3, #32]
}
 80043be:	bf00      	nop
 80043c0:	371c      	adds	r7, #28
 80043c2:	46bd      	mov	sp, r7
 80043c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c8:	4770      	bx	lr
 80043ca:	bf00      	nop
 80043cc:	40010000 	.word	0x40010000

080043d0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80043d0:	b480      	push	{r7}
 80043d2:	b087      	sub	sp, #28
 80043d4:	af00      	add	r7, sp, #0
 80043d6:	60f8      	str	r0, [r7, #12]
 80043d8:	60b9      	str	r1, [r7, #8]
 80043da:	607a      	str	r2, [r7, #4]
 80043dc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	6a1b      	ldr	r3, [r3, #32]
 80043e2:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	f023 0201 	bic.w	r2, r3, #1
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	699b      	ldr	r3, [r3, #24]
 80043f4:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	4a24      	ldr	r2, [pc, #144]	; (800448c <TIM_TI1_SetConfig+0xbc>)
 80043fa:	4293      	cmp	r3, r2
 80043fc:	d013      	beq.n	8004426 <TIM_TI1_SetConfig+0x56>
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004404:	d00f      	beq.n	8004426 <TIM_TI1_SetConfig+0x56>
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	4a21      	ldr	r2, [pc, #132]	; (8004490 <TIM_TI1_SetConfig+0xc0>)
 800440a:	4293      	cmp	r3, r2
 800440c:	d00b      	beq.n	8004426 <TIM_TI1_SetConfig+0x56>
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	4a20      	ldr	r2, [pc, #128]	; (8004494 <TIM_TI1_SetConfig+0xc4>)
 8004412:	4293      	cmp	r3, r2
 8004414:	d007      	beq.n	8004426 <TIM_TI1_SetConfig+0x56>
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	4a1f      	ldr	r2, [pc, #124]	; (8004498 <TIM_TI1_SetConfig+0xc8>)
 800441a:	4293      	cmp	r3, r2
 800441c:	d003      	beq.n	8004426 <TIM_TI1_SetConfig+0x56>
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	4a1e      	ldr	r2, [pc, #120]	; (800449c <TIM_TI1_SetConfig+0xcc>)
 8004422:	4293      	cmp	r3, r2
 8004424:	d101      	bne.n	800442a <TIM_TI1_SetConfig+0x5a>
 8004426:	2301      	movs	r3, #1
 8004428:	e000      	b.n	800442c <TIM_TI1_SetConfig+0x5c>
 800442a:	2300      	movs	r3, #0
 800442c:	2b00      	cmp	r3, #0
 800442e:	d008      	beq.n	8004442 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004430:	697b      	ldr	r3, [r7, #20]
 8004432:	f023 0303 	bic.w	r3, r3, #3
 8004436:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004438:	697a      	ldr	r2, [r7, #20]
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	4313      	orrs	r3, r2
 800443e:	617b      	str	r3, [r7, #20]
 8004440:	e003      	b.n	800444a <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8004442:	697b      	ldr	r3, [r7, #20]
 8004444:	f043 0301 	orr.w	r3, r3, #1
 8004448:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800444a:	697b      	ldr	r3, [r7, #20]
 800444c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004450:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8004452:	683b      	ldr	r3, [r7, #0]
 8004454:	011b      	lsls	r3, r3, #4
 8004456:	b2db      	uxtb	r3, r3
 8004458:	697a      	ldr	r2, [r7, #20]
 800445a:	4313      	orrs	r3, r2
 800445c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f023 030a 	bic.w	r3, r3, #10
 8004464:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8004466:	68bb      	ldr	r3, [r7, #8]
 8004468:	f003 030a 	and.w	r3, r3, #10
 800446c:	693a      	ldr	r2, [r7, #16]
 800446e:	4313      	orrs	r3, r2
 8004470:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	697a      	ldr	r2, [r7, #20]
 8004476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	693a      	ldr	r2, [r7, #16]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000
 8004490:	40000400 	.word	0x40000400
 8004494:	40000800 	.word	0x40000800
 8004498:	40000c00 	.word	0x40000c00
 800449c:	40014000 	.word	0x40014000

080044a0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80044a0:	b480      	push	{r7}
 80044a2:	b087      	sub	sp, #28
 80044a4:	af00      	add	r7, sp, #0
 80044a6:	60f8      	str	r0, [r7, #12]
 80044a8:	60b9      	str	r1, [r7, #8]
 80044aa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6a1b      	ldr	r3, [r3, #32]
 80044b0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
 80044b6:	f023 0201 	bic.w	r2, r3, #1
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	699b      	ldr	r3, [r3, #24]
 80044c2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80044c4:	693b      	ldr	r3, [r7, #16]
 80044c6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ca:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	011b      	lsls	r3, r3, #4
 80044d0:	693a      	ldr	r2, [r7, #16]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80044d6:	697b      	ldr	r3, [r7, #20]
 80044d8:	f023 030a 	bic.w	r3, r3, #10
 80044dc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80044de:	697a      	ldr	r2, [r7, #20]
 80044e0:	68bb      	ldr	r3, [r7, #8]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80044e6:	68fb      	ldr	r3, [r7, #12]
 80044e8:	693a      	ldr	r2, [r7, #16]
 80044ea:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	697a      	ldr	r2, [r7, #20]
 80044f0:	621a      	str	r2, [r3, #32]
}
 80044f2:	bf00      	nop
 80044f4:	371c      	adds	r7, #28
 80044f6:	46bd      	mov	sp, r7
 80044f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044fc:	4770      	bx	lr

080044fe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044fe:	b480      	push	{r7}
 8004500:	b087      	sub	sp, #28
 8004502:	af00      	add	r7, sp, #0
 8004504:	60f8      	str	r0, [r7, #12]
 8004506:	60b9      	str	r1, [r7, #8]
 8004508:	607a      	str	r2, [r7, #4]
 800450a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	6a1b      	ldr	r3, [r3, #32]
 8004510:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004512:	68fb      	ldr	r3, [r7, #12]
 8004514:	6a1b      	ldr	r3, [r3, #32]
 8004516:	f023 0210 	bic.w	r2, r3, #16
 800451a:	68fb      	ldr	r3, [r7, #12]
 800451c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	699b      	ldr	r3, [r3, #24]
 8004522:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8004524:	693b      	ldr	r3, [r7, #16]
 8004526:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800452a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	021b      	lsls	r3, r3, #8
 8004530:	693a      	ldr	r2, [r7, #16]
 8004532:	4313      	orrs	r3, r2
 8004534:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004536:	693b      	ldr	r3, [r7, #16]
 8004538:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800453c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800453e:	683b      	ldr	r3, [r7, #0]
 8004540:	031b      	lsls	r3, r3, #12
 8004542:	b29b      	uxth	r3, r3
 8004544:	693a      	ldr	r2, [r7, #16]
 8004546:	4313      	orrs	r3, r2
 8004548:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800454a:	697b      	ldr	r3, [r7, #20]
 800454c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004550:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8004552:	68bb      	ldr	r3, [r7, #8]
 8004554:	011b      	lsls	r3, r3, #4
 8004556:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	693a      	ldr	r2, [r7, #16]
 8004564:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	697a      	ldr	r2, [r7, #20]
 800456a:	621a      	str	r2, [r3, #32]
}
 800456c:	bf00      	nop
 800456e:	371c      	adds	r7, #28
 8004570:	46bd      	mov	sp, r7
 8004572:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004576:	4770      	bx	lr

08004578 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004578:	b480      	push	{r7}
 800457a:	b087      	sub	sp, #28
 800457c:	af00      	add	r7, sp, #0
 800457e:	60f8      	str	r0, [r7, #12]
 8004580:	60b9      	str	r1, [r7, #8]
 8004582:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	6a1b      	ldr	r3, [r3, #32]
 8004588:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	6a1b      	ldr	r3, [r3, #32]
 800458e:	f023 0210 	bic.w	r2, r3, #16
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	699b      	ldr	r3, [r3, #24]
 800459a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800459c:	693b      	ldr	r3, [r7, #16]
 800459e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80045a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	031b      	lsls	r3, r3, #12
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80045b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045b6:	68bb      	ldr	r3, [r7, #8]
 80045b8:	011b      	lsls	r3, r3, #4
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045c0:	68fb      	ldr	r3, [r7, #12]
 80045c2:	693a      	ldr	r2, [r7, #16]
 80045c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	697a      	ldr	r2, [r7, #20]
 80045ca:	621a      	str	r2, [r3, #32]
}
 80045cc:	bf00      	nop
 80045ce:	371c      	adds	r7, #28
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	6a1b      	ldr	r3, [r3, #32]
 80045ea:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	6a1b      	ldr	r3, [r3, #32]
 80045f0:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80045f4:	68fb      	ldr	r3, [r7, #12]
 80045f6:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	69db      	ldr	r3, [r3, #28]
 80045fc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80045fe:	693b      	ldr	r3, [r7, #16]
 8004600:	f023 0303 	bic.w	r3, r3, #3
 8004604:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 8004606:	693a      	ldr	r2, [r7, #16]
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800460e:	693b      	ldr	r3, [r7, #16]
 8004610:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004614:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8004616:	683b      	ldr	r3, [r7, #0]
 8004618:	011b      	lsls	r3, r3, #4
 800461a:	b2db      	uxtb	r3, r3
 800461c:	693a      	ldr	r2, [r7, #16]
 800461e:	4313      	orrs	r3, r2
 8004620:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8004622:	697b      	ldr	r3, [r7, #20]
 8004624:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004628:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800462a:	68bb      	ldr	r3, [r7, #8]
 800462c:	021b      	lsls	r3, r3, #8
 800462e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8004632:	697a      	ldr	r2, [r7, #20]
 8004634:	4313      	orrs	r3, r2
 8004636:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	693a      	ldr	r2, [r7, #16]
 800463c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800463e:	68fb      	ldr	r3, [r7, #12]
 8004640:	697a      	ldr	r2, [r7, #20]
 8004642:	621a      	str	r2, [r3, #32]
}
 8004644:	bf00      	nop
 8004646:	371c      	adds	r7, #28
 8004648:	46bd      	mov	sp, r7
 800464a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464e:	4770      	bx	lr

08004650 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004650:	b480      	push	{r7}
 8004652:	b087      	sub	sp, #28
 8004654:	af00      	add	r7, sp, #0
 8004656:	60f8      	str	r0, [r7, #12]
 8004658:	60b9      	str	r1, [r7, #8]
 800465a:	607a      	str	r2, [r7, #4]
 800465c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	6a1b      	ldr	r3, [r3, #32]
 8004662:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6a1b      	ldr	r3, [r3, #32]
 8004668:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800466c:	68fb      	ldr	r3, [r7, #12]
 800466e:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004670:	68fb      	ldr	r3, [r7, #12]
 8004672:	69db      	ldr	r3, [r3, #28]
 8004674:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8004676:	693b      	ldr	r3, [r7, #16]
 8004678:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800467c:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	021b      	lsls	r3, r3, #8
 8004682:	693a      	ldr	r2, [r7, #16]
 8004684:	4313      	orrs	r3, r2
 8004686:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004688:	693b      	ldr	r3, [r7, #16]
 800468a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468e:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	031b      	lsls	r3, r3, #12
 8004694:	b29b      	uxth	r3, r3
 8004696:	693a      	ldr	r2, [r7, #16]
 8004698:	4313      	orrs	r3, r2
 800469a:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800469c:	697b      	ldr	r3, [r7, #20]
 800469e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80046a2:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	031b      	lsls	r3, r3, #12
 80046a8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	4313      	orrs	r3, r2
 80046b0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	693a      	ldr	r2, [r7, #16]
 80046b6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr

080046ca <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046ca:	b480      	push	{r7}
 80046cc:	b085      	sub	sp, #20
 80046ce:	af00      	add	r7, sp, #0
 80046d0:	6078      	str	r0, [r7, #4]
 80046d2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	689b      	ldr	r3, [r3, #8]
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046e0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046e2:	683a      	ldr	r2, [r7, #0]
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	f043 0307 	orr.w	r3, r3, #7
 80046ec:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046ee:	687b      	ldr	r3, [r7, #4]
 80046f0:	68fa      	ldr	r2, [r7, #12]
 80046f2:	609a      	str	r2, [r3, #8]
}
 80046f4:	bf00      	nop
 80046f6:	3714      	adds	r7, #20
 80046f8:	46bd      	mov	sp, r7
 80046fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046fe:	4770      	bx	lr

08004700 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004700:	b480      	push	{r7}
 8004702:	b087      	sub	sp, #28
 8004704:	af00      	add	r7, sp, #0
 8004706:	60f8      	str	r0, [r7, #12]
 8004708:	60b9      	str	r1, [r7, #8]
 800470a:	607a      	str	r2, [r7, #4]
 800470c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	689b      	ldr	r3, [r3, #8]
 8004712:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800471a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	021a      	lsls	r2, r3, #8
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	431a      	orrs	r2, r3
 8004724:	68bb      	ldr	r3, [r7, #8]
 8004726:	4313      	orrs	r3, r2
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	4313      	orrs	r3, r2
 800472c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800472e:	68fb      	ldr	r3, [r7, #12]
 8004730:	697a      	ldr	r2, [r7, #20]
 8004732:	609a      	str	r2, [r3, #8]
}
 8004734:	bf00      	nop
 8004736:	371c      	adds	r7, #28
 8004738:	46bd      	mov	sp, r7
 800473a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800473e:	4770      	bx	lr

08004740 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004740:	b480      	push	{r7}
 8004742:	b087      	sub	sp, #28
 8004744:	af00      	add	r7, sp, #0
 8004746:	60f8      	str	r0, [r7, #12]
 8004748:	60b9      	str	r1, [r7, #8]
 800474a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800474c:	68bb      	ldr	r3, [r7, #8]
 800474e:	f003 031f 	and.w	r3, r3, #31
 8004752:	2201      	movs	r2, #1
 8004754:	fa02 f303 	lsl.w	r3, r2, r3
 8004758:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800475a:	68fb      	ldr	r3, [r7, #12]
 800475c:	6a1a      	ldr	r2, [r3, #32]
 800475e:	697b      	ldr	r3, [r7, #20]
 8004760:	43db      	mvns	r3, r3
 8004762:	401a      	ands	r2, r3
 8004764:	68fb      	ldr	r3, [r7, #12]
 8004766:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	6a1a      	ldr	r2, [r3, #32]
 800476c:	68bb      	ldr	r3, [r7, #8]
 800476e:	f003 031f 	and.w	r3, r3, #31
 8004772:	6879      	ldr	r1, [r7, #4]
 8004774:	fa01 f303 	lsl.w	r3, r1, r3
 8004778:	431a      	orrs	r2, r3
 800477a:	68fb      	ldr	r3, [r7, #12]
 800477c:	621a      	str	r2, [r3, #32]
}
 800477e:	bf00      	nop
 8004780:	371c      	adds	r7, #28
 8004782:	46bd      	mov	sp, r7
 8004784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004788:	4770      	bx	lr
	...

0800478c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800479c:	2b01      	cmp	r3, #1
 800479e:	d101      	bne.n	80047a4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80047a0:	2302      	movs	r3, #2
 80047a2:	e050      	b.n	8004846 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2201      	movs	r2, #1
 80047a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	2202      	movs	r2, #2
 80047b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	689b      	ldr	r3, [r3, #8]
 80047c2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ca:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	68fa      	ldr	r2, [r7, #12]
 80047d2:	4313      	orrs	r3, r2
 80047d4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	68fa      	ldr	r2, [r7, #12]
 80047dc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	681b      	ldr	r3, [r3, #0]
 80047e2:	4a1c      	ldr	r2, [pc, #112]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047e4:	4293      	cmp	r3, r2
 80047e6:	d018      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047f0:	d013      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	4a18      	ldr	r2, [pc, #96]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047f8:	4293      	cmp	r3, r2
 80047fa:	d00e      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	4a16      	ldr	r2, [pc, #88]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d009      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	4a15      	ldr	r2, [pc, #84]	; (8004860 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800480c:	4293      	cmp	r3, r2
 800480e:	d004      	beq.n	800481a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4a13      	ldr	r2, [pc, #76]	; (8004864 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d10c      	bne.n	8004834 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800481a:	68bb      	ldr	r3, [r7, #8]
 800481c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004820:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004822:	683b      	ldr	r3, [r7, #0]
 8004824:	685b      	ldr	r3, [r3, #4]
 8004826:	68ba      	ldr	r2, [r7, #8]
 8004828:	4313      	orrs	r3, r2
 800482a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	68ba      	ldr	r2, [r7, #8]
 8004832:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2201      	movs	r2, #1
 8004838:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2200      	movs	r2, #0
 8004840:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004844:	2300      	movs	r3, #0
}
 8004846:	4618      	mov	r0, r3
 8004848:	3714      	adds	r7, #20
 800484a:	46bd      	mov	sp, r7
 800484c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004850:	4770      	bx	lr
 8004852:	bf00      	nop
 8004854:	40010000 	.word	0x40010000
 8004858:	40000400 	.word	0x40000400
 800485c:	40000800 	.word	0x40000800
 8004860:	40000c00 	.word	0x40000c00
 8004864:	40014000 	.word	0x40014000

08004868 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004868:	b480      	push	{r7}
 800486a:	b083      	sub	sp, #12
 800486c:	af00      	add	r7, sp, #0
 800486e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004870:	bf00      	nop
 8004872:	370c      	adds	r7, #12
 8004874:	46bd      	mov	sp, r7
 8004876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487a:	4770      	bx	lr

0800487c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800487c:	b480      	push	{r7}
 800487e:	b083      	sub	sp, #12
 8004880:	af00      	add	r7, sp, #0
 8004882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004884:	bf00      	nop
 8004886:	370c      	adds	r7, #12
 8004888:	46bd      	mov	sp, r7
 800488a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488e:	4770      	bx	lr

08004890 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004890:	b580      	push	{r7, lr}
 8004892:	b082      	sub	sp, #8
 8004894:	af00      	add	r7, sp, #0
 8004896:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d101      	bne.n	80048a2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	e042      	b.n	8004928 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80048a8:	b2db      	uxtb	r3, r3
 80048aa:	2b00      	cmp	r3, #0
 80048ac:	d106      	bne.n	80048bc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048b6:	6878      	ldr	r0, [r7, #4]
 80048b8:	f7fd f89e 	bl	80019f8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2224      	movs	r2, #36	; 0x24
 80048c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	68da      	ldr	r2, [r3, #12]
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048d2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048d4:	6878      	ldr	r0, [r7, #4]
 80048d6:	f000 fdbd 	bl	8005454 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	681b      	ldr	r3, [r3, #0]
 80048de:	691a      	ldr	r2, [r3, #16]
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	681b      	ldr	r3, [r3, #0]
 80048e4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	695a      	ldr	r2, [r3, #20]
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	68da      	ldr	r2, [r3, #12]
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004908:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800490a:	687b      	ldr	r3, [r7, #4]
 800490c:	2200      	movs	r2, #0
 800490e:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	2220      	movs	r2, #32
 800491c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 8004926:	2300      	movs	r3, #0
}
 8004928:	4618      	mov	r0, r3
 800492a:	3708      	adds	r7, #8
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004930:	b580      	push	{r7, lr}
 8004932:	b08a      	sub	sp, #40	; 0x28
 8004934:	af02      	add	r7, sp, #8
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	603b      	str	r3, [r7, #0]
 800493c:	4613      	mov	r3, r2
 800493e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004940:	2300      	movs	r3, #0
 8004942:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800494a:	b2db      	uxtb	r3, r3
 800494c:	2b20      	cmp	r3, #32
 800494e:	d175      	bne.n	8004a3c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004950:	68bb      	ldr	r3, [r7, #8]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d002      	beq.n	800495c <HAL_UART_Transmit+0x2c>
 8004956:	88fb      	ldrh	r3, [r7, #6]
 8004958:	2b00      	cmp	r3, #0
 800495a:	d101      	bne.n	8004960 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800495c:	2301      	movs	r3, #1
 800495e:	e06e      	b.n	8004a3e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	2200      	movs	r2, #0
 8004964:	645a      	str	r2, [r3, #68]	; 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2221      	movs	r2, #33	; 0x21
 800496a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800496e:	f7fd f9b1 	bl	8001cd4 <HAL_GetTick>
 8004972:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	88fa      	ldrh	r2, [r7, #6]
 8004978:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	88fa      	ldrh	r2, [r7, #6]
 800497e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	689b      	ldr	r3, [r3, #8]
 8004984:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004988:	d108      	bne.n	800499c <HAL_UART_Transmit+0x6c>
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	691b      	ldr	r3, [r3, #16]
 800498e:	2b00      	cmp	r3, #0
 8004990:	d104      	bne.n	800499c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004992:	2300      	movs	r3, #0
 8004994:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004996:	68bb      	ldr	r3, [r7, #8]
 8004998:	61bb      	str	r3, [r7, #24]
 800499a:	e003      	b.n	80049a4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80049a0:	2300      	movs	r3, #0
 80049a2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80049a4:	e02e      	b.n	8004a04 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80049a6:	683b      	ldr	r3, [r7, #0]
 80049a8:	9300      	str	r3, [sp, #0]
 80049aa:	697b      	ldr	r3, [r7, #20]
 80049ac:	2200      	movs	r2, #0
 80049ae:	2180      	movs	r1, #128	; 0x80
 80049b0:	68f8      	ldr	r0, [r7, #12]
 80049b2:	f000 fb1f 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 80049b6:	4603      	mov	r3, r0
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d005      	beq.n	80049c8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 80049bc:	68fb      	ldr	r3, [r7, #12]
 80049be:	2220      	movs	r2, #32
 80049c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e03a      	b.n	8004a3e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 80049c8:	69fb      	ldr	r3, [r7, #28]
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d10b      	bne.n	80049e6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	881b      	ldrh	r3, [r3, #0]
 80049d2:	461a      	mov	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049dc:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049de:	69bb      	ldr	r3, [r7, #24]
 80049e0:	3302      	adds	r3, #2
 80049e2:	61bb      	str	r3, [r7, #24]
 80049e4:	e007      	b.n	80049f6 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049e6:	69fb      	ldr	r3, [r7, #28]
 80049e8:	781a      	ldrb	r2, [r3, #0]
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049f0:	69fb      	ldr	r3, [r7, #28]
 80049f2:	3301      	adds	r3, #1
 80049f4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80049fa:	b29b      	uxth	r3, r3
 80049fc:	3b01      	subs	r3, #1
 80049fe:	b29a      	uxth	r2, r3
 8004a00:	68fb      	ldr	r3, [r7, #12]
 8004a02:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d1cb      	bne.n	80049a6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a0e:	683b      	ldr	r3, [r7, #0]
 8004a10:	9300      	str	r3, [sp, #0]
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2200      	movs	r2, #0
 8004a16:	2140      	movs	r1, #64	; 0x40
 8004a18:	68f8      	ldr	r0, [r7, #12]
 8004a1a:	f000 faeb 	bl	8004ff4 <UART_WaitOnFlagUntilTimeout>
 8004a1e:	4603      	mov	r3, r0
 8004a20:	2b00      	cmp	r3, #0
 8004a22:	d005      	beq.n	8004a30 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	2220      	movs	r2, #32
 8004a28:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      return HAL_TIMEOUT;
 8004a2c:	2303      	movs	r3, #3
 8004a2e:	e006      	b.n	8004a3e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a30:	68fb      	ldr	r3, [r7, #12]
 8004a32:	2220      	movs	r2, #32
 8004a34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    return HAL_OK;
 8004a38:	2300      	movs	r3, #0
 8004a3a:	e000      	b.n	8004a3e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a3c:	2302      	movs	r3, #2
  }
}
 8004a3e:	4618      	mov	r0, r3
 8004a40:	3720      	adds	r7, #32
 8004a42:	46bd      	mov	sp, r7
 8004a44:	bd80      	pop	{r7, pc}

08004a46 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a46:	b580      	push	{r7, lr}
 8004a48:	b084      	sub	sp, #16
 8004a4a:	af00      	add	r7, sp, #0
 8004a4c:	60f8      	str	r0, [r7, #12]
 8004a4e:	60b9      	str	r1, [r7, #8]
 8004a50:	4613      	mov	r3, r2
 8004a52:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a54:	68fb      	ldr	r3, [r7, #12]
 8004a56:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004a5a:	b2db      	uxtb	r3, r3
 8004a5c:	2b20      	cmp	r3, #32
 8004a5e:	d112      	bne.n	8004a86 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a60:	68bb      	ldr	r3, [r7, #8]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <HAL_UART_Receive_IT+0x26>
 8004a66:	88fb      	ldrh	r3, [r7, #6]
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d101      	bne.n	8004a70 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e00b      	b.n	8004a88 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2200      	movs	r2, #0
 8004a74:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a76:	88fb      	ldrh	r3, [r7, #6]
 8004a78:	461a      	mov	r2, r3
 8004a7a:	68b9      	ldr	r1, [r7, #8]
 8004a7c:	68f8      	ldr	r0, [r7, #12]
 8004a7e:	f000 fb12 	bl	80050a6 <UART_Start_Receive_IT>
 8004a82:	4603      	mov	r3, r0
 8004a84:	e000      	b.n	8004a88 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a86:	2302      	movs	r3, #2
  }
}
 8004a88:	4618      	mov	r0, r3
 8004a8a:	3710      	adds	r7, #16
 8004a8c:	46bd      	mov	sp, r7
 8004a8e:	bd80      	pop	{r7, pc}

08004a90 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a90:	b580      	push	{r7, lr}
 8004a92:	b0ba      	sub	sp, #232	; 0xe8
 8004a94:	af00      	add	r7, sp, #0
 8004a96:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	681b      	ldr	r3, [r3, #0]
 8004a9e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	68db      	ldr	r3, [r3, #12]
 8004aa8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	695b      	ldr	r3, [r3, #20]
 8004ab2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8004ab6:	2300      	movs	r3, #0
 8004ab8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004abc:	2300      	movs	r3, #0
 8004abe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004ac2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ac6:	f003 030f 	and.w	r3, r3, #15
 8004aca:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004ace:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d10f      	bne.n	8004af6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004ad6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ada:	f003 0320 	and.w	r3, r3, #32
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d009      	beq.n	8004af6 <HAL_UART_IRQHandler+0x66>
 8004ae2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004ae6:	f003 0320 	and.w	r3, r3, #32
 8004aea:	2b00      	cmp	r3, #0
 8004aec:	d003      	beq.n	8004af6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fbf2 	bl	80052d8 <UART_Receive_IT>
      return;
 8004af4:	e25b      	b.n	8004fae <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004af6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004afa:	2b00      	cmp	r3, #0
 8004afc:	f000 80de 	beq.w	8004cbc <HAL_UART_IRQHandler+0x22c>
 8004b00:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b04:	f003 0301 	and.w	r3, r3, #1
 8004b08:	2b00      	cmp	r3, #0
 8004b0a:	d106      	bne.n	8004b1a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004b0c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b10:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	f000 80d1 	beq.w	8004cbc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	f003 0301 	and.w	r3, r3, #1
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d00b      	beq.n	8004b3e <HAL_UART_IRQHandler+0xae>
 8004b26:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b2a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d005      	beq.n	8004b3e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b36:	f043 0201 	orr.w	r2, r3, #1
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b3e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b42:	f003 0304 	and.w	r3, r3, #4
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d00b      	beq.n	8004b62 <HAL_UART_IRQHandler+0xd2>
 8004b4a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b4e:	f003 0301 	and.w	r3, r3, #1
 8004b52:	2b00      	cmp	r3, #0
 8004b54:	d005      	beq.n	8004b62 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b5a:	f043 0202 	orr.w	r2, r3, #2
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b66:	f003 0302 	and.w	r3, r3, #2
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d00b      	beq.n	8004b86 <HAL_UART_IRQHandler+0xf6>
 8004b6e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004b72:	f003 0301 	and.w	r3, r3, #1
 8004b76:	2b00      	cmp	r3, #0
 8004b78:	d005      	beq.n	8004b86 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b7e:	f043 0204 	orr.w	r2, r3, #4
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b8a:	f003 0308 	and.w	r3, r3, #8
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	d011      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x126>
 8004b92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004b96:	f003 0320 	and.w	r3, r3, #32
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d105      	bne.n	8004baa <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004ba2:	f003 0301 	and.w	r3, r3, #1
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d005      	beq.n	8004bb6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bae:	f043 0208 	orr.w	r2, r3, #8
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	f000 81f2 	beq.w	8004fa4 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004bc0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bc4:	f003 0320 	and.w	r3, r3, #32
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d008      	beq.n	8004bde <HAL_UART_IRQHandler+0x14e>
 8004bcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004bd0:	f003 0320 	and.w	r3, r3, #32
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d002      	beq.n	8004bde <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bd8:	6878      	ldr	r0, [r7, #4]
 8004bda:	f000 fb7d 	bl	80052d8 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bde:	687b      	ldr	r3, [r7, #4]
 8004be0:	681b      	ldr	r3, [r3, #0]
 8004be2:	695b      	ldr	r3, [r3, #20]
 8004be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004be8:	2b40      	cmp	r3, #64	; 0x40
 8004bea:	bf0c      	ite	eq
 8004bec:	2301      	moveq	r3, #1
 8004bee:	2300      	movne	r3, #0
 8004bf0:	b2db      	uxtb	r3, r3
 8004bf2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bf6:	687b      	ldr	r3, [r7, #4]
 8004bf8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004bfa:	f003 0308 	and.w	r3, r3, #8
 8004bfe:	2b00      	cmp	r3, #0
 8004c00:	d103      	bne.n	8004c0a <HAL_UART_IRQHandler+0x17a>
 8004c02:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8004c06:	2b00      	cmp	r3, #0
 8004c08:	d04f      	beq.n	8004caa <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004c0a:	6878      	ldr	r0, [r7, #4]
 8004c0c:	f000 fa85 	bl	800511a <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	695b      	ldr	r3, [r3, #20]
 8004c16:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c1a:	2b40      	cmp	r3, #64	; 0x40
 8004c1c:	d141      	bne.n	8004ca2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	3314      	adds	r3, #20
 8004c24:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c28:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8004c2c:	e853 3f00 	ldrex	r3, [r3]
 8004c30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8004c34:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8004c38:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004c3c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	3314      	adds	r3, #20
 8004c46:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004c4a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004c4e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c52:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004c56:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004c5a:	e841 2300 	strex	r3, r2, [r1]
 8004c5e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004c62:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004c66:	2b00      	cmp	r3, #0
 8004c68:	d1d9      	bne.n	8004c1e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d013      	beq.n	8004c9a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c76:	4a7e      	ldr	r2, [pc, #504]	; (8004e70 <HAL_UART_IRQHandler+0x3e0>)
 8004c78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c7e:	4618      	mov	r0, r3
 8004c80:	f7fd fa64 	bl	800214c <HAL_DMA_Abort_IT>
 8004c84:	4603      	mov	r3, r0
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d016      	beq.n	8004cb8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c8a:	687b      	ldr	r3, [r7, #4]
 8004c8c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004c90:	687a      	ldr	r2, [r7, #4]
 8004c92:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004c94:	4610      	mov	r0, r2
 8004c96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c98:	e00e      	b.n	8004cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c9a:	6878      	ldr	r0, [r7, #4]
 8004c9c:	f000 f994 	bl	8004fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca0:	e00a      	b.n	8004cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004ca2:	6878      	ldr	r0, [r7, #4]
 8004ca4:	f000 f990 	bl	8004fc8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ca8:	e006      	b.n	8004cb8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004caa:	6878      	ldr	r0, [r7, #4]
 8004cac:	f000 f98c 	bl	8004fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	2200      	movs	r2, #0
 8004cb4:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004cb6:	e175      	b.n	8004fa4 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cb8:	bf00      	nop
    return;
 8004cba:	e173      	b.n	8004fa4 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004cc0:	2b01      	cmp	r3, #1
 8004cc2:	f040 814f 	bne.w	8004f64 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004cc6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cca:	f003 0310 	and.w	r3, r3, #16
 8004cce:	2b00      	cmp	r3, #0
 8004cd0:	f000 8148 	beq.w	8004f64 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004cd4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004cd8:	f003 0310 	and.w	r3, r3, #16
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	f000 8141 	beq.w	8004f64 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ce2:	2300      	movs	r3, #0
 8004ce4:	60bb      	str	r3, [r7, #8]
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	60bb      	str	r3, [r7, #8]
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	685b      	ldr	r3, [r3, #4]
 8004cf4:	60bb      	str	r3, [r7, #8]
 8004cf6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	681b      	ldr	r3, [r3, #0]
 8004cfc:	695b      	ldr	r3, [r3, #20]
 8004cfe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d02:	2b40      	cmp	r3, #64	; 0x40
 8004d04:	f040 80b6 	bne.w	8004e74 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	685b      	ldr	r3, [r3, #4]
 8004d10:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004d14:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004d18:	2b00      	cmp	r3, #0
 8004d1a:	f000 8145 	beq.w	8004fa8 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004d22:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d26:	429a      	cmp	r2, r3
 8004d28:	f080 813e 	bcs.w	8004fa8 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d2c:	687b      	ldr	r3, [r7, #4]
 8004d2e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004d32:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004d38:	69db      	ldr	r3, [r3, #28]
 8004d3a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d3e:	f000 8088 	beq.w	8004e52 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	681b      	ldr	r3, [r3, #0]
 8004d46:	330c      	adds	r3, #12
 8004d48:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004d50:	e853 3f00 	ldrex	r3, [r3]
 8004d54:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004d58:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004d5c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004d60:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	330c      	adds	r3, #12
 8004d6a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004d6e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004d72:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d76:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004d7a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004d7e:	e841 2300 	strex	r3, r2, [r1]
 8004d82:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004d86:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d1d9      	bne.n	8004d42 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	3314      	adds	r3, #20
 8004d94:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d96:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d98:	e853 3f00 	ldrex	r3, [r3]
 8004d9c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004d9e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004da0:	f023 0301 	bic.w	r3, r3, #1
 8004da4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	3314      	adds	r3, #20
 8004dae:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004db2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004db6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004db8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004dba:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004dbe:	e841 2300 	strex	r3, r2, [r1]
 8004dc2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004dc4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d1e1      	bne.n	8004d8e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	681b      	ldr	r3, [r3, #0]
 8004dce:	3314      	adds	r3, #20
 8004dd0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dd2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004dd4:	e853 3f00 	ldrex	r3, [r3]
 8004dd8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004dda:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ddc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004de0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	3314      	adds	r3, #20
 8004dea:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004dee:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004df0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004df2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004df4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004df6:	e841 2300 	strex	r3, r2, [r1]
 8004dfa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004dfc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d1e3      	bne.n	8004dca <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	2220      	movs	r2, #32
 8004e06:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004e0a:	687b      	ldr	r3, [r7, #4]
 8004e0c:	2200      	movs	r2, #0
 8004e0e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	330c      	adds	r3, #12
 8004e16:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e18:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e1a:	e853 3f00 	ldrex	r3, [r3]
 8004e1e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004e20:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e22:	f023 0310 	bic.w	r3, r3, #16
 8004e26:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	681b      	ldr	r3, [r3, #0]
 8004e2e:	330c      	adds	r3, #12
 8004e30:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004e34:	65ba      	str	r2, [r7, #88]	; 0x58
 8004e36:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e38:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004e3a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004e3c:	e841 2300 	strex	r3, r2, [r1]
 8004e40:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004e42:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e44:	2b00      	cmp	r3, #0
 8004e46:	d1e3      	bne.n	8004e10 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004e4c:	4618      	mov	r0, r3
 8004e4e:	f7fd f90d 	bl	800206c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e52:	687b      	ldr	r3, [r7, #4]
 8004e54:	2202      	movs	r2, #2
 8004e56:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e60:	b29b      	uxth	r3, r3
 8004e62:	1ad3      	subs	r3, r2, r3
 8004e64:	b29b      	uxth	r3, r3
 8004e66:	4619      	mov	r1, r3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f8b7 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e6e:	e09b      	b.n	8004fa8 <HAL_UART_IRQHandler+0x518>
 8004e70:	080051e1 	.word	0x080051e1
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e7c:	b29b      	uxth	r3, r3
 8004e7e:	1ad3      	subs	r3, r2, r3
 8004e80:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004e88:	b29b      	uxth	r3, r3
 8004e8a:	2b00      	cmp	r3, #0
 8004e8c:	f000 808e 	beq.w	8004fac <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e90:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 8089 	beq.w	8004fac <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	330c      	adds	r3, #12
 8004ea0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004eaa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004eac:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004eb0:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	330c      	adds	r3, #12
 8004eba:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004ebe:	647a      	str	r2, [r7, #68]	; 0x44
 8004ec0:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec2:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004ec4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec6:	e841 2300 	strex	r3, r2, [r1]
 8004eca:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004ecc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1e3      	bne.n	8004e9a <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	3314      	adds	r3, #20
 8004ed8:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004edc:	e853 3f00 	ldrex	r3, [r3]
 8004ee0:	623b      	str	r3, [r7, #32]
   return(result);
 8004ee2:	6a3b      	ldr	r3, [r7, #32]
 8004ee4:	f023 0301 	bic.w	r3, r3, #1
 8004ee8:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	3314      	adds	r3, #20
 8004ef2:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004ef6:	633a      	str	r2, [r7, #48]	; 0x30
 8004ef8:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004efc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004f04:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e3      	bne.n	8004ed2 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	330c      	adds	r3, #12
 8004f1e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	e853 3f00 	ldrex	r3, [r3]
 8004f26:	60fb      	str	r3, [r7, #12]
   return(result);
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	f023 0310 	bic.w	r3, r3, #16
 8004f2e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	330c      	adds	r3, #12
 8004f38:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004f3c:	61fa      	str	r2, [r7, #28]
 8004f3e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f40:	69b9      	ldr	r1, [r7, #24]
 8004f42:	69fa      	ldr	r2, [r7, #28]
 8004f44:	e841 2300 	strex	r3, r2, [r1]
 8004f48:	617b      	str	r3, [r7, #20]
   return(result);
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d1e3      	bne.n	8004f18 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f50:	687b      	ldr	r3, [r7, #4]
 8004f52:	2202      	movs	r2, #2
 8004f54:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f56:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004f5a:	4619      	mov	r1, r3
 8004f5c:	6878      	ldr	r0, [r7, #4]
 8004f5e:	f000 f83d 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f62:	e023      	b.n	8004fac <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f64:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d009      	beq.n	8004f84 <HAL_UART_IRQHandler+0x4f4>
 8004f70:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f74:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004f78:	2b00      	cmp	r3, #0
 8004f7a:	d003      	beq.n	8004f84 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f7c:	6878      	ldr	r0, [r7, #4]
 8004f7e:	f000 f943 	bl	8005208 <UART_Transmit_IT>
    return;
 8004f82:	e014      	b.n	8004fae <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f84:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00e      	beq.n	8004fae <HAL_UART_IRQHandler+0x51e>
 8004f90:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004f94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004f98:	2b00      	cmp	r3, #0
 8004f9a:	d008      	beq.n	8004fae <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f9c:	6878      	ldr	r0, [r7, #4]
 8004f9e:	f000 f983 	bl	80052a8 <UART_EndTransmit_IT>
    return;
 8004fa2:	e004      	b.n	8004fae <HAL_UART_IRQHandler+0x51e>
    return;
 8004fa4:	bf00      	nop
 8004fa6:	e002      	b.n	8004fae <HAL_UART_IRQHandler+0x51e>
      return;
 8004fa8:	bf00      	nop
 8004faa:	e000      	b.n	8004fae <HAL_UART_IRQHandler+0x51e>
      return;
 8004fac:	bf00      	nop
  }
}
 8004fae:	37e8      	adds	r7, #232	; 0xe8
 8004fb0:	46bd      	mov	sp, r7
 8004fb2:	bd80      	pop	{r7, pc}

08004fb4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b083      	sub	sp, #12
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004fc8:	b480      	push	{r7}
 8004fca:	b083      	sub	sp, #12
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fd0:	bf00      	nop
 8004fd2:	370c      	adds	r7, #12
 8004fd4:	46bd      	mov	sp, r7
 8004fd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fda:	4770      	bx	lr

08004fdc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fdc:	b480      	push	{r7}
 8004fde:	b083      	sub	sp, #12
 8004fe0:	af00      	add	r7, sp, #0
 8004fe2:	6078      	str	r0, [r7, #4]
 8004fe4:	460b      	mov	r3, r1
 8004fe6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fe8:	bf00      	nop
 8004fea:	370c      	adds	r7, #12
 8004fec:	46bd      	mov	sp, r7
 8004fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff2:	4770      	bx	lr

08004ff4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ff4:	b580      	push	{r7, lr}
 8004ff6:	b086      	sub	sp, #24
 8004ff8:	af00      	add	r7, sp, #0
 8004ffa:	60f8      	str	r0, [r7, #12]
 8004ffc:	60b9      	str	r1, [r7, #8]
 8004ffe:	603b      	str	r3, [r7, #0]
 8005000:	4613      	mov	r3, r2
 8005002:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005004:	e03b      	b.n	800507e <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005006:	6a3b      	ldr	r3, [r7, #32]
 8005008:	f1b3 3fff 	cmp.w	r3, #4294967295
 800500c:	d037      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800500e:	f7fc fe61 	bl	8001cd4 <HAL_GetTick>
 8005012:	4602      	mov	r2, r0
 8005014:	683b      	ldr	r3, [r7, #0]
 8005016:	1ad3      	subs	r3, r2, r3
 8005018:	6a3a      	ldr	r2, [r7, #32]
 800501a:	429a      	cmp	r2, r3
 800501c:	d302      	bcc.n	8005024 <UART_WaitOnFlagUntilTimeout+0x30>
 800501e:	6a3b      	ldr	r3, [r7, #32]
 8005020:	2b00      	cmp	r3, #0
 8005022:	d101      	bne.n	8005028 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005024:	2303      	movs	r3, #3
 8005026:	e03a      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	68db      	ldr	r3, [r3, #12]
 800502e:	f003 0304 	and.w	r3, r3, #4
 8005032:	2b00      	cmp	r3, #0
 8005034:	d023      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0x8a>
 8005036:	68bb      	ldr	r3, [r7, #8]
 8005038:	2b80      	cmp	r3, #128	; 0x80
 800503a:	d020      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0x8a>
 800503c:	68bb      	ldr	r3, [r7, #8]
 800503e:	2b40      	cmp	r3, #64	; 0x40
 8005040:	d01d      	beq.n	800507e <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005042:	68fb      	ldr	r3, [r7, #12]
 8005044:	681b      	ldr	r3, [r3, #0]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f003 0308 	and.w	r3, r3, #8
 800504c:	2b08      	cmp	r3, #8
 800504e:	d116      	bne.n	800507e <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005050:	2300      	movs	r3, #0
 8005052:	617b      	str	r3, [r7, #20]
 8005054:	68fb      	ldr	r3, [r7, #12]
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	617b      	str	r3, [r7, #20]
 800505c:	68fb      	ldr	r3, [r7, #12]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	685b      	ldr	r3, [r3, #4]
 8005062:	617b      	str	r3, [r7, #20]
 8005064:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005066:	68f8      	ldr	r0, [r7, #12]
 8005068:	f000 f857 	bl	800511a <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800506c:	68fb      	ldr	r3, [r7, #12]
 800506e:	2208      	movs	r2, #8
 8005070:	645a      	str	r2, [r3, #68]	; 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005072:	68fb      	ldr	r3, [r7, #12]
 8005074:	2200      	movs	r2, #0
 8005076:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          return HAL_ERROR;
 800507a:	2301      	movs	r3, #1
 800507c:	e00f      	b.n	800509e <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	68bb      	ldr	r3, [r7, #8]
 8005086:	4013      	ands	r3, r2
 8005088:	68ba      	ldr	r2, [r7, #8]
 800508a:	429a      	cmp	r2, r3
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	79fb      	ldrb	r3, [r7, #7]
 8005098:	429a      	cmp	r2, r3
 800509a:	d0b4      	beq.n	8005006 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800509c:	2300      	movs	r3, #0
}
 800509e:	4618      	mov	r0, r3
 80050a0:	3718      	adds	r7, #24
 80050a2:	46bd      	mov	sp, r7
 80050a4:	bd80      	pop	{r7, pc}

080050a6 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80050a6:	b480      	push	{r7}
 80050a8:	b085      	sub	sp, #20
 80050aa:	af00      	add	r7, sp, #0
 80050ac:	60f8      	str	r0, [r7, #12]
 80050ae:	60b9      	str	r1, [r7, #8]
 80050b0:	4613      	mov	r3, r2
 80050b2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	68ba      	ldr	r2, [r7, #8]
 80050b8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	88fa      	ldrh	r2, [r7, #6]
 80050be:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	88fa      	ldrh	r2, [r7, #6]
 80050c4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	2200      	movs	r2, #0
 80050ca:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050cc:	68fb      	ldr	r3, [r7, #12]
 80050ce:	2222      	movs	r2, #34	; 0x22
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050d4:	68fb      	ldr	r3, [r7, #12]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	2b00      	cmp	r3, #0
 80050da:	d007      	beq.n	80050ec <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050dc:	68fb      	ldr	r3, [r7, #12]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	68da      	ldr	r2, [r3, #12]
 80050e2:	68fb      	ldr	r3, [r7, #12]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80050ea:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	695a      	ldr	r2, [r3, #20]
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	681b      	ldr	r3, [r3, #0]
 80050f6:	f042 0201 	orr.w	r2, r2, #1
 80050fa:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68da      	ldr	r2, [r3, #12]
 8005102:	68fb      	ldr	r3, [r7, #12]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	f042 0220 	orr.w	r2, r2, #32
 800510a:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800510c:	2300      	movs	r3, #0
}
 800510e:	4618      	mov	r0, r3
 8005110:	3714      	adds	r7, #20
 8005112:	46bd      	mov	sp, r7
 8005114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005118:	4770      	bx	lr

0800511a <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800511a:	b480      	push	{r7}
 800511c:	b095      	sub	sp, #84	; 0x54
 800511e:	af00      	add	r7, sp, #0
 8005120:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	330c      	adds	r3, #12
 8005128:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800512a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800512c:	e853 3f00 	ldrex	r3, [r3]
 8005130:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8005132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005134:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8005138:	64fb      	str	r3, [r7, #76]	; 0x4c
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	330c      	adds	r3, #12
 8005140:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005142:	643a      	str	r2, [r7, #64]	; 0x40
 8005144:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005146:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8005148:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800514a:	e841 2300 	strex	r3, r2, [r1]
 800514e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8005150:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1e5      	bne.n	8005122 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	3314      	adds	r3, #20
 800515c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800515e:	6a3b      	ldr	r3, [r7, #32]
 8005160:	e853 3f00 	ldrex	r3, [r3]
 8005164:	61fb      	str	r3, [r7, #28]
   return(result);
 8005166:	69fb      	ldr	r3, [r7, #28]
 8005168:	f023 0301 	bic.w	r3, r3, #1
 800516c:	64bb      	str	r3, [r7, #72]	; 0x48
 800516e:	687b      	ldr	r3, [r7, #4]
 8005170:	681b      	ldr	r3, [r3, #0]
 8005172:	3314      	adds	r3, #20
 8005174:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8005176:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005178:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800517a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800517c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800517e:	e841 2300 	strex	r3, r2, [r1]
 8005182:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8005184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005186:	2b00      	cmp	r3, #0
 8005188:	d1e5      	bne.n	8005156 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800518e:	2b01      	cmp	r3, #1
 8005190:	d119      	bne.n	80051c6 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	681b      	ldr	r3, [r3, #0]
 8005196:	330c      	adds	r3, #12
 8005198:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800519a:	68fb      	ldr	r3, [r7, #12]
 800519c:	e853 3f00 	ldrex	r3, [r3]
 80051a0:	60bb      	str	r3, [r7, #8]
   return(result);
 80051a2:	68bb      	ldr	r3, [r7, #8]
 80051a4:	f023 0310 	bic.w	r3, r3, #16
 80051a8:	647b      	str	r3, [r7, #68]	; 0x44
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	330c      	adds	r3, #12
 80051b0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051b2:	61ba      	str	r2, [r7, #24]
 80051b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80051b6:	6979      	ldr	r1, [r7, #20]
 80051b8:	69ba      	ldr	r2, [r7, #24]
 80051ba:	e841 2300 	strex	r3, r2, [r1]
 80051be:	613b      	str	r3, [r7, #16]
   return(result);
 80051c0:	693b      	ldr	r3, [r7, #16]
 80051c2:	2b00      	cmp	r3, #0
 80051c4:	d1e5      	bne.n	8005192 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	2220      	movs	r2, #32
 80051ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2200      	movs	r2, #0
 80051d2:	631a      	str	r2, [r3, #48]	; 0x30
}
 80051d4:	bf00      	nop
 80051d6:	3754      	adds	r7, #84	; 0x54
 80051d8:	46bd      	mov	sp, r7
 80051da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051de:	4770      	bx	lr

080051e0 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b084      	sub	sp, #16
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80051ec:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051ee:	68fb      	ldr	r3, [r7, #12]
 80051f0:	2200      	movs	r2, #0
 80051f2:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80051f4:	68fb      	ldr	r3, [r7, #12]
 80051f6:	2200      	movs	r2, #0
 80051f8:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051fa:	68f8      	ldr	r0, [r7, #12]
 80051fc:	f7ff fee4 	bl	8004fc8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005200:	bf00      	nop
 8005202:	3710      	adds	r7, #16
 8005204:	46bd      	mov	sp, r7
 8005206:	bd80      	pop	{r7, pc}

08005208 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005208:	b480      	push	{r7}
 800520a:	b085      	sub	sp, #20
 800520c:	af00      	add	r7, sp, #0
 800520e:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005216:	b2db      	uxtb	r3, r3
 8005218:	2b21      	cmp	r3, #33	; 0x21
 800521a:	d13e      	bne.n	800529a <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	689b      	ldr	r3, [r3, #8]
 8005220:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005224:	d114      	bne.n	8005250 <UART_Transmit_IT+0x48>
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	691b      	ldr	r3, [r3, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d110      	bne.n	8005250 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6a1b      	ldr	r3, [r3, #32]
 8005232:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	881b      	ldrh	r3, [r3, #0]
 8005238:	461a      	mov	r2, r3
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005242:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005244:	687b      	ldr	r3, [r7, #4]
 8005246:	6a1b      	ldr	r3, [r3, #32]
 8005248:	1c9a      	adds	r2, r3, #2
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	621a      	str	r2, [r3, #32]
 800524e:	e008      	b.n	8005262 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	6a1b      	ldr	r3, [r3, #32]
 8005254:	1c59      	adds	r1, r3, #1
 8005256:	687a      	ldr	r2, [r7, #4]
 8005258:	6211      	str	r1, [r2, #32]
 800525a:	781a      	ldrb	r2, [r3, #0]
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8005266:	b29b      	uxth	r3, r3
 8005268:	3b01      	subs	r3, #1
 800526a:	b29b      	uxth	r3, r3
 800526c:	687a      	ldr	r2, [r7, #4]
 800526e:	4619      	mov	r1, r3
 8005270:	84d1      	strh	r1, [r2, #38]	; 0x26
 8005272:	2b00      	cmp	r3, #0
 8005274:	d10f      	bne.n	8005296 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	68da      	ldr	r2, [r3, #12]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8005284:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	681b      	ldr	r3, [r3, #0]
 800528a:	68da      	ldr	r2, [r3, #12]
 800528c:	687b      	ldr	r3, [r7, #4]
 800528e:	681b      	ldr	r3, [r3, #0]
 8005290:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005294:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005296:	2300      	movs	r3, #0
 8005298:	e000      	b.n	800529c <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800529a:	2302      	movs	r3, #2
  }
}
 800529c:	4618      	mov	r0, r3
 800529e:	3714      	adds	r7, #20
 80052a0:	46bd      	mov	sp, r7
 80052a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052a6:	4770      	bx	lr

080052a8 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b082      	sub	sp, #8
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	681b      	ldr	r3, [r3, #0]
 80052b4:	68da      	ldr	r2, [r3, #12]
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80052be:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	2220      	movs	r2, #32
 80052c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80052c8:	6878      	ldr	r0, [r7, #4]
 80052ca:	f7ff fe73 	bl	8004fb4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052ce:	2300      	movs	r3, #0
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	3708      	adds	r7, #8
 80052d4:	46bd      	mov	sp, r7
 80052d6:	bd80      	pop	{r7, pc}

080052d8 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052d8:	b580      	push	{r7, lr}
 80052da:	b08c      	sub	sp, #48	; 0x30
 80052dc:	af00      	add	r7, sp, #0
 80052de:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80052e6:	b2db      	uxtb	r3, r3
 80052e8:	2b22      	cmp	r3, #34	; 0x22
 80052ea:	f040 80ae 	bne.w	800544a <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	689b      	ldr	r3, [r3, #8]
 80052f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80052f6:	d117      	bne.n	8005328 <UART_Receive_IT+0x50>
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d113      	bne.n	8005328 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005300:	2300      	movs	r3, #0
 8005302:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005308:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	685b      	ldr	r3, [r3, #4]
 8005310:	b29b      	uxth	r3, r3
 8005312:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005316:	b29a      	uxth	r2, r3
 8005318:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800531a:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005320:	1c9a      	adds	r2, r3, #2
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	629a      	str	r2, [r3, #40]	; 0x28
 8005326:	e026      	b.n	8005376 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800532c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800532e:	2300      	movs	r3, #0
 8005330:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	689b      	ldr	r3, [r3, #8]
 8005336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800533a:	d007      	beq.n	800534c <UART_Receive_IT+0x74>
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	689b      	ldr	r3, [r3, #8]
 8005340:	2b00      	cmp	r3, #0
 8005342:	d10a      	bne.n	800535a <UART_Receive_IT+0x82>
 8005344:	687b      	ldr	r3, [r7, #4]
 8005346:	691b      	ldr	r3, [r3, #16]
 8005348:	2b00      	cmp	r3, #0
 800534a:	d106      	bne.n	800535a <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	685b      	ldr	r3, [r3, #4]
 8005352:	b2da      	uxtb	r2, r3
 8005354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005356:	701a      	strb	r2, [r3, #0]
 8005358:	e008      	b.n	800536c <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	685b      	ldr	r3, [r3, #4]
 8005360:	b2db      	uxtb	r3, r3
 8005362:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005366:	b2da      	uxtb	r2, r3
 8005368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800536a:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005370:	1c5a      	adds	r2, r3, #1
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800537a:	b29b      	uxth	r3, r3
 800537c:	3b01      	subs	r3, #1
 800537e:	b29b      	uxth	r3, r3
 8005380:	687a      	ldr	r2, [r7, #4]
 8005382:	4619      	mov	r1, r3
 8005384:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005386:	2b00      	cmp	r3, #0
 8005388:	d15d      	bne.n	8005446 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	681b      	ldr	r3, [r3, #0]
 800538e:	68da      	ldr	r2, [r3, #12]
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f022 0220 	bic.w	r2, r2, #32
 8005398:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	68da      	ldr	r2, [r3, #12]
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	681b      	ldr	r3, [r3, #0]
 80053a4:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80053a8:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	695a      	ldr	r2, [r3, #20]
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	681b      	ldr	r3, [r3, #0]
 80053b4:	f022 0201 	bic.w	r2, r2, #1
 80053b8:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	2220      	movs	r2, #32
 80053be:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	2200      	movs	r2, #0
 80053c6:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80053c8:	687b      	ldr	r3, [r7, #4]
 80053ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80053cc:	2b01      	cmp	r3, #1
 80053ce:	d135      	bne.n	800543c <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053d6:	687b      	ldr	r3, [r7, #4]
 80053d8:	681b      	ldr	r3, [r3, #0]
 80053da:	330c      	adds	r3, #12
 80053dc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053de:	697b      	ldr	r3, [r7, #20]
 80053e0:	e853 3f00 	ldrex	r3, [r3]
 80053e4:	613b      	str	r3, [r7, #16]
   return(result);
 80053e6:	693b      	ldr	r3, [r7, #16]
 80053e8:	f023 0310 	bic.w	r3, r3, #16
 80053ec:	627b      	str	r3, [r7, #36]	; 0x24
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	681b      	ldr	r3, [r3, #0]
 80053f2:	330c      	adds	r3, #12
 80053f4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80053f6:	623a      	str	r2, [r7, #32]
 80053f8:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053fa:	69f9      	ldr	r1, [r7, #28]
 80053fc:	6a3a      	ldr	r2, [r7, #32]
 80053fe:	e841 2300 	strex	r3, r2, [r1]
 8005402:	61bb      	str	r3, [r7, #24]
   return(result);
 8005404:	69bb      	ldr	r3, [r7, #24]
 8005406:	2b00      	cmp	r3, #0
 8005408:	d1e5      	bne.n	80053d6 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800540a:	687b      	ldr	r3, [r7, #4]
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f003 0310 	and.w	r3, r3, #16
 8005414:	2b10      	cmp	r3, #16
 8005416:	d10a      	bne.n	800542e <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005418:	2300      	movs	r3, #0
 800541a:	60fb      	str	r3, [r7, #12]
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	60fb      	str	r3, [r7, #12]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	685b      	ldr	r3, [r3, #4]
 800542a:	60fb      	str	r3, [r7, #12]
 800542c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005432:	4619      	mov	r1, r3
 8005434:	6878      	ldr	r0, [r7, #4]
 8005436:	f7ff fdd1 	bl	8004fdc <HAL_UARTEx_RxEventCallback>
 800543a:	e002      	b.n	8005442 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800543c:	6878      	ldr	r0, [r7, #4]
 800543e:	f7fb fd6d 	bl	8000f1c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005442:	2300      	movs	r3, #0
 8005444:	e002      	b.n	800544c <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005446:	2300      	movs	r3, #0
 8005448:	e000      	b.n	800544c <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800544a:	2302      	movs	r3, #2
  }
}
 800544c:	4618      	mov	r0, r3
 800544e:	3730      	adds	r7, #48	; 0x30
 8005450:	46bd      	mov	sp, r7
 8005452:	bd80      	pop	{r7, pc}

08005454 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005454:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005458:	b0c0      	sub	sp, #256	; 0x100
 800545a:	af00      	add	r7, sp, #0
 800545c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	691b      	ldr	r3, [r3, #16]
 8005468:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800546c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005470:	68d9      	ldr	r1, [r3, #12]
 8005472:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005476:	681a      	ldr	r2, [r3, #0]
 8005478:	ea40 0301 	orr.w	r3, r0, r1
 800547c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800547e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005482:	689a      	ldr	r2, [r3, #8]
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005488:	691b      	ldr	r3, [r3, #16]
 800548a:	431a      	orrs	r2, r3
 800548c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005490:	695b      	ldr	r3, [r3, #20]
 8005492:	431a      	orrs	r2, r3
 8005494:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005498:	69db      	ldr	r3, [r3, #28]
 800549a:	4313      	orrs	r3, r2
 800549c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80054a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	68db      	ldr	r3, [r3, #12]
 80054a8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80054ac:	f021 010c 	bic.w	r1, r1, #12
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80054ba:	430b      	orrs	r3, r1
 80054bc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	695b      	ldr	r3, [r3, #20]
 80054c6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80054ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ce:	6999      	ldr	r1, [r3, #24]
 80054d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054d4:	681a      	ldr	r2, [r3, #0]
 80054d6:	ea40 0301 	orr.w	r3, r0, r1
 80054da:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054e0:	681a      	ldr	r2, [r3, #0]
 80054e2:	4b8f      	ldr	r3, [pc, #572]	; (8005720 <UART_SetConfig+0x2cc>)
 80054e4:	429a      	cmp	r2, r3
 80054e6:	d005      	beq.n	80054f4 <UART_SetConfig+0xa0>
 80054e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80054ec:	681a      	ldr	r2, [r3, #0]
 80054ee:	4b8d      	ldr	r3, [pc, #564]	; (8005724 <UART_SetConfig+0x2d0>)
 80054f0:	429a      	cmp	r2, r3
 80054f2:	d104      	bne.n	80054fe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054f4:	f7fd feaa 	bl	800324c <HAL_RCC_GetPCLK2Freq>
 80054f8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80054fc:	e003      	b.n	8005506 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054fe:	f7fd fe91 	bl	8003224 <HAL_RCC_GetPCLK1Freq>
 8005502:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005506:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800550a:	69db      	ldr	r3, [r3, #28]
 800550c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005510:	f040 810c 	bne.w	800572c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005514:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005518:	2200      	movs	r2, #0
 800551a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800551e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005522:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005526:	4622      	mov	r2, r4
 8005528:	462b      	mov	r3, r5
 800552a:	1891      	adds	r1, r2, r2
 800552c:	65b9      	str	r1, [r7, #88]	; 0x58
 800552e:	415b      	adcs	r3, r3
 8005530:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005532:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005536:	4621      	mov	r1, r4
 8005538:	eb12 0801 	adds.w	r8, r2, r1
 800553c:	4629      	mov	r1, r5
 800553e:	eb43 0901 	adc.w	r9, r3, r1
 8005542:	f04f 0200 	mov.w	r2, #0
 8005546:	f04f 0300 	mov.w	r3, #0
 800554a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800554e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005552:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005556:	4690      	mov	r8, r2
 8005558:	4699      	mov	r9, r3
 800555a:	4623      	mov	r3, r4
 800555c:	eb18 0303 	adds.w	r3, r8, r3
 8005560:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005564:	462b      	mov	r3, r5
 8005566:	eb49 0303 	adc.w	r3, r9, r3
 800556a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800556e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	2200      	movs	r2, #0
 8005576:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800557a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800557e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005582:	460b      	mov	r3, r1
 8005584:	18db      	adds	r3, r3, r3
 8005586:	653b      	str	r3, [r7, #80]	; 0x50
 8005588:	4613      	mov	r3, r2
 800558a:	eb42 0303 	adc.w	r3, r2, r3
 800558e:	657b      	str	r3, [r7, #84]	; 0x54
 8005590:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005594:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005598:	f7fa fe72 	bl	8000280 <__aeabi_uldivmod>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4b61      	ldr	r3, [pc, #388]	; (8005728 <UART_SetConfig+0x2d4>)
 80055a2:	fba3 2302 	umull	r2, r3, r3, r2
 80055a6:	095b      	lsrs	r3, r3, #5
 80055a8:	011c      	lsls	r4, r3, #4
 80055aa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80055ae:	2200      	movs	r2, #0
 80055b0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80055b4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80055b8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80055bc:	4642      	mov	r2, r8
 80055be:	464b      	mov	r3, r9
 80055c0:	1891      	adds	r1, r2, r2
 80055c2:	64b9      	str	r1, [r7, #72]	; 0x48
 80055c4:	415b      	adcs	r3, r3
 80055c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80055c8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80055cc:	4641      	mov	r1, r8
 80055ce:	eb12 0a01 	adds.w	sl, r2, r1
 80055d2:	4649      	mov	r1, r9
 80055d4:	eb43 0b01 	adc.w	fp, r3, r1
 80055d8:	f04f 0200 	mov.w	r2, #0
 80055dc:	f04f 0300 	mov.w	r3, #0
 80055e0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055e4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055e8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055ec:	4692      	mov	sl, r2
 80055ee:	469b      	mov	fp, r3
 80055f0:	4643      	mov	r3, r8
 80055f2:	eb1a 0303 	adds.w	r3, sl, r3
 80055f6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80055fa:	464b      	mov	r3, r9
 80055fc:	eb4b 0303 	adc.w	r3, fp, r3
 8005600:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005608:	685b      	ldr	r3, [r3, #4]
 800560a:	2200      	movs	r2, #0
 800560c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005610:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005614:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005618:	460b      	mov	r3, r1
 800561a:	18db      	adds	r3, r3, r3
 800561c:	643b      	str	r3, [r7, #64]	; 0x40
 800561e:	4613      	mov	r3, r2
 8005620:	eb42 0303 	adc.w	r3, r2, r3
 8005624:	647b      	str	r3, [r7, #68]	; 0x44
 8005626:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800562a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800562e:	f7fa fe27 	bl	8000280 <__aeabi_uldivmod>
 8005632:	4602      	mov	r2, r0
 8005634:	460b      	mov	r3, r1
 8005636:	4611      	mov	r1, r2
 8005638:	4b3b      	ldr	r3, [pc, #236]	; (8005728 <UART_SetConfig+0x2d4>)
 800563a:	fba3 2301 	umull	r2, r3, r3, r1
 800563e:	095b      	lsrs	r3, r3, #5
 8005640:	2264      	movs	r2, #100	; 0x64
 8005642:	fb02 f303 	mul.w	r3, r2, r3
 8005646:	1acb      	subs	r3, r1, r3
 8005648:	00db      	lsls	r3, r3, #3
 800564a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800564e:	4b36      	ldr	r3, [pc, #216]	; (8005728 <UART_SetConfig+0x2d4>)
 8005650:	fba3 2302 	umull	r2, r3, r3, r2
 8005654:	095b      	lsrs	r3, r3, #5
 8005656:	005b      	lsls	r3, r3, #1
 8005658:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800565c:	441c      	add	r4, r3
 800565e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005662:	2200      	movs	r2, #0
 8005664:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005668:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800566c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005670:	4642      	mov	r2, r8
 8005672:	464b      	mov	r3, r9
 8005674:	1891      	adds	r1, r2, r2
 8005676:	63b9      	str	r1, [r7, #56]	; 0x38
 8005678:	415b      	adcs	r3, r3
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800567c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005680:	4641      	mov	r1, r8
 8005682:	1851      	adds	r1, r2, r1
 8005684:	6339      	str	r1, [r7, #48]	; 0x30
 8005686:	4649      	mov	r1, r9
 8005688:	414b      	adcs	r3, r1
 800568a:	637b      	str	r3, [r7, #52]	; 0x34
 800568c:	f04f 0200 	mov.w	r2, #0
 8005690:	f04f 0300 	mov.w	r3, #0
 8005694:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005698:	4659      	mov	r1, fp
 800569a:	00cb      	lsls	r3, r1, #3
 800569c:	4651      	mov	r1, sl
 800569e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80056a2:	4651      	mov	r1, sl
 80056a4:	00ca      	lsls	r2, r1, #3
 80056a6:	4610      	mov	r0, r2
 80056a8:	4619      	mov	r1, r3
 80056aa:	4603      	mov	r3, r0
 80056ac:	4642      	mov	r2, r8
 80056ae:	189b      	adds	r3, r3, r2
 80056b0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80056b4:	464b      	mov	r3, r9
 80056b6:	460a      	mov	r2, r1
 80056b8:	eb42 0303 	adc.w	r3, r2, r3
 80056bc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80056c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80056c4:	685b      	ldr	r3, [r3, #4]
 80056c6:	2200      	movs	r2, #0
 80056c8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80056cc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80056d0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80056d4:	460b      	mov	r3, r1
 80056d6:	18db      	adds	r3, r3, r3
 80056d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80056da:	4613      	mov	r3, r2
 80056dc:	eb42 0303 	adc.w	r3, r2, r3
 80056e0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80056e2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80056e6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80056ea:	f7fa fdc9 	bl	8000280 <__aeabi_uldivmod>
 80056ee:	4602      	mov	r2, r0
 80056f0:	460b      	mov	r3, r1
 80056f2:	4b0d      	ldr	r3, [pc, #52]	; (8005728 <UART_SetConfig+0x2d4>)
 80056f4:	fba3 1302 	umull	r1, r3, r3, r2
 80056f8:	095b      	lsrs	r3, r3, #5
 80056fa:	2164      	movs	r1, #100	; 0x64
 80056fc:	fb01 f303 	mul.w	r3, r1, r3
 8005700:	1ad3      	subs	r3, r2, r3
 8005702:	00db      	lsls	r3, r3, #3
 8005704:	3332      	adds	r3, #50	; 0x32
 8005706:	4a08      	ldr	r2, [pc, #32]	; (8005728 <UART_SetConfig+0x2d4>)
 8005708:	fba2 2303 	umull	r2, r3, r2, r3
 800570c:	095b      	lsrs	r3, r3, #5
 800570e:	f003 0207 	and.w	r2, r3, #7
 8005712:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	4422      	add	r2, r4
 800571a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800571c:	e106      	b.n	800592c <UART_SetConfig+0x4d8>
 800571e:	bf00      	nop
 8005720:	40011000 	.word	0x40011000
 8005724:	40011400 	.word	0x40011400
 8005728:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800572c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005730:	2200      	movs	r2, #0
 8005732:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005736:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800573a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800573e:	4642      	mov	r2, r8
 8005740:	464b      	mov	r3, r9
 8005742:	1891      	adds	r1, r2, r2
 8005744:	6239      	str	r1, [r7, #32]
 8005746:	415b      	adcs	r3, r3
 8005748:	627b      	str	r3, [r7, #36]	; 0x24
 800574a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800574e:	4641      	mov	r1, r8
 8005750:	1854      	adds	r4, r2, r1
 8005752:	4649      	mov	r1, r9
 8005754:	eb43 0501 	adc.w	r5, r3, r1
 8005758:	f04f 0200 	mov.w	r2, #0
 800575c:	f04f 0300 	mov.w	r3, #0
 8005760:	00eb      	lsls	r3, r5, #3
 8005762:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005766:	00e2      	lsls	r2, r4, #3
 8005768:	4614      	mov	r4, r2
 800576a:	461d      	mov	r5, r3
 800576c:	4643      	mov	r3, r8
 800576e:	18e3      	adds	r3, r4, r3
 8005770:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005774:	464b      	mov	r3, r9
 8005776:	eb45 0303 	adc.w	r3, r5, r3
 800577a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800577e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	2200      	movs	r2, #0
 8005786:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800578a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800578e:	f04f 0200 	mov.w	r2, #0
 8005792:	f04f 0300 	mov.w	r3, #0
 8005796:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800579a:	4629      	mov	r1, r5
 800579c:	008b      	lsls	r3, r1, #2
 800579e:	4621      	mov	r1, r4
 80057a0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80057a4:	4621      	mov	r1, r4
 80057a6:	008a      	lsls	r2, r1, #2
 80057a8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80057ac:	f7fa fd68 	bl	8000280 <__aeabi_uldivmod>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	4b60      	ldr	r3, [pc, #384]	; (8005938 <UART_SetConfig+0x4e4>)
 80057b6:	fba3 2302 	umull	r2, r3, r3, r2
 80057ba:	095b      	lsrs	r3, r3, #5
 80057bc:	011c      	lsls	r4, r3, #4
 80057be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80057c2:	2200      	movs	r2, #0
 80057c4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80057c8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80057cc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80057d0:	4642      	mov	r2, r8
 80057d2:	464b      	mov	r3, r9
 80057d4:	1891      	adds	r1, r2, r2
 80057d6:	61b9      	str	r1, [r7, #24]
 80057d8:	415b      	adcs	r3, r3
 80057da:	61fb      	str	r3, [r7, #28]
 80057dc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057e0:	4641      	mov	r1, r8
 80057e2:	1851      	adds	r1, r2, r1
 80057e4:	6139      	str	r1, [r7, #16]
 80057e6:	4649      	mov	r1, r9
 80057e8:	414b      	adcs	r3, r1
 80057ea:	617b      	str	r3, [r7, #20]
 80057ec:	f04f 0200 	mov.w	r2, #0
 80057f0:	f04f 0300 	mov.w	r3, #0
 80057f4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057f8:	4659      	mov	r1, fp
 80057fa:	00cb      	lsls	r3, r1, #3
 80057fc:	4651      	mov	r1, sl
 80057fe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005802:	4651      	mov	r1, sl
 8005804:	00ca      	lsls	r2, r1, #3
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	4603      	mov	r3, r0
 800580c:	4642      	mov	r2, r8
 800580e:	189b      	adds	r3, r3, r2
 8005810:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005814:	464b      	mov	r3, r9
 8005816:	460a      	mov	r2, r1
 8005818:	eb42 0303 	adc.w	r3, r2, r3
 800581c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005824:	685b      	ldr	r3, [r3, #4]
 8005826:	2200      	movs	r2, #0
 8005828:	67bb      	str	r3, [r7, #120]	; 0x78
 800582a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	f04f 0300 	mov.w	r3, #0
 8005834:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005838:	4649      	mov	r1, r9
 800583a:	008b      	lsls	r3, r1, #2
 800583c:	4641      	mov	r1, r8
 800583e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005842:	4641      	mov	r1, r8
 8005844:	008a      	lsls	r2, r1, #2
 8005846:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800584a:	f7fa fd19 	bl	8000280 <__aeabi_uldivmod>
 800584e:	4602      	mov	r2, r0
 8005850:	460b      	mov	r3, r1
 8005852:	4611      	mov	r1, r2
 8005854:	4b38      	ldr	r3, [pc, #224]	; (8005938 <UART_SetConfig+0x4e4>)
 8005856:	fba3 2301 	umull	r2, r3, r3, r1
 800585a:	095b      	lsrs	r3, r3, #5
 800585c:	2264      	movs	r2, #100	; 0x64
 800585e:	fb02 f303 	mul.w	r3, r2, r3
 8005862:	1acb      	subs	r3, r1, r3
 8005864:	011b      	lsls	r3, r3, #4
 8005866:	3332      	adds	r3, #50	; 0x32
 8005868:	4a33      	ldr	r2, [pc, #204]	; (8005938 <UART_SetConfig+0x4e4>)
 800586a:	fba2 2303 	umull	r2, r3, r2, r3
 800586e:	095b      	lsrs	r3, r3, #5
 8005870:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005874:	441c      	add	r4, r3
 8005876:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800587a:	2200      	movs	r2, #0
 800587c:	673b      	str	r3, [r7, #112]	; 0x70
 800587e:	677a      	str	r2, [r7, #116]	; 0x74
 8005880:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005884:	4642      	mov	r2, r8
 8005886:	464b      	mov	r3, r9
 8005888:	1891      	adds	r1, r2, r2
 800588a:	60b9      	str	r1, [r7, #8]
 800588c:	415b      	adcs	r3, r3
 800588e:	60fb      	str	r3, [r7, #12]
 8005890:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005894:	4641      	mov	r1, r8
 8005896:	1851      	adds	r1, r2, r1
 8005898:	6039      	str	r1, [r7, #0]
 800589a:	4649      	mov	r1, r9
 800589c:	414b      	adcs	r3, r1
 800589e:	607b      	str	r3, [r7, #4]
 80058a0:	f04f 0200 	mov.w	r2, #0
 80058a4:	f04f 0300 	mov.w	r3, #0
 80058a8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80058ac:	4659      	mov	r1, fp
 80058ae:	00cb      	lsls	r3, r1, #3
 80058b0:	4651      	mov	r1, sl
 80058b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80058b6:	4651      	mov	r1, sl
 80058b8:	00ca      	lsls	r2, r1, #3
 80058ba:	4610      	mov	r0, r2
 80058bc:	4619      	mov	r1, r3
 80058be:	4603      	mov	r3, r0
 80058c0:	4642      	mov	r2, r8
 80058c2:	189b      	adds	r3, r3, r2
 80058c4:	66bb      	str	r3, [r7, #104]	; 0x68
 80058c6:	464b      	mov	r3, r9
 80058c8:	460a      	mov	r2, r1
 80058ca:	eb42 0303 	adc.w	r3, r2, r3
 80058ce:	66fb      	str	r3, [r7, #108]	; 0x6c
 80058d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80058d4:	685b      	ldr	r3, [r3, #4]
 80058d6:	2200      	movs	r2, #0
 80058d8:	663b      	str	r3, [r7, #96]	; 0x60
 80058da:	667a      	str	r2, [r7, #100]	; 0x64
 80058dc:	f04f 0200 	mov.w	r2, #0
 80058e0:	f04f 0300 	mov.w	r3, #0
 80058e4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80058e8:	4649      	mov	r1, r9
 80058ea:	008b      	lsls	r3, r1, #2
 80058ec:	4641      	mov	r1, r8
 80058ee:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058f2:	4641      	mov	r1, r8
 80058f4:	008a      	lsls	r2, r1, #2
 80058f6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80058fa:	f7fa fcc1 	bl	8000280 <__aeabi_uldivmod>
 80058fe:	4602      	mov	r2, r0
 8005900:	460b      	mov	r3, r1
 8005902:	4b0d      	ldr	r3, [pc, #52]	; (8005938 <UART_SetConfig+0x4e4>)
 8005904:	fba3 1302 	umull	r1, r3, r3, r2
 8005908:	095b      	lsrs	r3, r3, #5
 800590a:	2164      	movs	r1, #100	; 0x64
 800590c:	fb01 f303 	mul.w	r3, r1, r3
 8005910:	1ad3      	subs	r3, r2, r3
 8005912:	011b      	lsls	r3, r3, #4
 8005914:	3332      	adds	r3, #50	; 0x32
 8005916:	4a08      	ldr	r2, [pc, #32]	; (8005938 <UART_SetConfig+0x4e4>)
 8005918:	fba2 2303 	umull	r2, r3, r2, r3
 800591c:	095b      	lsrs	r3, r3, #5
 800591e:	f003 020f 	and.w	r2, r3, #15
 8005922:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	4422      	add	r2, r4
 800592a:	609a      	str	r2, [r3, #8]
}
 800592c:	bf00      	nop
 800592e:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005932:	46bd      	mov	sp, r7
 8005934:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005938:	51eb851f 	.word	0x51eb851f

0800593c <std>:
 800593c:	2300      	movs	r3, #0
 800593e:	b510      	push	{r4, lr}
 8005940:	4604      	mov	r4, r0
 8005942:	e9c0 3300 	strd	r3, r3, [r0]
 8005946:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800594a:	6083      	str	r3, [r0, #8]
 800594c:	8181      	strh	r1, [r0, #12]
 800594e:	6643      	str	r3, [r0, #100]	; 0x64
 8005950:	81c2      	strh	r2, [r0, #14]
 8005952:	6183      	str	r3, [r0, #24]
 8005954:	4619      	mov	r1, r3
 8005956:	2208      	movs	r2, #8
 8005958:	305c      	adds	r0, #92	; 0x5c
 800595a:	f000 f906 	bl	8005b6a <memset>
 800595e:	4b0d      	ldr	r3, [pc, #52]	; (8005994 <std+0x58>)
 8005960:	6263      	str	r3, [r4, #36]	; 0x24
 8005962:	4b0d      	ldr	r3, [pc, #52]	; (8005998 <std+0x5c>)
 8005964:	62a3      	str	r3, [r4, #40]	; 0x28
 8005966:	4b0d      	ldr	r3, [pc, #52]	; (800599c <std+0x60>)
 8005968:	62e3      	str	r3, [r4, #44]	; 0x2c
 800596a:	4b0d      	ldr	r3, [pc, #52]	; (80059a0 <std+0x64>)
 800596c:	6323      	str	r3, [r4, #48]	; 0x30
 800596e:	4b0d      	ldr	r3, [pc, #52]	; (80059a4 <std+0x68>)
 8005970:	6224      	str	r4, [r4, #32]
 8005972:	429c      	cmp	r4, r3
 8005974:	d006      	beq.n	8005984 <std+0x48>
 8005976:	f103 0268 	add.w	r2, r3, #104	; 0x68
 800597a:	4294      	cmp	r4, r2
 800597c:	d002      	beq.n	8005984 <std+0x48>
 800597e:	33d0      	adds	r3, #208	; 0xd0
 8005980:	429c      	cmp	r4, r3
 8005982:	d105      	bne.n	8005990 <std+0x54>
 8005984:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8005988:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800598c:	f000 b966 	b.w	8005c5c <__retarget_lock_init_recursive>
 8005990:	bd10      	pop	{r4, pc}
 8005992:	bf00      	nop
 8005994:	08005ae5 	.word	0x08005ae5
 8005998:	08005b07 	.word	0x08005b07
 800599c:	08005b3f 	.word	0x08005b3f
 80059a0:	08005b63 	.word	0x08005b63
 80059a4:	200002e0 	.word	0x200002e0

080059a8 <stdio_exit_handler>:
 80059a8:	4a02      	ldr	r2, [pc, #8]	; (80059b4 <stdio_exit_handler+0xc>)
 80059aa:	4903      	ldr	r1, [pc, #12]	; (80059b8 <stdio_exit_handler+0x10>)
 80059ac:	4803      	ldr	r0, [pc, #12]	; (80059bc <stdio_exit_handler+0x14>)
 80059ae:	f000 b869 	b.w	8005a84 <_fwalk_sglue>
 80059b2:	bf00      	nop
 80059b4:	20000010 	.word	0x20000010
 80059b8:	08006509 	.word	0x08006509
 80059bc:	2000001c 	.word	0x2000001c

080059c0 <cleanup_stdio>:
 80059c0:	6841      	ldr	r1, [r0, #4]
 80059c2:	4b0c      	ldr	r3, [pc, #48]	; (80059f4 <cleanup_stdio+0x34>)
 80059c4:	4299      	cmp	r1, r3
 80059c6:	b510      	push	{r4, lr}
 80059c8:	4604      	mov	r4, r0
 80059ca:	d001      	beq.n	80059d0 <cleanup_stdio+0x10>
 80059cc:	f000 fd9c 	bl	8006508 <_fflush_r>
 80059d0:	68a1      	ldr	r1, [r4, #8]
 80059d2:	4b09      	ldr	r3, [pc, #36]	; (80059f8 <cleanup_stdio+0x38>)
 80059d4:	4299      	cmp	r1, r3
 80059d6:	d002      	beq.n	80059de <cleanup_stdio+0x1e>
 80059d8:	4620      	mov	r0, r4
 80059da:	f000 fd95 	bl	8006508 <_fflush_r>
 80059de:	68e1      	ldr	r1, [r4, #12]
 80059e0:	4b06      	ldr	r3, [pc, #24]	; (80059fc <cleanup_stdio+0x3c>)
 80059e2:	4299      	cmp	r1, r3
 80059e4:	d004      	beq.n	80059f0 <cleanup_stdio+0x30>
 80059e6:	4620      	mov	r0, r4
 80059e8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80059ec:	f000 bd8c 	b.w	8006508 <_fflush_r>
 80059f0:	bd10      	pop	{r4, pc}
 80059f2:	bf00      	nop
 80059f4:	200002e0 	.word	0x200002e0
 80059f8:	20000348 	.word	0x20000348
 80059fc:	200003b0 	.word	0x200003b0

08005a00 <global_stdio_init.part.0>:
 8005a00:	b510      	push	{r4, lr}
 8005a02:	4b0b      	ldr	r3, [pc, #44]	; (8005a30 <global_stdio_init.part.0+0x30>)
 8005a04:	4c0b      	ldr	r4, [pc, #44]	; (8005a34 <global_stdio_init.part.0+0x34>)
 8005a06:	4a0c      	ldr	r2, [pc, #48]	; (8005a38 <global_stdio_init.part.0+0x38>)
 8005a08:	601a      	str	r2, [r3, #0]
 8005a0a:	4620      	mov	r0, r4
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	2104      	movs	r1, #4
 8005a10:	f7ff ff94 	bl	800593c <std>
 8005a14:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8005a18:	2201      	movs	r2, #1
 8005a1a:	2109      	movs	r1, #9
 8005a1c:	f7ff ff8e 	bl	800593c <std>
 8005a20:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8005a24:	2202      	movs	r2, #2
 8005a26:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a2a:	2112      	movs	r1, #18
 8005a2c:	f7ff bf86 	b.w	800593c <std>
 8005a30:	20000418 	.word	0x20000418
 8005a34:	200002e0 	.word	0x200002e0
 8005a38:	080059a9 	.word	0x080059a9

08005a3c <__sfp_lock_acquire>:
 8005a3c:	4801      	ldr	r0, [pc, #4]	; (8005a44 <__sfp_lock_acquire+0x8>)
 8005a3e:	f000 b90e 	b.w	8005c5e <__retarget_lock_acquire_recursive>
 8005a42:	bf00      	nop
 8005a44:	20000421 	.word	0x20000421

08005a48 <__sfp_lock_release>:
 8005a48:	4801      	ldr	r0, [pc, #4]	; (8005a50 <__sfp_lock_release+0x8>)
 8005a4a:	f000 b909 	b.w	8005c60 <__retarget_lock_release_recursive>
 8005a4e:	bf00      	nop
 8005a50:	20000421 	.word	0x20000421

08005a54 <__sinit>:
 8005a54:	b510      	push	{r4, lr}
 8005a56:	4604      	mov	r4, r0
 8005a58:	f7ff fff0 	bl	8005a3c <__sfp_lock_acquire>
 8005a5c:	6a23      	ldr	r3, [r4, #32]
 8005a5e:	b11b      	cbz	r3, 8005a68 <__sinit+0x14>
 8005a60:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8005a64:	f7ff bff0 	b.w	8005a48 <__sfp_lock_release>
 8005a68:	4b04      	ldr	r3, [pc, #16]	; (8005a7c <__sinit+0x28>)
 8005a6a:	6223      	str	r3, [r4, #32]
 8005a6c:	4b04      	ldr	r3, [pc, #16]	; (8005a80 <__sinit+0x2c>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	2b00      	cmp	r3, #0
 8005a72:	d1f5      	bne.n	8005a60 <__sinit+0xc>
 8005a74:	f7ff ffc4 	bl	8005a00 <global_stdio_init.part.0>
 8005a78:	e7f2      	b.n	8005a60 <__sinit+0xc>
 8005a7a:	bf00      	nop
 8005a7c:	080059c1 	.word	0x080059c1
 8005a80:	20000418 	.word	0x20000418

08005a84 <_fwalk_sglue>:
 8005a84:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005a88:	4607      	mov	r7, r0
 8005a8a:	4688      	mov	r8, r1
 8005a8c:	4614      	mov	r4, r2
 8005a8e:	2600      	movs	r6, #0
 8005a90:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8005a94:	f1b9 0901 	subs.w	r9, r9, #1
 8005a98:	d505      	bpl.n	8005aa6 <_fwalk_sglue+0x22>
 8005a9a:	6824      	ldr	r4, [r4, #0]
 8005a9c:	2c00      	cmp	r4, #0
 8005a9e:	d1f7      	bne.n	8005a90 <_fwalk_sglue+0xc>
 8005aa0:	4630      	mov	r0, r6
 8005aa2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005aa6:	89ab      	ldrh	r3, [r5, #12]
 8005aa8:	2b01      	cmp	r3, #1
 8005aaa:	d907      	bls.n	8005abc <_fwalk_sglue+0x38>
 8005aac:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8005ab0:	3301      	adds	r3, #1
 8005ab2:	d003      	beq.n	8005abc <_fwalk_sglue+0x38>
 8005ab4:	4629      	mov	r1, r5
 8005ab6:	4638      	mov	r0, r7
 8005ab8:	47c0      	blx	r8
 8005aba:	4306      	orrs	r6, r0
 8005abc:	3568      	adds	r5, #104	; 0x68
 8005abe:	e7e9      	b.n	8005a94 <_fwalk_sglue+0x10>

08005ac0 <iprintf>:
 8005ac0:	b40f      	push	{r0, r1, r2, r3}
 8005ac2:	b507      	push	{r0, r1, r2, lr}
 8005ac4:	4906      	ldr	r1, [pc, #24]	; (8005ae0 <iprintf+0x20>)
 8005ac6:	ab04      	add	r3, sp, #16
 8005ac8:	6808      	ldr	r0, [r1, #0]
 8005aca:	f853 2b04 	ldr.w	r2, [r3], #4
 8005ace:	6881      	ldr	r1, [r0, #8]
 8005ad0:	9301      	str	r3, [sp, #4]
 8005ad2:	f000 f9e9 	bl	8005ea8 <_vfiprintf_r>
 8005ad6:	b003      	add	sp, #12
 8005ad8:	f85d eb04 	ldr.w	lr, [sp], #4
 8005adc:	b004      	add	sp, #16
 8005ade:	4770      	bx	lr
 8005ae0:	20000068 	.word	0x20000068

08005ae4 <__sread>:
 8005ae4:	b510      	push	{r4, lr}
 8005ae6:	460c      	mov	r4, r1
 8005ae8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005aec:	f000 f868 	bl	8005bc0 <_read_r>
 8005af0:	2800      	cmp	r0, #0
 8005af2:	bfab      	itete	ge
 8005af4:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8005af6:	89a3      	ldrhlt	r3, [r4, #12]
 8005af8:	181b      	addge	r3, r3, r0
 8005afa:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8005afe:	bfac      	ite	ge
 8005b00:	6563      	strge	r3, [r4, #84]	; 0x54
 8005b02:	81a3      	strhlt	r3, [r4, #12]
 8005b04:	bd10      	pop	{r4, pc}

08005b06 <__swrite>:
 8005b06:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005b0a:	461f      	mov	r7, r3
 8005b0c:	898b      	ldrh	r3, [r1, #12]
 8005b0e:	05db      	lsls	r3, r3, #23
 8005b10:	4605      	mov	r5, r0
 8005b12:	460c      	mov	r4, r1
 8005b14:	4616      	mov	r6, r2
 8005b16:	d505      	bpl.n	8005b24 <__swrite+0x1e>
 8005b18:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b1c:	2302      	movs	r3, #2
 8005b1e:	2200      	movs	r2, #0
 8005b20:	f000 f83c 	bl	8005b9c <_lseek_r>
 8005b24:	89a3      	ldrh	r3, [r4, #12]
 8005b26:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8005b2a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005b2e:	81a3      	strh	r3, [r4, #12]
 8005b30:	4632      	mov	r2, r6
 8005b32:	463b      	mov	r3, r7
 8005b34:	4628      	mov	r0, r5
 8005b36:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8005b3a:	f000 b853 	b.w	8005be4 <_write_r>

08005b3e <__sseek>:
 8005b3e:	b510      	push	{r4, lr}
 8005b40:	460c      	mov	r4, r1
 8005b42:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b46:	f000 f829 	bl	8005b9c <_lseek_r>
 8005b4a:	1c43      	adds	r3, r0, #1
 8005b4c:	89a3      	ldrh	r3, [r4, #12]
 8005b4e:	bf15      	itete	ne
 8005b50:	6560      	strne	r0, [r4, #84]	; 0x54
 8005b52:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8005b56:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005b5a:	81a3      	strheq	r3, [r4, #12]
 8005b5c:	bf18      	it	ne
 8005b5e:	81a3      	strhne	r3, [r4, #12]
 8005b60:	bd10      	pop	{r4, pc}

08005b62 <__sclose>:
 8005b62:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005b66:	f000 b809 	b.w	8005b7c <_close_r>

08005b6a <memset>:
 8005b6a:	4402      	add	r2, r0
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	4293      	cmp	r3, r2
 8005b70:	d100      	bne.n	8005b74 <memset+0xa>
 8005b72:	4770      	bx	lr
 8005b74:	f803 1b01 	strb.w	r1, [r3], #1
 8005b78:	e7f9      	b.n	8005b6e <memset+0x4>
	...

08005b7c <_close_r>:
 8005b7c:	b538      	push	{r3, r4, r5, lr}
 8005b7e:	4d06      	ldr	r5, [pc, #24]	; (8005b98 <_close_r+0x1c>)
 8005b80:	2300      	movs	r3, #0
 8005b82:	4604      	mov	r4, r0
 8005b84:	4608      	mov	r0, r1
 8005b86:	602b      	str	r3, [r5, #0]
 8005b88:	f7fb fbad 	bl	80012e6 <_close>
 8005b8c:	1c43      	adds	r3, r0, #1
 8005b8e:	d102      	bne.n	8005b96 <_close_r+0x1a>
 8005b90:	682b      	ldr	r3, [r5, #0]
 8005b92:	b103      	cbz	r3, 8005b96 <_close_r+0x1a>
 8005b94:	6023      	str	r3, [r4, #0]
 8005b96:	bd38      	pop	{r3, r4, r5, pc}
 8005b98:	2000041c 	.word	0x2000041c

08005b9c <_lseek_r>:
 8005b9c:	b538      	push	{r3, r4, r5, lr}
 8005b9e:	4d07      	ldr	r5, [pc, #28]	; (8005bbc <_lseek_r+0x20>)
 8005ba0:	4604      	mov	r4, r0
 8005ba2:	4608      	mov	r0, r1
 8005ba4:	4611      	mov	r1, r2
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	602a      	str	r2, [r5, #0]
 8005baa:	461a      	mov	r2, r3
 8005bac:	f7fb fbc2 	bl	8001334 <_lseek>
 8005bb0:	1c43      	adds	r3, r0, #1
 8005bb2:	d102      	bne.n	8005bba <_lseek_r+0x1e>
 8005bb4:	682b      	ldr	r3, [r5, #0]
 8005bb6:	b103      	cbz	r3, 8005bba <_lseek_r+0x1e>
 8005bb8:	6023      	str	r3, [r4, #0]
 8005bba:	bd38      	pop	{r3, r4, r5, pc}
 8005bbc:	2000041c 	.word	0x2000041c

08005bc0 <_read_r>:
 8005bc0:	b538      	push	{r3, r4, r5, lr}
 8005bc2:	4d07      	ldr	r5, [pc, #28]	; (8005be0 <_read_r+0x20>)
 8005bc4:	4604      	mov	r4, r0
 8005bc6:	4608      	mov	r0, r1
 8005bc8:	4611      	mov	r1, r2
 8005bca:	2200      	movs	r2, #0
 8005bcc:	602a      	str	r2, [r5, #0]
 8005bce:	461a      	mov	r2, r3
 8005bd0:	f7fb fb50 	bl	8001274 <_read>
 8005bd4:	1c43      	adds	r3, r0, #1
 8005bd6:	d102      	bne.n	8005bde <_read_r+0x1e>
 8005bd8:	682b      	ldr	r3, [r5, #0]
 8005bda:	b103      	cbz	r3, 8005bde <_read_r+0x1e>
 8005bdc:	6023      	str	r3, [r4, #0]
 8005bde:	bd38      	pop	{r3, r4, r5, pc}
 8005be0:	2000041c 	.word	0x2000041c

08005be4 <_write_r>:
 8005be4:	b538      	push	{r3, r4, r5, lr}
 8005be6:	4d07      	ldr	r5, [pc, #28]	; (8005c04 <_write_r+0x20>)
 8005be8:	4604      	mov	r4, r0
 8005bea:	4608      	mov	r0, r1
 8005bec:	4611      	mov	r1, r2
 8005bee:	2200      	movs	r2, #0
 8005bf0:	602a      	str	r2, [r5, #0]
 8005bf2:	461a      	mov	r2, r3
 8005bf4:	f7fb fb5b 	bl	80012ae <_write>
 8005bf8:	1c43      	adds	r3, r0, #1
 8005bfa:	d102      	bne.n	8005c02 <_write_r+0x1e>
 8005bfc:	682b      	ldr	r3, [r5, #0]
 8005bfe:	b103      	cbz	r3, 8005c02 <_write_r+0x1e>
 8005c00:	6023      	str	r3, [r4, #0]
 8005c02:	bd38      	pop	{r3, r4, r5, pc}
 8005c04:	2000041c 	.word	0x2000041c

08005c08 <__errno>:
 8005c08:	4b01      	ldr	r3, [pc, #4]	; (8005c10 <__errno+0x8>)
 8005c0a:	6818      	ldr	r0, [r3, #0]
 8005c0c:	4770      	bx	lr
 8005c0e:	bf00      	nop
 8005c10:	20000068 	.word	0x20000068

08005c14 <__libc_init_array>:
 8005c14:	b570      	push	{r4, r5, r6, lr}
 8005c16:	4d0d      	ldr	r5, [pc, #52]	; (8005c4c <__libc_init_array+0x38>)
 8005c18:	4c0d      	ldr	r4, [pc, #52]	; (8005c50 <__libc_init_array+0x3c>)
 8005c1a:	1b64      	subs	r4, r4, r5
 8005c1c:	10a4      	asrs	r4, r4, #2
 8005c1e:	2600      	movs	r6, #0
 8005c20:	42a6      	cmp	r6, r4
 8005c22:	d109      	bne.n	8005c38 <__libc_init_array+0x24>
 8005c24:	4d0b      	ldr	r5, [pc, #44]	; (8005c54 <__libc_init_array+0x40>)
 8005c26:	4c0c      	ldr	r4, [pc, #48]	; (8005c58 <__libc_init_array+0x44>)
 8005c28:	f000 fdc0 	bl	80067ac <_init>
 8005c2c:	1b64      	subs	r4, r4, r5
 8005c2e:	10a4      	asrs	r4, r4, #2
 8005c30:	2600      	movs	r6, #0
 8005c32:	42a6      	cmp	r6, r4
 8005c34:	d105      	bne.n	8005c42 <__libc_init_array+0x2e>
 8005c36:	bd70      	pop	{r4, r5, r6, pc}
 8005c38:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c3c:	4798      	blx	r3
 8005c3e:	3601      	adds	r6, #1
 8005c40:	e7ee      	b.n	8005c20 <__libc_init_array+0xc>
 8005c42:	f855 3b04 	ldr.w	r3, [r5], #4
 8005c46:	4798      	blx	r3
 8005c48:	3601      	adds	r6, #1
 8005c4a:	e7f2      	b.n	8005c32 <__libc_init_array+0x1e>
 8005c4c:	08006864 	.word	0x08006864
 8005c50:	08006864 	.word	0x08006864
 8005c54:	08006864 	.word	0x08006864
 8005c58:	08006868 	.word	0x08006868

08005c5c <__retarget_lock_init_recursive>:
 8005c5c:	4770      	bx	lr

08005c5e <__retarget_lock_acquire_recursive>:
 8005c5e:	4770      	bx	lr

08005c60 <__retarget_lock_release_recursive>:
 8005c60:	4770      	bx	lr
	...

08005c64 <_free_r>:
 8005c64:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8005c66:	2900      	cmp	r1, #0
 8005c68:	d044      	beq.n	8005cf4 <_free_r+0x90>
 8005c6a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005c6e:	9001      	str	r0, [sp, #4]
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	f1a1 0404 	sub.w	r4, r1, #4
 8005c76:	bfb8      	it	lt
 8005c78:	18e4      	addlt	r4, r4, r3
 8005c7a:	f000 f8df 	bl	8005e3c <__malloc_lock>
 8005c7e:	4a1e      	ldr	r2, [pc, #120]	; (8005cf8 <_free_r+0x94>)
 8005c80:	9801      	ldr	r0, [sp, #4]
 8005c82:	6813      	ldr	r3, [r2, #0]
 8005c84:	b933      	cbnz	r3, 8005c94 <_free_r+0x30>
 8005c86:	6063      	str	r3, [r4, #4]
 8005c88:	6014      	str	r4, [r2, #0]
 8005c8a:	b003      	add	sp, #12
 8005c8c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8005c90:	f000 b8da 	b.w	8005e48 <__malloc_unlock>
 8005c94:	42a3      	cmp	r3, r4
 8005c96:	d908      	bls.n	8005caa <_free_r+0x46>
 8005c98:	6825      	ldr	r5, [r4, #0]
 8005c9a:	1961      	adds	r1, r4, r5
 8005c9c:	428b      	cmp	r3, r1
 8005c9e:	bf01      	itttt	eq
 8005ca0:	6819      	ldreq	r1, [r3, #0]
 8005ca2:	685b      	ldreq	r3, [r3, #4]
 8005ca4:	1949      	addeq	r1, r1, r5
 8005ca6:	6021      	streq	r1, [r4, #0]
 8005ca8:	e7ed      	b.n	8005c86 <_free_r+0x22>
 8005caa:	461a      	mov	r2, r3
 8005cac:	685b      	ldr	r3, [r3, #4]
 8005cae:	b10b      	cbz	r3, 8005cb4 <_free_r+0x50>
 8005cb0:	42a3      	cmp	r3, r4
 8005cb2:	d9fa      	bls.n	8005caa <_free_r+0x46>
 8005cb4:	6811      	ldr	r1, [r2, #0]
 8005cb6:	1855      	adds	r5, r2, r1
 8005cb8:	42a5      	cmp	r5, r4
 8005cba:	d10b      	bne.n	8005cd4 <_free_r+0x70>
 8005cbc:	6824      	ldr	r4, [r4, #0]
 8005cbe:	4421      	add	r1, r4
 8005cc0:	1854      	adds	r4, r2, r1
 8005cc2:	42a3      	cmp	r3, r4
 8005cc4:	6011      	str	r1, [r2, #0]
 8005cc6:	d1e0      	bne.n	8005c8a <_free_r+0x26>
 8005cc8:	681c      	ldr	r4, [r3, #0]
 8005cca:	685b      	ldr	r3, [r3, #4]
 8005ccc:	6053      	str	r3, [r2, #4]
 8005cce:	440c      	add	r4, r1
 8005cd0:	6014      	str	r4, [r2, #0]
 8005cd2:	e7da      	b.n	8005c8a <_free_r+0x26>
 8005cd4:	d902      	bls.n	8005cdc <_free_r+0x78>
 8005cd6:	230c      	movs	r3, #12
 8005cd8:	6003      	str	r3, [r0, #0]
 8005cda:	e7d6      	b.n	8005c8a <_free_r+0x26>
 8005cdc:	6825      	ldr	r5, [r4, #0]
 8005cde:	1961      	adds	r1, r4, r5
 8005ce0:	428b      	cmp	r3, r1
 8005ce2:	bf04      	itt	eq
 8005ce4:	6819      	ldreq	r1, [r3, #0]
 8005ce6:	685b      	ldreq	r3, [r3, #4]
 8005ce8:	6063      	str	r3, [r4, #4]
 8005cea:	bf04      	itt	eq
 8005cec:	1949      	addeq	r1, r1, r5
 8005cee:	6021      	streq	r1, [r4, #0]
 8005cf0:	6054      	str	r4, [r2, #4]
 8005cf2:	e7ca      	b.n	8005c8a <_free_r+0x26>
 8005cf4:	b003      	add	sp, #12
 8005cf6:	bd30      	pop	{r4, r5, pc}
 8005cf8:	20000424 	.word	0x20000424

08005cfc <sbrk_aligned>:
 8005cfc:	b570      	push	{r4, r5, r6, lr}
 8005cfe:	4e0e      	ldr	r6, [pc, #56]	; (8005d38 <sbrk_aligned+0x3c>)
 8005d00:	460c      	mov	r4, r1
 8005d02:	6831      	ldr	r1, [r6, #0]
 8005d04:	4605      	mov	r5, r0
 8005d06:	b911      	cbnz	r1, 8005d0e <sbrk_aligned+0x12>
 8005d08:	f000 fcbc 	bl	8006684 <_sbrk_r>
 8005d0c:	6030      	str	r0, [r6, #0]
 8005d0e:	4621      	mov	r1, r4
 8005d10:	4628      	mov	r0, r5
 8005d12:	f000 fcb7 	bl	8006684 <_sbrk_r>
 8005d16:	1c43      	adds	r3, r0, #1
 8005d18:	d00a      	beq.n	8005d30 <sbrk_aligned+0x34>
 8005d1a:	1cc4      	adds	r4, r0, #3
 8005d1c:	f024 0403 	bic.w	r4, r4, #3
 8005d20:	42a0      	cmp	r0, r4
 8005d22:	d007      	beq.n	8005d34 <sbrk_aligned+0x38>
 8005d24:	1a21      	subs	r1, r4, r0
 8005d26:	4628      	mov	r0, r5
 8005d28:	f000 fcac 	bl	8006684 <_sbrk_r>
 8005d2c:	3001      	adds	r0, #1
 8005d2e:	d101      	bne.n	8005d34 <sbrk_aligned+0x38>
 8005d30:	f04f 34ff 	mov.w	r4, #4294967295
 8005d34:	4620      	mov	r0, r4
 8005d36:	bd70      	pop	{r4, r5, r6, pc}
 8005d38:	20000428 	.word	0x20000428

08005d3c <_malloc_r>:
 8005d3c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d40:	1ccd      	adds	r5, r1, #3
 8005d42:	f025 0503 	bic.w	r5, r5, #3
 8005d46:	3508      	adds	r5, #8
 8005d48:	2d0c      	cmp	r5, #12
 8005d4a:	bf38      	it	cc
 8005d4c:	250c      	movcc	r5, #12
 8005d4e:	2d00      	cmp	r5, #0
 8005d50:	4607      	mov	r7, r0
 8005d52:	db01      	blt.n	8005d58 <_malloc_r+0x1c>
 8005d54:	42a9      	cmp	r1, r5
 8005d56:	d905      	bls.n	8005d64 <_malloc_r+0x28>
 8005d58:	230c      	movs	r3, #12
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	2600      	movs	r6, #0
 8005d5e:	4630      	mov	r0, r6
 8005d60:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005d64:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005e38 <_malloc_r+0xfc>
 8005d68:	f000 f868 	bl	8005e3c <__malloc_lock>
 8005d6c:	f8d8 3000 	ldr.w	r3, [r8]
 8005d70:	461c      	mov	r4, r3
 8005d72:	bb5c      	cbnz	r4, 8005dcc <_malloc_r+0x90>
 8005d74:	4629      	mov	r1, r5
 8005d76:	4638      	mov	r0, r7
 8005d78:	f7ff ffc0 	bl	8005cfc <sbrk_aligned>
 8005d7c:	1c43      	adds	r3, r0, #1
 8005d7e:	4604      	mov	r4, r0
 8005d80:	d155      	bne.n	8005e2e <_malloc_r+0xf2>
 8005d82:	f8d8 4000 	ldr.w	r4, [r8]
 8005d86:	4626      	mov	r6, r4
 8005d88:	2e00      	cmp	r6, #0
 8005d8a:	d145      	bne.n	8005e18 <_malloc_r+0xdc>
 8005d8c:	2c00      	cmp	r4, #0
 8005d8e:	d048      	beq.n	8005e22 <_malloc_r+0xe6>
 8005d90:	6823      	ldr	r3, [r4, #0]
 8005d92:	4631      	mov	r1, r6
 8005d94:	4638      	mov	r0, r7
 8005d96:	eb04 0903 	add.w	r9, r4, r3
 8005d9a:	f000 fc73 	bl	8006684 <_sbrk_r>
 8005d9e:	4581      	cmp	r9, r0
 8005da0:	d13f      	bne.n	8005e22 <_malloc_r+0xe6>
 8005da2:	6821      	ldr	r1, [r4, #0]
 8005da4:	1a6d      	subs	r5, r5, r1
 8005da6:	4629      	mov	r1, r5
 8005da8:	4638      	mov	r0, r7
 8005daa:	f7ff ffa7 	bl	8005cfc <sbrk_aligned>
 8005dae:	3001      	adds	r0, #1
 8005db0:	d037      	beq.n	8005e22 <_malloc_r+0xe6>
 8005db2:	6823      	ldr	r3, [r4, #0]
 8005db4:	442b      	add	r3, r5
 8005db6:	6023      	str	r3, [r4, #0]
 8005db8:	f8d8 3000 	ldr.w	r3, [r8]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d038      	beq.n	8005e32 <_malloc_r+0xf6>
 8005dc0:	685a      	ldr	r2, [r3, #4]
 8005dc2:	42a2      	cmp	r2, r4
 8005dc4:	d12b      	bne.n	8005e1e <_malloc_r+0xe2>
 8005dc6:	2200      	movs	r2, #0
 8005dc8:	605a      	str	r2, [r3, #4]
 8005dca:	e00f      	b.n	8005dec <_malloc_r+0xb0>
 8005dcc:	6822      	ldr	r2, [r4, #0]
 8005dce:	1b52      	subs	r2, r2, r5
 8005dd0:	d41f      	bmi.n	8005e12 <_malloc_r+0xd6>
 8005dd2:	2a0b      	cmp	r2, #11
 8005dd4:	d917      	bls.n	8005e06 <_malloc_r+0xca>
 8005dd6:	1961      	adds	r1, r4, r5
 8005dd8:	42a3      	cmp	r3, r4
 8005dda:	6025      	str	r5, [r4, #0]
 8005ddc:	bf18      	it	ne
 8005dde:	6059      	strne	r1, [r3, #4]
 8005de0:	6863      	ldr	r3, [r4, #4]
 8005de2:	bf08      	it	eq
 8005de4:	f8c8 1000 	streq.w	r1, [r8]
 8005de8:	5162      	str	r2, [r4, r5]
 8005dea:	604b      	str	r3, [r1, #4]
 8005dec:	4638      	mov	r0, r7
 8005dee:	f104 060b 	add.w	r6, r4, #11
 8005df2:	f000 f829 	bl	8005e48 <__malloc_unlock>
 8005df6:	f026 0607 	bic.w	r6, r6, #7
 8005dfa:	1d23      	adds	r3, r4, #4
 8005dfc:	1af2      	subs	r2, r6, r3
 8005dfe:	d0ae      	beq.n	8005d5e <_malloc_r+0x22>
 8005e00:	1b9b      	subs	r3, r3, r6
 8005e02:	50a3      	str	r3, [r4, r2]
 8005e04:	e7ab      	b.n	8005d5e <_malloc_r+0x22>
 8005e06:	42a3      	cmp	r3, r4
 8005e08:	6862      	ldr	r2, [r4, #4]
 8005e0a:	d1dd      	bne.n	8005dc8 <_malloc_r+0x8c>
 8005e0c:	f8c8 2000 	str.w	r2, [r8]
 8005e10:	e7ec      	b.n	8005dec <_malloc_r+0xb0>
 8005e12:	4623      	mov	r3, r4
 8005e14:	6864      	ldr	r4, [r4, #4]
 8005e16:	e7ac      	b.n	8005d72 <_malloc_r+0x36>
 8005e18:	4634      	mov	r4, r6
 8005e1a:	6876      	ldr	r6, [r6, #4]
 8005e1c:	e7b4      	b.n	8005d88 <_malloc_r+0x4c>
 8005e1e:	4613      	mov	r3, r2
 8005e20:	e7cc      	b.n	8005dbc <_malloc_r+0x80>
 8005e22:	230c      	movs	r3, #12
 8005e24:	603b      	str	r3, [r7, #0]
 8005e26:	4638      	mov	r0, r7
 8005e28:	f000 f80e 	bl	8005e48 <__malloc_unlock>
 8005e2c:	e797      	b.n	8005d5e <_malloc_r+0x22>
 8005e2e:	6025      	str	r5, [r4, #0]
 8005e30:	e7dc      	b.n	8005dec <_malloc_r+0xb0>
 8005e32:	605b      	str	r3, [r3, #4]
 8005e34:	deff      	udf	#255	; 0xff
 8005e36:	bf00      	nop
 8005e38:	20000424 	.word	0x20000424

08005e3c <__malloc_lock>:
 8005e3c:	4801      	ldr	r0, [pc, #4]	; (8005e44 <__malloc_lock+0x8>)
 8005e3e:	f7ff bf0e 	b.w	8005c5e <__retarget_lock_acquire_recursive>
 8005e42:	bf00      	nop
 8005e44:	20000420 	.word	0x20000420

08005e48 <__malloc_unlock>:
 8005e48:	4801      	ldr	r0, [pc, #4]	; (8005e50 <__malloc_unlock+0x8>)
 8005e4a:	f7ff bf09 	b.w	8005c60 <__retarget_lock_release_recursive>
 8005e4e:	bf00      	nop
 8005e50:	20000420 	.word	0x20000420

08005e54 <__sfputc_r>:
 8005e54:	6893      	ldr	r3, [r2, #8]
 8005e56:	3b01      	subs	r3, #1
 8005e58:	2b00      	cmp	r3, #0
 8005e5a:	b410      	push	{r4}
 8005e5c:	6093      	str	r3, [r2, #8]
 8005e5e:	da08      	bge.n	8005e72 <__sfputc_r+0x1e>
 8005e60:	6994      	ldr	r4, [r2, #24]
 8005e62:	42a3      	cmp	r3, r4
 8005e64:	db01      	blt.n	8005e6a <__sfputc_r+0x16>
 8005e66:	290a      	cmp	r1, #10
 8005e68:	d103      	bne.n	8005e72 <__sfputc_r+0x1e>
 8005e6a:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e6e:	f000 bb73 	b.w	8006558 <__swbuf_r>
 8005e72:	6813      	ldr	r3, [r2, #0]
 8005e74:	1c58      	adds	r0, r3, #1
 8005e76:	6010      	str	r0, [r2, #0]
 8005e78:	7019      	strb	r1, [r3, #0]
 8005e7a:	4608      	mov	r0, r1
 8005e7c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8005e80:	4770      	bx	lr

08005e82 <__sfputs_r>:
 8005e82:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005e84:	4606      	mov	r6, r0
 8005e86:	460f      	mov	r7, r1
 8005e88:	4614      	mov	r4, r2
 8005e8a:	18d5      	adds	r5, r2, r3
 8005e8c:	42ac      	cmp	r4, r5
 8005e8e:	d101      	bne.n	8005e94 <__sfputs_r+0x12>
 8005e90:	2000      	movs	r0, #0
 8005e92:	e007      	b.n	8005ea4 <__sfputs_r+0x22>
 8005e94:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005e98:	463a      	mov	r2, r7
 8005e9a:	4630      	mov	r0, r6
 8005e9c:	f7ff ffda 	bl	8005e54 <__sfputc_r>
 8005ea0:	1c43      	adds	r3, r0, #1
 8005ea2:	d1f3      	bne.n	8005e8c <__sfputs_r+0xa>
 8005ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08005ea8 <_vfiprintf_r>:
 8005ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005eac:	460d      	mov	r5, r1
 8005eae:	b09d      	sub	sp, #116	; 0x74
 8005eb0:	4614      	mov	r4, r2
 8005eb2:	4698      	mov	r8, r3
 8005eb4:	4606      	mov	r6, r0
 8005eb6:	b118      	cbz	r0, 8005ec0 <_vfiprintf_r+0x18>
 8005eb8:	6a03      	ldr	r3, [r0, #32]
 8005eba:	b90b      	cbnz	r3, 8005ec0 <_vfiprintf_r+0x18>
 8005ebc:	f7ff fdca 	bl	8005a54 <__sinit>
 8005ec0:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ec2:	07d9      	lsls	r1, r3, #31
 8005ec4:	d405      	bmi.n	8005ed2 <_vfiprintf_r+0x2a>
 8005ec6:	89ab      	ldrh	r3, [r5, #12]
 8005ec8:	059a      	lsls	r2, r3, #22
 8005eca:	d402      	bmi.n	8005ed2 <_vfiprintf_r+0x2a>
 8005ecc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005ece:	f7ff fec6 	bl	8005c5e <__retarget_lock_acquire_recursive>
 8005ed2:	89ab      	ldrh	r3, [r5, #12]
 8005ed4:	071b      	lsls	r3, r3, #28
 8005ed6:	d501      	bpl.n	8005edc <_vfiprintf_r+0x34>
 8005ed8:	692b      	ldr	r3, [r5, #16]
 8005eda:	b99b      	cbnz	r3, 8005f04 <_vfiprintf_r+0x5c>
 8005edc:	4629      	mov	r1, r5
 8005ede:	4630      	mov	r0, r6
 8005ee0:	f000 fb78 	bl	80065d4 <__swsetup_r>
 8005ee4:	b170      	cbz	r0, 8005f04 <_vfiprintf_r+0x5c>
 8005ee6:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8005ee8:	07dc      	lsls	r4, r3, #31
 8005eea:	d504      	bpl.n	8005ef6 <_vfiprintf_r+0x4e>
 8005eec:	f04f 30ff 	mov.w	r0, #4294967295
 8005ef0:	b01d      	add	sp, #116	; 0x74
 8005ef2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005ef6:	89ab      	ldrh	r3, [r5, #12]
 8005ef8:	0598      	lsls	r0, r3, #22
 8005efa:	d4f7      	bmi.n	8005eec <_vfiprintf_r+0x44>
 8005efc:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8005efe:	f7ff feaf 	bl	8005c60 <__retarget_lock_release_recursive>
 8005f02:	e7f3      	b.n	8005eec <_vfiprintf_r+0x44>
 8005f04:	2300      	movs	r3, #0
 8005f06:	9309      	str	r3, [sp, #36]	; 0x24
 8005f08:	2320      	movs	r3, #32
 8005f0a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8005f0e:	f8cd 800c 	str.w	r8, [sp, #12]
 8005f12:	2330      	movs	r3, #48	; 0x30
 8005f14:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 80060c8 <_vfiprintf_r+0x220>
 8005f18:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8005f1c:	f04f 0901 	mov.w	r9, #1
 8005f20:	4623      	mov	r3, r4
 8005f22:	469a      	mov	sl, r3
 8005f24:	f813 2b01 	ldrb.w	r2, [r3], #1
 8005f28:	b10a      	cbz	r2, 8005f2e <_vfiprintf_r+0x86>
 8005f2a:	2a25      	cmp	r2, #37	; 0x25
 8005f2c:	d1f9      	bne.n	8005f22 <_vfiprintf_r+0x7a>
 8005f2e:	ebba 0b04 	subs.w	fp, sl, r4
 8005f32:	d00b      	beq.n	8005f4c <_vfiprintf_r+0xa4>
 8005f34:	465b      	mov	r3, fp
 8005f36:	4622      	mov	r2, r4
 8005f38:	4629      	mov	r1, r5
 8005f3a:	4630      	mov	r0, r6
 8005f3c:	f7ff ffa1 	bl	8005e82 <__sfputs_r>
 8005f40:	3001      	adds	r0, #1
 8005f42:	f000 80a9 	beq.w	8006098 <_vfiprintf_r+0x1f0>
 8005f46:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005f48:	445a      	add	r2, fp
 8005f4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005f4c:	f89a 3000 	ldrb.w	r3, [sl]
 8005f50:	2b00      	cmp	r3, #0
 8005f52:	f000 80a1 	beq.w	8006098 <_vfiprintf_r+0x1f0>
 8005f56:	2300      	movs	r3, #0
 8005f58:	f04f 32ff 	mov.w	r2, #4294967295
 8005f5c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8005f60:	f10a 0a01 	add.w	sl, sl, #1
 8005f64:	9304      	str	r3, [sp, #16]
 8005f66:	9307      	str	r3, [sp, #28]
 8005f68:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8005f6c:	931a      	str	r3, [sp, #104]	; 0x68
 8005f6e:	4654      	mov	r4, sl
 8005f70:	2205      	movs	r2, #5
 8005f72:	f814 1b01 	ldrb.w	r1, [r4], #1
 8005f76:	4854      	ldr	r0, [pc, #336]	; (80060c8 <_vfiprintf_r+0x220>)
 8005f78:	f7fa f932 	bl	80001e0 <memchr>
 8005f7c:	9a04      	ldr	r2, [sp, #16]
 8005f7e:	b9d8      	cbnz	r0, 8005fb8 <_vfiprintf_r+0x110>
 8005f80:	06d1      	lsls	r1, r2, #27
 8005f82:	bf44      	itt	mi
 8005f84:	2320      	movmi	r3, #32
 8005f86:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f8a:	0713      	lsls	r3, r2, #28
 8005f8c:	bf44      	itt	mi
 8005f8e:	232b      	movmi	r3, #43	; 0x2b
 8005f90:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8005f94:	f89a 3000 	ldrb.w	r3, [sl]
 8005f98:	2b2a      	cmp	r3, #42	; 0x2a
 8005f9a:	d015      	beq.n	8005fc8 <_vfiprintf_r+0x120>
 8005f9c:	9a07      	ldr	r2, [sp, #28]
 8005f9e:	4654      	mov	r4, sl
 8005fa0:	2000      	movs	r0, #0
 8005fa2:	f04f 0c0a 	mov.w	ip, #10
 8005fa6:	4621      	mov	r1, r4
 8005fa8:	f811 3b01 	ldrb.w	r3, [r1], #1
 8005fac:	3b30      	subs	r3, #48	; 0x30
 8005fae:	2b09      	cmp	r3, #9
 8005fb0:	d94d      	bls.n	800604e <_vfiprintf_r+0x1a6>
 8005fb2:	b1b0      	cbz	r0, 8005fe2 <_vfiprintf_r+0x13a>
 8005fb4:	9207      	str	r2, [sp, #28]
 8005fb6:	e014      	b.n	8005fe2 <_vfiprintf_r+0x13a>
 8005fb8:	eba0 0308 	sub.w	r3, r0, r8
 8005fbc:	fa09 f303 	lsl.w	r3, r9, r3
 8005fc0:	4313      	orrs	r3, r2
 8005fc2:	9304      	str	r3, [sp, #16]
 8005fc4:	46a2      	mov	sl, r4
 8005fc6:	e7d2      	b.n	8005f6e <_vfiprintf_r+0xc6>
 8005fc8:	9b03      	ldr	r3, [sp, #12]
 8005fca:	1d19      	adds	r1, r3, #4
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	9103      	str	r1, [sp, #12]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	bfbb      	ittet	lt
 8005fd4:	425b      	neglt	r3, r3
 8005fd6:	f042 0202 	orrlt.w	r2, r2, #2
 8005fda:	9307      	strge	r3, [sp, #28]
 8005fdc:	9307      	strlt	r3, [sp, #28]
 8005fde:	bfb8      	it	lt
 8005fe0:	9204      	strlt	r2, [sp, #16]
 8005fe2:	7823      	ldrb	r3, [r4, #0]
 8005fe4:	2b2e      	cmp	r3, #46	; 0x2e
 8005fe6:	d10c      	bne.n	8006002 <_vfiprintf_r+0x15a>
 8005fe8:	7863      	ldrb	r3, [r4, #1]
 8005fea:	2b2a      	cmp	r3, #42	; 0x2a
 8005fec:	d134      	bne.n	8006058 <_vfiprintf_r+0x1b0>
 8005fee:	9b03      	ldr	r3, [sp, #12]
 8005ff0:	1d1a      	adds	r2, r3, #4
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	9203      	str	r2, [sp, #12]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	bfb8      	it	lt
 8005ffa:	f04f 33ff 	movlt.w	r3, #4294967295
 8005ffe:	3402      	adds	r4, #2
 8006000:	9305      	str	r3, [sp, #20]
 8006002:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 80060d8 <_vfiprintf_r+0x230>
 8006006:	7821      	ldrb	r1, [r4, #0]
 8006008:	2203      	movs	r2, #3
 800600a:	4650      	mov	r0, sl
 800600c:	f7fa f8e8 	bl	80001e0 <memchr>
 8006010:	b138      	cbz	r0, 8006022 <_vfiprintf_r+0x17a>
 8006012:	9b04      	ldr	r3, [sp, #16]
 8006014:	eba0 000a 	sub.w	r0, r0, sl
 8006018:	2240      	movs	r2, #64	; 0x40
 800601a:	4082      	lsls	r2, r0
 800601c:	4313      	orrs	r3, r2
 800601e:	3401      	adds	r4, #1
 8006020:	9304      	str	r3, [sp, #16]
 8006022:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006026:	4829      	ldr	r0, [pc, #164]	; (80060cc <_vfiprintf_r+0x224>)
 8006028:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800602c:	2206      	movs	r2, #6
 800602e:	f7fa f8d7 	bl	80001e0 <memchr>
 8006032:	2800      	cmp	r0, #0
 8006034:	d03f      	beq.n	80060b6 <_vfiprintf_r+0x20e>
 8006036:	4b26      	ldr	r3, [pc, #152]	; (80060d0 <_vfiprintf_r+0x228>)
 8006038:	bb1b      	cbnz	r3, 8006082 <_vfiprintf_r+0x1da>
 800603a:	9b03      	ldr	r3, [sp, #12]
 800603c:	3307      	adds	r3, #7
 800603e:	f023 0307 	bic.w	r3, r3, #7
 8006042:	3308      	adds	r3, #8
 8006044:	9303      	str	r3, [sp, #12]
 8006046:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006048:	443b      	add	r3, r7
 800604a:	9309      	str	r3, [sp, #36]	; 0x24
 800604c:	e768      	b.n	8005f20 <_vfiprintf_r+0x78>
 800604e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006052:	460c      	mov	r4, r1
 8006054:	2001      	movs	r0, #1
 8006056:	e7a6      	b.n	8005fa6 <_vfiprintf_r+0xfe>
 8006058:	2300      	movs	r3, #0
 800605a:	3401      	adds	r4, #1
 800605c:	9305      	str	r3, [sp, #20]
 800605e:	4619      	mov	r1, r3
 8006060:	f04f 0c0a 	mov.w	ip, #10
 8006064:	4620      	mov	r0, r4
 8006066:	f810 2b01 	ldrb.w	r2, [r0], #1
 800606a:	3a30      	subs	r2, #48	; 0x30
 800606c:	2a09      	cmp	r2, #9
 800606e:	d903      	bls.n	8006078 <_vfiprintf_r+0x1d0>
 8006070:	2b00      	cmp	r3, #0
 8006072:	d0c6      	beq.n	8006002 <_vfiprintf_r+0x15a>
 8006074:	9105      	str	r1, [sp, #20]
 8006076:	e7c4      	b.n	8006002 <_vfiprintf_r+0x15a>
 8006078:	fb0c 2101 	mla	r1, ip, r1, r2
 800607c:	4604      	mov	r4, r0
 800607e:	2301      	movs	r3, #1
 8006080:	e7f0      	b.n	8006064 <_vfiprintf_r+0x1bc>
 8006082:	ab03      	add	r3, sp, #12
 8006084:	9300      	str	r3, [sp, #0]
 8006086:	462a      	mov	r2, r5
 8006088:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <_vfiprintf_r+0x22c>)
 800608a:	a904      	add	r1, sp, #16
 800608c:	4630      	mov	r0, r6
 800608e:	f3af 8000 	nop.w
 8006092:	4607      	mov	r7, r0
 8006094:	1c78      	adds	r0, r7, #1
 8006096:	d1d6      	bne.n	8006046 <_vfiprintf_r+0x19e>
 8006098:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800609a:	07d9      	lsls	r1, r3, #31
 800609c:	d405      	bmi.n	80060aa <_vfiprintf_r+0x202>
 800609e:	89ab      	ldrh	r3, [r5, #12]
 80060a0:	059a      	lsls	r2, r3, #22
 80060a2:	d402      	bmi.n	80060aa <_vfiprintf_r+0x202>
 80060a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80060a6:	f7ff fddb 	bl	8005c60 <__retarget_lock_release_recursive>
 80060aa:	89ab      	ldrh	r3, [r5, #12]
 80060ac:	065b      	lsls	r3, r3, #25
 80060ae:	f53f af1d 	bmi.w	8005eec <_vfiprintf_r+0x44>
 80060b2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80060b4:	e71c      	b.n	8005ef0 <_vfiprintf_r+0x48>
 80060b6:	ab03      	add	r3, sp, #12
 80060b8:	9300      	str	r3, [sp, #0]
 80060ba:	462a      	mov	r2, r5
 80060bc:	4b05      	ldr	r3, [pc, #20]	; (80060d4 <_vfiprintf_r+0x22c>)
 80060be:	a904      	add	r1, sp, #16
 80060c0:	4630      	mov	r0, r6
 80060c2:	f000 f879 	bl	80061b8 <_printf_i>
 80060c6:	e7e4      	b.n	8006092 <_vfiprintf_r+0x1ea>
 80060c8:	08006828 	.word	0x08006828
 80060cc:	08006832 	.word	0x08006832
 80060d0:	00000000 	.word	0x00000000
 80060d4:	08005e83 	.word	0x08005e83
 80060d8:	0800682e 	.word	0x0800682e

080060dc <_printf_common>:
 80060dc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80060e0:	4616      	mov	r6, r2
 80060e2:	4699      	mov	r9, r3
 80060e4:	688a      	ldr	r2, [r1, #8]
 80060e6:	690b      	ldr	r3, [r1, #16]
 80060e8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80060ec:	4293      	cmp	r3, r2
 80060ee:	bfb8      	it	lt
 80060f0:	4613      	movlt	r3, r2
 80060f2:	6033      	str	r3, [r6, #0]
 80060f4:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80060f8:	4607      	mov	r7, r0
 80060fa:	460c      	mov	r4, r1
 80060fc:	b10a      	cbz	r2, 8006102 <_printf_common+0x26>
 80060fe:	3301      	adds	r3, #1
 8006100:	6033      	str	r3, [r6, #0]
 8006102:	6823      	ldr	r3, [r4, #0]
 8006104:	0699      	lsls	r1, r3, #26
 8006106:	bf42      	ittt	mi
 8006108:	6833      	ldrmi	r3, [r6, #0]
 800610a:	3302      	addmi	r3, #2
 800610c:	6033      	strmi	r3, [r6, #0]
 800610e:	6825      	ldr	r5, [r4, #0]
 8006110:	f015 0506 	ands.w	r5, r5, #6
 8006114:	d106      	bne.n	8006124 <_printf_common+0x48>
 8006116:	f104 0a19 	add.w	sl, r4, #25
 800611a:	68e3      	ldr	r3, [r4, #12]
 800611c:	6832      	ldr	r2, [r6, #0]
 800611e:	1a9b      	subs	r3, r3, r2
 8006120:	42ab      	cmp	r3, r5
 8006122:	dc26      	bgt.n	8006172 <_printf_common+0x96>
 8006124:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8006128:	1e13      	subs	r3, r2, #0
 800612a:	6822      	ldr	r2, [r4, #0]
 800612c:	bf18      	it	ne
 800612e:	2301      	movne	r3, #1
 8006130:	0692      	lsls	r2, r2, #26
 8006132:	d42b      	bmi.n	800618c <_printf_common+0xb0>
 8006134:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8006138:	4649      	mov	r1, r9
 800613a:	4638      	mov	r0, r7
 800613c:	47c0      	blx	r8
 800613e:	3001      	adds	r0, #1
 8006140:	d01e      	beq.n	8006180 <_printf_common+0xa4>
 8006142:	6823      	ldr	r3, [r4, #0]
 8006144:	6922      	ldr	r2, [r4, #16]
 8006146:	f003 0306 	and.w	r3, r3, #6
 800614a:	2b04      	cmp	r3, #4
 800614c:	bf02      	ittt	eq
 800614e:	68e5      	ldreq	r5, [r4, #12]
 8006150:	6833      	ldreq	r3, [r6, #0]
 8006152:	1aed      	subeq	r5, r5, r3
 8006154:	68a3      	ldr	r3, [r4, #8]
 8006156:	bf0c      	ite	eq
 8006158:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800615c:	2500      	movne	r5, #0
 800615e:	4293      	cmp	r3, r2
 8006160:	bfc4      	itt	gt
 8006162:	1a9b      	subgt	r3, r3, r2
 8006164:	18ed      	addgt	r5, r5, r3
 8006166:	2600      	movs	r6, #0
 8006168:	341a      	adds	r4, #26
 800616a:	42b5      	cmp	r5, r6
 800616c:	d11a      	bne.n	80061a4 <_printf_common+0xc8>
 800616e:	2000      	movs	r0, #0
 8006170:	e008      	b.n	8006184 <_printf_common+0xa8>
 8006172:	2301      	movs	r3, #1
 8006174:	4652      	mov	r2, sl
 8006176:	4649      	mov	r1, r9
 8006178:	4638      	mov	r0, r7
 800617a:	47c0      	blx	r8
 800617c:	3001      	adds	r0, #1
 800617e:	d103      	bne.n	8006188 <_printf_common+0xac>
 8006180:	f04f 30ff 	mov.w	r0, #4294967295
 8006184:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006188:	3501      	adds	r5, #1
 800618a:	e7c6      	b.n	800611a <_printf_common+0x3e>
 800618c:	18e1      	adds	r1, r4, r3
 800618e:	1c5a      	adds	r2, r3, #1
 8006190:	2030      	movs	r0, #48	; 0x30
 8006192:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8006196:	4422      	add	r2, r4
 8006198:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800619c:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80061a0:	3302      	adds	r3, #2
 80061a2:	e7c7      	b.n	8006134 <_printf_common+0x58>
 80061a4:	2301      	movs	r3, #1
 80061a6:	4622      	mov	r2, r4
 80061a8:	4649      	mov	r1, r9
 80061aa:	4638      	mov	r0, r7
 80061ac:	47c0      	blx	r8
 80061ae:	3001      	adds	r0, #1
 80061b0:	d0e6      	beq.n	8006180 <_printf_common+0xa4>
 80061b2:	3601      	adds	r6, #1
 80061b4:	e7d9      	b.n	800616a <_printf_common+0x8e>
	...

080061b8 <_printf_i>:
 80061b8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80061bc:	7e0f      	ldrb	r7, [r1, #24]
 80061be:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80061c0:	2f78      	cmp	r7, #120	; 0x78
 80061c2:	4691      	mov	r9, r2
 80061c4:	4680      	mov	r8, r0
 80061c6:	460c      	mov	r4, r1
 80061c8:	469a      	mov	sl, r3
 80061ca:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80061ce:	d807      	bhi.n	80061e0 <_printf_i+0x28>
 80061d0:	2f62      	cmp	r7, #98	; 0x62
 80061d2:	d80a      	bhi.n	80061ea <_printf_i+0x32>
 80061d4:	2f00      	cmp	r7, #0
 80061d6:	f000 80d4 	beq.w	8006382 <_printf_i+0x1ca>
 80061da:	2f58      	cmp	r7, #88	; 0x58
 80061dc:	f000 80c0 	beq.w	8006360 <_printf_i+0x1a8>
 80061e0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80061e4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80061e8:	e03a      	b.n	8006260 <_printf_i+0xa8>
 80061ea:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80061ee:	2b15      	cmp	r3, #21
 80061f0:	d8f6      	bhi.n	80061e0 <_printf_i+0x28>
 80061f2:	a101      	add	r1, pc, #4	; (adr r1, 80061f8 <_printf_i+0x40>)
 80061f4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80061f8:	08006251 	.word	0x08006251
 80061fc:	08006265 	.word	0x08006265
 8006200:	080061e1 	.word	0x080061e1
 8006204:	080061e1 	.word	0x080061e1
 8006208:	080061e1 	.word	0x080061e1
 800620c:	080061e1 	.word	0x080061e1
 8006210:	08006265 	.word	0x08006265
 8006214:	080061e1 	.word	0x080061e1
 8006218:	080061e1 	.word	0x080061e1
 800621c:	080061e1 	.word	0x080061e1
 8006220:	080061e1 	.word	0x080061e1
 8006224:	08006369 	.word	0x08006369
 8006228:	08006291 	.word	0x08006291
 800622c:	08006323 	.word	0x08006323
 8006230:	080061e1 	.word	0x080061e1
 8006234:	080061e1 	.word	0x080061e1
 8006238:	0800638b 	.word	0x0800638b
 800623c:	080061e1 	.word	0x080061e1
 8006240:	08006291 	.word	0x08006291
 8006244:	080061e1 	.word	0x080061e1
 8006248:	080061e1 	.word	0x080061e1
 800624c:	0800632b 	.word	0x0800632b
 8006250:	682b      	ldr	r3, [r5, #0]
 8006252:	1d1a      	adds	r2, r3, #4
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	602a      	str	r2, [r5, #0]
 8006258:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800625c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8006260:	2301      	movs	r3, #1
 8006262:	e09f      	b.n	80063a4 <_printf_i+0x1ec>
 8006264:	6820      	ldr	r0, [r4, #0]
 8006266:	682b      	ldr	r3, [r5, #0]
 8006268:	0607      	lsls	r7, r0, #24
 800626a:	f103 0104 	add.w	r1, r3, #4
 800626e:	6029      	str	r1, [r5, #0]
 8006270:	d501      	bpl.n	8006276 <_printf_i+0xbe>
 8006272:	681e      	ldr	r6, [r3, #0]
 8006274:	e003      	b.n	800627e <_printf_i+0xc6>
 8006276:	0646      	lsls	r6, r0, #25
 8006278:	d5fb      	bpl.n	8006272 <_printf_i+0xba>
 800627a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800627e:	2e00      	cmp	r6, #0
 8006280:	da03      	bge.n	800628a <_printf_i+0xd2>
 8006282:	232d      	movs	r3, #45	; 0x2d
 8006284:	4276      	negs	r6, r6
 8006286:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800628a:	485a      	ldr	r0, [pc, #360]	; (80063f4 <_printf_i+0x23c>)
 800628c:	230a      	movs	r3, #10
 800628e:	e012      	b.n	80062b6 <_printf_i+0xfe>
 8006290:	682b      	ldr	r3, [r5, #0]
 8006292:	6820      	ldr	r0, [r4, #0]
 8006294:	1d19      	adds	r1, r3, #4
 8006296:	6029      	str	r1, [r5, #0]
 8006298:	0605      	lsls	r5, r0, #24
 800629a:	d501      	bpl.n	80062a0 <_printf_i+0xe8>
 800629c:	681e      	ldr	r6, [r3, #0]
 800629e:	e002      	b.n	80062a6 <_printf_i+0xee>
 80062a0:	0641      	lsls	r1, r0, #25
 80062a2:	d5fb      	bpl.n	800629c <_printf_i+0xe4>
 80062a4:	881e      	ldrh	r6, [r3, #0]
 80062a6:	4853      	ldr	r0, [pc, #332]	; (80063f4 <_printf_i+0x23c>)
 80062a8:	2f6f      	cmp	r7, #111	; 0x6f
 80062aa:	bf0c      	ite	eq
 80062ac:	2308      	moveq	r3, #8
 80062ae:	230a      	movne	r3, #10
 80062b0:	2100      	movs	r1, #0
 80062b2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80062b6:	6865      	ldr	r5, [r4, #4]
 80062b8:	60a5      	str	r5, [r4, #8]
 80062ba:	2d00      	cmp	r5, #0
 80062bc:	bfa2      	ittt	ge
 80062be:	6821      	ldrge	r1, [r4, #0]
 80062c0:	f021 0104 	bicge.w	r1, r1, #4
 80062c4:	6021      	strge	r1, [r4, #0]
 80062c6:	b90e      	cbnz	r6, 80062cc <_printf_i+0x114>
 80062c8:	2d00      	cmp	r5, #0
 80062ca:	d04b      	beq.n	8006364 <_printf_i+0x1ac>
 80062cc:	4615      	mov	r5, r2
 80062ce:	fbb6 f1f3 	udiv	r1, r6, r3
 80062d2:	fb03 6711 	mls	r7, r3, r1, r6
 80062d6:	5dc7      	ldrb	r7, [r0, r7]
 80062d8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80062dc:	4637      	mov	r7, r6
 80062de:	42bb      	cmp	r3, r7
 80062e0:	460e      	mov	r6, r1
 80062e2:	d9f4      	bls.n	80062ce <_printf_i+0x116>
 80062e4:	2b08      	cmp	r3, #8
 80062e6:	d10b      	bne.n	8006300 <_printf_i+0x148>
 80062e8:	6823      	ldr	r3, [r4, #0]
 80062ea:	07de      	lsls	r6, r3, #31
 80062ec:	d508      	bpl.n	8006300 <_printf_i+0x148>
 80062ee:	6923      	ldr	r3, [r4, #16]
 80062f0:	6861      	ldr	r1, [r4, #4]
 80062f2:	4299      	cmp	r1, r3
 80062f4:	bfde      	ittt	le
 80062f6:	2330      	movle	r3, #48	; 0x30
 80062f8:	f805 3c01 	strble.w	r3, [r5, #-1]
 80062fc:	f105 35ff 	addle.w	r5, r5, #4294967295
 8006300:	1b52      	subs	r2, r2, r5
 8006302:	6122      	str	r2, [r4, #16]
 8006304:	f8cd a000 	str.w	sl, [sp]
 8006308:	464b      	mov	r3, r9
 800630a:	aa03      	add	r2, sp, #12
 800630c:	4621      	mov	r1, r4
 800630e:	4640      	mov	r0, r8
 8006310:	f7ff fee4 	bl	80060dc <_printf_common>
 8006314:	3001      	adds	r0, #1
 8006316:	d14a      	bne.n	80063ae <_printf_i+0x1f6>
 8006318:	f04f 30ff 	mov.w	r0, #4294967295
 800631c:	b004      	add	sp, #16
 800631e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006322:	6823      	ldr	r3, [r4, #0]
 8006324:	f043 0320 	orr.w	r3, r3, #32
 8006328:	6023      	str	r3, [r4, #0]
 800632a:	4833      	ldr	r0, [pc, #204]	; (80063f8 <_printf_i+0x240>)
 800632c:	2778      	movs	r7, #120	; 0x78
 800632e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8006332:	6823      	ldr	r3, [r4, #0]
 8006334:	6829      	ldr	r1, [r5, #0]
 8006336:	061f      	lsls	r7, r3, #24
 8006338:	f851 6b04 	ldr.w	r6, [r1], #4
 800633c:	d402      	bmi.n	8006344 <_printf_i+0x18c>
 800633e:	065f      	lsls	r7, r3, #25
 8006340:	bf48      	it	mi
 8006342:	b2b6      	uxthmi	r6, r6
 8006344:	07df      	lsls	r7, r3, #31
 8006346:	bf48      	it	mi
 8006348:	f043 0320 	orrmi.w	r3, r3, #32
 800634c:	6029      	str	r1, [r5, #0]
 800634e:	bf48      	it	mi
 8006350:	6023      	strmi	r3, [r4, #0]
 8006352:	b91e      	cbnz	r6, 800635c <_printf_i+0x1a4>
 8006354:	6823      	ldr	r3, [r4, #0]
 8006356:	f023 0320 	bic.w	r3, r3, #32
 800635a:	6023      	str	r3, [r4, #0]
 800635c:	2310      	movs	r3, #16
 800635e:	e7a7      	b.n	80062b0 <_printf_i+0xf8>
 8006360:	4824      	ldr	r0, [pc, #144]	; (80063f4 <_printf_i+0x23c>)
 8006362:	e7e4      	b.n	800632e <_printf_i+0x176>
 8006364:	4615      	mov	r5, r2
 8006366:	e7bd      	b.n	80062e4 <_printf_i+0x12c>
 8006368:	682b      	ldr	r3, [r5, #0]
 800636a:	6826      	ldr	r6, [r4, #0]
 800636c:	6961      	ldr	r1, [r4, #20]
 800636e:	1d18      	adds	r0, r3, #4
 8006370:	6028      	str	r0, [r5, #0]
 8006372:	0635      	lsls	r5, r6, #24
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	d501      	bpl.n	800637c <_printf_i+0x1c4>
 8006378:	6019      	str	r1, [r3, #0]
 800637a:	e002      	b.n	8006382 <_printf_i+0x1ca>
 800637c:	0670      	lsls	r0, r6, #25
 800637e:	d5fb      	bpl.n	8006378 <_printf_i+0x1c0>
 8006380:	8019      	strh	r1, [r3, #0]
 8006382:	2300      	movs	r3, #0
 8006384:	6123      	str	r3, [r4, #16]
 8006386:	4615      	mov	r5, r2
 8006388:	e7bc      	b.n	8006304 <_printf_i+0x14c>
 800638a:	682b      	ldr	r3, [r5, #0]
 800638c:	1d1a      	adds	r2, r3, #4
 800638e:	602a      	str	r2, [r5, #0]
 8006390:	681d      	ldr	r5, [r3, #0]
 8006392:	6862      	ldr	r2, [r4, #4]
 8006394:	2100      	movs	r1, #0
 8006396:	4628      	mov	r0, r5
 8006398:	f7f9 ff22 	bl	80001e0 <memchr>
 800639c:	b108      	cbz	r0, 80063a2 <_printf_i+0x1ea>
 800639e:	1b40      	subs	r0, r0, r5
 80063a0:	6060      	str	r0, [r4, #4]
 80063a2:	6863      	ldr	r3, [r4, #4]
 80063a4:	6123      	str	r3, [r4, #16]
 80063a6:	2300      	movs	r3, #0
 80063a8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80063ac:	e7aa      	b.n	8006304 <_printf_i+0x14c>
 80063ae:	6923      	ldr	r3, [r4, #16]
 80063b0:	462a      	mov	r2, r5
 80063b2:	4649      	mov	r1, r9
 80063b4:	4640      	mov	r0, r8
 80063b6:	47d0      	blx	sl
 80063b8:	3001      	adds	r0, #1
 80063ba:	d0ad      	beq.n	8006318 <_printf_i+0x160>
 80063bc:	6823      	ldr	r3, [r4, #0]
 80063be:	079b      	lsls	r3, r3, #30
 80063c0:	d413      	bmi.n	80063ea <_printf_i+0x232>
 80063c2:	68e0      	ldr	r0, [r4, #12]
 80063c4:	9b03      	ldr	r3, [sp, #12]
 80063c6:	4298      	cmp	r0, r3
 80063c8:	bfb8      	it	lt
 80063ca:	4618      	movlt	r0, r3
 80063cc:	e7a6      	b.n	800631c <_printf_i+0x164>
 80063ce:	2301      	movs	r3, #1
 80063d0:	4632      	mov	r2, r6
 80063d2:	4649      	mov	r1, r9
 80063d4:	4640      	mov	r0, r8
 80063d6:	47d0      	blx	sl
 80063d8:	3001      	adds	r0, #1
 80063da:	d09d      	beq.n	8006318 <_printf_i+0x160>
 80063dc:	3501      	adds	r5, #1
 80063de:	68e3      	ldr	r3, [r4, #12]
 80063e0:	9903      	ldr	r1, [sp, #12]
 80063e2:	1a5b      	subs	r3, r3, r1
 80063e4:	42ab      	cmp	r3, r5
 80063e6:	dcf2      	bgt.n	80063ce <_printf_i+0x216>
 80063e8:	e7eb      	b.n	80063c2 <_printf_i+0x20a>
 80063ea:	2500      	movs	r5, #0
 80063ec:	f104 0619 	add.w	r6, r4, #25
 80063f0:	e7f5      	b.n	80063de <_printf_i+0x226>
 80063f2:	bf00      	nop
 80063f4:	08006839 	.word	0x08006839
 80063f8:	0800684a 	.word	0x0800684a

080063fc <__sflush_r>:
 80063fc:	898a      	ldrh	r2, [r1, #12]
 80063fe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006402:	4605      	mov	r5, r0
 8006404:	0710      	lsls	r0, r2, #28
 8006406:	460c      	mov	r4, r1
 8006408:	d458      	bmi.n	80064bc <__sflush_r+0xc0>
 800640a:	684b      	ldr	r3, [r1, #4]
 800640c:	2b00      	cmp	r3, #0
 800640e:	dc05      	bgt.n	800641c <__sflush_r+0x20>
 8006410:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006412:	2b00      	cmp	r3, #0
 8006414:	dc02      	bgt.n	800641c <__sflush_r+0x20>
 8006416:	2000      	movs	r0, #0
 8006418:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800641c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800641e:	2e00      	cmp	r6, #0
 8006420:	d0f9      	beq.n	8006416 <__sflush_r+0x1a>
 8006422:	2300      	movs	r3, #0
 8006424:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006428:	682f      	ldr	r7, [r5, #0]
 800642a:	6a21      	ldr	r1, [r4, #32]
 800642c:	602b      	str	r3, [r5, #0]
 800642e:	d032      	beq.n	8006496 <__sflush_r+0x9a>
 8006430:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006432:	89a3      	ldrh	r3, [r4, #12]
 8006434:	075a      	lsls	r2, r3, #29
 8006436:	d505      	bpl.n	8006444 <__sflush_r+0x48>
 8006438:	6863      	ldr	r3, [r4, #4]
 800643a:	1ac0      	subs	r0, r0, r3
 800643c:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800643e:	b10b      	cbz	r3, 8006444 <__sflush_r+0x48>
 8006440:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006442:	1ac0      	subs	r0, r0, r3
 8006444:	2300      	movs	r3, #0
 8006446:	4602      	mov	r2, r0
 8006448:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800644a:	6a21      	ldr	r1, [r4, #32]
 800644c:	4628      	mov	r0, r5
 800644e:	47b0      	blx	r6
 8006450:	1c43      	adds	r3, r0, #1
 8006452:	89a3      	ldrh	r3, [r4, #12]
 8006454:	d106      	bne.n	8006464 <__sflush_r+0x68>
 8006456:	6829      	ldr	r1, [r5, #0]
 8006458:	291d      	cmp	r1, #29
 800645a:	d82b      	bhi.n	80064b4 <__sflush_r+0xb8>
 800645c:	4a29      	ldr	r2, [pc, #164]	; (8006504 <__sflush_r+0x108>)
 800645e:	410a      	asrs	r2, r1
 8006460:	07d6      	lsls	r6, r2, #31
 8006462:	d427      	bmi.n	80064b4 <__sflush_r+0xb8>
 8006464:	2200      	movs	r2, #0
 8006466:	6062      	str	r2, [r4, #4]
 8006468:	04d9      	lsls	r1, r3, #19
 800646a:	6922      	ldr	r2, [r4, #16]
 800646c:	6022      	str	r2, [r4, #0]
 800646e:	d504      	bpl.n	800647a <__sflush_r+0x7e>
 8006470:	1c42      	adds	r2, r0, #1
 8006472:	d101      	bne.n	8006478 <__sflush_r+0x7c>
 8006474:	682b      	ldr	r3, [r5, #0]
 8006476:	b903      	cbnz	r3, 800647a <__sflush_r+0x7e>
 8006478:	6560      	str	r0, [r4, #84]	; 0x54
 800647a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800647c:	602f      	str	r7, [r5, #0]
 800647e:	2900      	cmp	r1, #0
 8006480:	d0c9      	beq.n	8006416 <__sflush_r+0x1a>
 8006482:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006486:	4299      	cmp	r1, r3
 8006488:	d002      	beq.n	8006490 <__sflush_r+0x94>
 800648a:	4628      	mov	r0, r5
 800648c:	f7ff fbea 	bl	8005c64 <_free_r>
 8006490:	2000      	movs	r0, #0
 8006492:	6360      	str	r0, [r4, #52]	; 0x34
 8006494:	e7c0      	b.n	8006418 <__sflush_r+0x1c>
 8006496:	2301      	movs	r3, #1
 8006498:	4628      	mov	r0, r5
 800649a:	47b0      	blx	r6
 800649c:	1c41      	adds	r1, r0, #1
 800649e:	d1c8      	bne.n	8006432 <__sflush_r+0x36>
 80064a0:	682b      	ldr	r3, [r5, #0]
 80064a2:	2b00      	cmp	r3, #0
 80064a4:	d0c5      	beq.n	8006432 <__sflush_r+0x36>
 80064a6:	2b1d      	cmp	r3, #29
 80064a8:	d001      	beq.n	80064ae <__sflush_r+0xb2>
 80064aa:	2b16      	cmp	r3, #22
 80064ac:	d101      	bne.n	80064b2 <__sflush_r+0xb6>
 80064ae:	602f      	str	r7, [r5, #0]
 80064b0:	e7b1      	b.n	8006416 <__sflush_r+0x1a>
 80064b2:	89a3      	ldrh	r3, [r4, #12]
 80064b4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064b8:	81a3      	strh	r3, [r4, #12]
 80064ba:	e7ad      	b.n	8006418 <__sflush_r+0x1c>
 80064bc:	690f      	ldr	r7, [r1, #16]
 80064be:	2f00      	cmp	r7, #0
 80064c0:	d0a9      	beq.n	8006416 <__sflush_r+0x1a>
 80064c2:	0793      	lsls	r3, r2, #30
 80064c4:	680e      	ldr	r6, [r1, #0]
 80064c6:	bf08      	it	eq
 80064c8:	694b      	ldreq	r3, [r1, #20]
 80064ca:	600f      	str	r7, [r1, #0]
 80064cc:	bf18      	it	ne
 80064ce:	2300      	movne	r3, #0
 80064d0:	eba6 0807 	sub.w	r8, r6, r7
 80064d4:	608b      	str	r3, [r1, #8]
 80064d6:	f1b8 0f00 	cmp.w	r8, #0
 80064da:	dd9c      	ble.n	8006416 <__sflush_r+0x1a>
 80064dc:	6a21      	ldr	r1, [r4, #32]
 80064de:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 80064e0:	4643      	mov	r3, r8
 80064e2:	463a      	mov	r2, r7
 80064e4:	4628      	mov	r0, r5
 80064e6:	47b0      	blx	r6
 80064e8:	2800      	cmp	r0, #0
 80064ea:	dc06      	bgt.n	80064fa <__sflush_r+0xfe>
 80064ec:	89a3      	ldrh	r3, [r4, #12]
 80064ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80064f2:	81a3      	strh	r3, [r4, #12]
 80064f4:	f04f 30ff 	mov.w	r0, #4294967295
 80064f8:	e78e      	b.n	8006418 <__sflush_r+0x1c>
 80064fa:	4407      	add	r7, r0
 80064fc:	eba8 0800 	sub.w	r8, r8, r0
 8006500:	e7e9      	b.n	80064d6 <__sflush_r+0xda>
 8006502:	bf00      	nop
 8006504:	dfbffffe 	.word	0xdfbffffe

08006508 <_fflush_r>:
 8006508:	b538      	push	{r3, r4, r5, lr}
 800650a:	690b      	ldr	r3, [r1, #16]
 800650c:	4605      	mov	r5, r0
 800650e:	460c      	mov	r4, r1
 8006510:	b913      	cbnz	r3, 8006518 <_fflush_r+0x10>
 8006512:	2500      	movs	r5, #0
 8006514:	4628      	mov	r0, r5
 8006516:	bd38      	pop	{r3, r4, r5, pc}
 8006518:	b118      	cbz	r0, 8006522 <_fflush_r+0x1a>
 800651a:	6a03      	ldr	r3, [r0, #32]
 800651c:	b90b      	cbnz	r3, 8006522 <_fflush_r+0x1a>
 800651e:	f7ff fa99 	bl	8005a54 <__sinit>
 8006522:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d0f3      	beq.n	8006512 <_fflush_r+0xa>
 800652a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800652c:	07d0      	lsls	r0, r2, #31
 800652e:	d404      	bmi.n	800653a <_fflush_r+0x32>
 8006530:	0599      	lsls	r1, r3, #22
 8006532:	d402      	bmi.n	800653a <_fflush_r+0x32>
 8006534:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006536:	f7ff fb92 	bl	8005c5e <__retarget_lock_acquire_recursive>
 800653a:	4628      	mov	r0, r5
 800653c:	4621      	mov	r1, r4
 800653e:	f7ff ff5d 	bl	80063fc <__sflush_r>
 8006542:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006544:	07da      	lsls	r2, r3, #31
 8006546:	4605      	mov	r5, r0
 8006548:	d4e4      	bmi.n	8006514 <_fflush_r+0xc>
 800654a:	89a3      	ldrh	r3, [r4, #12]
 800654c:	059b      	lsls	r3, r3, #22
 800654e:	d4e1      	bmi.n	8006514 <_fflush_r+0xc>
 8006550:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006552:	f7ff fb85 	bl	8005c60 <__retarget_lock_release_recursive>
 8006556:	e7dd      	b.n	8006514 <_fflush_r+0xc>

08006558 <__swbuf_r>:
 8006558:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800655a:	460e      	mov	r6, r1
 800655c:	4614      	mov	r4, r2
 800655e:	4605      	mov	r5, r0
 8006560:	b118      	cbz	r0, 800656a <__swbuf_r+0x12>
 8006562:	6a03      	ldr	r3, [r0, #32]
 8006564:	b90b      	cbnz	r3, 800656a <__swbuf_r+0x12>
 8006566:	f7ff fa75 	bl	8005a54 <__sinit>
 800656a:	69a3      	ldr	r3, [r4, #24]
 800656c:	60a3      	str	r3, [r4, #8]
 800656e:	89a3      	ldrh	r3, [r4, #12]
 8006570:	071a      	lsls	r2, r3, #28
 8006572:	d525      	bpl.n	80065c0 <__swbuf_r+0x68>
 8006574:	6923      	ldr	r3, [r4, #16]
 8006576:	b31b      	cbz	r3, 80065c0 <__swbuf_r+0x68>
 8006578:	6823      	ldr	r3, [r4, #0]
 800657a:	6922      	ldr	r2, [r4, #16]
 800657c:	1a98      	subs	r0, r3, r2
 800657e:	6963      	ldr	r3, [r4, #20]
 8006580:	b2f6      	uxtb	r6, r6
 8006582:	4283      	cmp	r3, r0
 8006584:	4637      	mov	r7, r6
 8006586:	dc04      	bgt.n	8006592 <__swbuf_r+0x3a>
 8006588:	4621      	mov	r1, r4
 800658a:	4628      	mov	r0, r5
 800658c:	f7ff ffbc 	bl	8006508 <_fflush_r>
 8006590:	b9e0      	cbnz	r0, 80065cc <__swbuf_r+0x74>
 8006592:	68a3      	ldr	r3, [r4, #8]
 8006594:	3b01      	subs	r3, #1
 8006596:	60a3      	str	r3, [r4, #8]
 8006598:	6823      	ldr	r3, [r4, #0]
 800659a:	1c5a      	adds	r2, r3, #1
 800659c:	6022      	str	r2, [r4, #0]
 800659e:	701e      	strb	r6, [r3, #0]
 80065a0:	6962      	ldr	r2, [r4, #20]
 80065a2:	1c43      	adds	r3, r0, #1
 80065a4:	429a      	cmp	r2, r3
 80065a6:	d004      	beq.n	80065b2 <__swbuf_r+0x5a>
 80065a8:	89a3      	ldrh	r3, [r4, #12]
 80065aa:	07db      	lsls	r3, r3, #31
 80065ac:	d506      	bpl.n	80065bc <__swbuf_r+0x64>
 80065ae:	2e0a      	cmp	r6, #10
 80065b0:	d104      	bne.n	80065bc <__swbuf_r+0x64>
 80065b2:	4621      	mov	r1, r4
 80065b4:	4628      	mov	r0, r5
 80065b6:	f7ff ffa7 	bl	8006508 <_fflush_r>
 80065ba:	b938      	cbnz	r0, 80065cc <__swbuf_r+0x74>
 80065bc:	4638      	mov	r0, r7
 80065be:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065c0:	4621      	mov	r1, r4
 80065c2:	4628      	mov	r0, r5
 80065c4:	f000 f806 	bl	80065d4 <__swsetup_r>
 80065c8:	2800      	cmp	r0, #0
 80065ca:	d0d5      	beq.n	8006578 <__swbuf_r+0x20>
 80065cc:	f04f 37ff 	mov.w	r7, #4294967295
 80065d0:	e7f4      	b.n	80065bc <__swbuf_r+0x64>
	...

080065d4 <__swsetup_r>:
 80065d4:	b538      	push	{r3, r4, r5, lr}
 80065d6:	4b2a      	ldr	r3, [pc, #168]	; (8006680 <__swsetup_r+0xac>)
 80065d8:	4605      	mov	r5, r0
 80065da:	6818      	ldr	r0, [r3, #0]
 80065dc:	460c      	mov	r4, r1
 80065de:	b118      	cbz	r0, 80065e8 <__swsetup_r+0x14>
 80065e0:	6a03      	ldr	r3, [r0, #32]
 80065e2:	b90b      	cbnz	r3, 80065e8 <__swsetup_r+0x14>
 80065e4:	f7ff fa36 	bl	8005a54 <__sinit>
 80065e8:	89a3      	ldrh	r3, [r4, #12]
 80065ea:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80065ee:	0718      	lsls	r0, r3, #28
 80065f0:	d422      	bmi.n	8006638 <__swsetup_r+0x64>
 80065f2:	06d9      	lsls	r1, r3, #27
 80065f4:	d407      	bmi.n	8006606 <__swsetup_r+0x32>
 80065f6:	2309      	movs	r3, #9
 80065f8:	602b      	str	r3, [r5, #0]
 80065fa:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80065fe:	81a3      	strh	r3, [r4, #12]
 8006600:	f04f 30ff 	mov.w	r0, #4294967295
 8006604:	e034      	b.n	8006670 <__swsetup_r+0x9c>
 8006606:	0758      	lsls	r0, r3, #29
 8006608:	d512      	bpl.n	8006630 <__swsetup_r+0x5c>
 800660a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800660c:	b141      	cbz	r1, 8006620 <__swsetup_r+0x4c>
 800660e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006612:	4299      	cmp	r1, r3
 8006614:	d002      	beq.n	800661c <__swsetup_r+0x48>
 8006616:	4628      	mov	r0, r5
 8006618:	f7ff fb24 	bl	8005c64 <_free_r>
 800661c:	2300      	movs	r3, #0
 800661e:	6363      	str	r3, [r4, #52]	; 0x34
 8006620:	89a3      	ldrh	r3, [r4, #12]
 8006622:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006626:	81a3      	strh	r3, [r4, #12]
 8006628:	2300      	movs	r3, #0
 800662a:	6063      	str	r3, [r4, #4]
 800662c:	6923      	ldr	r3, [r4, #16]
 800662e:	6023      	str	r3, [r4, #0]
 8006630:	89a3      	ldrh	r3, [r4, #12]
 8006632:	f043 0308 	orr.w	r3, r3, #8
 8006636:	81a3      	strh	r3, [r4, #12]
 8006638:	6923      	ldr	r3, [r4, #16]
 800663a:	b94b      	cbnz	r3, 8006650 <__swsetup_r+0x7c>
 800663c:	89a3      	ldrh	r3, [r4, #12]
 800663e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006642:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006646:	d003      	beq.n	8006650 <__swsetup_r+0x7c>
 8006648:	4621      	mov	r1, r4
 800664a:	4628      	mov	r0, r5
 800664c:	f000 f850 	bl	80066f0 <__smakebuf_r>
 8006650:	89a0      	ldrh	r0, [r4, #12]
 8006652:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006656:	f010 0301 	ands.w	r3, r0, #1
 800665a:	d00a      	beq.n	8006672 <__swsetup_r+0x9e>
 800665c:	2300      	movs	r3, #0
 800665e:	60a3      	str	r3, [r4, #8]
 8006660:	6963      	ldr	r3, [r4, #20]
 8006662:	425b      	negs	r3, r3
 8006664:	61a3      	str	r3, [r4, #24]
 8006666:	6923      	ldr	r3, [r4, #16]
 8006668:	b943      	cbnz	r3, 800667c <__swsetup_r+0xa8>
 800666a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800666e:	d1c4      	bne.n	80065fa <__swsetup_r+0x26>
 8006670:	bd38      	pop	{r3, r4, r5, pc}
 8006672:	0781      	lsls	r1, r0, #30
 8006674:	bf58      	it	pl
 8006676:	6963      	ldrpl	r3, [r4, #20]
 8006678:	60a3      	str	r3, [r4, #8]
 800667a:	e7f4      	b.n	8006666 <__swsetup_r+0x92>
 800667c:	2000      	movs	r0, #0
 800667e:	e7f7      	b.n	8006670 <__swsetup_r+0x9c>
 8006680:	20000068 	.word	0x20000068

08006684 <_sbrk_r>:
 8006684:	b538      	push	{r3, r4, r5, lr}
 8006686:	4d06      	ldr	r5, [pc, #24]	; (80066a0 <_sbrk_r+0x1c>)
 8006688:	2300      	movs	r3, #0
 800668a:	4604      	mov	r4, r0
 800668c:	4608      	mov	r0, r1
 800668e:	602b      	str	r3, [r5, #0]
 8006690:	f7fa fe5e 	bl	8001350 <_sbrk>
 8006694:	1c43      	adds	r3, r0, #1
 8006696:	d102      	bne.n	800669e <_sbrk_r+0x1a>
 8006698:	682b      	ldr	r3, [r5, #0]
 800669a:	b103      	cbz	r3, 800669e <_sbrk_r+0x1a>
 800669c:	6023      	str	r3, [r4, #0]
 800669e:	bd38      	pop	{r3, r4, r5, pc}
 80066a0:	2000041c 	.word	0x2000041c

080066a4 <__swhatbuf_r>:
 80066a4:	b570      	push	{r4, r5, r6, lr}
 80066a6:	460c      	mov	r4, r1
 80066a8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80066ac:	2900      	cmp	r1, #0
 80066ae:	b096      	sub	sp, #88	; 0x58
 80066b0:	4615      	mov	r5, r2
 80066b2:	461e      	mov	r6, r3
 80066b4:	da0d      	bge.n	80066d2 <__swhatbuf_r+0x2e>
 80066b6:	89a3      	ldrh	r3, [r4, #12]
 80066b8:	f013 0f80 	tst.w	r3, #128	; 0x80
 80066bc:	f04f 0100 	mov.w	r1, #0
 80066c0:	bf0c      	ite	eq
 80066c2:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80066c6:	2340      	movne	r3, #64	; 0x40
 80066c8:	2000      	movs	r0, #0
 80066ca:	6031      	str	r1, [r6, #0]
 80066cc:	602b      	str	r3, [r5, #0]
 80066ce:	b016      	add	sp, #88	; 0x58
 80066d0:	bd70      	pop	{r4, r5, r6, pc}
 80066d2:	466a      	mov	r2, sp
 80066d4:	f000 f848 	bl	8006768 <_fstat_r>
 80066d8:	2800      	cmp	r0, #0
 80066da:	dbec      	blt.n	80066b6 <__swhatbuf_r+0x12>
 80066dc:	9901      	ldr	r1, [sp, #4]
 80066de:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 80066e2:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 80066e6:	4259      	negs	r1, r3
 80066e8:	4159      	adcs	r1, r3
 80066ea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80066ee:	e7eb      	b.n	80066c8 <__swhatbuf_r+0x24>

080066f0 <__smakebuf_r>:
 80066f0:	898b      	ldrh	r3, [r1, #12]
 80066f2:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80066f4:	079d      	lsls	r5, r3, #30
 80066f6:	4606      	mov	r6, r0
 80066f8:	460c      	mov	r4, r1
 80066fa:	d507      	bpl.n	800670c <__smakebuf_r+0x1c>
 80066fc:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006700:	6023      	str	r3, [r4, #0]
 8006702:	6123      	str	r3, [r4, #16]
 8006704:	2301      	movs	r3, #1
 8006706:	6163      	str	r3, [r4, #20]
 8006708:	b002      	add	sp, #8
 800670a:	bd70      	pop	{r4, r5, r6, pc}
 800670c:	ab01      	add	r3, sp, #4
 800670e:	466a      	mov	r2, sp
 8006710:	f7ff ffc8 	bl	80066a4 <__swhatbuf_r>
 8006714:	9900      	ldr	r1, [sp, #0]
 8006716:	4605      	mov	r5, r0
 8006718:	4630      	mov	r0, r6
 800671a:	f7ff fb0f 	bl	8005d3c <_malloc_r>
 800671e:	b948      	cbnz	r0, 8006734 <__smakebuf_r+0x44>
 8006720:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006724:	059a      	lsls	r2, r3, #22
 8006726:	d4ef      	bmi.n	8006708 <__smakebuf_r+0x18>
 8006728:	f023 0303 	bic.w	r3, r3, #3
 800672c:	f043 0302 	orr.w	r3, r3, #2
 8006730:	81a3      	strh	r3, [r4, #12]
 8006732:	e7e3      	b.n	80066fc <__smakebuf_r+0xc>
 8006734:	89a3      	ldrh	r3, [r4, #12]
 8006736:	6020      	str	r0, [r4, #0]
 8006738:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800673c:	81a3      	strh	r3, [r4, #12]
 800673e:	9b00      	ldr	r3, [sp, #0]
 8006740:	6163      	str	r3, [r4, #20]
 8006742:	9b01      	ldr	r3, [sp, #4]
 8006744:	6120      	str	r0, [r4, #16]
 8006746:	b15b      	cbz	r3, 8006760 <__smakebuf_r+0x70>
 8006748:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800674c:	4630      	mov	r0, r6
 800674e:	f000 f81d 	bl	800678c <_isatty_r>
 8006752:	b128      	cbz	r0, 8006760 <__smakebuf_r+0x70>
 8006754:	89a3      	ldrh	r3, [r4, #12]
 8006756:	f023 0303 	bic.w	r3, r3, #3
 800675a:	f043 0301 	orr.w	r3, r3, #1
 800675e:	81a3      	strh	r3, [r4, #12]
 8006760:	89a3      	ldrh	r3, [r4, #12]
 8006762:	431d      	orrs	r5, r3
 8006764:	81a5      	strh	r5, [r4, #12]
 8006766:	e7cf      	b.n	8006708 <__smakebuf_r+0x18>

08006768 <_fstat_r>:
 8006768:	b538      	push	{r3, r4, r5, lr}
 800676a:	4d07      	ldr	r5, [pc, #28]	; (8006788 <_fstat_r+0x20>)
 800676c:	2300      	movs	r3, #0
 800676e:	4604      	mov	r4, r0
 8006770:	4608      	mov	r0, r1
 8006772:	4611      	mov	r1, r2
 8006774:	602b      	str	r3, [r5, #0]
 8006776:	f7fa fdc2 	bl	80012fe <_fstat>
 800677a:	1c43      	adds	r3, r0, #1
 800677c:	d102      	bne.n	8006784 <_fstat_r+0x1c>
 800677e:	682b      	ldr	r3, [r5, #0]
 8006780:	b103      	cbz	r3, 8006784 <_fstat_r+0x1c>
 8006782:	6023      	str	r3, [r4, #0]
 8006784:	bd38      	pop	{r3, r4, r5, pc}
 8006786:	bf00      	nop
 8006788:	2000041c 	.word	0x2000041c

0800678c <_isatty_r>:
 800678c:	b538      	push	{r3, r4, r5, lr}
 800678e:	4d06      	ldr	r5, [pc, #24]	; (80067a8 <_isatty_r+0x1c>)
 8006790:	2300      	movs	r3, #0
 8006792:	4604      	mov	r4, r0
 8006794:	4608      	mov	r0, r1
 8006796:	602b      	str	r3, [r5, #0]
 8006798:	f7fa fdc1 	bl	800131e <_isatty>
 800679c:	1c43      	adds	r3, r0, #1
 800679e:	d102      	bne.n	80067a6 <_isatty_r+0x1a>
 80067a0:	682b      	ldr	r3, [r5, #0]
 80067a2:	b103      	cbz	r3, 80067a6 <_isatty_r+0x1a>
 80067a4:	6023      	str	r3, [r4, #0]
 80067a6:	bd38      	pop	{r3, r4, r5, pc}
 80067a8:	2000041c 	.word	0x2000041c

080067ac <_init>:
 80067ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ae:	bf00      	nop
 80067b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067b2:	bc08      	pop	{r3}
 80067b4:	469e      	mov	lr, r3
 80067b6:	4770      	bx	lr

080067b8 <_fini>:
 80067b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80067ba:	bf00      	nop
 80067bc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80067be:	bc08      	pop	{r3}
 80067c0:	469e      	mov	lr, r3
 80067c2:	4770      	bx	lr
