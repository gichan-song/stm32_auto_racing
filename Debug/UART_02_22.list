
UART_02_22.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008218  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000009c  080083b8  080083b8  000183b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008454  08008454  00020064  2**0
                  CONTENTS
  4 .ARM          00000008  08008454  08008454  00018454  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800845c  0800845c  00020064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800845c  0800845c  0001845c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008460  08008460  00018460  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000064  20000000  08008464  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00004e48  20000064  080084c8  00020064  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20004eac  080084c8  00024eac  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020064  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020094  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001a9f4  00000000  00000000  000200d7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003ca9  00000000  00000000  0003aacb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 000015b8  00000000  00000000  0003e778  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000010cf  00000000  00000000  0003fd30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00019081  00000000  00000000  00040dff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00019548  00000000  00000000  00059e80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    00098a1e  00000000  00000000  000733c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00005ccc  00000000  00000000  0010bde8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000065  00000000  00000000  00111ab4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000064 	.word	0x20000064
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080083a0 	.word	0x080083a0

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	20000068 	.word	0x20000068
 80001dc:	080083a0 	.word	0x080083a0

080001e0 <__aeabi_uldivmod>:
 80001e0:	b953      	cbnz	r3, 80001f8 <__aeabi_uldivmod+0x18>
 80001e2:	b94a      	cbnz	r2, 80001f8 <__aeabi_uldivmod+0x18>
 80001e4:	2900      	cmp	r1, #0
 80001e6:	bf08      	it	eq
 80001e8:	2800      	cmpeq	r0, #0
 80001ea:	bf1c      	itt	ne
 80001ec:	f04f 31ff 	movne.w	r1, #4294967295
 80001f0:	f04f 30ff 	movne.w	r0, #4294967295
 80001f4:	f000 b970 	b.w	80004d8 <__aeabi_idiv0>
 80001f8:	f1ad 0c08 	sub.w	ip, sp, #8
 80001fc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000200:	f000 f806 	bl	8000210 <__udivmoddi4>
 8000204:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000208:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800020c:	b004      	add	sp, #16
 800020e:	4770      	bx	lr

08000210 <__udivmoddi4>:
 8000210:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000214:	9e08      	ldr	r6, [sp, #32]
 8000216:	460d      	mov	r5, r1
 8000218:	4604      	mov	r4, r0
 800021a:	460f      	mov	r7, r1
 800021c:	2b00      	cmp	r3, #0
 800021e:	d14a      	bne.n	80002b6 <__udivmoddi4+0xa6>
 8000220:	428a      	cmp	r2, r1
 8000222:	4694      	mov	ip, r2
 8000224:	d965      	bls.n	80002f2 <__udivmoddi4+0xe2>
 8000226:	fab2 f382 	clz	r3, r2
 800022a:	b143      	cbz	r3, 800023e <__udivmoddi4+0x2e>
 800022c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000230:	f1c3 0220 	rsb	r2, r3, #32
 8000234:	409f      	lsls	r7, r3
 8000236:	fa20 f202 	lsr.w	r2, r0, r2
 800023a:	4317      	orrs	r7, r2
 800023c:	409c      	lsls	r4, r3
 800023e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000242:	fa1f f58c 	uxth.w	r5, ip
 8000246:	fbb7 f1fe 	udiv	r1, r7, lr
 800024a:	0c22      	lsrs	r2, r4, #16
 800024c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000250:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000254:	fb01 f005 	mul.w	r0, r1, r5
 8000258:	4290      	cmp	r0, r2
 800025a:	d90a      	bls.n	8000272 <__udivmoddi4+0x62>
 800025c:	eb1c 0202 	adds.w	r2, ip, r2
 8000260:	f101 37ff 	add.w	r7, r1, #4294967295
 8000264:	f080 811c 	bcs.w	80004a0 <__udivmoddi4+0x290>
 8000268:	4290      	cmp	r0, r2
 800026a:	f240 8119 	bls.w	80004a0 <__udivmoddi4+0x290>
 800026e:	3902      	subs	r1, #2
 8000270:	4462      	add	r2, ip
 8000272:	1a12      	subs	r2, r2, r0
 8000274:	b2a4      	uxth	r4, r4
 8000276:	fbb2 f0fe 	udiv	r0, r2, lr
 800027a:	fb0e 2210 	mls	r2, lr, r0, r2
 800027e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000282:	fb00 f505 	mul.w	r5, r0, r5
 8000286:	42a5      	cmp	r5, r4
 8000288:	d90a      	bls.n	80002a0 <__udivmoddi4+0x90>
 800028a:	eb1c 0404 	adds.w	r4, ip, r4
 800028e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000292:	f080 8107 	bcs.w	80004a4 <__udivmoddi4+0x294>
 8000296:	42a5      	cmp	r5, r4
 8000298:	f240 8104 	bls.w	80004a4 <__udivmoddi4+0x294>
 800029c:	4464      	add	r4, ip
 800029e:	3802      	subs	r0, #2
 80002a0:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 80002a4:	1b64      	subs	r4, r4, r5
 80002a6:	2100      	movs	r1, #0
 80002a8:	b11e      	cbz	r6, 80002b2 <__udivmoddi4+0xa2>
 80002aa:	40dc      	lsrs	r4, r3
 80002ac:	2300      	movs	r3, #0
 80002ae:	e9c6 4300 	strd	r4, r3, [r6]
 80002b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b6:	428b      	cmp	r3, r1
 80002b8:	d908      	bls.n	80002cc <__udivmoddi4+0xbc>
 80002ba:	2e00      	cmp	r6, #0
 80002bc:	f000 80ed 	beq.w	800049a <__udivmoddi4+0x28a>
 80002c0:	2100      	movs	r1, #0
 80002c2:	e9c6 0500 	strd	r0, r5, [r6]
 80002c6:	4608      	mov	r0, r1
 80002c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002cc:	fab3 f183 	clz	r1, r3
 80002d0:	2900      	cmp	r1, #0
 80002d2:	d149      	bne.n	8000368 <__udivmoddi4+0x158>
 80002d4:	42ab      	cmp	r3, r5
 80002d6:	d302      	bcc.n	80002de <__udivmoddi4+0xce>
 80002d8:	4282      	cmp	r2, r0
 80002da:	f200 80f8 	bhi.w	80004ce <__udivmoddi4+0x2be>
 80002de:	1a84      	subs	r4, r0, r2
 80002e0:	eb65 0203 	sbc.w	r2, r5, r3
 80002e4:	2001      	movs	r0, #1
 80002e6:	4617      	mov	r7, r2
 80002e8:	2e00      	cmp	r6, #0
 80002ea:	d0e2      	beq.n	80002b2 <__udivmoddi4+0xa2>
 80002ec:	e9c6 4700 	strd	r4, r7, [r6]
 80002f0:	e7df      	b.n	80002b2 <__udivmoddi4+0xa2>
 80002f2:	b902      	cbnz	r2, 80002f6 <__udivmoddi4+0xe6>
 80002f4:	deff      	udf	#255	; 0xff
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	2b00      	cmp	r3, #0
 80002fc:	f040 8090 	bne.w	8000420 <__udivmoddi4+0x210>
 8000300:	1a8a      	subs	r2, r1, r2
 8000302:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000306:	fa1f fe8c 	uxth.w	lr, ip
 800030a:	2101      	movs	r1, #1
 800030c:	fbb2 f5f7 	udiv	r5, r2, r7
 8000310:	fb07 2015 	mls	r0, r7, r5, r2
 8000314:	0c22      	lsrs	r2, r4, #16
 8000316:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 800031a:	fb0e f005 	mul.w	r0, lr, r5
 800031e:	4290      	cmp	r0, r2
 8000320:	d908      	bls.n	8000334 <__udivmoddi4+0x124>
 8000322:	eb1c 0202 	adds.w	r2, ip, r2
 8000326:	f105 38ff 	add.w	r8, r5, #4294967295
 800032a:	d202      	bcs.n	8000332 <__udivmoddi4+0x122>
 800032c:	4290      	cmp	r0, r2
 800032e:	f200 80cb 	bhi.w	80004c8 <__udivmoddi4+0x2b8>
 8000332:	4645      	mov	r5, r8
 8000334:	1a12      	subs	r2, r2, r0
 8000336:	b2a4      	uxth	r4, r4
 8000338:	fbb2 f0f7 	udiv	r0, r2, r7
 800033c:	fb07 2210 	mls	r2, r7, r0, r2
 8000340:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000344:	fb0e fe00 	mul.w	lr, lr, r0
 8000348:	45a6      	cmp	lr, r4
 800034a:	d908      	bls.n	800035e <__udivmoddi4+0x14e>
 800034c:	eb1c 0404 	adds.w	r4, ip, r4
 8000350:	f100 32ff 	add.w	r2, r0, #4294967295
 8000354:	d202      	bcs.n	800035c <__udivmoddi4+0x14c>
 8000356:	45a6      	cmp	lr, r4
 8000358:	f200 80bb 	bhi.w	80004d2 <__udivmoddi4+0x2c2>
 800035c:	4610      	mov	r0, r2
 800035e:	eba4 040e 	sub.w	r4, r4, lr
 8000362:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000366:	e79f      	b.n	80002a8 <__udivmoddi4+0x98>
 8000368:	f1c1 0720 	rsb	r7, r1, #32
 800036c:	408b      	lsls	r3, r1
 800036e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000372:	ea4c 0c03 	orr.w	ip, ip, r3
 8000376:	fa05 f401 	lsl.w	r4, r5, r1
 800037a:	fa20 f307 	lsr.w	r3, r0, r7
 800037e:	40fd      	lsrs	r5, r7
 8000380:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000384:	4323      	orrs	r3, r4
 8000386:	fbb5 f8f9 	udiv	r8, r5, r9
 800038a:	fa1f fe8c 	uxth.w	lr, ip
 800038e:	fb09 5518 	mls	r5, r9, r8, r5
 8000392:	0c1c      	lsrs	r4, r3, #16
 8000394:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000398:	fb08 f50e 	mul.w	r5, r8, lr
 800039c:	42a5      	cmp	r5, r4
 800039e:	fa02 f201 	lsl.w	r2, r2, r1
 80003a2:	fa00 f001 	lsl.w	r0, r0, r1
 80003a6:	d90b      	bls.n	80003c0 <__udivmoddi4+0x1b0>
 80003a8:	eb1c 0404 	adds.w	r4, ip, r4
 80003ac:	f108 3aff 	add.w	sl, r8, #4294967295
 80003b0:	f080 8088 	bcs.w	80004c4 <__udivmoddi4+0x2b4>
 80003b4:	42a5      	cmp	r5, r4
 80003b6:	f240 8085 	bls.w	80004c4 <__udivmoddi4+0x2b4>
 80003ba:	f1a8 0802 	sub.w	r8, r8, #2
 80003be:	4464      	add	r4, ip
 80003c0:	1b64      	subs	r4, r4, r5
 80003c2:	b29d      	uxth	r5, r3
 80003c4:	fbb4 f3f9 	udiv	r3, r4, r9
 80003c8:	fb09 4413 	mls	r4, r9, r3, r4
 80003cc:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80003d0:	fb03 fe0e 	mul.w	lr, r3, lr
 80003d4:	45a6      	cmp	lr, r4
 80003d6:	d908      	bls.n	80003ea <__udivmoddi4+0x1da>
 80003d8:	eb1c 0404 	adds.w	r4, ip, r4
 80003dc:	f103 35ff 	add.w	r5, r3, #4294967295
 80003e0:	d26c      	bcs.n	80004bc <__udivmoddi4+0x2ac>
 80003e2:	45a6      	cmp	lr, r4
 80003e4:	d96a      	bls.n	80004bc <__udivmoddi4+0x2ac>
 80003e6:	3b02      	subs	r3, #2
 80003e8:	4464      	add	r4, ip
 80003ea:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80003ee:	fba3 9502 	umull	r9, r5, r3, r2
 80003f2:	eba4 040e 	sub.w	r4, r4, lr
 80003f6:	42ac      	cmp	r4, r5
 80003f8:	46c8      	mov	r8, r9
 80003fa:	46ae      	mov	lr, r5
 80003fc:	d356      	bcc.n	80004ac <__udivmoddi4+0x29c>
 80003fe:	d053      	beq.n	80004a8 <__udivmoddi4+0x298>
 8000400:	b156      	cbz	r6, 8000418 <__udivmoddi4+0x208>
 8000402:	ebb0 0208 	subs.w	r2, r0, r8
 8000406:	eb64 040e 	sbc.w	r4, r4, lr
 800040a:	fa04 f707 	lsl.w	r7, r4, r7
 800040e:	40ca      	lsrs	r2, r1
 8000410:	40cc      	lsrs	r4, r1
 8000412:	4317      	orrs	r7, r2
 8000414:	e9c6 7400 	strd	r7, r4, [r6]
 8000418:	4618      	mov	r0, r3
 800041a:	2100      	movs	r1, #0
 800041c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000420:	f1c3 0120 	rsb	r1, r3, #32
 8000424:	fa02 fc03 	lsl.w	ip, r2, r3
 8000428:	fa20 f201 	lsr.w	r2, r0, r1
 800042c:	fa25 f101 	lsr.w	r1, r5, r1
 8000430:	409d      	lsls	r5, r3
 8000432:	432a      	orrs	r2, r5
 8000434:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000438:	fa1f fe8c 	uxth.w	lr, ip
 800043c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000440:	fb07 1510 	mls	r5, r7, r0, r1
 8000444:	0c11      	lsrs	r1, r2, #16
 8000446:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800044a:	fb00 f50e 	mul.w	r5, r0, lr
 800044e:	428d      	cmp	r5, r1
 8000450:	fa04 f403 	lsl.w	r4, r4, r3
 8000454:	d908      	bls.n	8000468 <__udivmoddi4+0x258>
 8000456:	eb1c 0101 	adds.w	r1, ip, r1
 800045a:	f100 38ff 	add.w	r8, r0, #4294967295
 800045e:	d22f      	bcs.n	80004c0 <__udivmoddi4+0x2b0>
 8000460:	428d      	cmp	r5, r1
 8000462:	d92d      	bls.n	80004c0 <__udivmoddi4+0x2b0>
 8000464:	3802      	subs	r0, #2
 8000466:	4461      	add	r1, ip
 8000468:	1b49      	subs	r1, r1, r5
 800046a:	b292      	uxth	r2, r2
 800046c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000470:	fb07 1115 	mls	r1, r7, r5, r1
 8000474:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000478:	fb05 f10e 	mul.w	r1, r5, lr
 800047c:	4291      	cmp	r1, r2
 800047e:	d908      	bls.n	8000492 <__udivmoddi4+0x282>
 8000480:	eb1c 0202 	adds.w	r2, ip, r2
 8000484:	f105 38ff 	add.w	r8, r5, #4294967295
 8000488:	d216      	bcs.n	80004b8 <__udivmoddi4+0x2a8>
 800048a:	4291      	cmp	r1, r2
 800048c:	d914      	bls.n	80004b8 <__udivmoddi4+0x2a8>
 800048e:	3d02      	subs	r5, #2
 8000490:	4462      	add	r2, ip
 8000492:	1a52      	subs	r2, r2, r1
 8000494:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000498:	e738      	b.n	800030c <__udivmoddi4+0xfc>
 800049a:	4631      	mov	r1, r6
 800049c:	4630      	mov	r0, r6
 800049e:	e708      	b.n	80002b2 <__udivmoddi4+0xa2>
 80004a0:	4639      	mov	r1, r7
 80004a2:	e6e6      	b.n	8000272 <__udivmoddi4+0x62>
 80004a4:	4610      	mov	r0, r2
 80004a6:	e6fb      	b.n	80002a0 <__udivmoddi4+0x90>
 80004a8:	4548      	cmp	r0, r9
 80004aa:	d2a9      	bcs.n	8000400 <__udivmoddi4+0x1f0>
 80004ac:	ebb9 0802 	subs.w	r8, r9, r2
 80004b0:	eb65 0e0c 	sbc.w	lr, r5, ip
 80004b4:	3b01      	subs	r3, #1
 80004b6:	e7a3      	b.n	8000400 <__udivmoddi4+0x1f0>
 80004b8:	4645      	mov	r5, r8
 80004ba:	e7ea      	b.n	8000492 <__udivmoddi4+0x282>
 80004bc:	462b      	mov	r3, r5
 80004be:	e794      	b.n	80003ea <__udivmoddi4+0x1da>
 80004c0:	4640      	mov	r0, r8
 80004c2:	e7d1      	b.n	8000468 <__udivmoddi4+0x258>
 80004c4:	46d0      	mov	r8, sl
 80004c6:	e77b      	b.n	80003c0 <__udivmoddi4+0x1b0>
 80004c8:	3d02      	subs	r5, #2
 80004ca:	4462      	add	r2, ip
 80004cc:	e732      	b.n	8000334 <__udivmoddi4+0x124>
 80004ce:	4608      	mov	r0, r1
 80004d0:	e70a      	b.n	80002e8 <__udivmoddi4+0xd8>
 80004d2:	4464      	add	r4, ip
 80004d4:	3802      	subs	r0, #2
 80004d6:	e742      	b.n	800035e <__udivmoddi4+0x14e>

080004d8 <__aeabi_idiv0>:
 80004d8:	4770      	bx	lr
 80004da:	bf00      	nop

080004dc <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80004dc:	b580      	push	{r7, lr}
 80004de:	b082      	sub	sp, #8
 80004e0:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80004e2:	2300      	movs	r3, #0
 80004e4:	607b      	str	r3, [r7, #4]
 80004e6:	4b0c      	ldr	r3, [pc, #48]	; (8000518 <MX_DMA_Init+0x3c>)
 80004e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004ea:	4a0b      	ldr	r2, [pc, #44]	; (8000518 <MX_DMA_Init+0x3c>)
 80004ec:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80004f0:	6313      	str	r3, [r2, #48]	; 0x30
 80004f2:	4b09      	ldr	r3, [pc, #36]	; (8000518 <MX_DMA_Init+0x3c>)
 80004f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80004f6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80004fa:	607b      	str	r3, [r7, #4]
 80004fc:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 80004fe:	2200      	movs	r2, #0
 8000500:	2105      	movs	r1, #5
 8000502:	202f      	movs	r0, #47	; 0x2f
 8000504:	f001 fc08 	bl	8001d18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000508:	202f      	movs	r0, #47	; 0x2f
 800050a:	f001 fc21 	bl	8001d50 <HAL_NVIC_EnableIRQ>

}
 800050e:	bf00      	nop
 8000510:	3708      	adds	r7, #8
 8000512:	46bd      	mov	sp, r7
 8000514:	bd80      	pop	{r7, pc}
 8000516:	bf00      	nop
 8000518:	40023800 	.word	0x40023800

0800051c <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 800051c:	b580      	push	{r7, lr}
 800051e:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of changeMode */
  changeModeHandle = osThreadNew(changeModefunc, NULL, &changeMode_attributes);
 8000520:	4a08      	ldr	r2, [pc, #32]	; (8000544 <MX_FREERTOS_Init+0x28>)
 8000522:	2100      	movs	r1, #0
 8000524:	4808      	ldr	r0, [pc, #32]	; (8000548 <MX_FREERTOS_Init+0x2c>)
 8000526:	f005 f921 	bl	800576c <osThreadNew>
 800052a:	4603      	mov	r3, r0
 800052c:	4a07      	ldr	r2, [pc, #28]	; (800054c <MX_FREERTOS_Init+0x30>)
 800052e:	6013      	str	r3, [r2, #0]

  /* creation of trigUltrasonic */
  trigUltrasonicHandle = osThreadNew(trigUltrasonicfunc, NULL, &trigUltrasonic_attributes);
 8000530:	4a07      	ldr	r2, [pc, #28]	; (8000550 <MX_FREERTOS_Init+0x34>)
 8000532:	2100      	movs	r1, #0
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <MX_FREERTOS_Init+0x38>)
 8000536:	f005 f919 	bl	800576c <osThreadNew>
 800053a:	4603      	mov	r3, r0
 800053c:	4a06      	ldr	r2, [pc, #24]	; (8000558 <MX_FREERTOS_Init+0x3c>)
 800053e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

}
 8000540:	bf00      	nop
 8000542:	bd80      	pop	{r7, pc}
 8000544:	080083ec 	.word	0x080083ec
 8000548:	0800055d 	.word	0x0800055d
 800054c:	20000080 	.word	0x20000080
 8000550:	08008410 	.word	0x08008410
 8000554:	080005ad 	.word	0x080005ad
 8000558:	20000084 	.word	0x20000084

0800055c <changeModefunc>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_changeModefunc */
void changeModefunc(void *argument)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	b082      	sub	sp, #8
 8000560:	af00      	add	r7, sp, #0
 8000562:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN changeModefunc */
  /* Infinite loop */
  for(;;)
  {
	  HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 8000564:	2201      	movs	r2, #1
 8000566:	490e      	ldr	r1, [pc, #56]	; (80005a0 <changeModefunc+0x44>)
 8000568:	480e      	ldr	r0, [pc, #56]	; (80005a4 <changeModefunc+0x48>)
 800056a:	f004 f94d 	bl	8004808 <HAL_UART_Receive_IT>
	  	 	 	  if(rx_Data[0] == 'a') flag = !flag;
 800056e:	4b0c      	ldr	r3, [pc, #48]	; (80005a0 <changeModefunc+0x44>)
 8000570:	781b      	ldrb	r3, [r3, #0]
 8000572:	2b61      	cmp	r3, #97	; 0x61
 8000574:	d109      	bne.n	800058a <changeModefunc+0x2e>
 8000576:	4b0c      	ldr	r3, [pc, #48]	; (80005a8 <changeModefunc+0x4c>)
 8000578:	781b      	ldrb	r3, [r3, #0]
 800057a:	2b00      	cmp	r3, #0
 800057c:	bf0c      	ite	eq
 800057e:	2301      	moveq	r3, #1
 8000580:	2300      	movne	r3, #0
 8000582:	b2db      	uxtb	r3, r3
 8000584:	461a      	mov	r2, r3
 8000586:	4b08      	ldr	r3, [pc, #32]	; (80005a8 <changeModefunc+0x4c>)
 8000588:	701a      	strb	r2, [r3, #0]
	  	 	 	  if(!flag) bt_motor();
 800058a:	4b07      	ldr	r3, [pc, #28]	; (80005a8 <changeModefunc+0x4c>)
 800058c:	781b      	ldrb	r3, [r3, #0]
 800058e:	2b00      	cmp	r3, #0
 8000590:	d101      	bne.n	8000596 <changeModefunc+0x3a>
 8000592:	f000 fc19 	bl	8000dc8 <bt_motor>
    osDelay(1);
 8000596:	2001      	movs	r0, #1
 8000598:	f005 f97a 	bl	8005890 <osDelay>
	  HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 800059c:	e7e2      	b.n	8000564 <changeModefunc+0x8>
 800059e:	bf00      	nop
 80005a0:	20000088 	.word	0x20000088
 80005a4:	20000290 	.word	0x20000290
 80005a8:	2000008a 	.word	0x2000008a

080005ac <trigUltrasonicfunc>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_trigUltrasonicfunc */
void trigUltrasonicfunc(void *argument)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b082      	sub	sp, #8
 80005b0:	af00      	add	r7, sp, #0
 80005b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN trigUltrasonicfunc */
  /* Infinite loop */
  for(;;)
  {
	  if(flag)
 80005b4:	4b09      	ldr	r3, [pc, #36]	; (80005dc <trigUltrasonicfunc+0x30>)
 80005b6:	781b      	ldrb	r3, [r3, #0]
 80005b8:	2b00      	cmp	r3, #0
 80005ba:	d0fb      	beq.n	80005b4 <trigUltrasonicfunc+0x8>
	  {
		  Trig1();
 80005bc:	f000 fb10 	bl	8000be0 <Trig1>
		  osDelay(1);
 80005c0:	2001      	movs	r0, #1
 80005c2:	f005 f965 	bl	8005890 <osDelay>
		  Trig2();
 80005c6:	f000 fb29 	bl	8000c1c <Trig2>
		  osDelay(1);
 80005ca:	2001      	movs	r0, #1
 80005cc:	f005 f960 	bl	8005890 <osDelay>
		  Trig3();
 80005d0:	f000 fb44 	bl	8000c5c <Trig3>
		  osDelay(100);
 80005d4:	2064      	movs	r0, #100	; 0x64
 80005d6:	f005 f95b 	bl	8005890 <osDelay>
	  if(flag)
 80005da:	e7eb      	b.n	80005b4 <trigUltrasonicfunc+0x8>
 80005dc:	2000008a 	.word	0x2000008a

080005e0 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 80005e0:	b580      	push	{r7, lr}
 80005e2:	b08a      	sub	sp, #40	; 0x28
 80005e4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80005e6:	f107 0314 	add.w	r3, r7, #20
 80005ea:	2200      	movs	r2, #0
 80005ec:	601a      	str	r2, [r3, #0]
 80005ee:	605a      	str	r2, [r3, #4]
 80005f0:	609a      	str	r2, [r3, #8]
 80005f2:	60da      	str	r2, [r3, #12]
 80005f4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80005f6:	2300      	movs	r3, #0
 80005f8:	613b      	str	r3, [r7, #16]
 80005fa:	4b39      	ldr	r3, [pc, #228]	; (80006e0 <MX_GPIO_Init+0x100>)
 80005fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80005fe:	4a38      	ldr	r2, [pc, #224]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000600:	f043 0304 	orr.w	r3, r3, #4
 8000604:	6313      	str	r3, [r2, #48]	; 0x30
 8000606:	4b36      	ldr	r3, [pc, #216]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800060a:	f003 0304 	and.w	r3, r3, #4
 800060e:	613b      	str	r3, [r7, #16]
 8000610:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000612:	2300      	movs	r3, #0
 8000614:	60fb      	str	r3, [r7, #12]
 8000616:	4b32      	ldr	r3, [pc, #200]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800061a:	4a31      	ldr	r2, [pc, #196]	; (80006e0 <MX_GPIO_Init+0x100>)
 800061c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000620:	6313      	str	r3, [r2, #48]	; 0x30
 8000622:	4b2f      	ldr	r3, [pc, #188]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000626:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800062a:	60fb      	str	r3, [r7, #12]
 800062c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800062e:	2300      	movs	r3, #0
 8000630:	60bb      	str	r3, [r7, #8]
 8000632:	4b2b      	ldr	r3, [pc, #172]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000636:	4a2a      	ldr	r2, [pc, #168]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000638:	f043 0301 	orr.w	r3, r3, #1
 800063c:	6313      	str	r3, [r2, #48]	; 0x30
 800063e:	4b28      	ldr	r3, [pc, #160]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000642:	f003 0301 	and.w	r3, r3, #1
 8000646:	60bb      	str	r3, [r7, #8]
 8000648:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800064a:	2300      	movs	r3, #0
 800064c:	607b      	str	r3, [r7, #4]
 800064e:	4b24      	ldr	r3, [pc, #144]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000652:	4a23      	ldr	r2, [pc, #140]	; (80006e0 <MX_GPIO_Init+0x100>)
 8000654:	f043 0302 	orr.w	r3, r3, #2
 8000658:	6313      	str	r3, [r2, #48]	; 0x30
 800065a:	4b21      	ldr	r3, [pc, #132]	; (80006e0 <MX_GPIO_Init+0x100>)
 800065c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800065e:	f003 0302 	and.w	r3, r3, #2
 8000662:	607b      	str	r3, [r7, #4]
 8000664:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TrigL_Pin|TrigC_Pin|IN1_Pin, GPIO_PIN_RESET);
 8000666:	2200      	movs	r2, #0
 8000668:	f44f 61c8 	mov.w	r1, #1600	; 0x640
 800066c:	481d      	ldr	r0, [pc, #116]	; (80006e4 <MX_GPIO_Init+0x104>)
 800066e:	f002 f87d 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, TrigR_Pin|IN2_Pin|IN4_Pin|IN3_Pin, GPIO_PIN_RESET);
 8000672:	2200      	movs	r2, #0
 8000674:	f44f 6187 	mov.w	r1, #1080	; 0x438
 8000678:	481b      	ldr	r0, [pc, #108]	; (80006e8 <MX_GPIO_Init+0x108>)
 800067a:	f002 f877 	bl	800276c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = B1_Pin;
 800067e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000684:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000688:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800068a:	2300      	movs	r3, #0
 800068c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800068e:	f107 0314 	add.w	r3, r7, #20
 8000692:	4619      	mov	r1, r3
 8000694:	4815      	ldr	r0, [pc, #84]	; (80006ec <MX_GPIO_Init+0x10c>)
 8000696:	f001 fee5 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = TrigL_Pin|TrigC_Pin|IN1_Pin;
 800069a:	f44f 63c8 	mov.w	r3, #1600	; 0x640
 800069e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006a0:	2301      	movs	r3, #1
 80006a2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006a4:	2300      	movs	r3, #0
 80006a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006a8:	2300      	movs	r3, #0
 80006aa:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80006ac:	f107 0314 	add.w	r3, r7, #20
 80006b0:	4619      	mov	r1, r3
 80006b2:	480c      	ldr	r0, [pc, #48]	; (80006e4 <MX_GPIO_Init+0x104>)
 80006b4:	f001 fed6 	bl	8002464 <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = TrigR_Pin|IN2_Pin|IN4_Pin|IN3_Pin;
 80006b8:	f44f 6387 	mov.w	r3, #1080	; 0x438
 80006bc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80006be:	2301      	movs	r3, #1
 80006c0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80006c2:	2300      	movs	r3, #0
 80006c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80006c6:	2300      	movs	r3, #0
 80006c8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80006ca:	f107 0314 	add.w	r3, r7, #20
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_GPIO_Init+0x108>)
 80006d2:	f001 fec7 	bl	8002464 <HAL_GPIO_Init>

}
 80006d6:	bf00      	nop
 80006d8:	3728      	adds	r7, #40	; 0x28
 80006da:	46bd      	mov	sp, r7
 80006dc:	bd80      	pop	{r7, pc}
 80006de:	bf00      	nop
 80006e0:	40023800 	.word	0x40023800
 80006e4:	40020000 	.word	0x40020000
 80006e8:	40020400 	.word	0x40020400
 80006ec:	40020800 	.word	0x40020800

080006f0 <delay_us>:
void SystemClock_Config(void);
void MX_FREERTOS_Init(void);
/* USER CODE BEGIN PFP */

void delay_us(uint16_t us)
{
 80006f0:	b480      	push	{r7}
 80006f2:	b083      	sub	sp, #12
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	4603      	mov	r3, r0
 80006f8:	80fb      	strh	r3, [r7, #6]
	__HAL_TIM_SET_COUNTER(&htim1, 0);
 80006fa:	4b09      	ldr	r3, [pc, #36]	; (8000720 <delay_us+0x30>)
 80006fc:	681b      	ldr	r3, [r3, #0]
 80006fe:	2200      	movs	r2, #0
 8000700:	625a      	str	r2, [r3, #36]	; 0x24

	while((__HAL_TIM_GET_COUNTER(&htim1)) < us);
 8000702:	bf00      	nop
 8000704:	4b06      	ldr	r3, [pc, #24]	; (8000720 <delay_us+0x30>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800070a:	88fb      	ldrh	r3, [r7, #6]
 800070c:	429a      	cmp	r2, r3
 800070e:	d3f9      	bcc.n	8000704 <delay_us+0x14>
}
 8000710:	bf00      	nop
 8000712:	bf00      	nop
 8000714:	370c      	adds	r7, #12
 8000716:	46bd      	mov	sp, r7
 8000718:	f85d 7b04 	ldr.w	r7, [sp], #4
 800071c:	4770      	bx	lr
 800071e:	bf00      	nop
 8000720:	20000170 	.word	0x20000170

08000724 <HAL_TIM_IC_CaptureCallback>:

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b082      	sub	sp, #8
 8000728:	af00      	add	r7, sp, #0
 800072a:	6078      	str	r0, [r7, #4]
	if(htim->Instance == TIM5)
 800072c:	687b      	ldr	r3, [r7, #4]
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	4a71      	ldr	r2, [pc, #452]	; (80008f8 <HAL_TIM_IC_CaptureCallback+0x1d4>)
 8000732:	4293      	cmp	r3, r2
 8000734:	f040 809f 	bne.w	8000876 <HAL_TIM_IC_CaptureCallback+0x152>
	{
		if(captureFlag1 == 0)	// first value is not capture
 8000738:	4b70      	ldr	r3, [pc, #448]	; (80008fc <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800073a:	781b      	ldrb	r3, [r3, #0]
 800073c:	b2db      	uxtb	r3, r3
 800073e:	2b00      	cmp	r3, #0
 8000740:	d11a      	bne.n	8000778 <HAL_TIM_IC_CaptureCallback+0x54>
		{
			INC_Value1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// read first value
 8000742:	2100      	movs	r1, #0
 8000744:	6878      	ldr	r0, [r7, #4]
 8000746:	f003 fb35 	bl	8003db4 <HAL_TIM_ReadCapturedValue>
 800074a:	4603      	mov	r3, r0
 800074c:	4a6c      	ldr	r2, [pc, #432]	; (8000900 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 800074e:	6013      	str	r3, [r2, #0]
			captureFlag1 = 1;	// first captured as true
 8000750:	4b6a      	ldr	r3, [pc, #424]	; (80008fc <HAL_TIM_IC_CaptureCallback+0x1d8>)
 8000752:	2201      	movs	r2, #1
 8000754:	701a      	strb	r2, [r3, #0]

			// change polarity rising edge to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000756:	687b      	ldr	r3, [r7, #4]
 8000758:	681b      	ldr	r3, [r3, #0]
 800075a:	6a1a      	ldr	r2, [r3, #32]
 800075c:	687b      	ldr	r3, [r7, #4]
 800075e:	681b      	ldr	r3, [r3, #0]
 8000760:	f022 020a 	bic.w	r2, r2, #10
 8000764:	621a      	str	r2, [r3, #32]
 8000766:	687b      	ldr	r3, [r7, #4]
 8000768:	681b      	ldr	r3, [r3, #0]
 800076a:	6a1a      	ldr	r2, [r3, #32]
 800076c:	687b      	ldr	r3, [r7, #4]
 800076e:	681b      	ldr	r3, [r3, #0]
 8000770:	f042 0202 	orr.w	r2, r2, #2
 8000774:	621a      	str	r2, [r3, #32]
 8000776:	e1e8      	b.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		}
		else if(captureFlag1 == 1)	// if first value already captured
 8000778:	4b60      	ldr	r3, [pc, #384]	; (80008fc <HAL_TIM_IC_CaptureCallback+0x1d8>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b2db      	uxtb	r3, r3
 800077e:	2b01      	cmp	r3, #1
 8000780:	f040 81e3 	bne.w	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		{
			INC_Value2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000784:	2100      	movs	r1, #0
 8000786:	6878      	ldr	r0, [r7, #4]
 8000788:	f003 fb14 	bl	8003db4 <HAL_TIM_ReadCapturedValue>
 800078c:	4603      	mov	r3, r0
 800078e:	4a5d      	ldr	r2, [pc, #372]	; (8000904 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000790:	6013      	str	r3, [r2, #0]

			if(INC_Value2 > INC_Value1)
 8000792:	4b5c      	ldr	r3, [pc, #368]	; (8000904 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 8000794:	681a      	ldr	r2, [r3, #0]
 8000796:	4b5a      	ldr	r3, [pc, #360]	; (8000900 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 8000798:	681b      	ldr	r3, [r3, #0]
 800079a:	429a      	cmp	r2, r3
 800079c:	d907      	bls.n	80007ae <HAL_TIM_IC_CaptureCallback+0x8a>
			{
				echoTime_front = INC_Value2 - INC_Value1;
 800079e:	4b59      	ldr	r3, [pc, #356]	; (8000904 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80007a0:	681a      	ldr	r2, [r3, #0]
 80007a2:	4b57      	ldr	r3, [pc, #348]	; (8000900 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	1ad3      	subs	r3, r2, r3
 80007a8:	4a57      	ldr	r2, [pc, #348]	; (8000908 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80007aa:	6013      	str	r3, [r2, #0]
 80007ac:	e00f      	b.n	80007ce <HAL_TIM_IC_CaptureCallback+0xaa>
			}
			else if(INC_Value2 < INC_Value1)
 80007ae:	4b55      	ldr	r3, [pc, #340]	; (8000904 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80007b0:	681a      	ldr	r2, [r3, #0]
 80007b2:	4b53      	ldr	r3, [pc, #332]	; (8000900 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80007b4:	681b      	ldr	r3, [r3, #0]
 80007b6:	429a      	cmp	r2, r3
 80007b8:	d209      	bcs.n	80007ce <HAL_TIM_IC_CaptureCallback+0xaa>
			{
				echoTime_front = (0xffff - INC_Value1) + INC_Value2;
 80007ba:	4b52      	ldr	r3, [pc, #328]	; (8000904 <HAL_TIM_IC_CaptureCallback+0x1e0>)
 80007bc:	681a      	ldr	r2, [r3, #0]
 80007be:	4b50      	ldr	r3, [pc, #320]	; (8000900 <HAL_TIM_IC_CaptureCallback+0x1dc>)
 80007c0:	681b      	ldr	r3, [r3, #0]
 80007c2:	1ad3      	subs	r3, r2, r3
 80007c4:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80007c8:	33ff      	adds	r3, #255	; 0xff
 80007ca:	4a4f      	ldr	r2, [pc, #316]	; (8000908 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80007cc:	6013      	str	r3, [r2, #0]
			}

			distance_front = echoTime_front / 58;
 80007ce:	4b4e      	ldr	r3, [pc, #312]	; (8000908 <HAL_TIM_IC_CaptureCallback+0x1e4>)
 80007d0:	681b      	ldr	r3, [r3, #0]
 80007d2:	4a4e      	ldr	r2, [pc, #312]	; (800090c <HAL_TIM_IC_CaptureCallback+0x1e8>)
 80007d4:	fba2 2303 	umull	r2, r3, r2, r3
 80007d8:	095b      	lsrs	r3, r3, #5
 80007da:	4a4d      	ldr	r2, [pc, #308]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80007dc:	6013      	str	r3, [r2, #0]
			captureFlag1 = 0;
 80007de:	4b47      	ldr	r3, [pc, #284]	; (80008fc <HAL_TIM_IC_CaptureCallback+0x1d8>)
 80007e0:	2200      	movs	r2, #0
 80007e2:	701a      	strb	r2, [r3, #0]

			 total_front = total_front - readings_front[idx_front];
 80007e4:	4b4b      	ldr	r3, [pc, #300]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007e6:	681a      	ldr	r2, [r3, #0]
 80007e8:	4b4b      	ldr	r3, [pc, #300]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80007ea:	681b      	ldr	r3, [r3, #0]
 80007ec:	494b      	ldr	r1, [pc, #300]	; (800091c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 80007ee:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 80007f2:	1ad3      	subs	r3, r2, r3
 80007f4:	4a47      	ldr	r2, [pc, #284]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 80007f6:	6013      	str	r3, [r2, #0]
				  // read from the sensor:
				  readings_front[idx_front] = distance_front;
 80007f8:	4b45      	ldr	r3, [pc, #276]	; (8000910 <HAL_TIM_IC_CaptureCallback+0x1ec>)
 80007fa:	681a      	ldr	r2, [r3, #0]
 80007fc:	4b46      	ldr	r3, [pc, #280]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 80007fe:	681b      	ldr	r3, [r3, #0]
 8000800:	4611      	mov	r1, r2
 8000802:	4a46      	ldr	r2, [pc, #280]	; (800091c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 8000804:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  // add the reading to the total_front:
				  total_front = total_front + readings_front[idx_front];
 8000808:	4b43      	ldr	r3, [pc, #268]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800080a:	681b      	ldr	r3, [r3, #0]
 800080c:	4a43      	ldr	r2, [pc, #268]	; (800091c <HAL_TIM_IC_CaptureCallback+0x1f8>)
 800080e:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000812:	4b40      	ldr	r3, [pc, #256]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	4413      	add	r3, r2
 8000818:	4a3e      	ldr	r2, [pc, #248]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 800081a:	6013      	str	r3, [r2, #0]
				  // advance to the next position in the array:
				  idx_front = idx_front + 1;
 800081c:	4b3e      	ldr	r3, [pc, #248]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 800081e:	681b      	ldr	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	4a3d      	ldr	r2, [pc, #244]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000824:	6013      	str	r3, [r2, #0]

				  // if we're at the end of the array...
				  if (idx_front >= ARRAYNUM) {
 8000826:	4b3c      	ldr	r3, [pc, #240]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000828:	681b      	ldr	r3, [r3, #0]
 800082a:	2b04      	cmp	r3, #4
 800082c:	dd02      	ble.n	8000834 <HAL_TIM_IC_CaptureCallback+0x110>
					  // ...wrap around to the beginning:
					  idx_front = 0;
 800082e:	4b3a      	ldr	r3, [pc, #232]	; (8000918 <HAL_TIM_IC_CaptureCallback+0x1f4>)
 8000830:	2200      	movs	r2, #0
 8000832:	601a      	str	r2, [r3, #0]
				  }
				  // calculate the average_front:
				  average_front = total_front / ARRAYNUM;
 8000834:	4b37      	ldr	r3, [pc, #220]	; (8000914 <HAL_TIM_IC_CaptureCallback+0x1f0>)
 8000836:	681b      	ldr	r3, [r3, #0]
 8000838:	4a39      	ldr	r2, [pc, #228]	; (8000920 <HAL_TIM_IC_CaptureCallback+0x1fc>)
 800083a:	fb82 1203 	smull	r1, r2, r2, r3
 800083e:	1052      	asrs	r2, r2, #1
 8000840:	17db      	asrs	r3, r3, #31
 8000842:	1ad3      	subs	r3, r2, r3
 8000844:	4a37      	ldr	r2, [pc, #220]	; (8000924 <HAL_TIM_IC_CaptureCallback+0x200>)
 8000846:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	681b      	ldr	r3, [r3, #0]
 800084c:	6a1a      	ldr	r2, [r3, #32]
 800084e:	687b      	ldr	r3, [r7, #4]
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	f022 020a 	bic.w	r2, r2, #10
 8000856:	621a      	str	r2, [r3, #32]
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681a      	ldr	r2, [r3, #0]
 800085c:	687b      	ldr	r3, [r7, #4]
 800085e:	681b      	ldr	r3, [r3, #0]
 8000860:	6a12      	ldr	r2, [r2, #32]
 8000862:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim5, TIM_IT_CC1);
 8000864:	4b30      	ldr	r3, [pc, #192]	; (8000928 <HAL_TIM_IC_CaptureCallback+0x204>)
 8000866:	681b      	ldr	r3, [r3, #0]
 8000868:	68da      	ldr	r2, [r3, #12]
 800086a:	4b2f      	ldr	r3, [pc, #188]	; (8000928 <HAL_TIM_IC_CaptureCallback+0x204>)
 800086c:	681b      	ldr	r3, [r3, #0]
 800086e:	f022 0202 	bic.w	r2, r2, #2
 8000872:	60da      	str	r2, [r3, #12]
 8000874:	e169      	b.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		}
	}
	else if(htim->Instance == TIM2)
 8000876:	687b      	ldr	r3, [r7, #4]
 8000878:	681b      	ldr	r3, [r3, #0]
 800087a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800087e:	f040 80c1 	bne.w	8000a04 <HAL_TIM_IC_CaptureCallback+0x2e0>
	{
		if(captureFlag2 == 0)	// first value is not capture
 8000882:	4b2a      	ldr	r3, [pc, #168]	; (800092c <HAL_TIM_IC_CaptureCallback+0x208>)
 8000884:	781b      	ldrb	r3, [r3, #0]
 8000886:	b2db      	uxtb	r3, r3
 8000888:	2b00      	cmp	r3, #0
 800088a:	d11a      	bne.n	80008c2 <HAL_TIM_IC_CaptureCallback+0x19e>
		{
			INC_Value3 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// read first value
 800088c:	2100      	movs	r1, #0
 800088e:	6878      	ldr	r0, [r7, #4]
 8000890:	f003 fa90 	bl	8003db4 <HAL_TIM_ReadCapturedValue>
 8000894:	4603      	mov	r3, r0
 8000896:	4a26      	ldr	r2, [pc, #152]	; (8000930 <HAL_TIM_IC_CaptureCallback+0x20c>)
 8000898:	6013      	str	r3, [r2, #0]
			captureFlag2 = 1;	// first captured as true
 800089a:	4b24      	ldr	r3, [pc, #144]	; (800092c <HAL_TIM_IC_CaptureCallback+0x208>)
 800089c:	2201      	movs	r2, #1
 800089e:	701a      	strb	r2, [r3, #0]

			// change polarity rising edge to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 80008a0:	687b      	ldr	r3, [r7, #4]
 80008a2:	681b      	ldr	r3, [r3, #0]
 80008a4:	6a1a      	ldr	r2, [r3, #32]
 80008a6:	687b      	ldr	r3, [r7, #4]
 80008a8:	681b      	ldr	r3, [r3, #0]
 80008aa:	f022 020a 	bic.w	r2, r2, #10
 80008ae:	621a      	str	r2, [r3, #32]
 80008b0:	687b      	ldr	r3, [r7, #4]
 80008b2:	681b      	ldr	r3, [r3, #0]
 80008b4:	6a1a      	ldr	r2, [r3, #32]
 80008b6:	687b      	ldr	r3, [r7, #4]
 80008b8:	681b      	ldr	r3, [r3, #0]
 80008ba:	f042 0202 	orr.w	r2, r2, #2
 80008be:	621a      	str	r2, [r3, #32]
 80008c0:	e143      	b.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		}
		else if(captureFlag2 == 1)	// if first value already captured
 80008c2:	4b1a      	ldr	r3, [pc, #104]	; (800092c <HAL_TIM_IC_CaptureCallback+0x208>)
 80008c4:	781b      	ldrb	r3, [r3, #0]
 80008c6:	b2db      	uxtb	r3, r3
 80008c8:	2b01      	cmp	r3, #1
 80008ca:	f040 813e 	bne.w	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		{
			INC_Value4 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 80008ce:	2100      	movs	r1, #0
 80008d0:	6878      	ldr	r0, [r7, #4]
 80008d2:	f003 fa6f 	bl	8003db4 <HAL_TIM_ReadCapturedValue>
 80008d6:	4603      	mov	r3, r0
 80008d8:	4a16      	ldr	r2, [pc, #88]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x210>)
 80008da:	6013      	str	r3, [r2, #0]

			if(INC_Value4  > INC_Value3)
 80008dc:	4b15      	ldr	r3, [pc, #84]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x210>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b13      	ldr	r3, [pc, #76]	; (8000930 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	429a      	cmp	r2, r3
 80008e6:	d929      	bls.n	800093c <HAL_TIM_IC_CaptureCallback+0x218>
			{
				echoTime_left = INC_Value4 - INC_Value3;
 80008e8:	4b12      	ldr	r3, [pc, #72]	; (8000934 <HAL_TIM_IC_CaptureCallback+0x210>)
 80008ea:	681a      	ldr	r2, [r3, #0]
 80008ec:	4b10      	ldr	r3, [pc, #64]	; (8000930 <HAL_TIM_IC_CaptureCallback+0x20c>)
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	1ad3      	subs	r3, r2, r3
 80008f2:	4a11      	ldr	r2, [pc, #68]	; (8000938 <HAL_TIM_IC_CaptureCallback+0x214>)
 80008f4:	6013      	str	r3, [r2, #0]
 80008f6:	e031      	b.n	800095c <HAL_TIM_IC_CaptureCallback+0x238>
 80008f8:	40000c00 	.word	0x40000c00
 80008fc:	200000f8 	.word	0x200000f8
 8000900:	200000ec 	.word	0x200000ec
 8000904:	200000f0 	.word	0x200000f0
 8000908:	200000f4 	.word	0x200000f4
 800090c:	8d3dcb09 	.word	0x8d3dcb09
 8000910:	200000fc 	.word	0x200000fc
 8000914:	200000a4 	.word	0x200000a4
 8000918:	200000a0 	.word	0x200000a0
 800091c:	2000008c 	.word	0x2000008c
 8000920:	66666667 	.word	0x66666667
 8000924:	200000a8 	.word	0x200000a8
 8000928:	20000248 	.word	0x20000248
 800092c:	2000010c 	.word	0x2000010c
 8000930:	20000100 	.word	0x20000100
 8000934:	20000104 	.word	0x20000104
 8000938:	20000108 	.word	0x20000108
			}
			else if(INC_Value4 < INC_Value3)
 800093c:	4b90      	ldr	r3, [pc, #576]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x45c>)
 800093e:	681a      	ldr	r2, [r3, #0]
 8000940:	4b90      	ldr	r3, [pc, #576]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x460>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	429a      	cmp	r2, r3
 8000946:	d209      	bcs.n	800095c <HAL_TIM_IC_CaptureCallback+0x238>
			{
				echoTime_left = (0xffff - INC_Value3) + INC_Value4;
 8000948:	4b8d      	ldr	r3, [pc, #564]	; (8000b80 <HAL_TIM_IC_CaptureCallback+0x45c>)
 800094a:	681a      	ldr	r2, [r3, #0]
 800094c:	4b8d      	ldr	r3, [pc, #564]	; (8000b84 <HAL_TIM_IC_CaptureCallback+0x460>)
 800094e:	681b      	ldr	r3, [r3, #0]
 8000950:	1ad3      	subs	r3, r2, r3
 8000952:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000956:	33ff      	adds	r3, #255	; 0xff
 8000958:	4a8b      	ldr	r2, [pc, #556]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x464>)
 800095a:	6013      	str	r3, [r2, #0]
			}

			distance_left = echoTime_left / 58;
 800095c:	4b8a      	ldr	r3, [pc, #552]	; (8000b88 <HAL_TIM_IC_CaptureCallback+0x464>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	4a8a      	ldr	r2, [pc, #552]	; (8000b8c <HAL_TIM_IC_CaptureCallback+0x468>)
 8000962:	fba2 2303 	umull	r2, r3, r2, r3
 8000966:	095b      	lsrs	r3, r3, #5
 8000968:	4a89      	ldr	r2, [pc, #548]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0x46c>)
 800096a:	6013      	str	r3, [r2, #0]
			captureFlag2 = 0;
 800096c:	4b89      	ldr	r3, [pc, #548]	; (8000b94 <HAL_TIM_IC_CaptureCallback+0x470>)
 800096e:	2200      	movs	r2, #0
 8000970:	701a      	strb	r2, [r3, #0]

			total_left = total_left - readings_left[idx_left];
 8000972:	4b89      	ldr	r3, [pc, #548]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x474>)
 8000974:	681a      	ldr	r2, [r3, #0]
 8000976:	4b89      	ldr	r3, [pc, #548]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x478>)
 8000978:	681b      	ldr	r3, [r3, #0]
 800097a:	4989      	ldr	r1, [pc, #548]	; (8000ba0 <HAL_TIM_IC_CaptureCallback+0x47c>)
 800097c:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000980:	1ad3      	subs	r3, r2, r3
 8000982:	4a85      	ldr	r2, [pc, #532]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x474>)
 8000984:	6013      	str	r3, [r2, #0]
				  // read from the sensor:
				  readings_left[idx_left] = distance_left;
 8000986:	4b82      	ldr	r3, [pc, #520]	; (8000b90 <HAL_TIM_IC_CaptureCallback+0x46c>)
 8000988:	681a      	ldr	r2, [r3, #0]
 800098a:	4b84      	ldr	r3, [pc, #528]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x478>)
 800098c:	681b      	ldr	r3, [r3, #0]
 800098e:	4611      	mov	r1, r2
 8000990:	4a83      	ldr	r2, [pc, #524]	; (8000ba0 <HAL_TIM_IC_CaptureCallback+0x47c>)
 8000992:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  // add the reading to the total:
				  total_left = total_left + readings_left[idx_left];
 8000996:	4b81      	ldr	r3, [pc, #516]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x478>)
 8000998:	681b      	ldr	r3, [r3, #0]
 800099a:	4a81      	ldr	r2, [pc, #516]	; (8000ba0 <HAL_TIM_IC_CaptureCallback+0x47c>)
 800099c:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 80009a0:	4b7d      	ldr	r3, [pc, #500]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x474>)
 80009a2:	681b      	ldr	r3, [r3, #0]
 80009a4:	4413      	add	r3, r2
 80009a6:	4a7c      	ldr	r2, [pc, #496]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x474>)
 80009a8:	6013      	str	r3, [r2, #0]
				  // advance to the next position in the array:
				  idx_left = idx_left + 1;
 80009aa:	4b7c      	ldr	r3, [pc, #496]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x478>)
 80009ac:	681b      	ldr	r3, [r3, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	4a7a      	ldr	r2, [pc, #488]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x478>)
 80009b2:	6013      	str	r3, [r2, #0]

				  // if we're at the end of the array...
				  if (idx_left >= ARRAYNUM) {
 80009b4:	4b79      	ldr	r3, [pc, #484]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x478>)
 80009b6:	681b      	ldr	r3, [r3, #0]
 80009b8:	2b04      	cmp	r3, #4
 80009ba:	dd02      	ble.n	80009c2 <HAL_TIM_IC_CaptureCallback+0x29e>
					  // ...wrap around to the beginning:
					  idx_left = 0;
 80009bc:	4b77      	ldr	r3, [pc, #476]	; (8000b9c <HAL_TIM_IC_CaptureCallback+0x478>)
 80009be:	2200      	movs	r2, #0
 80009c0:	601a      	str	r2, [r3, #0]
				  }
				  // calculate the average:
				  average_left = total_left / ARRAYNUM;
 80009c2:	4b75      	ldr	r3, [pc, #468]	; (8000b98 <HAL_TIM_IC_CaptureCallback+0x474>)
 80009c4:	681b      	ldr	r3, [r3, #0]
 80009c6:	4a77      	ldr	r2, [pc, #476]	; (8000ba4 <HAL_TIM_IC_CaptureCallback+0x480>)
 80009c8:	fb82 1203 	smull	r1, r2, r2, r3
 80009cc:	1052      	asrs	r2, r2, #1
 80009ce:	17db      	asrs	r3, r3, #31
 80009d0:	1ad3      	subs	r3, r2, r3
 80009d2:	4a75      	ldr	r2, [pc, #468]	; (8000ba8 <HAL_TIM_IC_CaptureCallback+0x484>)
 80009d4:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80009d6:	687b      	ldr	r3, [r7, #4]
 80009d8:	681b      	ldr	r3, [r3, #0]
 80009da:	6a1a      	ldr	r2, [r3, #32]
 80009dc:	687b      	ldr	r3, [r7, #4]
 80009de:	681b      	ldr	r3, [r3, #0]
 80009e0:	f022 020a 	bic.w	r2, r2, #10
 80009e4:	621a      	str	r2, [r3, #32]
 80009e6:	687b      	ldr	r3, [r7, #4]
 80009e8:	681a      	ldr	r2, [r3, #0]
 80009ea:	687b      	ldr	r3, [r7, #4]
 80009ec:	681b      	ldr	r3, [r3, #0]
 80009ee:	6a12      	ldr	r2, [r2, #32]
 80009f0:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim2, TIM_IT_CC1);
 80009f2:	4b6e      	ldr	r3, [pc, #440]	; (8000bac <HAL_TIM_IC_CaptureCallback+0x488>)
 80009f4:	681b      	ldr	r3, [r3, #0]
 80009f6:	68da      	ldr	r2, [r3, #12]
 80009f8:	4b6c      	ldr	r3, [pc, #432]	; (8000bac <HAL_TIM_IC_CaptureCallback+0x488>)
 80009fa:	681b      	ldr	r3, [r3, #0]
 80009fc:	f022 0202 	bic.w	r2, r2, #2
 8000a00:	60da      	str	r2, [r3, #12]
 8000a02:	e0a2      	b.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		}
	}
	else if(htim->Instance == TIM1)
 8000a04:	687b      	ldr	r3, [r7, #4]
 8000a06:	681b      	ldr	r3, [r3, #0]
 8000a08:	4a69      	ldr	r2, [pc, #420]	; (8000bb0 <HAL_TIM_IC_CaptureCallback+0x48c>)
 8000a0a:	4293      	cmp	r3, r2
 8000a0c:	f040 809d 	bne.w	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
	{
		if(captureFlag3 == 0)	// first value is not capture
 8000a10:	4b68      	ldr	r3, [pc, #416]	; (8000bb4 <HAL_TIM_IC_CaptureCallback+0x490>)
 8000a12:	781b      	ldrb	r3, [r3, #0]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	2b00      	cmp	r3, #0
 8000a18:	d11a      	bne.n	8000a50 <HAL_TIM_IC_CaptureCallback+0x32c>
		{
			INC_Value5 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);	// read first value
 8000a1a:	2100      	movs	r1, #0
 8000a1c:	6878      	ldr	r0, [r7, #4]
 8000a1e:	f003 f9c9 	bl	8003db4 <HAL_TIM_ReadCapturedValue>
 8000a22:	4603      	mov	r3, r0
 8000a24:	4a64      	ldr	r2, [pc, #400]	; (8000bb8 <HAL_TIM_IC_CaptureCallback+0x494>)
 8000a26:	6013      	str	r3, [r2, #0]
			captureFlag3 = 1;	// first captured as true
 8000a28:	4b62      	ldr	r3, [pc, #392]	; (8000bb4 <HAL_TIM_IC_CaptureCallback+0x490>)
 8000a2a:	2201      	movs	r2, #1
 8000a2c:	701a      	strb	r2, [r3, #0]

			// change polarity rising edge to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8000a2e:	687b      	ldr	r3, [r7, #4]
 8000a30:	681b      	ldr	r3, [r3, #0]
 8000a32:	6a1a      	ldr	r2, [r3, #32]
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f022 020a 	bic.w	r2, r2, #10
 8000a3c:	621a      	str	r2, [r3, #32]
 8000a3e:	687b      	ldr	r3, [r7, #4]
 8000a40:	681b      	ldr	r3, [r3, #0]
 8000a42:	6a1a      	ldr	r2, [r3, #32]
 8000a44:	687b      	ldr	r3, [r7, #4]
 8000a46:	681b      	ldr	r3, [r3, #0]
 8000a48:	f042 0202 	orr.w	r2, r2, #2
 8000a4c:	621a      	str	r2, [r3, #32]
 8000a4e:	e07c      	b.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		}
		else if(captureFlag3 == 1)	// if first value already captured
 8000a50:	4b58      	ldr	r3, [pc, #352]	; (8000bb4 <HAL_TIM_IC_CaptureCallback+0x490>)
 8000a52:	781b      	ldrb	r3, [r3, #0]
 8000a54:	b2db      	uxtb	r3, r3
 8000a56:	2b01      	cmp	r3, #1
 8000a58:	d177      	bne.n	8000b4a <HAL_TIM_IC_CaptureCallback+0x426>
		{
			INC_Value6 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);
 8000a5a:	2100      	movs	r1, #0
 8000a5c:	6878      	ldr	r0, [r7, #4]
 8000a5e:	f003 f9a9 	bl	8003db4 <HAL_TIM_ReadCapturedValue>
 8000a62:	4603      	mov	r3, r0
 8000a64:	4a55      	ldr	r2, [pc, #340]	; (8000bbc <HAL_TIM_IC_CaptureCallback+0x498>)
 8000a66:	6013      	str	r3, [r2, #0]

			if(INC_Value6 > INC_Value5)
 8000a68:	4b54      	ldr	r3, [pc, #336]	; (8000bbc <HAL_TIM_IC_CaptureCallback+0x498>)
 8000a6a:	681a      	ldr	r2, [r3, #0]
 8000a6c:	4b52      	ldr	r3, [pc, #328]	; (8000bb8 <HAL_TIM_IC_CaptureCallback+0x494>)
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	429a      	cmp	r2, r3
 8000a72:	d907      	bls.n	8000a84 <HAL_TIM_IC_CaptureCallback+0x360>
			{
				echoTime_right = INC_Value6 - INC_Value5;
 8000a74:	4b51      	ldr	r3, [pc, #324]	; (8000bbc <HAL_TIM_IC_CaptureCallback+0x498>)
 8000a76:	681a      	ldr	r2, [r3, #0]
 8000a78:	4b4f      	ldr	r3, [pc, #316]	; (8000bb8 <HAL_TIM_IC_CaptureCallback+0x494>)
 8000a7a:	681b      	ldr	r3, [r3, #0]
 8000a7c:	1ad3      	subs	r3, r2, r3
 8000a7e:	4a50      	ldr	r2, [pc, #320]	; (8000bc0 <HAL_TIM_IC_CaptureCallback+0x49c>)
 8000a80:	6013      	str	r3, [r2, #0]
 8000a82:	e00f      	b.n	8000aa4 <HAL_TIM_IC_CaptureCallback+0x380>
			}
			else if(INC_Value6 < INC_Value5)
 8000a84:	4b4d      	ldr	r3, [pc, #308]	; (8000bbc <HAL_TIM_IC_CaptureCallback+0x498>)
 8000a86:	681a      	ldr	r2, [r3, #0]
 8000a88:	4b4b      	ldr	r3, [pc, #300]	; (8000bb8 <HAL_TIM_IC_CaptureCallback+0x494>)
 8000a8a:	681b      	ldr	r3, [r3, #0]
 8000a8c:	429a      	cmp	r2, r3
 8000a8e:	d209      	bcs.n	8000aa4 <HAL_TIM_IC_CaptureCallback+0x380>
			{
				echoTime_right = (0xffff - INC_Value5) + INC_Value6;
 8000a90:	4b4a      	ldr	r3, [pc, #296]	; (8000bbc <HAL_TIM_IC_CaptureCallback+0x498>)
 8000a92:	681a      	ldr	r2, [r3, #0]
 8000a94:	4b48      	ldr	r3, [pc, #288]	; (8000bb8 <HAL_TIM_IC_CaptureCallback+0x494>)
 8000a96:	681b      	ldr	r3, [r3, #0]
 8000a98:	1ad3      	subs	r3, r2, r3
 8000a9a:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 8000a9e:	33ff      	adds	r3, #255	; 0xff
 8000aa0:	4a47      	ldr	r2, [pc, #284]	; (8000bc0 <HAL_TIM_IC_CaptureCallback+0x49c>)
 8000aa2:	6013      	str	r3, [r2, #0]
			}

			distance_right = echoTime_right / 58;
 8000aa4:	4b46      	ldr	r3, [pc, #280]	; (8000bc0 <HAL_TIM_IC_CaptureCallback+0x49c>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	4a38      	ldr	r2, [pc, #224]	; (8000b8c <HAL_TIM_IC_CaptureCallback+0x468>)
 8000aaa:	fba2 2303 	umull	r2, r3, r2, r3
 8000aae:	095b      	lsrs	r3, r3, #5
 8000ab0:	4a44      	ldr	r2, [pc, #272]	; (8000bc4 <HAL_TIM_IC_CaptureCallback+0x4a0>)
 8000ab2:	6013      	str	r3, [r2, #0]
			captureFlag3 = 0;
 8000ab4:	4b3f      	ldr	r3, [pc, #252]	; (8000bb4 <HAL_TIM_IC_CaptureCallback+0x490>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	701a      	strb	r2, [r3, #0]

			 total_right = total_right - readings_right[idx_right];
 8000aba:	4b43      	ldr	r3, [pc, #268]	; (8000bc8 <HAL_TIM_IC_CaptureCallback+0x4a4>)
 8000abc:	681a      	ldr	r2, [r3, #0]
 8000abe:	4b43      	ldr	r3, [pc, #268]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8000ac0:	681b      	ldr	r3, [r3, #0]
 8000ac2:	4943      	ldr	r1, [pc, #268]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0x4ac>)
 8000ac4:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 8000ac8:	1ad3      	subs	r3, r2, r3
 8000aca:	4a3f      	ldr	r2, [pc, #252]	; (8000bc8 <HAL_TIM_IC_CaptureCallback+0x4a4>)
 8000acc:	6013      	str	r3, [r2, #0]
				  // read from the sensor:
				  readings_right[idx_right] = distance_right;
 8000ace:	4b3d      	ldr	r3, [pc, #244]	; (8000bc4 <HAL_TIM_IC_CaptureCallback+0x4a0>)
 8000ad0:	681a      	ldr	r2, [r3, #0]
 8000ad2:	4b3e      	ldr	r3, [pc, #248]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8000ad4:	681b      	ldr	r3, [r3, #0]
 8000ad6:	4611      	mov	r1, r2
 8000ad8:	4a3d      	ldr	r2, [pc, #244]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0x4ac>)
 8000ada:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
				  // add the reading to the total:
				  total_right = total_right + readings_right[idx_right];
 8000ade:	4b3b      	ldr	r3, [pc, #236]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	4a3b      	ldr	r2, [pc, #236]	; (8000bd0 <HAL_TIM_IC_CaptureCallback+0x4ac>)
 8000ae4:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000ae8:	4b37      	ldr	r3, [pc, #220]	; (8000bc8 <HAL_TIM_IC_CaptureCallback+0x4a4>)
 8000aea:	681b      	ldr	r3, [r3, #0]
 8000aec:	4413      	add	r3, r2
 8000aee:	4a36      	ldr	r2, [pc, #216]	; (8000bc8 <HAL_TIM_IC_CaptureCallback+0x4a4>)
 8000af0:	6013      	str	r3, [r2, #0]
				  // advance to the next position in the array:
				  idx_right = idx_right + 1;
 8000af2:	4b36      	ldr	r3, [pc, #216]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8000af4:	681b      	ldr	r3, [r3, #0]
 8000af6:	3301      	adds	r3, #1
 8000af8:	4a34      	ldr	r2, [pc, #208]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8000afa:	6013      	str	r3, [r2, #0]

				  // if we're at the end of the array...
				  if (idx_right >= ARRAYNUM) {
 8000afc:	4b33      	ldr	r3, [pc, #204]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8000afe:	681b      	ldr	r3, [r3, #0]
 8000b00:	2b04      	cmp	r3, #4
 8000b02:	dd02      	ble.n	8000b0a <HAL_TIM_IC_CaptureCallback+0x3e6>
					  // ...wrap around to the beginning:
					  idx_right = 0;
 8000b04:	4b31      	ldr	r3, [pc, #196]	; (8000bcc <HAL_TIM_IC_CaptureCallback+0x4a8>)
 8000b06:	2200      	movs	r2, #0
 8000b08:	601a      	str	r2, [r3, #0]
				  }
				  // calculate the average:
				  average_right = total_right / ARRAYNUM;
 8000b0a:	4b2f      	ldr	r3, [pc, #188]	; (8000bc8 <HAL_TIM_IC_CaptureCallback+0x4a4>)
 8000b0c:	681b      	ldr	r3, [r3, #0]
 8000b0e:	4a25      	ldr	r2, [pc, #148]	; (8000ba4 <HAL_TIM_IC_CaptureCallback+0x480>)
 8000b10:	fb82 1203 	smull	r1, r2, r2, r3
 8000b14:	1052      	asrs	r2, r2, #1
 8000b16:	17db      	asrs	r3, r3, #31
 8000b18:	1ad3      	subs	r3, r2, r3
 8000b1a:	4a2e      	ldr	r2, [pc, #184]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000b1c:	6013      	str	r3, [r2, #0]

			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	681b      	ldr	r3, [r3, #0]
 8000b22:	6a1a      	ldr	r2, [r3, #32]
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f022 020a 	bic.w	r2, r2, #10
 8000b2c:	621a      	str	r2, [r3, #32]
 8000b2e:	687b      	ldr	r3, [r7, #4]
 8000b30:	681a      	ldr	r2, [r3, #0]
 8000b32:	687b      	ldr	r3, [r7, #4]
 8000b34:	681b      	ldr	r3, [r3, #0]
 8000b36:	6a12      	ldr	r2, [r2, #32]
 8000b38:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8000b3a:	4b27      	ldr	r3, [pc, #156]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000b3c:	681b      	ldr	r3, [r3, #0]
 8000b3e:	68da      	ldr	r2, [r3, #12]
 8000b40:	4b25      	ldr	r3, [pc, #148]	; (8000bd8 <HAL_TIM_IC_CaptureCallback+0x4b4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f022 0202 	bic.w	r2, r2, #2
 8000b48:	60da      	str	r2, [r3, #12]
//	if(average_front < 10)
//	{
//		stop();
//		return;
//	}
	go();
 8000b4a:	f000 f8a7 	bl	8000c9c <go>
	if(average_right < 30){
 8000b4e:	4b21      	ldr	r3, [pc, #132]	; (8000bd4 <HAL_TIM_IC_CaptureCallback+0x4b0>)
 8000b50:	681b      	ldr	r3, [r3, #0]
 8000b52:	2b1d      	cmp	r3, #29
 8000b54:	dc02      	bgt.n	8000b5c <HAL_TIM_IC_CaptureCallback+0x438>
		left();
 8000b56:	f000 f919 	bl	8000d8c <left>
		return;
 8000b5a:	e00d      	b.n	8000b78 <HAL_TIM_IC_CaptureCallback+0x454>
	}
	if(average_left < 30){
 8000b5c:	4b12      	ldr	r3, [pc, #72]	; (8000ba8 <HAL_TIM_IC_CaptureCallback+0x484>)
 8000b5e:	681b      	ldr	r3, [r3, #0]
 8000b60:	2b1d      	cmp	r3, #29
 8000b62:	dc02      	bgt.n	8000b6a <HAL_TIM_IC_CaptureCallback+0x446>
		right();
 8000b64:	f000 f8f4 	bl	8000d50 <right>
		return;
 8000b68:	e006      	b.n	8000b78 <HAL_TIM_IC_CaptureCallback+0x454>
	}
	if(average_front < 15){
 8000b6a:	4b1c      	ldr	r3, [pc, #112]	; (8000bdc <HAL_TIM_IC_CaptureCallback+0x4b8>)
 8000b6c:	681b      	ldr	r3, [r3, #0]
 8000b6e:	2b0e      	cmp	r3, #14
 8000b70:	dc02      	bgt.n	8000b78 <HAL_TIM_IC_CaptureCallback+0x454>
		right();
 8000b72:	f000 f8ed 	bl	8000d50 <right>
		return;
 8000b76:	bf00      	nop
	}
}
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	20000104 	.word	0x20000104
 8000b84:	20000100 	.word	0x20000100
 8000b88:	20000108 	.word	0x20000108
 8000b8c:	8d3dcb09 	.word	0x8d3dcb09
 8000b90:	20000110 	.word	0x20000110
 8000b94:	2000010c 	.word	0x2000010c
 8000b98:	200000c4 	.word	0x200000c4
 8000b9c:	200000c0 	.word	0x200000c0
 8000ba0:	200000ac 	.word	0x200000ac
 8000ba4:	66666667 	.word	0x66666667
 8000ba8:	200000c8 	.word	0x200000c8
 8000bac:	200001b8 	.word	0x200001b8
 8000bb0:	40010000 	.word	0x40010000
 8000bb4:	20000120 	.word	0x20000120
 8000bb8:	20000114 	.word	0x20000114
 8000bbc:	20000118 	.word	0x20000118
 8000bc0:	2000011c 	.word	0x2000011c
 8000bc4:	20000124 	.word	0x20000124
 8000bc8:	200000e4 	.word	0x200000e4
 8000bcc:	200000e0 	.word	0x200000e0
 8000bd0:	200000cc 	.word	0x200000cc
 8000bd4:	200000e8 	.word	0x200000e8
 8000bd8:	20000170 	.word	0x20000170
 8000bdc:	200000a8 	.word	0x200000a8

08000be0 <Trig1>:

void Trig1(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigL_GPIO_Port, TrigL_Pin, 1);	// Trig Pin High
 8000be4:	2201      	movs	r2, #1
 8000be6:	2140      	movs	r1, #64	; 0x40
 8000be8:	480a      	ldr	r0, [pc, #40]	; (8000c14 <Trig1+0x34>)
 8000bea:	f001 fdbf 	bl	800276c <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000bee:	200a      	movs	r0, #10
 8000bf0:	f7ff fd7e 	bl	80006f0 <delay_us>
	HAL_GPIO_WritePin(TrigL_GPIO_Port, TrigL_Pin, 0);	// Trig Pin Low
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	2140      	movs	r1, #64	; 0x40
 8000bf8:	4806      	ldr	r0, [pc, #24]	; (8000c14 <Trig1+0x34>)
 8000bfa:	f001 fdb7 	bl	800276c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim2, TIM_IT_CC1);	// SET Timer Enable
 8000bfe:	4b06      	ldr	r3, [pc, #24]	; (8000c18 <Trig1+0x38>)
 8000c00:	681b      	ldr	r3, [r3, #0]
 8000c02:	68da      	ldr	r2, [r3, #12]
 8000c04:	4b04      	ldr	r3, [pc, #16]	; (8000c18 <Trig1+0x38>)
 8000c06:	681b      	ldr	r3, [r3, #0]
 8000c08:	f042 0202 	orr.w	r2, r2, #2
 8000c0c:	60da      	str	r2, [r3, #12]
}
 8000c0e:	bf00      	nop
 8000c10:	bd80      	pop	{r7, pc}
 8000c12:	bf00      	nop
 8000c14:	40020000 	.word	0x40020000
 8000c18:	200001b8 	.word	0x200001b8

08000c1c <Trig2>:

void Trig2(void)
{
 8000c1c:	b580      	push	{r7, lr}
 8000c1e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigC_GPIO_Port, TrigC_Pin, 1);	// Trig Pin High
 8000c20:	2201      	movs	r2, #1
 8000c22:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c26:	480b      	ldr	r0, [pc, #44]	; (8000c54 <Trig2+0x38>)
 8000c28:	f001 fda0 	bl	800276c <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000c2c:	200a      	movs	r0, #10
 8000c2e:	f7ff fd5f 	bl	80006f0 <delay_us>
	HAL_GPIO_WritePin(TrigC_GPIO_Port, TrigC_Pin, 0);	// Trig Pin Low
 8000c32:	2200      	movs	r2, #0
 8000c34:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000c38:	4806      	ldr	r0, [pc, #24]	; (8000c54 <Trig2+0x38>)
 8000c3a:	f001 fd97 	bl	800276c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim5, TIM_IT_CC1);	// SET Timer Enable
 8000c3e:	4b06      	ldr	r3, [pc, #24]	; (8000c58 <Trig2+0x3c>)
 8000c40:	681b      	ldr	r3, [r3, #0]
 8000c42:	68da      	ldr	r2, [r3, #12]
 8000c44:	4b04      	ldr	r3, [pc, #16]	; (8000c58 <Trig2+0x3c>)
 8000c46:	681b      	ldr	r3, [r3, #0]
 8000c48:	f042 0202 	orr.w	r2, r2, #2
 8000c4c:	60da      	str	r2, [r3, #12]
}
 8000c4e:	bf00      	nop
 8000c50:	bd80      	pop	{r7, pc}
 8000c52:	bf00      	nop
 8000c54:	40020000 	.word	0x40020000
 8000c58:	20000248 	.word	0x20000248

08000c5c <Trig3>:

void Trig3(void)
{
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(TrigR_GPIO_Port, TrigR_Pin, 1);	// Trig Pin High
 8000c60:	2201      	movs	r2, #1
 8000c62:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c66:	480b      	ldr	r0, [pc, #44]	; (8000c94 <Trig3+0x38>)
 8000c68:	f001 fd80 	bl	800276c <HAL_GPIO_WritePin>
	delay_us(10);								// delay 10us
 8000c6c:	200a      	movs	r0, #10
 8000c6e:	f7ff fd3f 	bl	80006f0 <delay_us>
	HAL_GPIO_WritePin(TrigR_GPIO_Port, TrigR_Pin, 0);	// Trig Pin Low
 8000c72:	2200      	movs	r2, #0
 8000c74:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000c78:	4806      	ldr	r0, [pc, #24]	; (8000c94 <Trig3+0x38>)
 8000c7a:	f001 fd77 	bl	800276c <HAL_GPIO_WritePin>

	__HAL_TIM_ENABLE_IT(&htim1, TIM_IT_CC1);	// SET Timer Enable
 8000c7e:	4b06      	ldr	r3, [pc, #24]	; (8000c98 <Trig3+0x3c>)
 8000c80:	681b      	ldr	r3, [r3, #0]
 8000c82:	68da      	ldr	r2, [r3, #12]
 8000c84:	4b04      	ldr	r3, [pc, #16]	; (8000c98 <Trig3+0x3c>)
 8000c86:	681b      	ldr	r3, [r3, #0]
 8000c88:	f042 0202 	orr.w	r2, r2, #2
 8000c8c:	60da      	str	r2, [r3, #12]
}
 8000c8e:	bf00      	nop
 8000c90:	bd80      	pop	{r7, pc}
 8000c92:	bf00      	nop
 8000c94:	40020400 	.word	0x40020400
 8000c98:	20000170 	.word	0x20000170

08000c9c <go>:

void go()		// ?���?????????? ?��?��
{
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);	// Right ?��?��?��
 8000ca0:	2201      	movs	r2, #1
 8000ca2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ca6:	480a      	ldr	r0, [pc, #40]	; (8000cd0 <go+0x34>)
 8000ca8:	f001 fd60 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000cac:	2200      	movs	r2, #0
 8000cae:	2108      	movs	r1, #8
 8000cb0:	4808      	ldr	r0, [pc, #32]	; (8000cd4 <go+0x38>)
 8000cb2:	f001 fd5b 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);	// Left ?��?��?��
 8000cb6:	2201      	movs	r2, #1
 8000cb8:	2120      	movs	r1, #32
 8000cba:	4806      	ldr	r0, [pc, #24]	; (8000cd4 <go+0x38>)
 8000cbc:	f001 fd56 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	2110      	movs	r1, #16
 8000cc4:	4803      	ldr	r0, [pc, #12]	; (8000cd4 <go+0x38>)
 8000cc6:	f001 fd51 	bl	800276c <HAL_GPIO_WritePin>
	//printf("This is Forward Function\r\n");	myDelay(500);
}
 8000cca:	bf00      	nop
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	40020000 	.word	0x40020000
 8000cd4:	40020400 	.word	0x40020400

08000cd8 <back>:

void back()		// ?���????????? ?��?��
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000cdc:	2200      	movs	r2, #0
 8000cde:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000ce2:	480a      	ldr	r0, [pc, #40]	; (8000d0c <back+0x34>)
 8000ce4:	f001 fd42 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000ce8:	2201      	movs	r2, #1
 8000cea:	2108      	movs	r1, #8
 8000cec:	4808      	ldr	r0, [pc, #32]	; (8000d10 <back+0x38>)
 8000cee:	f001 fd3d 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000cf2:	2200      	movs	r2, #0
 8000cf4:	2120      	movs	r1, #32
 8000cf6:	4806      	ldr	r0, [pc, #24]	; (8000d10 <back+0x38>)
 8000cf8:	f001 fd38 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000cfc:	2201      	movs	r2, #1
 8000cfe:	2110      	movs	r1, #16
 8000d00:	4803      	ldr	r0, [pc, #12]	; (8000d10 <back+0x38>)
 8000d02:	f001 fd33 	bl	800276c <HAL_GPIO_WritePin>
	//printf("This is Backward Function\r\n");	myDelay(500);
} // end of Backward
 8000d06:	bf00      	nop
 8000d08:	bd80      	pop	{r7, pc}
 8000d0a:	bf00      	nop
 8000d0c:	40020000 	.word	0x40020000
 8000d10:	40020400 	.word	0x40020400

08000d14 <stop>:


void stop()
{
 8000d14:	b580      	push	{r7, lr}
 8000d16:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000d18:	2200      	movs	r2, #0
 8000d1a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d1e:	480a      	ldr	r0, [pc, #40]	; (8000d48 <stop+0x34>)
 8000d20:	f001 fd24 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000d24:	2200      	movs	r2, #0
 8000d26:	2108      	movs	r1, #8
 8000d28:	4808      	ldr	r0, [pc, #32]	; (8000d4c <stop+0x38>)
 8000d2a:	f001 fd1f 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000d2e:	2200      	movs	r2, #0
 8000d30:	2120      	movs	r1, #32
 8000d32:	4806      	ldr	r0, [pc, #24]	; (8000d4c <stop+0x38>)
 8000d34:	f001 fd1a 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000d38:	2200      	movs	r2, #0
 8000d3a:	2110      	movs	r1, #16
 8000d3c:	4803      	ldr	r0, [pc, #12]	; (8000d4c <stop+0x38>)
 8000d3e:	f001 fd15 	bl	800276c <HAL_GPIO_WritePin>
} // end of Stop
 8000d42:	bf00      	nop
 8000d44:	bd80      	pop	{r7, pc}
 8000d46:	bf00      	nop
 8000d48:	40020000 	.word	0x40020000
 8000d4c:	40020400 	.word	0x40020400

08000d50 <right>:


void right()		// ?��?��?�� ?��?��		// Left ?��?��?��, Right ?��?��?��
{
 8000d50:	b580      	push	{r7, lr}
 8000d52:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 1);	// Right ?��?��?��
 8000d54:	2201      	movs	r2, #1
 8000d56:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d5a:	480a      	ldr	r0, [pc, #40]	; (8000d84 <right+0x34>)
 8000d5c:	f001 fd06 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 0);
 8000d60:	2200      	movs	r2, #0
 8000d62:	2108      	movs	r1, #8
 8000d64:	4808      	ldr	r0, [pc, #32]	; (8000d88 <right+0x38>)
 8000d66:	f001 fd01 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 0);	// Left ?��?��?��
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	2120      	movs	r1, #32
 8000d6e:	4806      	ldr	r0, [pc, #24]	; (8000d88 <right+0x38>)
 8000d70:	f001 fcfc 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 1);
 8000d74:	2201      	movs	r2, #1
 8000d76:	2110      	movs	r1, #16
 8000d78:	4803      	ldr	r0, [pc, #12]	; (8000d88 <right+0x38>)
 8000d7a:	f001 fcf7 	bl	800276c <HAL_GPIO_WritePin>
} // end of Rotate_R
 8000d7e:	bf00      	nop
 8000d80:	bd80      	pop	{r7, pc}
 8000d82:	bf00      	nop
 8000d84:	40020000 	.word	0x40020000
 8000d88:	40020400 	.word	0x40020400

08000d8c <left>:



void left()		// 좌회?�� ?��?��		// Left ?��?��?��, Right ?��?��?��
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(IN1_GPIO_Port, IN1_Pin, 0);	// Right ?��?��?��
 8000d90:	2200      	movs	r2, #0
 8000d92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8000d96:	480a      	ldr	r0, [pc, #40]	; (8000dc0 <left+0x34>)
 8000d98:	f001 fce8 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN2_GPIO_Port, IN2_Pin, 1);
 8000d9c:	2201      	movs	r2, #1
 8000d9e:	2108      	movs	r1, #8
 8000da0:	4808      	ldr	r0, [pc, #32]	; (8000dc4 <left+0x38>)
 8000da2:	f001 fce3 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN3_GPIO_Port, IN3_Pin, 1);	// Left ?��?��?��
 8000da6:	2201      	movs	r2, #1
 8000da8:	2120      	movs	r1, #32
 8000daa:	4806      	ldr	r0, [pc, #24]	; (8000dc4 <left+0x38>)
 8000dac:	f001 fcde 	bl	800276c <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(IN4_GPIO_Port, IN4_Pin, 0);
 8000db0:	2200      	movs	r2, #0
 8000db2:	2110      	movs	r1, #16
 8000db4:	4803      	ldr	r0, [pc, #12]	; (8000dc4 <left+0x38>)
 8000db6:	f001 fcd9 	bl	800276c <HAL_GPIO_WritePin>
} // end of Rotate_L
 8000dba:	bf00      	nop
 8000dbc:	bd80      	pop	{r7, pc}
 8000dbe:	bf00      	nop
 8000dc0:	40020000 	.word	0x40020000
 8000dc4:	40020400 	.word	0x40020400

08000dc8 <bt_motor>:
/////////////////////////////////////////////////코드 추�?2



void bt_motor()
{
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0

	if(rx_Data[0] == 'H')
 8000dcc:	4b4b      	ldr	r3, [pc, #300]	; (8000efc <bt_motor+0x134>)
 8000dce:	781b      	ldrb	r3, [r3, #0]
 8000dd0:	2b48      	cmp	r3, #72	; 0x48
 8000dd2:	d104      	bne.n	8000dde <bt_motor+0x16>
	{
		PWM = 600;
 8000dd4:	4b4a      	ldr	r3, [pc, #296]	; (8000f00 <bt_motor+0x138>)
 8000dd6:	f44f 7216 	mov.w	r2, #600	; 0x258
 8000dda:	601a      	str	r2, [r3, #0]
 8000ddc:	e037      	b.n	8000e4e <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'M')
 8000dde:	4b47      	ldr	r3, [pc, #284]	; (8000efc <bt_motor+0x134>)
 8000de0:	781b      	ldrb	r3, [r3, #0]
 8000de2:	2b4d      	cmp	r3, #77	; 0x4d
 8000de4:	d104      	bne.n	8000df0 <bt_motor+0x28>
	{
		PWM = 400;
 8000de6:	4b46      	ldr	r3, [pc, #280]	; (8000f00 <bt_motor+0x138>)
 8000de8:	f44f 72c8 	mov.w	r2, #400	; 0x190
 8000dec:	601a      	str	r2, [r3, #0]
 8000dee:	e02e      	b.n	8000e4e <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'L')
 8000df0:	4b42      	ldr	r3, [pc, #264]	; (8000efc <bt_motor+0x134>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	2b4c      	cmp	r3, #76	; 0x4c
 8000df6:	d103      	bne.n	8000e00 <bt_motor+0x38>
	{
		PWM = 250;
 8000df8:	4b41      	ldr	r3, [pc, #260]	; (8000f00 <bt_motor+0x138>)
 8000dfa:	22fa      	movs	r2, #250	; 0xfa
 8000dfc:	601a      	str	r2, [r3, #0]
 8000dfe:	e026      	b.n	8000e4e <bt_motor+0x86>
	}
	else if(rx_Data[0] == 'f')
 8000e00:	4b3e      	ldr	r3, [pc, #248]	; (8000efc <bt_motor+0x134>)
 8000e02:	781b      	ldrb	r3, [r3, #0]
 8000e04:	2b66      	cmp	r3, #102	; 0x66
 8000e06:	d103      	bne.n	8000e10 <bt_motor+0x48>
	{
	  state = 'f';
 8000e08:	4b3e      	ldr	r3, [pc, #248]	; (8000f04 <bt_motor+0x13c>)
 8000e0a:	2266      	movs	r2, #102	; 0x66
 8000e0c:	701a      	strb	r2, [r3, #0]
 8000e0e:	e01e      	b.n	8000e4e <bt_motor+0x86>
	}
	else if(rx_Data[0] == 's')
 8000e10:	4b3a      	ldr	r3, [pc, #232]	; (8000efc <bt_motor+0x134>)
 8000e12:	781b      	ldrb	r3, [r3, #0]
 8000e14:	2b73      	cmp	r3, #115	; 0x73
 8000e16:	d103      	bne.n	8000e20 <bt_motor+0x58>
	{
	  state = 's';
 8000e18:	4b3a      	ldr	r3, [pc, #232]	; (8000f04 <bt_motor+0x13c>)
 8000e1a:	2273      	movs	r2, #115	; 0x73
 8000e1c:	701a      	strb	r2, [r3, #0]
 8000e1e:	e016      	b.n	8000e4e <bt_motor+0x86>
	}
  else if(rx_Data[0] == 'l')
 8000e20:	4b36      	ldr	r3, [pc, #216]	; (8000efc <bt_motor+0x134>)
 8000e22:	781b      	ldrb	r3, [r3, #0]
 8000e24:	2b6c      	cmp	r3, #108	; 0x6c
 8000e26:	d103      	bne.n	8000e30 <bt_motor+0x68>
	{
	  state = 'l';
 8000e28:	4b36      	ldr	r3, [pc, #216]	; (8000f04 <bt_motor+0x13c>)
 8000e2a:	226c      	movs	r2, #108	; 0x6c
 8000e2c:	701a      	strb	r2, [r3, #0]
 8000e2e:	e00e      	b.n	8000e4e <bt_motor+0x86>

	}
  else if(rx_Data[0] == 'r')
 8000e30:	4b32      	ldr	r3, [pc, #200]	; (8000efc <bt_motor+0x134>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	2b72      	cmp	r3, #114	; 0x72
 8000e36:	d103      	bne.n	8000e40 <bt_motor+0x78>
	{
	  state = 'r';
 8000e38:	4b32      	ldr	r3, [pc, #200]	; (8000f04 <bt_motor+0x13c>)
 8000e3a:	2272      	movs	r2, #114	; 0x72
 8000e3c:	701a      	strb	r2, [r3, #0]
 8000e3e:	e006      	b.n	8000e4e <bt_motor+0x86>

	}
  else if(rx_Data[0] == 'b')
 8000e40:	4b2e      	ldr	r3, [pc, #184]	; (8000efc <bt_motor+0x134>)
 8000e42:	781b      	ldrb	r3, [r3, #0]
 8000e44:	2b62      	cmp	r3, #98	; 0x62
 8000e46:	d102      	bne.n	8000e4e <bt_motor+0x86>
	{
	  state = 'b';
 8000e48:	4b2e      	ldr	r3, [pc, #184]	; (8000f04 <bt_motor+0x13c>)
 8000e4a:	2262      	movs	r2, #98	; 0x62
 8000e4c:	701a      	strb	r2, [r3, #0]
	}

	if(state == 'f'){
 8000e4e:	4b2d      	ldr	r3, [pc, #180]	; (8000f04 <bt_motor+0x13c>)
 8000e50:	781b      	ldrb	r3, [r3, #0]
 8000e52:	2b66      	cmp	r3, #102	; 0x66
 8000e54:	d10c      	bne.n	8000e70 <bt_motor+0xa8>
		go();
 8000e56:	f7ff ff21 	bl	8000c9c <go>
		htim4.Instance->CCR3 = PWM;
 8000e5a:	4b29      	ldr	r3, [pc, #164]	; (8000f00 <bt_motor+0x138>)
 8000e5c:	681a      	ldr	r2, [r3, #0]
 8000e5e:	4b2a      	ldr	r3, [pc, #168]	; (8000f08 <bt_motor+0x140>)
 8000e60:	681b      	ldr	r3, [r3, #0]
 8000e62:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000e64:	4b26      	ldr	r3, [pc, #152]	; (8000f00 <bt_motor+0x138>)
 8000e66:	681a      	ldr	r2, [r3, #0]
 8000e68:	4b27      	ldr	r3, [pc, #156]	; (8000f08 <bt_motor+0x140>)
 8000e6a:	681b      	ldr	r3, [r3, #0]
 8000e6c:	635a      	str	r2, [r3, #52]	; 0x34
	{
		back();
		htim4.Instance->CCR3 = PWM;
		htim4.Instance->CCR1 = PWM;
	}
}
 8000e6e:	e042      	b.n	8000ef6 <bt_motor+0x12e>
	else if(state == 's')
 8000e70:	4b24      	ldr	r3, [pc, #144]	; (8000f04 <bt_motor+0x13c>)
 8000e72:	781b      	ldrb	r3, [r3, #0]
 8000e74:	2b73      	cmp	r3, #115	; 0x73
 8000e76:	d10c      	bne.n	8000e92 <bt_motor+0xca>
		stop();
 8000e78:	f7ff ff4c 	bl	8000d14 <stop>
		htim4.Instance->CCR3 = PWM;
 8000e7c:	4b20      	ldr	r3, [pc, #128]	; (8000f00 <bt_motor+0x138>)
 8000e7e:	681a      	ldr	r2, [r3, #0]
 8000e80:	4b21      	ldr	r3, [pc, #132]	; (8000f08 <bt_motor+0x140>)
 8000e82:	681b      	ldr	r3, [r3, #0]
 8000e84:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000e86:	4b1e      	ldr	r3, [pc, #120]	; (8000f00 <bt_motor+0x138>)
 8000e88:	681a      	ldr	r2, [r3, #0]
 8000e8a:	4b1f      	ldr	r3, [pc, #124]	; (8000f08 <bt_motor+0x140>)
 8000e8c:	681b      	ldr	r3, [r3, #0]
 8000e8e:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000e90:	e031      	b.n	8000ef6 <bt_motor+0x12e>
	else if(state == 'l'){
 8000e92:	4b1c      	ldr	r3, [pc, #112]	; (8000f04 <bt_motor+0x13c>)
 8000e94:	781b      	ldrb	r3, [r3, #0]
 8000e96:	2b6c      	cmp	r3, #108	; 0x6c
 8000e98:	d10c      	bne.n	8000eb4 <bt_motor+0xec>
		left();
 8000e9a:	f7ff ff77 	bl	8000d8c <left>
		htim4.Instance->CCR3 = PWM;
 8000e9e:	4b18      	ldr	r3, [pc, #96]	; (8000f00 <bt_motor+0x138>)
 8000ea0:	681a      	ldr	r2, [r3, #0]
 8000ea2:	4b19      	ldr	r3, [pc, #100]	; (8000f08 <bt_motor+0x140>)
 8000ea4:	681b      	ldr	r3, [r3, #0]
 8000ea6:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000ea8:	4b15      	ldr	r3, [pc, #84]	; (8000f00 <bt_motor+0x138>)
 8000eaa:	681a      	ldr	r2, [r3, #0]
 8000eac:	4b16      	ldr	r3, [pc, #88]	; (8000f08 <bt_motor+0x140>)
 8000eae:	681b      	ldr	r3, [r3, #0]
 8000eb0:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000eb2:	e020      	b.n	8000ef6 <bt_motor+0x12e>
	else if(state == 'r'){
 8000eb4:	4b13      	ldr	r3, [pc, #76]	; (8000f04 <bt_motor+0x13c>)
 8000eb6:	781b      	ldrb	r3, [r3, #0]
 8000eb8:	2b72      	cmp	r3, #114	; 0x72
 8000eba:	d10c      	bne.n	8000ed6 <bt_motor+0x10e>
		right();
 8000ebc:	f7ff ff48 	bl	8000d50 <right>
		htim4.Instance->CCR3 = PWM;
 8000ec0:	4b0f      	ldr	r3, [pc, #60]	; (8000f00 <bt_motor+0x138>)
 8000ec2:	681a      	ldr	r2, [r3, #0]
 8000ec4:	4b10      	ldr	r3, [pc, #64]	; (8000f08 <bt_motor+0x140>)
 8000ec6:	681b      	ldr	r3, [r3, #0]
 8000ec8:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000eca:	4b0d      	ldr	r3, [pc, #52]	; (8000f00 <bt_motor+0x138>)
 8000ecc:	681a      	ldr	r2, [r3, #0]
 8000ece:	4b0e      	ldr	r3, [pc, #56]	; (8000f08 <bt_motor+0x140>)
 8000ed0:	681b      	ldr	r3, [r3, #0]
 8000ed2:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ed4:	e00f      	b.n	8000ef6 <bt_motor+0x12e>
	else if(state == 'b')
 8000ed6:	4b0b      	ldr	r3, [pc, #44]	; (8000f04 <bt_motor+0x13c>)
 8000ed8:	781b      	ldrb	r3, [r3, #0]
 8000eda:	2b62      	cmp	r3, #98	; 0x62
 8000edc:	d10b      	bne.n	8000ef6 <bt_motor+0x12e>
		back();
 8000ede:	f7ff fefb 	bl	8000cd8 <back>
		htim4.Instance->CCR3 = PWM;
 8000ee2:	4b07      	ldr	r3, [pc, #28]	; (8000f00 <bt_motor+0x138>)
 8000ee4:	681a      	ldr	r2, [r3, #0]
 8000ee6:	4b08      	ldr	r3, [pc, #32]	; (8000f08 <bt_motor+0x140>)
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	63da      	str	r2, [r3, #60]	; 0x3c
		htim4.Instance->CCR1 = PWM;
 8000eec:	4b04      	ldr	r3, [pc, #16]	; (8000f00 <bt_motor+0x138>)
 8000eee:	681a      	ldr	r2, [r3, #0]
 8000ef0:	4b05      	ldr	r3, [pc, #20]	; (8000f08 <bt_motor+0x140>)
 8000ef2:	681b      	ldr	r3, [r3, #0]
 8000ef4:	635a      	str	r2, [r3, #52]	; 0x34
}
 8000ef6:	bf00      	nop
 8000ef8:	bd80      	pop	{r7, pc}
 8000efa:	bf00      	nop
 8000efc:	20000088 	.word	0x20000088
 8000f00:	20000000 	.word	0x20000000
 8000f04:	20000089 	.word	0x20000089
 8000f08:	20000200 	.word	0x20000200

08000f0c <HAL_UART_RxCpltCallback>:


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b082      	sub	sp, #8
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
	if(huart->Instance == huart1.Instance)
 8000f14:	687b      	ldr	r3, [r7, #4]
 8000f16:	681a      	ldr	r2, [r3, #0]
 8000f18:	4b06      	ldr	r3, [pc, #24]	; (8000f34 <HAL_UART_RxCpltCallback+0x28>)
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	429a      	cmp	r2, r3
 8000f1e:	d104      	bne.n	8000f2a <HAL_UART_RxCpltCallback+0x1e>
	{
		HAL_UART_Receive_IT(&huart1, rx_Data, sizeof(rx_Data));
 8000f20:	2201      	movs	r2, #1
 8000f22:	4905      	ldr	r1, [pc, #20]	; (8000f38 <HAL_UART_RxCpltCallback+0x2c>)
 8000f24:	4803      	ldr	r0, [pc, #12]	; (8000f34 <HAL_UART_RxCpltCallback+0x28>)
 8000f26:	f003 fc6f 	bl	8004808 <HAL_UART_Receive_IT>
	}

}
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	20000290 	.word	0x20000290
 8000f38:	20000088 	.word	0x20000088

08000f3c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f40:	f000 fdf0 	bl	8001b24 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f44:	f000 f842 	bl	8000fcc <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f48:	f7ff fb4a 	bl	80005e0 <MX_GPIO_Init>
  MX_DMA_Init();
 8000f4c:	f7ff fac6 	bl	80004dc <MX_DMA_Init>
  MX_USART2_UART_Init();
 8000f50:	f000 fcb6 	bl	80018c0 <MX_USART2_UART_Init>
  MX_USART1_UART_Init();
 8000f54:	f000 fc8a 	bl	800186c <MX_USART1_UART_Init>
  MX_TIM4_Init();
 8000f58:	f000 fa90 	bl	800147c <MX_TIM4_Init>
  MX_TIM1_Init();
 8000f5c:	f000 f9c8 	bl	80012f0 <MX_TIM1_Init>
  MX_TIM2_Init();
 8000f60:	f000 fa3a 	bl	80013d8 <MX_TIM2_Init>
  MX_TIM5_Init();
 8000f64:	f000 faf0 	bl	8001548 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3);
 8000f68:	2108      	movs	r1, #8
 8000f6a:	4813      	ldr	r0, [pc, #76]	; (8000fb8 <main+0x7c>)
 8000f6c:	f002 fa3e 	bl	80033ec <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
 8000f70:	2100      	movs	r1, #0
 8000f72:	4811      	ldr	r0, [pc, #68]	; (8000fb8 <main+0x7c>)
 8000f74:	f002 fa3a 	bl	80033ec <HAL_TIM_PWM_Start>
  HAL_TIM_Base_Start(&htim1); // delay_us
 8000f78:	4810      	ldr	r0, [pc, #64]	; (8000fbc <main+0x80>)
 8000f7a:	f002 f92b 	bl	80031d4 <HAL_TIM_Base_Start>
  HAL_TIM_IC_Start(&htim2, TIM_CHANNEL_1);
 8000f7e:	2100      	movs	r1, #0
 8000f80:	480f      	ldr	r0, [pc, #60]	; (8000fc0 <main+0x84>)
 8000f82:	f002 fb33 	bl	80035ec <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim5, TIM_CHANNEL_1);
 8000f86:	2100      	movs	r1, #0
 8000f88:	480e      	ldr	r0, [pc, #56]	; (8000fc4 <main+0x88>)
 8000f8a:	f002 fb2f 	bl	80035ec <HAL_TIM_IC_Start>
  HAL_TIM_IC_Start(&htim1, TIM_CHANNEL_1);
 8000f8e:	2100      	movs	r1, #0
 8000f90:	480a      	ldr	r0, [pc, #40]	; (8000fbc <main+0x80>)
 8000f92:	f002 fb2b 	bl	80035ec <HAL_TIM_IC_Start>
  htim4.Instance->CCR1 = PWM;
 8000f96:	4b0c      	ldr	r3, [pc, #48]	; (8000fc8 <main+0x8c>)
 8000f98:	681a      	ldr	r2, [r3, #0]
 8000f9a:	4b07      	ldr	r3, [pc, #28]	; (8000fb8 <main+0x7c>)
 8000f9c:	681b      	ldr	r3, [r3, #0]
 8000f9e:	635a      	str	r2, [r3, #52]	; 0x34
  htim4.Instance->CCR3 = PWM;
 8000fa0:	4b09      	ldr	r3, [pc, #36]	; (8000fc8 <main+0x8c>)
 8000fa2:	681a      	ldr	r2, [r3, #0]
 8000fa4:	4b04      	ldr	r3, [pc, #16]	; (8000fb8 <main+0x7c>)
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	63da      	str	r2, [r3, #60]	; 0x3c

//
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000faa:	f004 fb95 	bl	80056d8 <osKernelInitialize>

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8000fae:	f7ff fab5 	bl	800051c <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 8000fb2:	f004 fbb5 	bl	8005720 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000fb6:	e7fe      	b.n	8000fb6 <main+0x7a>
 8000fb8:	20000200 	.word	0x20000200
 8000fbc:	20000170 	.word	0x20000170
 8000fc0:	200001b8 	.word	0x200001b8
 8000fc4:	20000248 	.word	0x20000248
 8000fc8:	20000000 	.word	0x20000000

08000fcc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b094      	sub	sp, #80	; 0x50
 8000fd0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000fd2:	f107 0320 	add.w	r3, r7, #32
 8000fd6:	2230      	movs	r2, #48	; 0x30
 8000fd8:	2100      	movs	r1, #0
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f007 f8f6 	bl	80081cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	601a      	str	r2, [r3, #0]
 8000fe8:	605a      	str	r2, [r3, #4]
 8000fea:	609a      	str	r2, [r3, #8]
 8000fec:	60da      	str	r2, [r3, #12]
 8000fee:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	60bb      	str	r3, [r7, #8]
 8000ff4:	4b28      	ldr	r3, [pc, #160]	; (8001098 <SystemClock_Config+0xcc>)
 8000ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff8:	4a27      	ldr	r2, [pc, #156]	; (8001098 <SystemClock_Config+0xcc>)
 8000ffa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ffe:	6413      	str	r3, [r2, #64]	; 0x40
 8001000:	4b25      	ldr	r3, [pc, #148]	; (8001098 <SystemClock_Config+0xcc>)
 8001002:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001004:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001008:	60bb      	str	r3, [r7, #8]
 800100a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 800100c:	2300      	movs	r3, #0
 800100e:	607b      	str	r3, [r7, #4]
 8001010:	4b22      	ldr	r3, [pc, #136]	; (800109c <SystemClock_Config+0xd0>)
 8001012:	681b      	ldr	r3, [r3, #0]
 8001014:	4a21      	ldr	r2, [pc, #132]	; (800109c <SystemClock_Config+0xd0>)
 8001016:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800101a:	6013      	str	r3, [r2, #0]
 800101c:	4b1f      	ldr	r3, [pc, #124]	; (800109c <SystemClock_Config+0xd0>)
 800101e:	681b      	ldr	r3, [r3, #0]
 8001020:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001024:	607b      	str	r3, [r7, #4]
 8001026:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001028:	2302      	movs	r3, #2
 800102a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800102c:	2301      	movs	r3, #1
 800102e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001030:	2310      	movs	r3, #16
 8001032:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001034:	2302      	movs	r3, #2
 8001036:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001038:	2300      	movs	r3, #0
 800103a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800103c:	2310      	movs	r3, #16
 800103e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001040:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8001044:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8001046:	2304      	movs	r3, #4
 8001048:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800104a:	2304      	movs	r3, #4
 800104c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800104e:	f107 0320 	add.w	r3, r7, #32
 8001052:	4618      	mov	r0, r3
 8001054:	f001 fba4 	bl	80027a0 <HAL_RCC_OscConfig>
 8001058:	4603      	mov	r3, r0
 800105a:	2b00      	cmp	r3, #0
 800105c:	d001      	beq.n	8001062 <SystemClock_Config+0x96>
  {
    Error_Handler();
 800105e:	f000 f831 	bl	80010c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001062:	230f      	movs	r3, #15
 8001064:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001066:	2302      	movs	r3, #2
 8001068:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800106a:	2300      	movs	r3, #0
 800106c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800106e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001072:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001074:	2300      	movs	r3, #0
 8001076:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001078:	f107 030c 	add.w	r3, r7, #12
 800107c:	2102      	movs	r1, #2
 800107e:	4618      	mov	r0, r3
 8001080:	f001 fe06 	bl	8002c90 <HAL_RCC_ClockConfig>
 8001084:	4603      	mov	r3, r0
 8001086:	2b00      	cmp	r3, #0
 8001088:	d001      	beq.n	800108e <SystemClock_Config+0xc2>
  {
    Error_Handler();
 800108a:	f000 f81b 	bl	80010c4 <Error_Handler>
  }
}
 800108e:	bf00      	nop
 8001090:	3750      	adds	r7, #80	; 0x50
 8001092:	46bd      	mov	sp, r7
 8001094:	bd80      	pop	{r7, pc}
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40007000 	.word	0x40007000

080010a0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b082      	sub	sp, #8
 80010a4:	af00      	add	r7, sp, #0
 80010a6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM9) {
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	4a04      	ldr	r2, [pc, #16]	; (80010c0 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010ae:	4293      	cmp	r3, r2
 80010b0:	d101      	bne.n	80010b6 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 80010b2:	f000 fd59 	bl	8001b68 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}
 80010be:	bf00      	nop
 80010c0:	40014000 	.word	0x40014000

080010c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010c4:	b480      	push	{r7}
 80010c6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80010c8:	b672      	cpsid	i
}
 80010ca:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80010cc:	e7fe      	b.n	80010cc <Error_Handler+0x8>
	...

080010d0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b082      	sub	sp, #8
 80010d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80010d6:	2300      	movs	r3, #0
 80010d8:	607b      	str	r3, [r7, #4]
 80010da:	4b12      	ldr	r3, [pc, #72]	; (8001124 <HAL_MspInit+0x54>)
 80010dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010de:	4a11      	ldr	r2, [pc, #68]	; (8001124 <HAL_MspInit+0x54>)
 80010e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010e4:	6453      	str	r3, [r2, #68]	; 0x44
 80010e6:	4b0f      	ldr	r3, [pc, #60]	; (8001124 <HAL_MspInit+0x54>)
 80010e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80010ea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010ee:	607b      	str	r3, [r7, #4]
 80010f0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80010f2:	2300      	movs	r3, #0
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	4b0b      	ldr	r3, [pc, #44]	; (8001124 <HAL_MspInit+0x54>)
 80010f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010fa:	4a0a      	ldr	r2, [pc, #40]	; (8001124 <HAL_MspInit+0x54>)
 80010fc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001100:	6413      	str	r3, [r2, #64]	; 0x40
 8001102:	4b08      	ldr	r3, [pc, #32]	; (8001124 <HAL_MspInit+0x54>)
 8001104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001106:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800110a:	603b      	str	r3, [r7, #0]
 800110c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800110e:	2200      	movs	r2, #0
 8001110:	210f      	movs	r1, #15
 8001112:	f06f 0001 	mvn.w	r0, #1
 8001116:	f000 fdff 	bl	8001d18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	40023800 	.word	0x40023800

08001128 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08c      	sub	sp, #48	; 0x30
 800112c:	af00      	add	r7, sp, #0
 800112e:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001130:	2300      	movs	r3, #0
 8001132:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001134:	2300      	movs	r3, #0
 8001136:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM9 clock */
  __HAL_RCC_TIM9_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	4b2e      	ldr	r3, [pc, #184]	; (80011f8 <HAL_InitTick+0xd0>)
 800113e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001140:	4a2d      	ldr	r2, [pc, #180]	; (80011f8 <HAL_InitTick+0xd0>)
 8001142:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001146:	6453      	str	r3, [r2, #68]	; 0x44
 8001148:	4b2b      	ldr	r3, [pc, #172]	; (80011f8 <HAL_InitTick+0xd0>)
 800114a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800114c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001154:	f107 020c 	add.w	r2, r7, #12
 8001158:	f107 0310 	add.w	r3, r7, #16
 800115c:	4611      	mov	r1, r2
 800115e:	4618      	mov	r0, r3
 8001160:	f001 ffb6 	bl	80030d0 <HAL_RCC_GetClockConfig>

  /* Compute TIM9 clock */
      uwTimclock = HAL_RCC_GetPCLK2Freq();
 8001164:	f001 ffa0 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 8001168:	62b8      	str	r0, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM9 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800116a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800116c:	4a23      	ldr	r2, [pc, #140]	; (80011fc <HAL_InitTick+0xd4>)
 800116e:	fba2 2303 	umull	r2, r3, r2, r3
 8001172:	0c9b      	lsrs	r3, r3, #18
 8001174:	3b01      	subs	r3, #1
 8001176:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM9 */
  htim9.Instance = TIM9;
 8001178:	4b21      	ldr	r3, [pc, #132]	; (8001200 <HAL_InitTick+0xd8>)
 800117a:	4a22      	ldr	r2, [pc, #136]	; (8001204 <HAL_InitTick+0xdc>)
 800117c:	601a      	str	r2, [r3, #0]
  + Period = [(TIM9CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim9.Init.Period = (1000000U / 1000U) - 1U;
 800117e:	4b20      	ldr	r3, [pc, #128]	; (8001200 <HAL_InitTick+0xd8>)
 8001180:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001184:	60da      	str	r2, [r3, #12]
  htim9.Init.Prescaler = uwPrescalerValue;
 8001186:	4a1e      	ldr	r2, [pc, #120]	; (8001200 <HAL_InitTick+0xd8>)
 8001188:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800118a:	6053      	str	r3, [r2, #4]
  htim9.Init.ClockDivision = 0;
 800118c:	4b1c      	ldr	r3, [pc, #112]	; (8001200 <HAL_InitTick+0xd8>)
 800118e:	2200      	movs	r2, #0
 8001190:	611a      	str	r2, [r3, #16]
  htim9.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001192:	4b1b      	ldr	r3, [pc, #108]	; (8001200 <HAL_InitTick+0xd8>)
 8001194:	2200      	movs	r2, #0
 8001196:	609a      	str	r2, [r3, #8]
  htim9.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001198:	4b19      	ldr	r3, [pc, #100]	; (8001200 <HAL_InitTick+0xd8>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim9);
 800119e:	4818      	ldr	r0, [pc, #96]	; (8001200 <HAL_InitTick+0xd8>)
 80011a0:	f001 ffc8 	bl	8003134 <HAL_TIM_Base_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 80011aa:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011ae:	2b00      	cmp	r3, #0
 80011b0:	d11b      	bne.n	80011ea <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim9);
 80011b2:	4813      	ldr	r0, [pc, #76]	; (8001200 <HAL_InitTick+0xd8>)
 80011b4:	f002 f868 	bl	8003288 <HAL_TIM_Base_Start_IT>
 80011b8:	4603      	mov	r3, r0
 80011ba:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 80011be:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	d111      	bne.n	80011ea <HAL_InitTick+0xc2>
    {
    /* Enable the TIM9 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 80011c6:	2018      	movs	r0, #24
 80011c8:	f000 fdc2 	bl	8001d50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b0f      	cmp	r3, #15
 80011d0:	d808      	bhi.n	80011e4 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, TickPriority, 0U);
 80011d2:	2200      	movs	r2, #0
 80011d4:	6879      	ldr	r1, [r7, #4]
 80011d6:	2018      	movs	r0, #24
 80011d8:	f000 fd9e 	bl	8001d18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80011dc:	4a0a      	ldr	r2, [pc, #40]	; (8001208 <HAL_InitTick+0xe0>)
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6013      	str	r3, [r2, #0]
 80011e2:	e002      	b.n	80011ea <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 80011e4:	2301      	movs	r3, #1
 80011e6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80011ea:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 80011ee:	4618      	mov	r0, r3
 80011f0:	3730      	adds	r7, #48	; 0x30
 80011f2:	46bd      	mov	sp, r7
 80011f4:	bd80      	pop	{r7, pc}
 80011f6:	bf00      	nop
 80011f8:	40023800 	.word	0x40023800
 80011fc:	431bde83 	.word	0x431bde83
 8001200:	20000128 	.word	0x20000128
 8001204:	40014000 	.word	0x40014000
 8001208:	20000008 	.word	0x20000008

0800120c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800120c:	b480      	push	{r7}
 800120e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001210:	e7fe      	b.n	8001210 <NMI_Handler+0x4>

08001212 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001212:	b480      	push	{r7}
 8001214:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001216:	e7fe      	b.n	8001216 <HardFault_Handler+0x4>

08001218 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001218:	b480      	push	{r7}
 800121a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800121c:	e7fe      	b.n	800121c <MemManage_Handler+0x4>

0800121e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800121e:	b480      	push	{r7}
 8001220:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001222:	e7fe      	b.n	8001222 <BusFault_Handler+0x4>

08001224 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001224:	b480      	push	{r7}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001228:	e7fe      	b.n	8001228 <UsageFault_Handler+0x4>

0800122a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800122a:	b480      	push	{r7}
 800122c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800122e:	bf00      	nop
 8001230:	46bd      	mov	sp, r7
 8001232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001236:	4770      	bx	lr

08001238 <TIM1_BRK_TIM9_IRQHandler>:

/**
  * @brief This function handles TIM1 break interrupt and TIM9 global interrupt.
  */
void TIM1_BRK_TIM9_IRQHandler(void)
{
 8001238:	b580      	push	{r7, lr}
 800123a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 0 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <TIM1_BRK_TIM9_IRQHandler+0x14>)
 800123e:	f002 faa3 	bl	8003788 <HAL_TIM_IRQHandler>
  HAL_TIM_IRQHandler(&htim9);
 8001242:	4803      	ldr	r0, [pc, #12]	; (8001250 <TIM1_BRK_TIM9_IRQHandler+0x18>)
 8001244:	f002 faa0 	bl	8003788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_BRK_TIM9_IRQn 1 */

  /* USER CODE END TIM1_BRK_TIM9_IRQn 1 */
}
 8001248:	bf00      	nop
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000170 	.word	0x20000170
 8001250:	20000128 	.word	0x20000128

08001254 <TIM1_CC_IRQHandler>:

/**
  * @brief This function handles TIM1 capture compare interrupt.
  */
void TIM1_CC_IRQHandler(void)
{
 8001254:	b580      	push	{r7, lr}
 8001256:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_CC_IRQn 0 */

  /* USER CODE END TIM1_CC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <TIM1_CC_IRQHandler+0x10>)
 800125a:	f002 fa95 	bl	8003788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_CC_IRQn 1 */

  /* USER CODE END TIM1_CC_IRQn 1 */
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	20000170 	.word	0x20000170

08001268 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800126c:	4802      	ldr	r0, [pc, #8]	; (8001278 <TIM2_IRQHandler+0x10>)
 800126e:	f002 fa8b 	bl	8003788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001272:	bf00      	nop
 8001274:	bd80      	pop	{r7, pc}
 8001276:	bf00      	nop
 8001278:	200001b8 	.word	0x200001b8

0800127c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001280:	4802      	ldr	r0, [pc, #8]	; (800128c <USART1_IRQHandler+0x10>)
 8001282:	f003 fae7 	bl	8004854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001286:	bf00      	nop
 8001288:	bd80      	pop	{r7, pc}
 800128a:	bf00      	nop
 800128c:	20000290 	.word	0x20000290

08001290 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001294:	4802      	ldr	r0, [pc, #8]	; (80012a0 <USART2_IRQHandler+0x10>)
 8001296:	f003 fadd 	bl	8004854 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	200002d8 	.word	0x200002d8

080012a4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 80012a8:	4802      	ldr	r0, [pc, #8]	; (80012b4 <DMA1_Stream7_IRQHandler+0x10>)
 80012aa:	f000 fe9f 	bl	8001fec <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 80012ae:	bf00      	nop
 80012b0:	bd80      	pop	{r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000320 	.word	0x20000320

080012b8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80012b8:	b580      	push	{r7, lr}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80012bc:	4802      	ldr	r0, [pc, #8]	; (80012c8 <TIM5_IRQHandler+0x10>)
 80012be:	f002 fa63 	bl	8003788 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	20000248 	.word	0x20000248

080012cc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80012cc:	b480      	push	{r7}
 80012ce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80012d0:	4b06      	ldr	r3, [pc, #24]	; (80012ec <SystemInit+0x20>)
 80012d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80012d6:	4a05      	ldr	r2, [pc, #20]	; (80012ec <SystemInit+0x20>)
 80012d8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80012dc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80012e0:	bf00      	nop
 80012e2:	46bd      	mov	sp, r7
 80012e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e8:	4770      	bx	lr
 80012ea:	bf00      	nop
 80012ec:	e000ed00 	.word	0xe000ed00

080012f0 <MX_TIM1_Init>:
TIM_HandleTypeDef htim4;
TIM_HandleTypeDef htim5;

/* TIM1 init function */
void MX_TIM1_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b08a      	sub	sp, #40	; 0x28
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0318 	add.w	r3, r7, #24
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	f107 0310 	add.w	r3, r7, #16
 8001308:	2200      	movs	r2, #0
 800130a:	601a      	str	r2, [r3, #0]
 800130c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800130e:	463b      	mov	r3, r7
 8001310:	2200      	movs	r2, #0
 8001312:	601a      	str	r2, [r3, #0]
 8001314:	605a      	str	r2, [r3, #4]
 8001316:	609a      	str	r2, [r3, #8]
 8001318:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800131a:	4b2d      	ldr	r3, [pc, #180]	; (80013d0 <MX_TIM1_Init+0xe0>)
 800131c:	4a2d      	ldr	r2, [pc, #180]	; (80013d4 <MX_TIM1_Init+0xe4>)
 800131e:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 84-1;
 8001320:	4b2b      	ldr	r3, [pc, #172]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001322:	2253      	movs	r2, #83	; 0x53
 8001324:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001326:	4b2a      	ldr	r3, [pc, #168]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001328:	2200      	movs	r2, #0
 800132a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 0xffff-1;
 800132c:	4b28      	ldr	r3, [pc, #160]	; (80013d0 <MX_TIM1_Init+0xe0>)
 800132e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8001332:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001334:	4b26      	ldr	r3, [pc, #152]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001336:	2200      	movs	r2, #0
 8001338:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800133a:	4b25      	ldr	r3, [pc, #148]	; (80013d0 <MX_TIM1_Init+0xe0>)
 800133c:	2200      	movs	r2, #0
 800133e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001340:	4b23      	ldr	r3, [pc, #140]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001342:	2200      	movs	r2, #0
 8001344:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8001346:	4822      	ldr	r0, [pc, #136]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001348:	f001 fef4 	bl	8003134 <HAL_TIM_Base_Init>
 800134c:	4603      	mov	r3, r0
 800134e:	2b00      	cmp	r3, #0
 8001350:	d001      	beq.n	8001356 <MX_TIM1_Init+0x66>
  {
    Error_Handler();
 8001352:	f7ff feb7 	bl	80010c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001356:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800135a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 800135c:	f107 0318 	add.w	r3, r7, #24
 8001360:	4619      	mov	r1, r3
 8001362:	481b      	ldr	r0, [pc, #108]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001364:	f002 fc5e 	bl	8003c24 <HAL_TIM_ConfigClockSource>
 8001368:	4603      	mov	r3, r0
 800136a:	2b00      	cmp	r3, #0
 800136c:	d001      	beq.n	8001372 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800136e:	f7ff fea9 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim1) != HAL_OK)
 8001372:	4817      	ldr	r0, [pc, #92]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001374:	f002 f8ea 	bl	800354c <HAL_TIM_IC_Init>
 8001378:	4603      	mov	r3, r0
 800137a:	2b00      	cmp	r3, #0
 800137c:	d001      	beq.n	8001382 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 800137e:	f7ff fea1 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001382:	2300      	movs	r3, #0
 8001384:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001386:	2300      	movs	r3, #0
 8001388:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800138a:	f107 0310 	add.w	r3, r7, #16
 800138e:	4619      	mov	r1, r3
 8001390:	480f      	ldr	r0, [pc, #60]	; (80013d0 <MX_TIM1_Init+0xe0>)
 8001392:	f003 f967 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM1_Init+0xb0>
  {
    Error_Handler();
 800139c:	f7ff fe92 	bl	80010c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80013a4:	2301      	movs	r3, #1
 80013a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80013a8:	2300      	movs	r3, #0
 80013aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80013ac:	230f      	movs	r3, #15
 80013ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim1, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80013b0:	463b      	mov	r3, r7
 80013b2:	2200      	movs	r2, #0
 80013b4:	4619      	mov	r1, r3
 80013b6:	4806      	ldr	r0, [pc, #24]	; (80013d0 <MX_TIM1_Init+0xe0>)
 80013b8:	f002 fad6 	bl	8003968 <HAL_TIM_IC_ConfigChannel>
 80013bc:	4603      	mov	r3, r0
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d001      	beq.n	80013c6 <MX_TIM1_Init+0xd6>
  {
    Error_Handler();
 80013c2:	f7ff fe7f 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013c6:	bf00      	nop
 80013c8:	3728      	adds	r7, #40	; 0x28
 80013ca:	46bd      	mov	sp, r7
 80013cc:	bd80      	pop	{r7, pc}
 80013ce:	bf00      	nop
 80013d0:	20000170 	.word	0x20000170
 80013d4:	40010000 	.word	0x40010000

080013d8 <MX_TIM2_Init>:
/* TIM2 init function */
void MX_TIM2_Init(void)
{
 80013d8:	b580      	push	{r7, lr}
 80013da:	b086      	sub	sp, #24
 80013dc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013de:	f107 0310 	add.w	r3, r7, #16
 80013e2:	2200      	movs	r2, #0
 80013e4:	601a      	str	r2, [r3, #0]
 80013e6:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80013e8:	463b      	mov	r3, r7
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80013f4:	4b20      	ldr	r3, [pc, #128]	; (8001478 <MX_TIM2_Init+0xa0>)
 80013f6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80013fa:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 84-1;
 80013fc:	4b1e      	ldr	r3, [pc, #120]	; (8001478 <MX_TIM2_Init+0xa0>)
 80013fe:	2253      	movs	r2, #83	; 0x53
 8001400:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001402:	4b1d      	ldr	r3, [pc, #116]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001404:	2200      	movs	r2, #0
 8001406:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 0xffff-1;
 8001408:	4b1b      	ldr	r3, [pc, #108]	; (8001478 <MX_TIM2_Init+0xa0>)
 800140a:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800140e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001410:	4b19      	ldr	r3, [pc, #100]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001412:	2200      	movs	r2, #0
 8001414:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001416:	4b18      	ldr	r3, [pc, #96]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001418:	2200      	movs	r2, #0
 800141a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 800141c:	4816      	ldr	r0, [pc, #88]	; (8001478 <MX_TIM2_Init+0xa0>)
 800141e:	f002 f895 	bl	800354c <HAL_TIM_IC_Init>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001428:	f7ff fe4c 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800142c:	2300      	movs	r3, #0
 800142e:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001430:	2300      	movs	r3, #0
 8001432:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001434:	f107 0310 	add.w	r3, r7, #16
 8001438:	4619      	mov	r1, r3
 800143a:	480f      	ldr	r0, [pc, #60]	; (8001478 <MX_TIM2_Init+0xa0>)
 800143c:	f003 f912 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM2_Init+0x72>
  {
    Error_Handler();
 8001446:	f7ff fe3d 	bl	80010c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 800144a:	2300      	movs	r3, #0
 800144c:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800144e:	2301      	movs	r3, #1
 8001450:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8001452:	2300      	movs	r3, #0
 8001454:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 8001456:	230f      	movs	r3, #15
 8001458:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 800145a:	463b      	mov	r3, r7
 800145c:	2200      	movs	r2, #0
 800145e:	4619      	mov	r1, r3
 8001460:	4805      	ldr	r0, [pc, #20]	; (8001478 <MX_TIM2_Init+0xa0>)
 8001462:	f002 fa81 	bl	8003968 <HAL_TIM_IC_ConfigChannel>
 8001466:	4603      	mov	r3, r0
 8001468:	2b00      	cmp	r3, #0
 800146a:	d001      	beq.n	8001470 <MX_TIM2_Init+0x98>
  {
    Error_Handler();
 800146c:	f7ff fe2a 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001470:	bf00      	nop
 8001472:	3718      	adds	r7, #24
 8001474:	46bd      	mov	sp, r7
 8001476:	bd80      	pop	{r7, pc}
 8001478:	200001b8 	.word	0x200001b8

0800147c <MX_TIM4_Init>:
/* TIM4 init function */
void MX_TIM4_Init(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b08a      	sub	sp, #40	; 0x28
 8001480:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	2200      	movs	r2, #0
 8001488:	601a      	str	r2, [r3, #0]
 800148a:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800148c:	1d3b      	adds	r3, r7, #4
 800148e:	2200      	movs	r2, #0
 8001490:	601a      	str	r2, [r3, #0]
 8001492:	605a      	str	r2, [r3, #4]
 8001494:	609a      	str	r2, [r3, #8]
 8001496:	60da      	str	r2, [r3, #12]
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	615a      	str	r2, [r3, #20]
 800149c:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 800149e:	4b28      	ldr	r3, [pc, #160]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014a0:	4a28      	ldr	r2, [pc, #160]	; (8001544 <MX_TIM4_Init+0xc8>)
 80014a2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 8400-1;
 80014a4:	4b26      	ldr	r3, [pc, #152]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014a6:	f242 02cf 	movw	r2, #8399	; 0x20cf
 80014aa:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ac:	4b24      	ldr	r3, [pc, #144]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014ae:	2200      	movs	r2, #0
 80014b0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80014b2:	4b23      	ldr	r3, [pc, #140]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014b4:	f240 32e7 	movw	r2, #999	; 0x3e7
 80014b8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014ba:	4b21      	ldr	r3, [pc, #132]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014bc:	2200      	movs	r2, #0
 80014be:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c0:	4b1f      	ldr	r3, [pc, #124]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014c2:	2200      	movs	r2, #0
 80014c4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80014c6:	481e      	ldr	r0, [pc, #120]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014c8:	f001 ff40 	bl	800334c <HAL_TIM_PWM_Init>
 80014cc:	4603      	mov	r3, r0
 80014ce:	2b00      	cmp	r3, #0
 80014d0:	d001      	beq.n	80014d6 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 80014d2:	f7ff fdf7 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80014d6:	2300      	movs	r3, #0
 80014d8:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80014da:	2300      	movs	r3, #0
 80014dc:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80014de:	f107 0320 	add.w	r3, r7, #32
 80014e2:	4619      	mov	r1, r3
 80014e4:	4816      	ldr	r0, [pc, #88]	; (8001540 <MX_TIM4_Init+0xc4>)
 80014e6:	f003 f8bd 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 80014ea:	4603      	mov	r3, r0
 80014ec:	2b00      	cmp	r3, #0
 80014ee:	d001      	beq.n	80014f4 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 80014f0:	f7ff fde8 	bl	80010c4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014f4:	2360      	movs	r3, #96	; 0x60
 80014f6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014fc:	2300      	movs	r3, #0
 80014fe:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001500:	2300      	movs	r3, #0
 8001502:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001504:	1d3b      	adds	r3, r7, #4
 8001506:	2200      	movs	r2, #0
 8001508:	4619      	mov	r1, r3
 800150a:	480d      	ldr	r0, [pc, #52]	; (8001540 <MX_TIM4_Init+0xc4>)
 800150c:	f002 fac8 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 8001510:	4603      	mov	r3, r0
 8001512:	2b00      	cmp	r3, #0
 8001514:	d001      	beq.n	800151a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8001516:	f7ff fdd5 	bl	80010c4 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800151a:	1d3b      	adds	r3, r7, #4
 800151c:	2208      	movs	r2, #8
 800151e:	4619      	mov	r1, r3
 8001520:	4807      	ldr	r0, [pc, #28]	; (8001540 <MX_TIM4_Init+0xc4>)
 8001522:	f002 fabd 	bl	8003aa0 <HAL_TIM_PWM_ConfigChannel>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <MX_TIM4_Init+0xb4>
  {
    Error_Handler();
 800152c:	f7ff fdca 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8001530:	4803      	ldr	r0, [pc, #12]	; (8001540 <MX_TIM4_Init+0xc4>)
 8001532:	f000 f961 	bl	80017f8 <HAL_TIM_MspPostInit>

}
 8001536:	bf00      	nop
 8001538:	3728      	adds	r7, #40	; 0x28
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	20000200 	.word	0x20000200
 8001544:	40000800 	.word	0x40000800

08001548 <MX_TIM5_Init>:
/* TIM5 init function */
void MX_TIM5_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b086      	sub	sp, #24
 800154c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800154e:	f107 0310 	add.w	r3, r7, #16
 8001552:	2200      	movs	r2, #0
 8001554:	601a      	str	r2, [r3, #0]
 8001556:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001558:	463b      	mov	r3, r7
 800155a:	2200      	movs	r2, #0
 800155c:	601a      	str	r2, [r3, #0]
 800155e:	605a      	str	r2, [r3, #4]
 8001560:	609a      	str	r2, [r3, #8]
 8001562:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <MX_TIM5_Init+0xa0>)
 8001566:	4a21      	ldr	r2, [pc, #132]	; (80015ec <MX_TIM5_Init+0xa4>)
 8001568:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 84-1;
 800156a:	4b1f      	ldr	r3, [pc, #124]	; (80015e8 <MX_TIM5_Init+0xa0>)
 800156c:	2253      	movs	r2, #83	; 0x53
 800156e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001570:	4b1d      	ldr	r3, [pc, #116]	; (80015e8 <MX_TIM5_Init+0xa0>)
 8001572:	2200      	movs	r2, #0
 8001574:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 0xffff-1;
 8001576:	4b1c      	ldr	r3, [pc, #112]	; (80015e8 <MX_TIM5_Init+0xa0>)
 8001578:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 800157c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800157e:	4b1a      	ldr	r3, [pc, #104]	; (80015e8 <MX_TIM5_Init+0xa0>)
 8001580:	2200      	movs	r2, #0
 8001582:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001584:	4b18      	ldr	r3, [pc, #96]	; (80015e8 <MX_TIM5_Init+0xa0>)
 8001586:	2200      	movs	r2, #0
 8001588:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_IC_Init(&htim5) != HAL_OK)
 800158a:	4817      	ldr	r0, [pc, #92]	; (80015e8 <MX_TIM5_Init+0xa0>)
 800158c:	f001 ffde 	bl	800354c <HAL_TIM_IC_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001596:	f7ff fd95 	bl	80010c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800159a:	2300      	movs	r3, #0
 800159c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800159e:	2300      	movs	r3, #0
 80015a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80015a2:	f107 0310 	add.w	r3, r7, #16
 80015a6:	4619      	mov	r1, r3
 80015a8:	480f      	ldr	r0, [pc, #60]	; (80015e8 <MX_TIM5_Init+0xa0>)
 80015aa:	f003 f85b 	bl	8004664 <HAL_TIMEx_MasterConfigSynchronization>
 80015ae:	4603      	mov	r3, r0
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d001      	beq.n	80015b8 <MX_TIM5_Init+0x70>
  {
    Error_Handler();
 80015b4:	f7ff fd86 	bl	80010c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80015b8:	2300      	movs	r3, #0
 80015ba:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80015bc:	2301      	movs	r3, #1
 80015be:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80015c0:	2300      	movs	r3, #0
 80015c2:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 15;
 80015c4:	230f      	movs	r3, #15
 80015c6:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim5, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80015c8:	463b      	mov	r3, r7
 80015ca:	2200      	movs	r2, #0
 80015cc:	4619      	mov	r1, r3
 80015ce:	4806      	ldr	r0, [pc, #24]	; (80015e8 <MX_TIM5_Init+0xa0>)
 80015d0:	f002 f9ca 	bl	8003968 <HAL_TIM_IC_ConfigChannel>
 80015d4:	4603      	mov	r3, r0
 80015d6:	2b00      	cmp	r3, #0
 80015d8:	d001      	beq.n	80015de <MX_TIM5_Init+0x96>
  {
    Error_Handler();
 80015da:	f7ff fd73 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80015de:	bf00      	nop
 80015e0:	3718      	adds	r7, #24
 80015e2:	46bd      	mov	sp, r7
 80015e4:	bd80      	pop	{r7, pc}
 80015e6:	bf00      	nop
 80015e8:	20000248 	.word	0x20000248
 80015ec:	40000c00 	.word	0x40000c00

080015f0 <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 80015f0:	b580      	push	{r7, lr}
 80015f2:	b08a      	sub	sp, #40	; 0x28
 80015f4:	af00      	add	r7, sp, #0
 80015f6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f8:	f107 0314 	add.w	r3, r7, #20
 80015fc:	2200      	movs	r2, #0
 80015fe:	601a      	str	r2, [r3, #0]
 8001600:	605a      	str	r2, [r3, #4]
 8001602:	609a      	str	r2, [r3, #8]
 8001604:	60da      	str	r2, [r3, #12]
 8001606:	611a      	str	r2, [r3, #16]
  if(tim_baseHandle->Instance==TIM1)
 8001608:	687b      	ldr	r3, [r7, #4]
 800160a:	681b      	ldr	r3, [r3, #0]
 800160c:	4a21      	ldr	r2, [pc, #132]	; (8001694 <HAL_TIM_Base_MspInit+0xa4>)
 800160e:	4293      	cmp	r3, r2
 8001610:	d13c      	bne.n	800168c <HAL_TIM_Base_MspInit+0x9c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* TIM1 clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001612:	2300      	movs	r3, #0
 8001614:	613b      	str	r3, [r7, #16]
 8001616:	4b20      	ldr	r3, [pc, #128]	; (8001698 <HAL_TIM_Base_MspInit+0xa8>)
 8001618:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800161a:	4a1f      	ldr	r2, [pc, #124]	; (8001698 <HAL_TIM_Base_MspInit+0xa8>)
 800161c:	f043 0301 	orr.w	r3, r3, #1
 8001620:	6453      	str	r3, [r2, #68]	; 0x44
 8001622:	4b1d      	ldr	r3, [pc, #116]	; (8001698 <HAL_TIM_Base_MspInit+0xa8>)
 8001624:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001626:	f003 0301 	and.w	r3, r3, #1
 800162a:	613b      	str	r3, [r7, #16]
 800162c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800162e:	2300      	movs	r3, #0
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	4b19      	ldr	r3, [pc, #100]	; (8001698 <HAL_TIM_Base_MspInit+0xa8>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	4a18      	ldr	r2, [pc, #96]	; (8001698 <HAL_TIM_Base_MspInit+0xa8>)
 8001638:	f043 0301 	orr.w	r3, r3, #1
 800163c:	6313      	str	r3, [r2, #48]	; 0x30
 800163e:	4b16      	ldr	r3, [pc, #88]	; (8001698 <HAL_TIM_Base_MspInit+0xa8>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	f003 0301 	and.w	r3, r3, #1
 8001646:	60fb      	str	r3, [r7, #12]
 8001648:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    */
    GPIO_InitStruct.Pin = EchoR_Pin;
 800164a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800164e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001650:	2302      	movs	r3, #2
 8001652:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001658:	2300      	movs	r3, #0
 800165a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 800165c:	2301      	movs	r3, #1
 800165e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(EchoR_GPIO_Port, &GPIO_InitStruct);
 8001660:	f107 0314 	add.w	r3, r7, #20
 8001664:	4619      	mov	r1, r3
 8001666:	480d      	ldr	r0, [pc, #52]	; (800169c <HAL_TIM_Base_MspInit+0xac>)
 8001668:	f000 fefc 	bl	8002464 <HAL_GPIO_Init>

    /* TIM1 interrupt Init */
    HAL_NVIC_SetPriority(TIM1_BRK_TIM9_IRQn, 15, 0);
 800166c:	2200      	movs	r2, #0
 800166e:	210f      	movs	r1, #15
 8001670:	2018      	movs	r0, #24
 8001672:	f000 fb51 	bl	8001d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_BRK_TIM9_IRQn);
 8001676:	2018      	movs	r0, #24
 8001678:	f000 fb6a 	bl	8001d50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(TIM1_CC_IRQn, 5, 0);
 800167c:	2200      	movs	r2, #0
 800167e:	2105      	movs	r1, #5
 8001680:	201b      	movs	r0, #27
 8001682:	f000 fb49 	bl	8001d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM1_CC_IRQn);
 8001686:	201b      	movs	r0, #27
 8001688:	f000 fb62 	bl	8001d50 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }
}
 800168c:	bf00      	nop
 800168e:	3728      	adds	r7, #40	; 0x28
 8001690:	46bd      	mov	sp, r7
 8001692:	bd80      	pop	{r7, pc}
 8001694:	40010000 	.word	0x40010000
 8001698:	40023800 	.word	0x40023800
 800169c:	40020000 	.word	0x40020000

080016a0 <HAL_TIM_IC_MspInit>:

void HAL_TIM_IC_MspInit(TIM_HandleTypeDef* tim_icHandle)
{
 80016a0:	b580      	push	{r7, lr}
 80016a2:	b08c      	sub	sp, #48	; 0x30
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a8:	f107 031c 	add.w	r3, r7, #28
 80016ac:	2200      	movs	r2, #0
 80016ae:	601a      	str	r2, [r3, #0]
 80016b0:	605a      	str	r2, [r3, #4]
 80016b2:	609a      	str	r2, [r3, #8]
 80016b4:	60da      	str	r2, [r3, #12]
 80016b6:	611a      	str	r2, [r3, #16]
  if(tim_icHandle->Instance==TIM2)
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	681b      	ldr	r3, [r3, #0]
 80016bc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c0:	d134      	bne.n	800172c <HAL_TIM_IC_MspInit+0x8c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80016c2:	2300      	movs	r3, #0
 80016c4:	61bb      	str	r3, [r7, #24]
 80016c6:	4b38      	ldr	r3, [pc, #224]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 80016c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016ca:	4a37      	ldr	r2, [pc, #220]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 80016cc:	f043 0301 	orr.w	r3, r3, #1
 80016d0:	6413      	str	r3, [r2, #64]	; 0x40
 80016d2:	4b35      	ldr	r3, [pc, #212]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 80016d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80016d6:	f003 0301 	and.w	r3, r3, #1
 80016da:	61bb      	str	r3, [r7, #24]
 80016dc:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016de:	2300      	movs	r3, #0
 80016e0:	617b      	str	r3, [r7, #20]
 80016e2:	4b31      	ldr	r3, [pc, #196]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 80016e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e6:	4a30      	ldr	r2, [pc, #192]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6313      	str	r3, [r2, #48]	; 0x30
 80016ee:	4b2e      	ldr	r3, [pc, #184]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 80016f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	617b      	str	r3, [r7, #20]
 80016f8:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = EchoL_Pin;
 80016fa:	2320      	movs	r3, #32
 80016fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016fe:	2302      	movs	r3, #2
 8001700:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001702:	2300      	movs	r3, #0
 8001704:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001706:	2300      	movs	r3, #0
 8001708:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800170a:	2301      	movs	r3, #1
 800170c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EchoL_GPIO_Port, &GPIO_InitStruct);
 800170e:	f107 031c 	add.w	r3, r7, #28
 8001712:	4619      	mov	r1, r3
 8001714:	4825      	ldr	r0, [pc, #148]	; (80017ac <HAL_TIM_IC_MspInit+0x10c>)
 8001716:	f000 fea5 	bl	8002464 <HAL_GPIO_Init>

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 5, 0);
 800171a:	2200      	movs	r2, #0
 800171c:	2105      	movs	r1, #5
 800171e:	201c      	movs	r0, #28
 8001720:	f000 fafa 	bl	8001d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001724:	201c      	movs	r0, #28
 8001726:	f000 fb13 	bl	8001d50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }
}
 800172a:	e038      	b.n	800179e <HAL_TIM_IC_MspInit+0xfe>
  else if(tim_icHandle->Instance==TIM5)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a1f      	ldr	r2, [pc, #124]	; (80017b0 <HAL_TIM_IC_MspInit+0x110>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d133      	bne.n	800179e <HAL_TIM_IC_MspInit+0xfe>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 800173c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800173e:	4a1a      	ldr	r2, [pc, #104]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 8001740:	f043 0308 	orr.w	r3, r3, #8
 8001744:	6413      	str	r3, [r2, #64]	; 0x40
 8001746:	4b18      	ldr	r3, [pc, #96]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 8001748:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800174a:	f003 0308 	and.w	r3, r3, #8
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b14      	ldr	r3, [pc, #80]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a13      	ldr	r2, [pc, #76]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b11      	ldr	r3, [pc, #68]	; (80017a8 <HAL_TIM_IC_MspInit+0x108>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = EchoC_Pin;
 800176e:	2301      	movs	r3, #1
 8001770:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001772:	2302      	movs	r3, #2
 8001774:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001776:	2300      	movs	r3, #0
 8001778:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800177a:	2300      	movs	r3, #0
 800177c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 800177e:	2302      	movs	r3, #2
 8001780:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(EchoC_GPIO_Port, &GPIO_InitStruct);
 8001782:	f107 031c 	add.w	r3, r7, #28
 8001786:	4619      	mov	r1, r3
 8001788:	4808      	ldr	r0, [pc, #32]	; (80017ac <HAL_TIM_IC_MspInit+0x10c>)
 800178a:	f000 fe6b 	bl	8002464 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM5_IRQn, 5, 0);
 800178e:	2200      	movs	r2, #0
 8001790:	2105      	movs	r1, #5
 8001792:	2032      	movs	r0, #50	; 0x32
 8001794:	f000 fac0 	bl	8001d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001798:	2032      	movs	r0, #50	; 0x32
 800179a:	f000 fad9 	bl	8001d50 <HAL_NVIC_EnableIRQ>
}
 800179e:	bf00      	nop
 80017a0:	3730      	adds	r7, #48	; 0x30
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800
 80017ac:	40020000 	.word	0x40020000
 80017b0:	40000c00 	.word	0x40000c00

080017b4 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 80017b4:	b480      	push	{r7}
 80017b6:	b085      	sub	sp, #20
 80017b8:	af00      	add	r7, sp, #0
 80017ba:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM4)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	4a0b      	ldr	r2, [pc, #44]	; (80017f0 <HAL_TIM_PWM_MspInit+0x3c>)
 80017c2:	4293      	cmp	r3, r2
 80017c4:	d10d      	bne.n	80017e2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* TIM4 clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80017c6:	2300      	movs	r3, #0
 80017c8:	60fb      	str	r3, [r7, #12]
 80017ca:	4b0a      	ldr	r3, [pc, #40]	; (80017f4 <HAL_TIM_PWM_MspInit+0x40>)
 80017cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017ce:	4a09      	ldr	r2, [pc, #36]	; (80017f4 <HAL_TIM_PWM_MspInit+0x40>)
 80017d0:	f043 0304 	orr.w	r3, r3, #4
 80017d4:	6413      	str	r3, [r2, #64]	; 0x40
 80017d6:	4b07      	ldr	r3, [pc, #28]	; (80017f4 <HAL_TIM_PWM_MspInit+0x40>)
 80017d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017da:	f003 0304 	and.w	r3, r3, #4
 80017de:	60fb      	str	r3, [r7, #12]
 80017e0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }
}
 80017e2:	bf00      	nop
 80017e4:	3714      	adds	r7, #20
 80017e6:	46bd      	mov	sp, r7
 80017e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ec:	4770      	bx	lr
 80017ee:	bf00      	nop
 80017f0:	40000800 	.word	0x40000800
 80017f4:	40023800 	.word	0x40023800

080017f8 <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b088      	sub	sp, #32
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001800:	f107 030c 	add.w	r3, r7, #12
 8001804:	2200      	movs	r2, #0
 8001806:	601a      	str	r2, [r3, #0]
 8001808:	605a      	str	r2, [r3, #4]
 800180a:	609a      	str	r2, [r3, #8]
 800180c:	60da      	str	r2, [r3, #12]
 800180e:	611a      	str	r2, [r3, #16]
  if(timHandle->Instance==TIM4)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	4a12      	ldr	r2, [pc, #72]	; (8001860 <HAL_TIM_MspPostInit+0x68>)
 8001816:	4293      	cmp	r3, r2
 8001818:	d11e      	bne.n	8001858 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800181a:	2300      	movs	r3, #0
 800181c:	60bb      	str	r3, [r7, #8]
 800181e:	4b11      	ldr	r3, [pc, #68]	; (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001822:	4a10      	ldr	r2, [pc, #64]	; (8001864 <HAL_TIM_MspPostInit+0x6c>)
 8001824:	f043 0302 	orr.w	r3, r3, #2
 8001828:	6313      	str	r3, [r2, #48]	; 0x30
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <HAL_TIM_MspPostInit+0x6c>)
 800182c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	60bb      	str	r3, [r7, #8]
 8001834:	68bb      	ldr	r3, [r7, #8]
    /**TIM4 GPIO Configuration
    PB6     ------> TIM4_CH1
    PB8     ------> TIM4_CH3
    */
    GPIO_InitStruct.Pin = ENB_Pin|ENA_Pin;
 8001836:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800183a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800183c:	2302      	movs	r3, #2
 800183e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001840:	2300      	movs	r3, #0
 8001842:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001844:	2300      	movs	r3, #0
 8001846:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8001848:	2302      	movs	r3, #2
 800184a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800184c:	f107 030c 	add.w	r3, r7, #12
 8001850:	4619      	mov	r1, r3
 8001852:	4805      	ldr	r0, [pc, #20]	; (8001868 <HAL_TIM_MspPostInit+0x70>)
 8001854:	f000 fe06 	bl	8002464 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8001858:	bf00      	nop
 800185a:	3720      	adds	r7, #32
 800185c:	46bd      	mov	sp, r7
 800185e:	bd80      	pop	{r7, pc}
 8001860:	40000800 	.word	0x40000800
 8001864:	40023800 	.word	0x40023800
 8001868:	40020400 	.word	0x40020400

0800186c <MX_USART1_UART_Init>:
DMA_HandleTypeDef hdma_usart2_rx;

/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001870:	4b11      	ldr	r3, [pc, #68]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 8001872:	4a12      	ldr	r2, [pc, #72]	; (80018bc <MX_USART1_UART_Init+0x50>)
 8001874:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001876:	4b10      	ldr	r3, [pc, #64]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 8001878:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800187c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800187e:	4b0e      	ldr	r3, [pc, #56]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001884:	4b0c      	ldr	r3, [pc, #48]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 8001886:	2200      	movs	r2, #0
 8001888:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800188a:	4b0b      	ldr	r3, [pc, #44]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 800188c:	2200      	movs	r2, #0
 800188e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001890:	4b09      	ldr	r3, [pc, #36]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 8001892:	220c      	movs	r2, #12
 8001894:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001896:	4b08      	ldr	r3, [pc, #32]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 8001898:	2200      	movs	r2, #0
 800189a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800189c:	4b06      	ldr	r3, [pc, #24]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 800189e:	2200      	movs	r2, #0
 80018a0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80018a2:	4805      	ldr	r0, [pc, #20]	; (80018b8 <MX_USART1_UART_Init+0x4c>)
 80018a4:	f002 ff60 	bl	8004768 <HAL_UART_Init>
 80018a8:	4603      	mov	r3, r0
 80018aa:	2b00      	cmp	r3, #0
 80018ac:	d001      	beq.n	80018b2 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80018ae:	f7ff fc09 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80018b2:	bf00      	nop
 80018b4:	bd80      	pop	{r7, pc}
 80018b6:	bf00      	nop
 80018b8:	20000290 	.word	0x20000290
 80018bc:	40011000 	.word	0x40011000

080018c0 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80018c4:	4b11      	ldr	r3, [pc, #68]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018c6:	4a12      	ldr	r2, [pc, #72]	; (8001910 <MX_USART2_UART_Init+0x50>)
 80018c8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80018ca:	4b10      	ldr	r3, [pc, #64]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018cc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80018d0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80018d2:	4b0e      	ldr	r3, [pc, #56]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80018d8:	4b0c      	ldr	r3, [pc, #48]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80018de:	4b0b      	ldr	r3, [pc, #44]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018e0:	2200      	movs	r2, #0
 80018e2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80018e4:	4b09      	ldr	r3, [pc, #36]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018e6:	220c      	movs	r2, #12
 80018e8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80018ea:	4b08      	ldr	r3, [pc, #32]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80018f0:	4b06      	ldr	r3, [pc, #24]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018f2:	2200      	movs	r2, #0
 80018f4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80018f6:	4805      	ldr	r0, [pc, #20]	; (800190c <MX_USART2_UART_Init+0x4c>)
 80018f8:	f002 ff36 	bl	8004768 <HAL_UART_Init>
 80018fc:	4603      	mov	r3, r0
 80018fe:	2b00      	cmp	r3, #0
 8001900:	d001      	beq.n	8001906 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001902:	f7ff fbdf 	bl	80010c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001906:	bf00      	nop
 8001908:	bd80      	pop	{r7, pc}
 800190a:	bf00      	nop
 800190c:	200002d8 	.word	0x200002d8
 8001910:	40004400 	.word	0x40004400

08001914 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b08c      	sub	sp, #48	; 0x30
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800191c:	f107 031c 	add.w	r3, r7, #28
 8001920:	2200      	movs	r2, #0
 8001922:	601a      	str	r2, [r3, #0]
 8001924:	605a      	str	r2, [r3, #4]
 8001926:	609a      	str	r2, [r3, #8]
 8001928:	60da      	str	r2, [r3, #12]
 800192a:	611a      	str	r2, [r3, #16]
  if(uartHandle->Instance==USART1)
 800192c:	687b      	ldr	r3, [r7, #4]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a60      	ldr	r2, [pc, #384]	; (8001ab4 <HAL_UART_MspInit+0x1a0>)
 8001932:	4293      	cmp	r3, r2
 8001934:	d153      	bne.n	80019de <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* USART1 clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001936:	2300      	movs	r3, #0
 8001938:	61bb      	str	r3, [r7, #24]
 800193a:	4b5f      	ldr	r3, [pc, #380]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 800193c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800193e:	4a5e      	ldr	r2, [pc, #376]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001940:	f043 0310 	orr.w	r3, r3, #16
 8001944:	6453      	str	r3, [r2, #68]	; 0x44
 8001946:	4b5c      	ldr	r3, [pc, #368]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001948:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800194a:	f003 0310 	and.w	r3, r3, #16
 800194e:	61bb      	str	r3, [r7, #24]
 8001950:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	617b      	str	r3, [r7, #20]
 8001956:	4b58      	ldr	r3, [pc, #352]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800195a:	4a57      	ldr	r2, [pc, #348]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 800195c:	f043 0301 	orr.w	r3, r3, #1
 8001960:	6313      	str	r3, [r2, #48]	; 0x30
 8001962:	4b55      	ldr	r3, [pc, #340]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001964:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001966:	f003 0301 	and.w	r3, r3, #1
 800196a:	617b      	str	r3, [r7, #20]
 800196c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b51      	ldr	r3, [pc, #324]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001976:	4a50      	ldr	r2, [pc, #320]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001978:	f043 0302 	orr.w	r3, r3, #2
 800197c:	6313      	str	r3, [r2, #48]	; 0x30
 800197e:	4b4e      	ldr	r3, [pc, #312]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001980:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001982:	f003 0302 	and.w	r3, r3, #2
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]
    /**USART1 GPIO Configuration
    PA15     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800198a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800198e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001990:	2302      	movs	r3, #2
 8001992:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001994:	2300      	movs	r3, #0
 8001996:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001998:	2303      	movs	r3, #3
 800199a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800199c:	2307      	movs	r3, #7
 800199e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019a0:	f107 031c 	add.w	r3, r7, #28
 80019a4:	4619      	mov	r1, r3
 80019a6:	4845      	ldr	r0, [pc, #276]	; (8001abc <HAL_UART_MspInit+0x1a8>)
 80019a8:	f000 fd5c 	bl	8002464 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80019ac:	2380      	movs	r3, #128	; 0x80
 80019ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019b0:	2302      	movs	r3, #2
 80019b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019b4:	2300      	movs	r3, #0
 80019b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b8:	2303      	movs	r3, #3
 80019ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80019bc:	2307      	movs	r3, #7
 80019be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019c0:	f107 031c 	add.w	r3, r7, #28
 80019c4:	4619      	mov	r1, r3
 80019c6:	483e      	ldr	r0, [pc, #248]	; (8001ac0 <HAL_UART_MspInit+0x1ac>)
 80019c8:	f000 fd4c 	bl	8002464 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 80019cc:	2200      	movs	r2, #0
 80019ce:	2105      	movs	r1, #5
 80019d0:	2025      	movs	r0, #37	; 0x25
 80019d2:	f000 f9a1 	bl	8001d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 80019d6:	2025      	movs	r0, #37	; 0x25
 80019d8:	f000 f9ba 	bl	8001d50 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }
}
 80019dc:	e066      	b.n	8001aac <HAL_UART_MspInit+0x198>
  else if(uartHandle->Instance==USART2)
 80019de:	687b      	ldr	r3, [r7, #4]
 80019e0:	681b      	ldr	r3, [r3, #0]
 80019e2:	4a38      	ldr	r2, [pc, #224]	; (8001ac4 <HAL_UART_MspInit+0x1b0>)
 80019e4:	4293      	cmp	r3, r2
 80019e6:	d161      	bne.n	8001aac <HAL_UART_MspInit+0x198>
    __HAL_RCC_USART2_CLK_ENABLE();
 80019e8:	2300      	movs	r3, #0
 80019ea:	60fb      	str	r3, [r7, #12]
 80019ec:	4b32      	ldr	r3, [pc, #200]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 80019ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019f0:	4a31      	ldr	r2, [pc, #196]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 80019f2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019f6:	6413      	str	r3, [r2, #64]	; 0x40
 80019f8:	4b2f      	ldr	r3, [pc, #188]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 80019fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001a00:	60fb      	str	r3, [r7, #12]
 8001a02:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001a04:	2300      	movs	r3, #0
 8001a06:	60bb      	str	r3, [r7, #8]
 8001a08:	4b2b      	ldr	r3, [pc, #172]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0c:	4a2a      	ldr	r2, [pc, #168]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001a0e:	f043 0301 	orr.w	r3, r3, #1
 8001a12:	6313      	str	r3, [r2, #48]	; 0x30
 8001a14:	4b28      	ldr	r3, [pc, #160]	; (8001ab8 <HAL_UART_MspInit+0x1a4>)
 8001a16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a18:	f003 0301 	and.w	r3, r3, #1
 8001a1c:	60bb      	str	r3, [r7, #8]
 8001a1e:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001a20:	230c      	movs	r3, #12
 8001a22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a24:	2302      	movs	r3, #2
 8001a26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a2c:	2303      	movs	r3, #3
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001a30:	2307      	movs	r3, #7
 8001a32:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a34:	f107 031c 	add.w	r3, r7, #28
 8001a38:	4619      	mov	r1, r3
 8001a3a:	4820      	ldr	r0, [pc, #128]	; (8001abc <HAL_UART_MspInit+0x1a8>)
 8001a3c:	f000 fd12 	bl	8002464 <HAL_GPIO_Init>
    hdma_usart2_rx.Instance = DMA1_Stream7;
 8001a40:	4b21      	ldr	r3, [pc, #132]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a42:	4a22      	ldr	r2, [pc, #136]	; (8001acc <HAL_UART_MspInit+0x1b8>)
 8001a44:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_6;
 8001a46:	4b20      	ldr	r3, [pc, #128]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a48:	f04f 6240 	mov.w	r2, #201326592	; 0xc000000
 8001a4c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a4e:	4b1e      	ldr	r3, [pc, #120]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a54:	4b1c      	ldr	r3, [pc, #112]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a56:	2200      	movs	r2, #0
 8001a58:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001a5a:	4b1b      	ldr	r3, [pc, #108]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a5c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a60:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a62:	4b19      	ldr	r3, [pc, #100]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a64:	2200      	movs	r2, #0
 8001a66:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a68:	4b17      	ldr	r3, [pc, #92]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a6a:	2200      	movs	r2, #0
 8001a6c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_NORMAL;
 8001a6e:	4b16      	ldr	r3, [pc, #88]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a70:	2200      	movs	r2, #0
 8001a72:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001a74:	4b14      	ldr	r3, [pc, #80]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a76:	2200      	movs	r2, #0
 8001a78:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a7a:	4b13      	ldr	r3, [pc, #76]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a7c:	2200      	movs	r2, #0
 8001a7e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8001a80:	4811      	ldr	r0, [pc, #68]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a82:	f000 f973 	bl	8001d6c <HAL_DMA_Init>
 8001a86:	4603      	mov	r3, r0
 8001a88:	2b00      	cmp	r3, #0
 8001a8a:	d001      	beq.n	8001a90 <HAL_UART_MspInit+0x17c>
      Error_Handler();
 8001a8c:	f7ff fb1a 	bl	80010c4 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart2_rx);
 8001a90:	687b      	ldr	r3, [r7, #4]
 8001a92:	4a0d      	ldr	r2, [pc, #52]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a94:	63da      	str	r2, [r3, #60]	; 0x3c
 8001a96:	4a0c      	ldr	r2, [pc, #48]	; (8001ac8 <HAL_UART_MspInit+0x1b4>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	2105      	movs	r1, #5
 8001aa0:	2026      	movs	r0, #38	; 0x26
 8001aa2:	f000 f939 	bl	8001d18 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001aa6:	2026      	movs	r0, #38	; 0x26
 8001aa8:	f000 f952 	bl	8001d50 <HAL_NVIC_EnableIRQ>
}
 8001aac:	bf00      	nop
 8001aae:	3730      	adds	r7, #48	; 0x30
 8001ab0:	46bd      	mov	sp, r7
 8001ab2:	bd80      	pop	{r7, pc}
 8001ab4:	40011000 	.word	0x40011000
 8001ab8:	40023800 	.word	0x40023800
 8001abc:	40020000 	.word	0x40020000
 8001ac0:	40020400 	.word	0x40020400
 8001ac4:	40004400 	.word	0x40004400
 8001ac8:	20000320 	.word	0x20000320
 8001acc:	400260b8 	.word	0x400260b8

08001ad0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001ad0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001b08 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001ad4:	f7ff fbfa 	bl	80012cc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001ad8:	480c      	ldr	r0, [pc, #48]	; (8001b0c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001ada:	490d      	ldr	r1, [pc, #52]	; (8001b10 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001adc:	4a0d      	ldr	r2, [pc, #52]	; (8001b14 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001ade:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001ae0:	e002      	b.n	8001ae8 <LoopCopyDataInit>

08001ae2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001ae2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ae4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ae6:	3304      	adds	r3, #4

08001ae8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ae8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001aea:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001aec:	d3f9      	bcc.n	8001ae2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001aee:	4a0a      	ldr	r2, [pc, #40]	; (8001b18 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001af0:	4c0a      	ldr	r4, [pc, #40]	; (8001b1c <LoopFillZerobss+0x22>)
  movs r3, #0
 8001af2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001af4:	e001      	b.n	8001afa <LoopFillZerobss>

08001af6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001af6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001af8:	3204      	adds	r2, #4

08001afa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001afa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001afc:	d3fb      	bcc.n	8001af6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001afe:	f006 fbc3 	bl	8008288 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001b02:	f7ff fa1b 	bl	8000f3c <main>
  bx  lr    
 8001b06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001b08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001b0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001b10:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 8001b14:	08008464 	.word	0x08008464
  ldr r2, =_sbss
 8001b18:	20000064 	.word	0x20000064
  ldr r4, =_ebss
 8001b1c:	20004eac 	.word	0x20004eac

08001b20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001b20:	e7fe      	b.n	8001b20 <ADC_IRQHandler>
	...

08001b24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001b28:	4b0e      	ldr	r3, [pc, #56]	; (8001b64 <HAL_Init+0x40>)
 8001b2a:	681b      	ldr	r3, [r3, #0]
 8001b2c:	4a0d      	ldr	r2, [pc, #52]	; (8001b64 <HAL_Init+0x40>)
 8001b2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001b32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001b34:	4b0b      	ldr	r3, [pc, #44]	; (8001b64 <HAL_Init+0x40>)
 8001b36:	681b      	ldr	r3, [r3, #0]
 8001b38:	4a0a      	ldr	r2, [pc, #40]	; (8001b64 <HAL_Init+0x40>)
 8001b3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001b3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001b40:	4b08      	ldr	r3, [pc, #32]	; (8001b64 <HAL_Init+0x40>)
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	4a07      	ldr	r2, [pc, #28]	; (8001b64 <HAL_Init+0x40>)
 8001b46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001b4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001b4c:	2003      	movs	r0, #3
 8001b4e:	f000 f8d8 	bl	8001d02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001b52:	200f      	movs	r0, #15
 8001b54:	f7ff fae8 	bl	8001128 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001b58:	f7ff faba 	bl	80010d0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	bd80      	pop	{r7, pc}
 8001b62:	bf00      	nop
 8001b64:	40023c00 	.word	0x40023c00

08001b68 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001b68:	b480      	push	{r7}
 8001b6a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001b6c:	4b06      	ldr	r3, [pc, #24]	; (8001b88 <HAL_IncTick+0x20>)
 8001b6e:	781b      	ldrb	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	4b06      	ldr	r3, [pc, #24]	; (8001b8c <HAL_IncTick+0x24>)
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	4413      	add	r3, r2
 8001b78:	4a04      	ldr	r2, [pc, #16]	; (8001b8c <HAL_IncTick+0x24>)
 8001b7a:	6013      	str	r3, [r2, #0]
}
 8001b7c:	bf00      	nop
 8001b7e:	46bd      	mov	sp, r7
 8001b80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b84:	4770      	bx	lr
 8001b86:	bf00      	nop
 8001b88:	2000000c 	.word	0x2000000c
 8001b8c:	20000380 	.word	0x20000380

08001b90 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001b90:	b480      	push	{r7}
 8001b92:	af00      	add	r7, sp, #0
  return uwTick;
 8001b94:	4b03      	ldr	r3, [pc, #12]	; (8001ba4 <HAL_GetTick+0x14>)
 8001b96:	681b      	ldr	r3, [r3, #0]
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ba0:	4770      	bx	lr
 8001ba2:	bf00      	nop
 8001ba4:	20000380 	.word	0x20000380

08001ba8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ba8:	b480      	push	{r7}
 8001baa:	b085      	sub	sp, #20
 8001bac:	af00      	add	r7, sp, #0
 8001bae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	f003 0307 	and.w	r3, r3, #7
 8001bb6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001bb8:	4b0c      	ldr	r3, [pc, #48]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bba:	68db      	ldr	r3, [r3, #12]
 8001bbc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001bbe:	68ba      	ldr	r2, [r7, #8]
 8001bc0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001bc4:	4013      	ands	r3, r2
 8001bc6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001bc8:	68fb      	ldr	r3, [r7, #12]
 8001bca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001bd0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001bd4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001bd8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001bda:	4a04      	ldr	r2, [pc, #16]	; (8001bec <__NVIC_SetPriorityGrouping+0x44>)
 8001bdc:	68bb      	ldr	r3, [r7, #8]
 8001bde:	60d3      	str	r3, [r2, #12]
}
 8001be0:	bf00      	nop
 8001be2:	3714      	adds	r7, #20
 8001be4:	46bd      	mov	sp, r7
 8001be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bea:	4770      	bx	lr
 8001bec:	e000ed00 	.word	0xe000ed00

08001bf0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001bf0:	b480      	push	{r7}
 8001bf2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001bf4:	4b04      	ldr	r3, [pc, #16]	; (8001c08 <__NVIC_GetPriorityGrouping+0x18>)
 8001bf6:	68db      	ldr	r3, [r3, #12]
 8001bf8:	0a1b      	lsrs	r3, r3, #8
 8001bfa:	f003 0307 	and.w	r3, r3, #7
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	46bd      	mov	sp, r7
 8001c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c06:	4770      	bx	lr
 8001c08:	e000ed00 	.word	0xe000ed00

08001c0c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c0c:	b480      	push	{r7}
 8001c0e:	b083      	sub	sp, #12
 8001c10:	af00      	add	r7, sp, #0
 8001c12:	4603      	mov	r3, r0
 8001c14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	db0b      	blt.n	8001c36 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001c1e:	79fb      	ldrb	r3, [r7, #7]
 8001c20:	f003 021f 	and.w	r2, r3, #31
 8001c24:	4907      	ldr	r1, [pc, #28]	; (8001c44 <__NVIC_EnableIRQ+0x38>)
 8001c26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c2a:	095b      	lsrs	r3, r3, #5
 8001c2c:	2001      	movs	r0, #1
 8001c2e:	fa00 f202 	lsl.w	r2, r0, r2
 8001c32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001c36:	bf00      	nop
 8001c38:	370c      	adds	r7, #12
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	e000e100 	.word	0xe000e100

08001c48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001c48:	b480      	push	{r7}
 8001c4a:	b083      	sub	sp, #12
 8001c4c:	af00      	add	r7, sp, #0
 8001c4e:	4603      	mov	r3, r0
 8001c50:	6039      	str	r1, [r7, #0]
 8001c52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001c54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	db0a      	blt.n	8001c72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	b2da      	uxtb	r2, r3
 8001c60:	490c      	ldr	r1, [pc, #48]	; (8001c94 <__NVIC_SetPriority+0x4c>)
 8001c62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c66:	0112      	lsls	r2, r2, #4
 8001c68:	b2d2      	uxtb	r2, r2
 8001c6a:	440b      	add	r3, r1
 8001c6c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001c70:	e00a      	b.n	8001c88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001c72:	683b      	ldr	r3, [r7, #0]
 8001c74:	b2da      	uxtb	r2, r3
 8001c76:	4908      	ldr	r1, [pc, #32]	; (8001c98 <__NVIC_SetPriority+0x50>)
 8001c78:	79fb      	ldrb	r3, [r7, #7]
 8001c7a:	f003 030f 	and.w	r3, r3, #15
 8001c7e:	3b04      	subs	r3, #4
 8001c80:	0112      	lsls	r2, r2, #4
 8001c82:	b2d2      	uxtb	r2, r2
 8001c84:	440b      	add	r3, r1
 8001c86:	761a      	strb	r2, [r3, #24]
}
 8001c88:	bf00      	nop
 8001c8a:	370c      	adds	r7, #12
 8001c8c:	46bd      	mov	sp, r7
 8001c8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c92:	4770      	bx	lr
 8001c94:	e000e100 	.word	0xe000e100
 8001c98:	e000ed00 	.word	0xe000ed00

08001c9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	b089      	sub	sp, #36	; 0x24
 8001ca0:	af00      	add	r7, sp, #0
 8001ca2:	60f8      	str	r0, [r7, #12]
 8001ca4:	60b9      	str	r1, [r7, #8]
 8001ca6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ca8:	68fb      	ldr	r3, [r7, #12]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	f1c3 0307 	rsb	r3, r3, #7
 8001cb6:	2b04      	cmp	r3, #4
 8001cb8:	bf28      	it	cs
 8001cba:	2304      	movcs	r3, #4
 8001cbc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001cbe:	69fb      	ldr	r3, [r7, #28]
 8001cc0:	3304      	adds	r3, #4
 8001cc2:	2b06      	cmp	r3, #6
 8001cc4:	d902      	bls.n	8001ccc <NVIC_EncodePriority+0x30>
 8001cc6:	69fb      	ldr	r3, [r7, #28]
 8001cc8:	3b03      	subs	r3, #3
 8001cca:	e000      	b.n	8001cce <NVIC_EncodePriority+0x32>
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cd0:	f04f 32ff 	mov.w	r2, #4294967295
 8001cd4:	69bb      	ldr	r3, [r7, #24]
 8001cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001cda:	43da      	mvns	r2, r3
 8001cdc:	68bb      	ldr	r3, [r7, #8]
 8001cde:	401a      	ands	r2, r3
 8001ce0:	697b      	ldr	r3, [r7, #20]
 8001ce2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ce4:	f04f 31ff 	mov.w	r1, #4294967295
 8001ce8:	697b      	ldr	r3, [r7, #20]
 8001cea:	fa01 f303 	lsl.w	r3, r1, r3
 8001cee:	43d9      	mvns	r1, r3
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001cf4:	4313      	orrs	r3, r2
         );
}
 8001cf6:	4618      	mov	r0, r3
 8001cf8:	3724      	adds	r7, #36	; 0x24
 8001cfa:	46bd      	mov	sp, r7
 8001cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d00:	4770      	bx	lr

08001d02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d02:	b580      	push	{r7, lr}
 8001d04:	b082      	sub	sp, #8
 8001d06:	af00      	add	r7, sp, #0
 8001d08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001d0a:	6878      	ldr	r0, [r7, #4]
 8001d0c:	f7ff ff4c 	bl	8001ba8 <__NVIC_SetPriorityGrouping>
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}

08001d18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001d18:	b580      	push	{r7, lr}
 8001d1a:	b086      	sub	sp, #24
 8001d1c:	af00      	add	r7, sp, #0
 8001d1e:	4603      	mov	r3, r0
 8001d20:	60b9      	str	r1, [r7, #8]
 8001d22:	607a      	str	r2, [r7, #4]
 8001d24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001d26:	2300      	movs	r3, #0
 8001d28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001d2a:	f7ff ff61 	bl	8001bf0 <__NVIC_GetPriorityGrouping>
 8001d2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001d30:	687a      	ldr	r2, [r7, #4]
 8001d32:	68b9      	ldr	r1, [r7, #8]
 8001d34:	6978      	ldr	r0, [r7, #20]
 8001d36:	f7ff ffb1 	bl	8001c9c <NVIC_EncodePriority>
 8001d3a:	4602      	mov	r2, r0
 8001d3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d40:	4611      	mov	r1, r2
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff ff80 	bl	8001c48 <__NVIC_SetPriority>
}
 8001d48:	bf00      	nop
 8001d4a:	3718      	adds	r7, #24
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	bd80      	pop	{r7, pc}

08001d50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d50:	b580      	push	{r7, lr}
 8001d52:	b082      	sub	sp, #8
 8001d54:	af00      	add	r7, sp, #0
 8001d56:	4603      	mov	r3, r0
 8001d58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001d5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7ff ff54 	bl	8001c0c <__NVIC_EnableIRQ>
}
 8001d64:	bf00      	nop
 8001d66:	3708      	adds	r7, #8
 8001d68:	46bd      	mov	sp, r7
 8001d6a:	bd80      	pop	{r7, pc}

08001d6c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001d6c:	b580      	push	{r7, lr}
 8001d6e:	b086      	sub	sp, #24
 8001d70:	af00      	add	r7, sp, #0
 8001d72:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001d74:	2300      	movs	r3, #0
 8001d76:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001d78:	f7ff ff0a 	bl	8001b90 <HAL_GetTick>
 8001d7c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	2b00      	cmp	r3, #0
 8001d82:	d101      	bne.n	8001d88 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001d84:	2301      	movs	r3, #1
 8001d86:	e099      	b.n	8001ebc <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	2202      	movs	r2, #2
 8001d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	2200      	movs	r2, #0
 8001d94:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001d98:	687b      	ldr	r3, [r7, #4]
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	681a      	ldr	r2, [r3, #0]
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	f022 0201 	bic.w	r2, r2, #1
 8001da6:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001da8:	e00f      	b.n	8001dca <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001daa:	f7ff fef1 	bl	8001b90 <HAL_GetTick>
 8001dae:	4602      	mov	r2, r0
 8001db0:	693b      	ldr	r3, [r7, #16]
 8001db2:	1ad3      	subs	r3, r2, r3
 8001db4:	2b05      	cmp	r3, #5
 8001db6:	d908      	bls.n	8001dca <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	2220      	movs	r2, #32
 8001dbc:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	2203      	movs	r2, #3
 8001dc2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001dc6:	2303      	movs	r3, #3
 8001dc8:	e078      	b.n	8001ebc <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001dca:	687b      	ldr	r3, [r7, #4]
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d1e8      	bne.n	8001daa <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001dd8:	687b      	ldr	r3, [r7, #4]
 8001dda:	681b      	ldr	r3, [r3, #0]
 8001ddc:	681b      	ldr	r3, [r3, #0]
 8001dde:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001de0:	697a      	ldr	r2, [r7, #20]
 8001de2:	4b38      	ldr	r3, [pc, #224]	; (8001ec4 <HAL_DMA_Init+0x158>)
 8001de4:	4013      	ands	r3, r2
 8001de6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	685a      	ldr	r2, [r3, #4]
 8001dec:	687b      	ldr	r3, [r7, #4]
 8001dee:	689b      	ldr	r3, [r3, #8]
 8001df0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001df6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	691b      	ldr	r3, [r3, #16]
 8001dfc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001dfe:	687b      	ldr	r3, [r7, #4]
 8001e00:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001e02:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	699b      	ldr	r3, [r3, #24]
 8001e08:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001e0e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	6a1b      	ldr	r3, [r3, #32]
 8001e14:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001e16:	697a      	ldr	r2, [r7, #20]
 8001e18:	4313      	orrs	r3, r2
 8001e1a:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e20:	2b04      	cmp	r3, #4
 8001e22:	d107      	bne.n	8001e34 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8001e24:	687b      	ldr	r3, [r7, #4]
 8001e26:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e2c:	4313      	orrs	r3, r2
 8001e2e:	697a      	ldr	r2, [r7, #20]
 8001e30:	4313      	orrs	r3, r2
 8001e32:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	681b      	ldr	r3, [r3, #0]
 8001e38:	697a      	ldr	r2, [r7, #20]
 8001e3a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	695b      	ldr	r3, [r3, #20]
 8001e42:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8001e44:	697b      	ldr	r3, [r7, #20]
 8001e46:	f023 0307 	bic.w	r3, r3, #7
 8001e4a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e50:	697a      	ldr	r2, [r7, #20]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e5a:	2b04      	cmp	r3, #4
 8001e5c:	d117      	bne.n	8001e8e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001e62:	697a      	ldr	r2, [r7, #20]
 8001e64:	4313      	orrs	r3, r2
 8001e66:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d00e      	beq.n	8001e8e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f000 fa7b 	bl	800236c <DMA_CheckFifoParam>
 8001e76:	4603      	mov	r3, r0
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d008      	beq.n	8001e8e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2240      	movs	r2, #64	; 0x40
 8001e80:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2201      	movs	r2, #1
 8001e86:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8001e8a:	2301      	movs	r3, #1
 8001e8c:	e016      	b.n	8001ebc <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	697a      	ldr	r2, [r7, #20]
 8001e94:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8001e96:	6878      	ldr	r0, [r7, #4]
 8001e98:	f000 fa32 	bl	8002300 <DMA_CalcBaseAndBitshift>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001ea4:	223f      	movs	r2, #63	; 0x3f
 8001ea6:	409a      	lsls	r2, r3
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8001eac:	687b      	ldr	r3, [r7, #4]
 8001eae:	2200      	movs	r2, #0
 8001eb0:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8001eb2:	687b      	ldr	r3, [r7, #4]
 8001eb4:	2201      	movs	r2, #1
 8001eb6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8001eba:	2300      	movs	r3, #0
}
 8001ebc:	4618      	mov	r0, r3
 8001ebe:	3718      	adds	r7, #24
 8001ec0:	46bd      	mov	sp, r7
 8001ec2:	bd80      	pop	{r7, pc}
 8001ec4:	f010803f 	.word	0xf010803f

08001ec8 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001ed4:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8001ed6:	f7ff fe5b 	bl	8001b90 <HAL_GetTick>
 8001eda:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001edc:	687b      	ldr	r3, [r7, #4]
 8001ede:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001ee2:	b2db      	uxtb	r3, r3
 8001ee4:	2b02      	cmp	r3, #2
 8001ee6:	d008      	beq.n	8001efa <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	2280      	movs	r2, #128	; 0x80
 8001eec:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8001ef6:	2301      	movs	r3, #1
 8001ef8:	e052      	b.n	8001fa0 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	f022 0216 	bic.w	r2, r2, #22
 8001f08:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8001f0a:	687b      	ldr	r3, [r7, #4]
 8001f0c:	681b      	ldr	r3, [r3, #0]
 8001f0e:	695a      	ldr	r2, [r3, #20]
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8001f18:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8001f1a:	687b      	ldr	r3, [r7, #4]
 8001f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d103      	bne.n	8001f2a <HAL_DMA_Abort+0x62>
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d007      	beq.n	8001f3a <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	681a      	ldr	r2, [r3, #0]
 8001f30:	687b      	ldr	r3, [r7, #4]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	f022 0208 	bic.w	r2, r2, #8
 8001f38:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001f3a:	687b      	ldr	r3, [r7, #4]
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	681a      	ldr	r2, [r3, #0]
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	f022 0201 	bic.w	r2, r2, #1
 8001f48:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f4a:	e013      	b.n	8001f74 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f4c:	f7ff fe20 	bl	8001b90 <HAL_GetTick>
 8001f50:	4602      	mov	r2, r0
 8001f52:	68bb      	ldr	r3, [r7, #8]
 8001f54:	1ad3      	subs	r3, r2, r3
 8001f56:	2b05      	cmp	r3, #5
 8001f58:	d90c      	bls.n	8001f74 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f5a:	687b      	ldr	r3, [r7, #4]
 8001f5c:	2220      	movs	r2, #32
 8001f5e:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2203      	movs	r2, #3
 8001f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	2200      	movs	r2, #0
 8001f6c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8001f70:	2303      	movs	r3, #3
 8001f72:	e015      	b.n	8001fa0 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681b      	ldr	r3, [r3, #0]
 8001f7a:	f003 0301 	and.w	r3, r3, #1
 8001f7e:	2b00      	cmp	r3, #0
 8001f80:	d1e4      	bne.n	8001f4c <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001f86:	223f      	movs	r2, #63	; 0x3f
 8001f88:	409a      	lsls	r2, r3
 8001f8a:	68fb      	ldr	r3, [r7, #12]
 8001f8c:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2201      	movs	r2, #1
 8001f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8001f9e:	2300      	movs	r3, #0
}
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	3710      	adds	r7, #16
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	bd80      	pop	{r7, pc}

08001fa8 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8001fa8:	b480      	push	{r7}
 8001faa:	b083      	sub	sp, #12
 8001fac:	af00      	add	r7, sp, #0
 8001fae:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8001fb0:	687b      	ldr	r3, [r7, #4]
 8001fb2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8001fb6:	b2db      	uxtb	r3, r3
 8001fb8:	2b02      	cmp	r3, #2
 8001fba:	d004      	beq.n	8001fc6 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	2280      	movs	r2, #128	; 0x80
 8001fc0:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8001fc2:	2301      	movs	r3, #1
 8001fc4:	e00c      	b.n	8001fe0 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8001fc6:	687b      	ldr	r3, [r7, #4]
 8001fc8:	2205      	movs	r2, #5
 8001fca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f022 0201 	bic.w	r2, r2, #1
 8001fdc:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8001fde:	2300      	movs	r3, #0
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	370c      	adds	r7, #12
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fea:	4770      	bx	lr

08001fec <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	b086      	sub	sp, #24
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8001ff8:	4b8e      	ldr	r3, [pc, #568]	; (8002234 <HAL_DMA_IRQHandler+0x248>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a8e      	ldr	r2, [pc, #568]	; (8002238 <HAL_DMA_IRQHandler+0x24c>)
 8001ffe:	fba2 2303 	umull	r2, r3, r2, r3
 8002002:	0a9b      	lsrs	r3, r3, #10
 8002004:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800200a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800200c:	693b      	ldr	r3, [r7, #16]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002012:	687b      	ldr	r3, [r7, #4]
 8002014:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002016:	2208      	movs	r2, #8
 8002018:	409a      	lsls	r2, r3
 800201a:	68fb      	ldr	r3, [r7, #12]
 800201c:	4013      	ands	r3, r2
 800201e:	2b00      	cmp	r3, #0
 8002020:	d01a      	beq.n	8002058 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	f003 0304 	and.w	r3, r3, #4
 800202c:	2b00      	cmp	r3, #0
 800202e:	d013      	beq.n	8002058 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	681a      	ldr	r2, [r3, #0]
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	681b      	ldr	r3, [r3, #0]
 800203a:	f022 0204 	bic.w	r2, r2, #4
 800203e:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002044:	2208      	movs	r2, #8
 8002046:	409a      	lsls	r2, r3
 8002048:	693b      	ldr	r3, [r7, #16]
 800204a:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002050:	f043 0201 	orr.w	r2, r3, #1
 8002054:	687b      	ldr	r3, [r7, #4]
 8002056:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800205c:	2201      	movs	r2, #1
 800205e:	409a      	lsls	r2, r3
 8002060:	68fb      	ldr	r3, [r7, #12]
 8002062:	4013      	ands	r3, r2
 8002064:	2b00      	cmp	r3, #0
 8002066:	d012      	beq.n	800208e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	695b      	ldr	r3, [r3, #20]
 800206e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002072:	2b00      	cmp	r3, #0
 8002074:	d00b      	beq.n	800208e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800207a:	2201      	movs	r2, #1
 800207c:	409a      	lsls	r2, r3
 800207e:	693b      	ldr	r3, [r7, #16]
 8002080:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002086:	f043 0202 	orr.w	r2, r3, #2
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002092:	2204      	movs	r2, #4
 8002094:	409a      	lsls	r2, r3
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	4013      	ands	r3, r2
 800209a:	2b00      	cmp	r3, #0
 800209c:	d012      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	681b      	ldr	r3, [r3, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	f003 0302 	and.w	r3, r3, #2
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	d00b      	beq.n	80020c4 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020b0:	2204      	movs	r2, #4
 80020b2:	409a      	lsls	r2, r3
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80020b8:	687b      	ldr	r3, [r7, #4]
 80020ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80020bc:	f043 0204 	orr.w	r2, r3, #4
 80020c0:	687b      	ldr	r3, [r7, #4]
 80020c2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020c8:	2210      	movs	r2, #16
 80020ca:	409a      	lsls	r2, r3
 80020cc:	68fb      	ldr	r3, [r7, #12]
 80020ce:	4013      	ands	r3, r2
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d043      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	f003 0308 	and.w	r3, r3, #8
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d03c      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80020e6:	2210      	movs	r2, #16
 80020e8:	409a      	lsls	r2, r3
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d018      	beq.n	800212e <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80020fc:	687b      	ldr	r3, [r7, #4]
 80020fe:	681b      	ldr	r3, [r3, #0]
 8002100:	681b      	ldr	r3, [r3, #0]
 8002102:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002106:	2b00      	cmp	r3, #0
 8002108:	d108      	bne.n	800211c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210e:	2b00      	cmp	r3, #0
 8002110:	d024      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002116:	6878      	ldr	r0, [r7, #4]
 8002118:	4798      	blx	r3
 800211a:	e01f      	b.n	800215c <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800211c:	687b      	ldr	r3, [r7, #4]
 800211e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002120:	2b00      	cmp	r3, #0
 8002122:	d01b      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002128:	6878      	ldr	r0, [r7, #4]
 800212a:	4798      	blx	r3
 800212c:	e016      	b.n	800215c <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	681b      	ldr	r3, [r3, #0]
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002138:	2b00      	cmp	r3, #0
 800213a:	d107      	bne.n	800214c <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	681a      	ldr	r2, [r3, #0]
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	f022 0208 	bic.w	r2, r2, #8
 800214a:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 800214c:	687b      	ldr	r3, [r7, #4]
 800214e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002150:	2b00      	cmp	r3, #0
 8002152:	d003      	beq.n	800215c <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002160:	2220      	movs	r2, #32
 8002162:	409a      	lsls	r2, r3
 8002164:	68fb      	ldr	r3, [r7, #12]
 8002166:	4013      	ands	r3, r2
 8002168:	2b00      	cmp	r3, #0
 800216a:	f000 808f 	beq.w	800228c <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	f003 0310 	and.w	r3, r3, #16
 8002178:	2b00      	cmp	r3, #0
 800217a:	f000 8087 	beq.w	800228c <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002182:	2220      	movs	r2, #32
 8002184:	409a      	lsls	r2, r3
 8002186:	693b      	ldr	r3, [r7, #16]
 8002188:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800218a:	687b      	ldr	r3, [r7, #4]
 800218c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002190:	b2db      	uxtb	r3, r3
 8002192:	2b05      	cmp	r3, #5
 8002194:	d136      	bne.n	8002204 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	681b      	ldr	r3, [r3, #0]
 800219a:	681a      	ldr	r2, [r3, #0]
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f022 0216 	bic.w	r2, r2, #22
 80021a4:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021a6:	687b      	ldr	r3, [r7, #4]
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	695a      	ldr	r2, [r3, #20]
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80021b4:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d103      	bne.n	80021c6 <HAL_DMA_IRQHandler+0x1da>
 80021be:	687b      	ldr	r3, [r7, #4]
 80021c0:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d007      	beq.n	80021d6 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021c6:	687b      	ldr	r3, [r7, #4]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	681a      	ldr	r2, [r3, #0]
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	f022 0208 	bic.w	r2, r2, #8
 80021d4:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021da:	223f      	movs	r2, #63	; 0x3f
 80021dc:	409a      	lsls	r2, r3
 80021de:	693b      	ldr	r3, [r7, #16]
 80021e0:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	2201      	movs	r2, #1
 80021e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80021ea:	687b      	ldr	r3, [r7, #4]
 80021ec:	2200      	movs	r2, #0
 80021ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d07e      	beq.n	80022f8 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80021fe:	6878      	ldr	r0, [r7, #4]
 8002200:	4798      	blx	r3
        }
        return;
 8002202:	e079      	b.n	80022f8 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d01d      	beq.n	800224e <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800221c:	2b00      	cmp	r3, #0
 800221e:	d10d      	bne.n	800223c <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002224:	2b00      	cmp	r3, #0
 8002226:	d031      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	4798      	blx	r3
 8002230:	e02c      	b.n	800228c <HAL_DMA_IRQHandler+0x2a0>
 8002232:	bf00      	nop
 8002234:	20000004 	.word	0x20000004
 8002238:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002240:	2b00      	cmp	r3, #0
 8002242:	d023      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002248:	6878      	ldr	r0, [r7, #4]
 800224a:	4798      	blx	r3
 800224c:	e01e      	b.n	800228c <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800224e:	687b      	ldr	r3, [r7, #4]
 8002250:	681b      	ldr	r3, [r3, #0]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002258:	2b00      	cmp	r3, #0
 800225a:	d10f      	bne.n	800227c <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	681a      	ldr	r2, [r3, #0]
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f022 0210 	bic.w	r2, r2, #16
 800226a:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	2201      	movs	r2, #1
 8002270:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	2200      	movs	r2, #0
 8002278:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        }

        if(hdma->XferCpltCallback != NULL)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002280:	2b00      	cmp	r3, #0
 8002282:	d003      	beq.n	800228c <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002288:	6878      	ldr	r0, [r7, #4]
 800228a:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800228c:	687b      	ldr	r3, [r7, #4]
 800228e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002290:	2b00      	cmp	r3, #0
 8002292:	d032      	beq.n	80022fa <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d022      	beq.n	80022e6 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	2205      	movs	r2, #5
 80022a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80022a8:	687b      	ldr	r3, [r7, #4]
 80022aa:	681b      	ldr	r3, [r3, #0]
 80022ac:	681a      	ldr	r2, [r3, #0]
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	f022 0201 	bic.w	r2, r2, #1
 80022b6:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80022b8:	68bb      	ldr	r3, [r7, #8]
 80022ba:	3301      	adds	r3, #1
 80022bc:	60bb      	str	r3, [r7, #8]
 80022be:	697a      	ldr	r2, [r7, #20]
 80022c0:	429a      	cmp	r2, r3
 80022c2:	d307      	bcc.n	80022d4 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	f003 0301 	and.w	r3, r3, #1
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d1f2      	bne.n	80022b8 <HAL_DMA_IRQHandler+0x2cc>
 80022d2:	e000      	b.n	80022d6 <HAL_DMA_IRQHandler+0x2ea>
          break;
 80022d4:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	2201      	movs	r2, #1
 80022da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	2200      	movs	r2, #0
 80022e2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    }

    if(hdma->XferErrorCallback != NULL)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022ea:	2b00      	cmp	r3, #0
 80022ec:	d005      	beq.n	80022fa <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	4798      	blx	r3
 80022f6:	e000      	b.n	80022fa <HAL_DMA_IRQHandler+0x30e>
        return;
 80022f8:	bf00      	nop
    }
  }
}
 80022fa:	3718      	adds	r7, #24
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}

08002300 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8002300:	b480      	push	{r7}
 8002302:	b085      	sub	sp, #20
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	b2db      	uxtb	r3, r3
 800230e:	3b10      	subs	r3, #16
 8002310:	4a14      	ldr	r2, [pc, #80]	; (8002364 <DMA_CalcBaseAndBitshift+0x64>)
 8002312:	fba2 2303 	umull	r2, r3, r2, r3
 8002316:	091b      	lsrs	r3, r3, #4
 8002318:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800231a:	4a13      	ldr	r2, [pc, #76]	; (8002368 <DMA_CalcBaseAndBitshift+0x68>)
 800231c:	68fb      	ldr	r3, [r7, #12]
 800231e:	4413      	add	r3, r2
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	461a      	mov	r2, r3
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	2b03      	cmp	r3, #3
 800232c:	d909      	bls.n	8002342 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8002336:	f023 0303 	bic.w	r3, r3, #3
 800233a:	1d1a      	adds	r2, r3, #4
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	659a      	str	r2, [r3, #88]	; 0x58
 8002340:	e007      	b.n	8002352 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	681b      	ldr	r3, [r3, #0]
 8002346:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800234a:	f023 0303 	bic.w	r3, r3, #3
 800234e:	687a      	ldr	r2, [r7, #4]
 8002350:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8002352:	687b      	ldr	r3, [r7, #4]
 8002354:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8002356:	4618      	mov	r0, r3
 8002358:	3714      	adds	r7, #20
 800235a:	46bd      	mov	sp, r7
 800235c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002360:	4770      	bx	lr
 8002362:	bf00      	nop
 8002364:	aaaaaaab 	.word	0xaaaaaaab
 8002368:	0800844c 	.word	0x0800844c

0800236c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800236c:	b480      	push	{r7}
 800236e:	b085      	sub	sp, #20
 8002370:	af00      	add	r7, sp, #0
 8002372:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002374:	2300      	movs	r3, #0
 8002376:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800237c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	699b      	ldr	r3, [r3, #24]
 8002382:	2b00      	cmp	r3, #0
 8002384:	d11f      	bne.n	80023c6 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8002386:	68bb      	ldr	r3, [r7, #8]
 8002388:	2b03      	cmp	r3, #3
 800238a:	d856      	bhi.n	800243a <DMA_CheckFifoParam+0xce>
 800238c:	a201      	add	r2, pc, #4	; (adr r2, 8002394 <DMA_CheckFifoParam+0x28>)
 800238e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002392:	bf00      	nop
 8002394:	080023a5 	.word	0x080023a5
 8002398:	080023b7 	.word	0x080023b7
 800239c:	080023a5 	.word	0x080023a5
 80023a0:	0800243b 	.word	0x0800243b
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023a4:	687b      	ldr	r3, [r7, #4]
 80023a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023a8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	d046      	beq.n	800243e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80023b0:	2301      	movs	r3, #1
 80023b2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023b4:	e043      	b.n	800243e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023ba:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80023be:	d140      	bne.n	8002442 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80023c0:	2301      	movs	r3, #1
 80023c2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80023c4:	e03d      	b.n	8002442 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	699b      	ldr	r3, [r3, #24]
 80023ca:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80023ce:	d121      	bne.n	8002414 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80023d0:	68bb      	ldr	r3, [r7, #8]
 80023d2:	2b03      	cmp	r3, #3
 80023d4:	d837      	bhi.n	8002446 <DMA_CheckFifoParam+0xda>
 80023d6:	a201      	add	r2, pc, #4	; (adr r2, 80023dc <DMA_CheckFifoParam+0x70>)
 80023d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80023dc:	080023ed 	.word	0x080023ed
 80023e0:	080023f3 	.word	0x080023f3
 80023e4:	080023ed 	.word	0x080023ed
 80023e8:	08002405 	.word	0x08002405
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80023ec:	2301      	movs	r3, #1
 80023ee:	73fb      	strb	r3, [r7, #15]
      break;
 80023f0:	e030      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023f6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80023fa:	2b00      	cmp	r3, #0
 80023fc:	d025      	beq.n	800244a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80023fe:	2301      	movs	r3, #1
 8002400:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002402:	e022      	b.n	800244a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002408:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800240c:	d11f      	bne.n	800244e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800240e:	2301      	movs	r3, #1
 8002410:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8002412:	e01c      	b.n	800244e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8002414:	68bb      	ldr	r3, [r7, #8]
 8002416:	2b02      	cmp	r3, #2
 8002418:	d903      	bls.n	8002422 <DMA_CheckFifoParam+0xb6>
 800241a:	68bb      	ldr	r3, [r7, #8]
 800241c:	2b03      	cmp	r3, #3
 800241e:	d003      	beq.n	8002428 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8002420:	e018      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8002422:	2301      	movs	r3, #1
 8002424:	73fb      	strb	r3, [r7, #15]
      break;
 8002426:	e015      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002428:	687b      	ldr	r3, [r7, #4]
 800242a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800242c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002430:	2b00      	cmp	r3, #0
 8002432:	d00e      	beq.n	8002452 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002434:	2301      	movs	r3, #1
 8002436:	73fb      	strb	r3, [r7, #15]
      break;
 8002438:	e00b      	b.n	8002452 <DMA_CheckFifoParam+0xe6>
      break;
 800243a:	bf00      	nop
 800243c:	e00a      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800243e:	bf00      	nop
 8002440:	e008      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002442:	bf00      	nop
 8002444:	e006      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002446:	bf00      	nop
 8002448:	e004      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 800244a:	bf00      	nop
 800244c:	e002      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;   
 800244e:	bf00      	nop
 8002450:	e000      	b.n	8002454 <DMA_CheckFifoParam+0xe8>
      break;
 8002452:	bf00      	nop
    }
  } 
  
  return status; 
 8002454:	7bfb      	ldrb	r3, [r7, #15]
}
 8002456:	4618      	mov	r0, r3
 8002458:	3714      	adds	r7, #20
 800245a:	46bd      	mov	sp, r7
 800245c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002460:	4770      	bx	lr
 8002462:	bf00      	nop

08002464 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002464:	b480      	push	{r7}
 8002466:	b089      	sub	sp, #36	; 0x24
 8002468:	af00      	add	r7, sp, #0
 800246a:	6078      	str	r0, [r7, #4]
 800246c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800246e:	2300      	movs	r3, #0
 8002470:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002472:	2300      	movs	r3, #0
 8002474:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002476:	2300      	movs	r3, #0
 8002478:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800247a:	2300      	movs	r3, #0
 800247c:	61fb      	str	r3, [r7, #28]
 800247e:	e159      	b.n	8002734 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002480:	2201      	movs	r2, #1
 8002482:	69fb      	ldr	r3, [r7, #28]
 8002484:	fa02 f303 	lsl.w	r3, r2, r3
 8002488:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800248a:	683b      	ldr	r3, [r7, #0]
 800248c:	681b      	ldr	r3, [r3, #0]
 800248e:	697a      	ldr	r2, [r7, #20]
 8002490:	4013      	ands	r3, r2
 8002492:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002494:	693a      	ldr	r2, [r7, #16]
 8002496:	697b      	ldr	r3, [r7, #20]
 8002498:	429a      	cmp	r2, r3
 800249a:	f040 8148 	bne.w	800272e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f003 0303 	and.w	r3, r3, #3
 80024a6:	2b01      	cmp	r3, #1
 80024a8:	d005      	beq.n	80024b6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80024aa:	683b      	ldr	r3, [r7, #0]
 80024ac:	685b      	ldr	r3, [r3, #4]
 80024ae:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80024b2:	2b02      	cmp	r3, #2
 80024b4:	d130      	bne.n	8002518 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	689b      	ldr	r3, [r3, #8]
 80024ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80024bc:	69fb      	ldr	r3, [r7, #28]
 80024be:	005b      	lsls	r3, r3, #1
 80024c0:	2203      	movs	r2, #3
 80024c2:	fa02 f303 	lsl.w	r3, r2, r3
 80024c6:	43db      	mvns	r3, r3
 80024c8:	69ba      	ldr	r2, [r7, #24]
 80024ca:	4013      	ands	r3, r2
 80024cc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80024ce:	683b      	ldr	r3, [r7, #0]
 80024d0:	68da      	ldr	r2, [r3, #12]
 80024d2:	69fb      	ldr	r3, [r7, #28]
 80024d4:	005b      	lsls	r3, r3, #1
 80024d6:	fa02 f303 	lsl.w	r3, r2, r3
 80024da:	69ba      	ldr	r2, [r7, #24]
 80024dc:	4313      	orrs	r3, r2
 80024de:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	69ba      	ldr	r2, [r7, #24]
 80024e4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80024ec:	2201      	movs	r2, #1
 80024ee:	69fb      	ldr	r3, [r7, #28]
 80024f0:	fa02 f303 	lsl.w	r3, r2, r3
 80024f4:	43db      	mvns	r3, r3
 80024f6:	69ba      	ldr	r2, [r7, #24]
 80024f8:	4013      	ands	r3, r2
 80024fa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80024fc:	683b      	ldr	r3, [r7, #0]
 80024fe:	685b      	ldr	r3, [r3, #4]
 8002500:	091b      	lsrs	r3, r3, #4
 8002502:	f003 0201 	and.w	r2, r3, #1
 8002506:	69fb      	ldr	r3, [r7, #28]
 8002508:	fa02 f303 	lsl.w	r3, r2, r3
 800250c:	69ba      	ldr	r2, [r7, #24]
 800250e:	4313      	orrs	r3, r2
 8002510:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	69ba      	ldr	r2, [r7, #24]
 8002516:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002518:	683b      	ldr	r3, [r7, #0]
 800251a:	685b      	ldr	r3, [r3, #4]
 800251c:	f003 0303 	and.w	r3, r3, #3
 8002520:	2b03      	cmp	r3, #3
 8002522:	d017      	beq.n	8002554 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	68db      	ldr	r3, [r3, #12]
 8002528:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800252a:	69fb      	ldr	r3, [r7, #28]
 800252c:	005b      	lsls	r3, r3, #1
 800252e:	2203      	movs	r2, #3
 8002530:	fa02 f303 	lsl.w	r3, r2, r3
 8002534:	43db      	mvns	r3, r3
 8002536:	69ba      	ldr	r2, [r7, #24]
 8002538:	4013      	ands	r3, r2
 800253a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800253c:	683b      	ldr	r3, [r7, #0]
 800253e:	689a      	ldr	r2, [r3, #8]
 8002540:	69fb      	ldr	r3, [r7, #28]
 8002542:	005b      	lsls	r3, r3, #1
 8002544:	fa02 f303 	lsl.w	r3, r2, r3
 8002548:	69ba      	ldr	r2, [r7, #24]
 800254a:	4313      	orrs	r3, r2
 800254c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	69ba      	ldr	r2, [r7, #24]
 8002552:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002554:	683b      	ldr	r3, [r7, #0]
 8002556:	685b      	ldr	r3, [r3, #4]
 8002558:	f003 0303 	and.w	r3, r3, #3
 800255c:	2b02      	cmp	r3, #2
 800255e:	d123      	bne.n	80025a8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002560:	69fb      	ldr	r3, [r7, #28]
 8002562:	08da      	lsrs	r2, r3, #3
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	3208      	adds	r2, #8
 8002568:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800256c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800256e:	69fb      	ldr	r3, [r7, #28]
 8002570:	f003 0307 	and.w	r3, r3, #7
 8002574:	009b      	lsls	r3, r3, #2
 8002576:	220f      	movs	r2, #15
 8002578:	fa02 f303 	lsl.w	r3, r2, r3
 800257c:	43db      	mvns	r3, r3
 800257e:	69ba      	ldr	r2, [r7, #24]
 8002580:	4013      	ands	r3, r2
 8002582:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002584:	683b      	ldr	r3, [r7, #0]
 8002586:	691a      	ldr	r2, [r3, #16]
 8002588:	69fb      	ldr	r3, [r7, #28]
 800258a:	f003 0307 	and.w	r3, r3, #7
 800258e:	009b      	lsls	r3, r3, #2
 8002590:	fa02 f303 	lsl.w	r3, r2, r3
 8002594:	69ba      	ldr	r2, [r7, #24]
 8002596:	4313      	orrs	r3, r2
 8002598:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800259a:	69fb      	ldr	r3, [r7, #28]
 800259c:	08da      	lsrs	r2, r3, #3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	3208      	adds	r2, #8
 80025a2:	69b9      	ldr	r1, [r7, #24]
 80025a4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	681b      	ldr	r3, [r3, #0]
 80025ac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80025ae:	69fb      	ldr	r3, [r7, #28]
 80025b0:	005b      	lsls	r3, r3, #1
 80025b2:	2203      	movs	r2, #3
 80025b4:	fa02 f303 	lsl.w	r3, r2, r3
 80025b8:	43db      	mvns	r3, r3
 80025ba:	69ba      	ldr	r2, [r7, #24]
 80025bc:	4013      	ands	r3, r2
 80025be:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	f003 0203 	and.w	r2, r3, #3
 80025c8:	69fb      	ldr	r3, [r7, #28]
 80025ca:	005b      	lsls	r3, r3, #1
 80025cc:	fa02 f303 	lsl.w	r3, r2, r3
 80025d0:	69ba      	ldr	r2, [r7, #24]
 80025d2:	4313      	orrs	r3, r2
 80025d4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	69ba      	ldr	r2, [r7, #24]
 80025da:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80025dc:	683b      	ldr	r3, [r7, #0]
 80025de:	685b      	ldr	r3, [r3, #4]
 80025e0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	f000 80a2 	beq.w	800272e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80025ea:	2300      	movs	r3, #0
 80025ec:	60fb      	str	r3, [r7, #12]
 80025ee:	4b57      	ldr	r3, [pc, #348]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025f2:	4a56      	ldr	r2, [pc, #344]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025f4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80025f8:	6453      	str	r3, [r2, #68]	; 0x44
 80025fa:	4b54      	ldr	r3, [pc, #336]	; (800274c <HAL_GPIO_Init+0x2e8>)
 80025fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025fe:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002602:	60fb      	str	r3, [r7, #12]
 8002604:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002606:	4a52      	ldr	r2, [pc, #328]	; (8002750 <HAL_GPIO_Init+0x2ec>)
 8002608:	69fb      	ldr	r3, [r7, #28]
 800260a:	089b      	lsrs	r3, r3, #2
 800260c:	3302      	adds	r3, #2
 800260e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002612:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002614:	69fb      	ldr	r3, [r7, #28]
 8002616:	f003 0303 	and.w	r3, r3, #3
 800261a:	009b      	lsls	r3, r3, #2
 800261c:	220f      	movs	r2, #15
 800261e:	fa02 f303 	lsl.w	r3, r2, r3
 8002622:	43db      	mvns	r3, r3
 8002624:	69ba      	ldr	r2, [r7, #24]
 8002626:	4013      	ands	r3, r2
 8002628:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	4a49      	ldr	r2, [pc, #292]	; (8002754 <HAL_GPIO_Init+0x2f0>)
 800262e:	4293      	cmp	r3, r2
 8002630:	d019      	beq.n	8002666 <HAL_GPIO_Init+0x202>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	4a48      	ldr	r2, [pc, #288]	; (8002758 <HAL_GPIO_Init+0x2f4>)
 8002636:	4293      	cmp	r3, r2
 8002638:	d013      	beq.n	8002662 <HAL_GPIO_Init+0x1fe>
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	4a47      	ldr	r2, [pc, #284]	; (800275c <HAL_GPIO_Init+0x2f8>)
 800263e:	4293      	cmp	r3, r2
 8002640:	d00d      	beq.n	800265e <HAL_GPIO_Init+0x1fa>
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	4a46      	ldr	r2, [pc, #280]	; (8002760 <HAL_GPIO_Init+0x2fc>)
 8002646:	4293      	cmp	r3, r2
 8002648:	d007      	beq.n	800265a <HAL_GPIO_Init+0x1f6>
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	4a45      	ldr	r2, [pc, #276]	; (8002764 <HAL_GPIO_Init+0x300>)
 800264e:	4293      	cmp	r3, r2
 8002650:	d101      	bne.n	8002656 <HAL_GPIO_Init+0x1f2>
 8002652:	2304      	movs	r3, #4
 8002654:	e008      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002656:	2307      	movs	r3, #7
 8002658:	e006      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265a:	2303      	movs	r3, #3
 800265c:	e004      	b.n	8002668 <HAL_GPIO_Init+0x204>
 800265e:	2302      	movs	r3, #2
 8002660:	e002      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002662:	2301      	movs	r3, #1
 8002664:	e000      	b.n	8002668 <HAL_GPIO_Init+0x204>
 8002666:	2300      	movs	r3, #0
 8002668:	69fa      	ldr	r2, [r7, #28]
 800266a:	f002 0203 	and.w	r2, r2, #3
 800266e:	0092      	lsls	r2, r2, #2
 8002670:	4093      	lsls	r3, r2
 8002672:	69ba      	ldr	r2, [r7, #24]
 8002674:	4313      	orrs	r3, r2
 8002676:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002678:	4935      	ldr	r1, [pc, #212]	; (8002750 <HAL_GPIO_Init+0x2ec>)
 800267a:	69fb      	ldr	r3, [r7, #28]
 800267c:	089b      	lsrs	r3, r3, #2
 800267e:	3302      	adds	r3, #2
 8002680:	69ba      	ldr	r2, [r7, #24]
 8002682:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002686:	4b38      	ldr	r3, [pc, #224]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002688:	689b      	ldr	r3, [r3, #8]
 800268a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800268c:	693b      	ldr	r3, [r7, #16]
 800268e:	43db      	mvns	r3, r3
 8002690:	69ba      	ldr	r2, [r7, #24]
 8002692:	4013      	ands	r3, r2
 8002694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d003      	beq.n	80026aa <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80026a2:	69ba      	ldr	r2, [r7, #24]
 80026a4:	693b      	ldr	r3, [r7, #16]
 80026a6:	4313      	orrs	r3, r2
 80026a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80026aa:	4a2f      	ldr	r2, [pc, #188]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026ac:	69bb      	ldr	r3, [r7, #24]
 80026ae:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80026b0:	4b2d      	ldr	r3, [pc, #180]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026b6:	693b      	ldr	r3, [r7, #16]
 80026b8:	43db      	mvns	r3, r3
 80026ba:	69ba      	ldr	r2, [r7, #24]
 80026bc:	4013      	ands	r3, r2
 80026be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80026c0:	683b      	ldr	r3, [r7, #0]
 80026c2:	685b      	ldr	r3, [r3, #4]
 80026c4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d003      	beq.n	80026d4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80026cc:	69ba      	ldr	r2, [r7, #24]
 80026ce:	693b      	ldr	r3, [r7, #16]
 80026d0:	4313      	orrs	r3, r2
 80026d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80026d4:	4a24      	ldr	r2, [pc, #144]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026d6:	69bb      	ldr	r3, [r7, #24]
 80026d8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80026da:	4b23      	ldr	r3, [pc, #140]	; (8002768 <HAL_GPIO_Init+0x304>)
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80026e0:	693b      	ldr	r3, [r7, #16]
 80026e2:	43db      	mvns	r3, r3
 80026e4:	69ba      	ldr	r2, [r7, #24]
 80026e6:	4013      	ands	r3, r2
 80026e8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80026ea:	683b      	ldr	r3, [r7, #0]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80026f2:	2b00      	cmp	r3, #0
 80026f4:	d003      	beq.n	80026fe <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80026f6:	69ba      	ldr	r2, [r7, #24]
 80026f8:	693b      	ldr	r3, [r7, #16]
 80026fa:	4313      	orrs	r3, r2
 80026fc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80026fe:	4a1a      	ldr	r2, [pc, #104]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002700:	69bb      	ldr	r3, [r7, #24]
 8002702:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002704:	4b18      	ldr	r3, [pc, #96]	; (8002768 <HAL_GPIO_Init+0x304>)
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800270a:	693b      	ldr	r3, [r7, #16]
 800270c:	43db      	mvns	r3, r3
 800270e:	69ba      	ldr	r2, [r7, #24]
 8002710:	4013      	ands	r3, r2
 8002712:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002714:	683b      	ldr	r3, [r7, #0]
 8002716:	685b      	ldr	r3, [r3, #4]
 8002718:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002720:	69ba      	ldr	r2, [r7, #24]
 8002722:	693b      	ldr	r3, [r7, #16]
 8002724:	4313      	orrs	r3, r2
 8002726:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002728:	4a0f      	ldr	r2, [pc, #60]	; (8002768 <HAL_GPIO_Init+0x304>)
 800272a:	69bb      	ldr	r3, [r7, #24]
 800272c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800272e:	69fb      	ldr	r3, [r7, #28]
 8002730:	3301      	adds	r3, #1
 8002732:	61fb      	str	r3, [r7, #28]
 8002734:	69fb      	ldr	r3, [r7, #28]
 8002736:	2b0f      	cmp	r3, #15
 8002738:	f67f aea2 	bls.w	8002480 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800273c:	bf00      	nop
 800273e:	bf00      	nop
 8002740:	3724      	adds	r7, #36	; 0x24
 8002742:	46bd      	mov	sp, r7
 8002744:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002748:	4770      	bx	lr
 800274a:	bf00      	nop
 800274c:	40023800 	.word	0x40023800
 8002750:	40013800 	.word	0x40013800
 8002754:	40020000 	.word	0x40020000
 8002758:	40020400 	.word	0x40020400
 800275c:	40020800 	.word	0x40020800
 8002760:	40020c00 	.word	0x40020c00
 8002764:	40021000 	.word	0x40021000
 8002768:	40013c00 	.word	0x40013c00

0800276c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800276c:	b480      	push	{r7}
 800276e:	b083      	sub	sp, #12
 8002770:	af00      	add	r7, sp, #0
 8002772:	6078      	str	r0, [r7, #4]
 8002774:	460b      	mov	r3, r1
 8002776:	807b      	strh	r3, [r7, #2]
 8002778:	4613      	mov	r3, r2
 800277a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800277c:	787b      	ldrb	r3, [r7, #1]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002782:	887a      	ldrh	r2, [r7, #2]
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002788:	e003      	b.n	8002792 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800278a:	887b      	ldrh	r3, [r7, #2]
 800278c:	041a      	lsls	r2, r3, #16
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	619a      	str	r2, [r3, #24]
}
 8002792:	bf00      	nop
 8002794:	370c      	adds	r7, #12
 8002796:	46bd      	mov	sp, r7
 8002798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800279c:	4770      	bx	lr
	...

080027a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027a0:	b580      	push	{r7, lr}
 80027a2:	b086      	sub	sp, #24
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2b00      	cmp	r3, #0
 80027ac:	d101      	bne.n	80027b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027ae:	2301      	movs	r3, #1
 80027b0:	e267      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	f003 0301 	and.w	r3, r3, #1
 80027ba:	2b00      	cmp	r3, #0
 80027bc:	d075      	beq.n	80028aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027be:	4b88      	ldr	r3, [pc, #544]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027c0:	689b      	ldr	r3, [r3, #8]
 80027c2:	f003 030c 	and.w	r3, r3, #12
 80027c6:	2b04      	cmp	r3, #4
 80027c8:	d00c      	beq.n	80027e4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027ca:	4b85      	ldr	r3, [pc, #532]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027cc:	689b      	ldr	r3, [r3, #8]
 80027ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027d2:	2b08      	cmp	r3, #8
 80027d4:	d112      	bne.n	80027fc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80027d6:	4b82      	ldr	r3, [pc, #520]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80027de:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80027e2:	d10b      	bne.n	80027fc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80027e4:	4b7e      	ldr	r3, [pc, #504]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d05b      	beq.n	80028a8 <HAL_RCC_OscConfig+0x108>
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	685b      	ldr	r3, [r3, #4]
 80027f4:	2b00      	cmp	r3, #0
 80027f6:	d157      	bne.n	80028a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80027f8:	2301      	movs	r3, #1
 80027fa:	e242      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002804:	d106      	bne.n	8002814 <HAL_RCC_OscConfig+0x74>
 8002806:	4b76      	ldr	r3, [pc, #472]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	4a75      	ldr	r2, [pc, #468]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800280c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002810:	6013      	str	r3, [r2, #0]
 8002812:	e01d      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	685b      	ldr	r3, [r3, #4]
 8002818:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800281c:	d10c      	bne.n	8002838 <HAL_RCC_OscConfig+0x98>
 800281e:	4b70      	ldr	r3, [pc, #448]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4a6f      	ldr	r2, [pc, #444]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002824:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002828:	6013      	str	r3, [r2, #0]
 800282a:	4b6d      	ldr	r3, [pc, #436]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4a6c      	ldr	r2, [pc, #432]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002830:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002834:	6013      	str	r3, [r2, #0]
 8002836:	e00b      	b.n	8002850 <HAL_RCC_OscConfig+0xb0>
 8002838:	4b69      	ldr	r3, [pc, #420]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	4a68      	ldr	r2, [pc, #416]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800283e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002842:	6013      	str	r3, [r2, #0]
 8002844:	4b66      	ldr	r3, [pc, #408]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a65      	ldr	r2, [pc, #404]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800284a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800284e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	685b      	ldr	r3, [r3, #4]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d013      	beq.n	8002880 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002858:	f7ff f99a 	bl	8001b90 <HAL_GetTick>
 800285c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800285e:	e008      	b.n	8002872 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002860:	f7ff f996 	bl	8001b90 <HAL_GetTick>
 8002864:	4602      	mov	r2, r0
 8002866:	693b      	ldr	r3, [r7, #16]
 8002868:	1ad3      	subs	r3, r2, r3
 800286a:	2b64      	cmp	r3, #100	; 0x64
 800286c:	d901      	bls.n	8002872 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800286e:	2303      	movs	r3, #3
 8002870:	e207      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002872:	4b5b      	ldr	r3, [pc, #364]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800287a:	2b00      	cmp	r3, #0
 800287c:	d0f0      	beq.n	8002860 <HAL_RCC_OscConfig+0xc0>
 800287e:	e014      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002880:	f7ff f986 	bl	8001b90 <HAL_GetTick>
 8002884:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002886:	e008      	b.n	800289a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002888:	f7ff f982 	bl	8001b90 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	693b      	ldr	r3, [r7, #16]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	2b64      	cmp	r3, #100	; 0x64
 8002894:	d901      	bls.n	800289a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002896:	2303      	movs	r3, #3
 8002898:	e1f3      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800289a:	4b51      	ldr	r3, [pc, #324]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d1f0      	bne.n	8002888 <HAL_RCC_OscConfig+0xe8>
 80028a6:	e000      	b.n	80028aa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d063      	beq.n	800297e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028b6:	4b4a      	ldr	r3, [pc, #296]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028b8:	689b      	ldr	r3, [r3, #8]
 80028ba:	f003 030c 	and.w	r3, r3, #12
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d00b      	beq.n	80028da <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028c2:	4b47      	ldr	r3, [pc, #284]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028c4:	689b      	ldr	r3, [r3, #8]
 80028c6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ca:	2b08      	cmp	r3, #8
 80028cc:	d11c      	bne.n	8002908 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028ce:	4b44      	ldr	r3, [pc, #272]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028d0:	685b      	ldr	r3, [r3, #4]
 80028d2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80028d6:	2b00      	cmp	r3, #0
 80028d8:	d116      	bne.n	8002908 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028da:	4b41      	ldr	r3, [pc, #260]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	f003 0302 	and.w	r3, r3, #2
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d005      	beq.n	80028f2 <HAL_RCC_OscConfig+0x152>
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	68db      	ldr	r3, [r3, #12]
 80028ea:	2b01      	cmp	r3, #1
 80028ec:	d001      	beq.n	80028f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e1c7      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028f2:	4b3b      	ldr	r3, [pc, #236]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	691b      	ldr	r3, [r3, #16]
 80028fe:	00db      	lsls	r3, r3, #3
 8002900:	4937      	ldr	r1, [pc, #220]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002902:	4313      	orrs	r3, r2
 8002904:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002906:	e03a      	b.n	800297e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	2b00      	cmp	r3, #0
 800290e:	d020      	beq.n	8002952 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002910:	4b34      	ldr	r3, [pc, #208]	; (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002912:	2201      	movs	r2, #1
 8002914:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002916:	f7ff f93b 	bl	8001b90 <HAL_GetTick>
 800291a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800291c:	e008      	b.n	8002930 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800291e:	f7ff f937 	bl	8001b90 <HAL_GetTick>
 8002922:	4602      	mov	r2, r0
 8002924:	693b      	ldr	r3, [r7, #16]
 8002926:	1ad3      	subs	r3, r2, r3
 8002928:	2b02      	cmp	r3, #2
 800292a:	d901      	bls.n	8002930 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800292c:	2303      	movs	r3, #3
 800292e:	e1a8      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002930:	4b2b      	ldr	r3, [pc, #172]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f003 0302 	and.w	r3, r3, #2
 8002938:	2b00      	cmp	r3, #0
 800293a:	d0f0      	beq.n	800291e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800293c:	4b28      	ldr	r3, [pc, #160]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800293e:	681b      	ldr	r3, [r3, #0]
 8002940:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	691b      	ldr	r3, [r3, #16]
 8002948:	00db      	lsls	r3, r3, #3
 800294a:	4925      	ldr	r1, [pc, #148]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 800294c:	4313      	orrs	r3, r2
 800294e:	600b      	str	r3, [r1, #0]
 8002950:	e015      	b.n	800297e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002952:	4b24      	ldr	r3, [pc, #144]	; (80029e4 <HAL_RCC_OscConfig+0x244>)
 8002954:	2200      	movs	r2, #0
 8002956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002958:	f7ff f91a 	bl	8001b90 <HAL_GetTick>
 800295c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800295e:	e008      	b.n	8002972 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002960:	f7ff f916 	bl	8001b90 <HAL_GetTick>
 8002964:	4602      	mov	r2, r0
 8002966:	693b      	ldr	r3, [r7, #16]
 8002968:	1ad3      	subs	r3, r2, r3
 800296a:	2b02      	cmp	r3, #2
 800296c:	d901      	bls.n	8002972 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800296e:	2303      	movs	r3, #3
 8002970:	e187      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002972:	4b1b      	ldr	r3, [pc, #108]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	f003 0302 	and.w	r3, r3, #2
 800297a:	2b00      	cmp	r3, #0
 800297c:	d1f0      	bne.n	8002960 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	f003 0308 	and.w	r3, r3, #8
 8002986:	2b00      	cmp	r3, #0
 8002988:	d036      	beq.n	80029f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	695b      	ldr	r3, [r3, #20]
 800298e:	2b00      	cmp	r3, #0
 8002990:	d016      	beq.n	80029c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002992:	4b15      	ldr	r3, [pc, #84]	; (80029e8 <HAL_RCC_OscConfig+0x248>)
 8002994:	2201      	movs	r2, #1
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002998:	f7ff f8fa 	bl	8001b90 <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800299e:	e008      	b.n	80029b2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029a0:	f7ff f8f6 	bl	8001b90 <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d901      	bls.n	80029b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e167      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029b2:	4b0b      	ldr	r3, [pc, #44]	; (80029e0 <HAL_RCC_OscConfig+0x240>)
 80029b4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029b6:	f003 0302 	and.w	r3, r3, #2
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d0f0      	beq.n	80029a0 <HAL_RCC_OscConfig+0x200>
 80029be:	e01b      	b.n	80029f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029c0:	4b09      	ldr	r3, [pc, #36]	; (80029e8 <HAL_RCC_OscConfig+0x248>)
 80029c2:	2200      	movs	r2, #0
 80029c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029c6:	f7ff f8e3 	bl	8001b90 <HAL_GetTick>
 80029ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029cc:	e00e      	b.n	80029ec <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029ce:	f7ff f8df 	bl	8001b90 <HAL_GetTick>
 80029d2:	4602      	mov	r2, r0
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	1ad3      	subs	r3, r2, r3
 80029d8:	2b02      	cmp	r3, #2
 80029da:	d907      	bls.n	80029ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80029dc:	2303      	movs	r3, #3
 80029de:	e150      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
 80029e0:	40023800 	.word	0x40023800
 80029e4:	42470000 	.word	0x42470000
 80029e8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029ec:	4b88      	ldr	r3, [pc, #544]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 80029ee:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029f0:	f003 0302 	and.w	r3, r3, #2
 80029f4:	2b00      	cmp	r3, #0
 80029f6:	d1ea      	bne.n	80029ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029f8:	687b      	ldr	r3, [r7, #4]
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	f003 0304 	and.w	r3, r3, #4
 8002a00:	2b00      	cmp	r3, #0
 8002a02:	f000 8097 	beq.w	8002b34 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a06:	2300      	movs	r3, #0
 8002a08:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a0a:	4b81      	ldr	r3, [pc, #516]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a12:	2b00      	cmp	r3, #0
 8002a14:	d10f      	bne.n	8002a36 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a16:	2300      	movs	r3, #0
 8002a18:	60bb      	str	r3, [r7, #8]
 8002a1a:	4b7d      	ldr	r3, [pc, #500]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1e:	4a7c      	ldr	r2, [pc, #496]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a20:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a24:	6413      	str	r3, [r2, #64]	; 0x40
 8002a26:	4b7a      	ldr	r3, [pc, #488]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a2e:	60bb      	str	r3, [r7, #8]
 8002a30:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a32:	2301      	movs	r3, #1
 8002a34:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a36:	4b77      	ldr	r3, [pc, #476]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d118      	bne.n	8002a74 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a42:	4b74      	ldr	r3, [pc, #464]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a44:	681b      	ldr	r3, [r3, #0]
 8002a46:	4a73      	ldr	r2, [pc, #460]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a48:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a4c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a4e:	f7ff f89f 	bl	8001b90 <HAL_GetTick>
 8002a52:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a54:	e008      	b.n	8002a68 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a56:	f7ff f89b 	bl	8001b90 <HAL_GetTick>
 8002a5a:	4602      	mov	r2, r0
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	1ad3      	subs	r3, r2, r3
 8002a60:	2b02      	cmp	r3, #2
 8002a62:	d901      	bls.n	8002a68 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a64:	2303      	movs	r3, #3
 8002a66:	e10c      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a68:	4b6a      	ldr	r3, [pc, #424]	; (8002c14 <HAL_RCC_OscConfig+0x474>)
 8002a6a:	681b      	ldr	r3, [r3, #0]
 8002a6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d0f0      	beq.n	8002a56 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	689b      	ldr	r3, [r3, #8]
 8002a78:	2b01      	cmp	r3, #1
 8002a7a:	d106      	bne.n	8002a8a <HAL_RCC_OscConfig+0x2ea>
 8002a7c:	4b64      	ldr	r3, [pc, #400]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a80:	4a63      	ldr	r2, [pc, #396]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a82:	f043 0301 	orr.w	r3, r3, #1
 8002a86:	6713      	str	r3, [r2, #112]	; 0x70
 8002a88:	e01c      	b.n	8002ac4 <HAL_RCC_OscConfig+0x324>
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	689b      	ldr	r3, [r3, #8]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d10c      	bne.n	8002aac <HAL_RCC_OscConfig+0x30c>
 8002a92:	4b5f      	ldr	r3, [pc, #380]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4a5e      	ldr	r2, [pc, #376]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002a98:	f043 0304 	orr.w	r3, r3, #4
 8002a9c:	6713      	str	r3, [r2, #112]	; 0x70
 8002a9e:	4b5c      	ldr	r3, [pc, #368]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa2:	4a5b      	ldr	r2, [pc, #364]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002aaa:	e00b      	b.n	8002ac4 <HAL_RCC_OscConfig+0x324>
 8002aac:	4b58      	ldr	r3, [pc, #352]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab0:	4a57      	ldr	r2, [pc, #348]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002ab2:	f023 0301 	bic.w	r3, r3, #1
 8002ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8002ab8:	4b55      	ldr	r3, [pc, #340]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002abc:	4a54      	ldr	r2, [pc, #336]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002abe:	f023 0304 	bic.w	r3, r3, #4
 8002ac2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	689b      	ldr	r3, [r3, #8]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	d015      	beq.n	8002af8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002acc:	f7ff f860 	bl	8001b90 <HAL_GetTick>
 8002ad0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ad2:	e00a      	b.n	8002aea <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002ad4:	f7ff f85c 	bl	8001b90 <HAL_GetTick>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	693b      	ldr	r3, [r7, #16]
 8002adc:	1ad3      	subs	r3, r2, r3
 8002ade:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ae2:	4293      	cmp	r3, r2
 8002ae4:	d901      	bls.n	8002aea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002ae6:	2303      	movs	r3, #3
 8002ae8:	e0cb      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002aea:	4b49      	ldr	r3, [pc, #292]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002aec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aee:	f003 0302 	and.w	r3, r3, #2
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d0ee      	beq.n	8002ad4 <HAL_RCC_OscConfig+0x334>
 8002af6:	e014      	b.n	8002b22 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002af8:	f7ff f84a 	bl	8001b90 <HAL_GetTick>
 8002afc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002afe:	e00a      	b.n	8002b16 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b00:	f7ff f846 	bl	8001b90 <HAL_GetTick>
 8002b04:	4602      	mov	r2, r0
 8002b06:	693b      	ldr	r3, [r7, #16]
 8002b08:	1ad3      	subs	r3, r2, r3
 8002b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d901      	bls.n	8002b16 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b12:	2303      	movs	r3, #3
 8002b14:	e0b5      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b16:	4b3e      	ldr	r3, [pc, #248]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b1a:	f003 0302 	and.w	r3, r3, #2
 8002b1e:	2b00      	cmp	r3, #0
 8002b20:	d1ee      	bne.n	8002b00 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b22:	7dfb      	ldrb	r3, [r7, #23]
 8002b24:	2b01      	cmp	r3, #1
 8002b26:	d105      	bne.n	8002b34 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b28:	4b39      	ldr	r3, [pc, #228]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2c:	4a38      	ldr	r2, [pc, #224]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b2e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b32:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	699b      	ldr	r3, [r3, #24]
 8002b38:	2b00      	cmp	r3, #0
 8002b3a:	f000 80a1 	beq.w	8002c80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b3e:	4b34      	ldr	r3, [pc, #208]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b40:	689b      	ldr	r3, [r3, #8]
 8002b42:	f003 030c 	and.w	r3, r3, #12
 8002b46:	2b08      	cmp	r3, #8
 8002b48:	d05c      	beq.n	8002c04 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	699b      	ldr	r3, [r3, #24]
 8002b4e:	2b02      	cmp	r3, #2
 8002b50:	d141      	bne.n	8002bd6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b52:	4b31      	ldr	r3, [pc, #196]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002b54:	2200      	movs	r2, #0
 8002b56:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b58:	f7ff f81a 	bl	8001b90 <HAL_GetTick>
 8002b5c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b5e:	e008      	b.n	8002b72 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b60:	f7ff f816 	bl	8001b90 <HAL_GetTick>
 8002b64:	4602      	mov	r2, r0
 8002b66:	693b      	ldr	r3, [r7, #16]
 8002b68:	1ad3      	subs	r3, r2, r3
 8002b6a:	2b02      	cmp	r3, #2
 8002b6c:	d901      	bls.n	8002b72 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002b6e:	2303      	movs	r3, #3
 8002b70:	e087      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b72:	4b27      	ldr	r3, [pc, #156]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d1f0      	bne.n	8002b60 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	69da      	ldr	r2, [r3, #28]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	6a1b      	ldr	r3, [r3, #32]
 8002b86:	431a      	orrs	r2, r3
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b8c:	019b      	lsls	r3, r3, #6
 8002b8e:	431a      	orrs	r2, r3
 8002b90:	687b      	ldr	r3, [r7, #4]
 8002b92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b94:	085b      	lsrs	r3, r3, #1
 8002b96:	3b01      	subs	r3, #1
 8002b98:	041b      	lsls	r3, r3, #16
 8002b9a:	431a      	orrs	r2, r3
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002ba0:	061b      	lsls	r3, r3, #24
 8002ba2:	491b      	ldr	r1, [pc, #108]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002ba4:	4313      	orrs	r3, r2
 8002ba6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba8:	4b1b      	ldr	r3, [pc, #108]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002baa:	2201      	movs	r2, #1
 8002bac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bae:	f7fe ffef 	bl	8001b90 <HAL_GetTick>
 8002bb2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bb4:	e008      	b.n	8002bc8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bb6:	f7fe ffeb 	bl	8001b90 <HAL_GetTick>
 8002bba:	4602      	mov	r2, r0
 8002bbc:	693b      	ldr	r3, [r7, #16]
 8002bbe:	1ad3      	subs	r3, r2, r3
 8002bc0:	2b02      	cmp	r3, #2
 8002bc2:	d901      	bls.n	8002bc8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bc4:	2303      	movs	r3, #3
 8002bc6:	e05c      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bc8:	4b11      	ldr	r3, [pc, #68]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d0f0      	beq.n	8002bb6 <HAL_RCC_OscConfig+0x416>
 8002bd4:	e054      	b.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd6:	4b10      	ldr	r3, [pc, #64]	; (8002c18 <HAL_RCC_OscConfig+0x478>)
 8002bd8:	2200      	movs	r2, #0
 8002bda:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bdc:	f7fe ffd8 	bl	8001b90 <HAL_GetTick>
 8002be0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002be2:	e008      	b.n	8002bf6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002be4:	f7fe ffd4 	bl	8001b90 <HAL_GetTick>
 8002be8:	4602      	mov	r2, r0
 8002bea:	693b      	ldr	r3, [r7, #16]
 8002bec:	1ad3      	subs	r3, r2, r3
 8002bee:	2b02      	cmp	r3, #2
 8002bf0:	d901      	bls.n	8002bf6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002bf2:	2303      	movs	r3, #3
 8002bf4:	e045      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002bf6:	4b06      	ldr	r3, [pc, #24]	; (8002c10 <HAL_RCC_OscConfig+0x470>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d1f0      	bne.n	8002be4 <HAL_RCC_OscConfig+0x444>
 8002c02:	e03d      	b.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	2b01      	cmp	r3, #1
 8002c0a:	d107      	bne.n	8002c1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c0c:	2301      	movs	r3, #1
 8002c0e:	e038      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
 8002c10:	40023800 	.word	0x40023800
 8002c14:	40007000 	.word	0x40007000
 8002c18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c1c:	4b1b      	ldr	r3, [pc, #108]	; (8002c8c <HAL_RCC_OscConfig+0x4ec>)
 8002c1e:	685b      	ldr	r3, [r3, #4]
 8002c20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	699b      	ldr	r3, [r3, #24]
 8002c26:	2b01      	cmp	r3, #1
 8002c28:	d028      	beq.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	68fb      	ldr	r3, [r7, #12]
 8002c2c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c34:	429a      	cmp	r2, r3
 8002c36:	d121      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c38:	68fb      	ldr	r3, [r7, #12]
 8002c3a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c42:	429a      	cmp	r2, r3
 8002c44:	d11a      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c4c:	4013      	ands	r3, r2
 8002c4e:	687a      	ldr	r2, [r7, #4]
 8002c50:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c54:	4293      	cmp	r3, r2
 8002c56:	d111      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c62:	085b      	lsrs	r3, r3, #1
 8002c64:	3b01      	subs	r3, #1
 8002c66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c68:	429a      	cmp	r2, r3
 8002c6a:	d107      	bne.n	8002c7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002c76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c78:	429a      	cmp	r2, r3
 8002c7a:	d001      	beq.n	8002c80 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002c7c:	2301      	movs	r3, #1
 8002c7e:	e000      	b.n	8002c82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002c80:	2300      	movs	r3, #0
}
 8002c82:	4618      	mov	r0, r3
 8002c84:	3718      	adds	r7, #24
 8002c86:	46bd      	mov	sp, r7
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	40023800 	.word	0x40023800

08002c90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c90:	b580      	push	{r7, lr}
 8002c92:	b084      	sub	sp, #16
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
 8002c98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	d101      	bne.n	8002ca4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002ca0:	2301      	movs	r3, #1
 8002ca2:	e0cc      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002ca4:	4b68      	ldr	r3, [pc, #416]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f003 0307 	and.w	r3, r3, #7
 8002cac:	683a      	ldr	r2, [r7, #0]
 8002cae:	429a      	cmp	r2, r3
 8002cb0:	d90c      	bls.n	8002ccc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cb2:	4b65      	ldr	r3, [pc, #404]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cb4:	683a      	ldr	r2, [r7, #0]
 8002cb6:	b2d2      	uxtb	r2, r2
 8002cb8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cba:	4b63      	ldr	r3, [pc, #396]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0307 	and.w	r3, r3, #7
 8002cc2:	683a      	ldr	r2, [r7, #0]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	d001      	beq.n	8002ccc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002cc8:	2301      	movs	r3, #1
 8002cca:	e0b8      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f003 0302 	and.w	r3, r3, #2
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d020      	beq.n	8002d1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	f003 0304 	and.w	r3, r3, #4
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d005      	beq.n	8002cf0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ce4:	4b59      	ldr	r3, [pc, #356]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4a58      	ldr	r2, [pc, #352]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cea:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002cee:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	681b      	ldr	r3, [r3, #0]
 8002cf4:	f003 0308 	and.w	r3, r3, #8
 8002cf8:	2b00      	cmp	r3, #0
 8002cfa:	d005      	beq.n	8002d08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cfc:	4b53      	ldr	r3, [pc, #332]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002cfe:	689b      	ldr	r3, [r3, #8]
 8002d00:	4a52      	ldr	r2, [pc, #328]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d02:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d08:	4b50      	ldr	r3, [pc, #320]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	689b      	ldr	r3, [r3, #8]
 8002d14:	494d      	ldr	r1, [pc, #308]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d16:	4313      	orrs	r3, r2
 8002d18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	f003 0301 	and.w	r3, r3, #1
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d044      	beq.n	8002db0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d107      	bne.n	8002d3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d2e:	4b47      	ldr	r3, [pc, #284]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d36:	2b00      	cmp	r3, #0
 8002d38:	d119      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d3a:	2301      	movs	r3, #1
 8002d3c:	e07f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b02      	cmp	r3, #2
 8002d44:	d003      	beq.n	8002d4e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d4a:	2b03      	cmp	r3, #3
 8002d4c:	d107      	bne.n	8002d5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d4e:	4b3f      	ldr	r3, [pc, #252]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d109      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d5a:	2301      	movs	r3, #1
 8002d5c:	e06f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d5e:	4b3b      	ldr	r3, [pc, #236]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d60:	681b      	ldr	r3, [r3, #0]
 8002d62:	f003 0302 	and.w	r3, r3, #2
 8002d66:	2b00      	cmp	r3, #0
 8002d68:	d101      	bne.n	8002d6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d6a:	2301      	movs	r3, #1
 8002d6c:	e067      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d6e:	4b37      	ldr	r3, [pc, #220]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d70:	689b      	ldr	r3, [r3, #8]
 8002d72:	f023 0203 	bic.w	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	4934      	ldr	r1, [pc, #208]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002d7c:	4313      	orrs	r3, r2
 8002d7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d80:	f7fe ff06 	bl	8001b90 <HAL_GetTick>
 8002d84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d86:	e00a      	b.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d88:	f7fe ff02 	bl	8001b90 <HAL_GetTick>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	1ad3      	subs	r3, r2, r3
 8002d92:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e04f      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d9e:	4b2b      	ldr	r3, [pc, #172]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002da0:	689b      	ldr	r3, [r3, #8]
 8002da2:	f003 020c 	and.w	r2, r3, #12
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	685b      	ldr	r3, [r3, #4]
 8002daa:	009b      	lsls	r3, r3, #2
 8002dac:	429a      	cmp	r2, r3
 8002dae:	d1eb      	bne.n	8002d88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002db0:	4b25      	ldr	r3, [pc, #148]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f003 0307 	and.w	r3, r3, #7
 8002db8:	683a      	ldr	r2, [r7, #0]
 8002dba:	429a      	cmp	r2, r3
 8002dbc:	d20c      	bcs.n	8002dd8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002dbe:	4b22      	ldr	r3, [pc, #136]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc0:	683a      	ldr	r2, [r7, #0]
 8002dc2:	b2d2      	uxtb	r2, r2
 8002dc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dc6:	4b20      	ldr	r3, [pc, #128]	; (8002e48 <HAL_RCC_ClockConfig+0x1b8>)
 8002dc8:	681b      	ldr	r3, [r3, #0]
 8002dca:	f003 0307 	and.w	r3, r3, #7
 8002dce:	683a      	ldr	r2, [r7, #0]
 8002dd0:	429a      	cmp	r2, r3
 8002dd2:	d001      	beq.n	8002dd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002dd4:	2301      	movs	r3, #1
 8002dd6:	e032      	b.n	8002e3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0304 	and.w	r3, r3, #4
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d008      	beq.n	8002df6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002de4:	4b19      	ldr	r3, [pc, #100]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002de6:	689b      	ldr	r3, [r3, #8]
 8002de8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	68db      	ldr	r3, [r3, #12]
 8002df0:	4916      	ldr	r1, [pc, #88]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002df2:	4313      	orrs	r3, r2
 8002df4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f003 0308 	and.w	r3, r3, #8
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d009      	beq.n	8002e16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e02:	4b12      	ldr	r3, [pc, #72]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e04:	689b      	ldr	r3, [r3, #8]
 8002e06:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	691b      	ldr	r3, [r3, #16]
 8002e0e:	00db      	lsls	r3, r3, #3
 8002e10:	490e      	ldr	r1, [pc, #56]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e12:	4313      	orrs	r3, r2
 8002e14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e16:	f000 f821 	bl	8002e5c <HAL_RCC_GetSysClockFreq>
 8002e1a:	4602      	mov	r2, r0
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	091b      	lsrs	r3, r3, #4
 8002e22:	f003 030f 	and.w	r3, r3, #15
 8002e26:	490a      	ldr	r1, [pc, #40]	; (8002e50 <HAL_RCC_ClockConfig+0x1c0>)
 8002e28:	5ccb      	ldrb	r3, [r1, r3]
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	4a09      	ldr	r2, [pc, #36]	; (8002e54 <HAL_RCC_ClockConfig+0x1c4>)
 8002e30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e32:	4b09      	ldr	r3, [pc, #36]	; (8002e58 <HAL_RCC_ClockConfig+0x1c8>)
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	4618      	mov	r0, r3
 8002e38:	f7fe f976 	bl	8001128 <HAL_InitTick>

  return HAL_OK;
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3710      	adds	r7, #16
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40023c00 	.word	0x40023c00
 8002e4c:	40023800 	.word	0x40023800
 8002e50:	08008434 	.word	0x08008434
 8002e54:	20000004 	.word	0x20000004
 8002e58:	20000008 	.word	0x20000008

08002e5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e60:	b094      	sub	sp, #80	; 0x50
 8002e62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e64:	2300      	movs	r3, #0
 8002e66:	647b      	str	r3, [r7, #68]	; 0x44
 8002e68:	2300      	movs	r3, #0
 8002e6a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002e74:	4b79      	ldr	r3, [pc, #484]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e76:	689b      	ldr	r3, [r3, #8]
 8002e78:	f003 030c 	and.w	r3, r3, #12
 8002e7c:	2b08      	cmp	r3, #8
 8002e7e:	d00d      	beq.n	8002e9c <HAL_RCC_GetSysClockFreq+0x40>
 8002e80:	2b08      	cmp	r3, #8
 8002e82:	f200 80e1 	bhi.w	8003048 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002e86:	2b00      	cmp	r3, #0
 8002e88:	d002      	beq.n	8002e90 <HAL_RCC_GetSysClockFreq+0x34>
 8002e8a:	2b04      	cmp	r3, #4
 8002e8c:	d003      	beq.n	8002e96 <HAL_RCC_GetSysClockFreq+0x3a>
 8002e8e:	e0db      	b.n	8003048 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002e90:	4b73      	ldr	r3, [pc, #460]	; (8003060 <HAL_RCC_GetSysClockFreq+0x204>)
 8002e92:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002e94:	e0db      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002e96:	4b73      	ldr	r3, [pc, #460]	; (8003064 <HAL_RCC_GetSysClockFreq+0x208>)
 8002e98:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002e9a:	e0d8      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002e9c:	4b6f      	ldr	r3, [pc, #444]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002e9e:	685b      	ldr	r3, [r3, #4]
 8002ea0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002ea4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ea6:	4b6d      	ldr	r3, [pc, #436]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ea8:	685b      	ldr	r3, [r3, #4]
 8002eaa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d063      	beq.n	8002f7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eb2:	4b6a      	ldr	r3, [pc, #424]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	099b      	lsrs	r3, r3, #6
 8002eb8:	2200      	movs	r2, #0
 8002eba:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ebc:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ebe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ec0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002ec4:	633b      	str	r3, [r7, #48]	; 0x30
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	637b      	str	r3, [r7, #52]	; 0x34
 8002eca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002ece:	4622      	mov	r2, r4
 8002ed0:	462b      	mov	r3, r5
 8002ed2:	f04f 0000 	mov.w	r0, #0
 8002ed6:	f04f 0100 	mov.w	r1, #0
 8002eda:	0159      	lsls	r1, r3, #5
 8002edc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002ee0:	0150      	lsls	r0, r2, #5
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	4621      	mov	r1, r4
 8002ee8:	1a51      	subs	r1, r2, r1
 8002eea:	6139      	str	r1, [r7, #16]
 8002eec:	4629      	mov	r1, r5
 8002eee:	eb63 0301 	sbc.w	r3, r3, r1
 8002ef2:	617b      	str	r3, [r7, #20]
 8002ef4:	f04f 0200 	mov.w	r2, #0
 8002ef8:	f04f 0300 	mov.w	r3, #0
 8002efc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f00:	4659      	mov	r1, fp
 8002f02:	018b      	lsls	r3, r1, #6
 8002f04:	4651      	mov	r1, sl
 8002f06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f0a:	4651      	mov	r1, sl
 8002f0c:	018a      	lsls	r2, r1, #6
 8002f0e:	4651      	mov	r1, sl
 8002f10:	ebb2 0801 	subs.w	r8, r2, r1
 8002f14:	4659      	mov	r1, fp
 8002f16:	eb63 0901 	sbc.w	r9, r3, r1
 8002f1a:	f04f 0200 	mov.w	r2, #0
 8002f1e:	f04f 0300 	mov.w	r3, #0
 8002f22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f2e:	4690      	mov	r8, r2
 8002f30:	4699      	mov	r9, r3
 8002f32:	4623      	mov	r3, r4
 8002f34:	eb18 0303 	adds.w	r3, r8, r3
 8002f38:	60bb      	str	r3, [r7, #8]
 8002f3a:	462b      	mov	r3, r5
 8002f3c:	eb49 0303 	adc.w	r3, r9, r3
 8002f40:	60fb      	str	r3, [r7, #12]
 8002f42:	f04f 0200 	mov.w	r2, #0
 8002f46:	f04f 0300 	mov.w	r3, #0
 8002f4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f4e:	4629      	mov	r1, r5
 8002f50:	024b      	lsls	r3, r1, #9
 8002f52:	4621      	mov	r1, r4
 8002f54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f58:	4621      	mov	r1, r4
 8002f5a:	024a      	lsls	r2, r1, #9
 8002f5c:	4610      	mov	r0, r2
 8002f5e:	4619      	mov	r1, r3
 8002f60:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f62:	2200      	movs	r2, #0
 8002f64:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f66:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002f68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002f6c:	f7fd f938 	bl	80001e0 <__aeabi_uldivmod>
 8002f70:	4602      	mov	r2, r0
 8002f72:	460b      	mov	r3, r1
 8002f74:	4613      	mov	r3, r2
 8002f76:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002f78:	e058      	b.n	800302c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002f7a:	4b38      	ldr	r3, [pc, #224]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 8002f7c:	685b      	ldr	r3, [r3, #4]
 8002f7e:	099b      	lsrs	r3, r3, #6
 8002f80:	2200      	movs	r2, #0
 8002f82:	4618      	mov	r0, r3
 8002f84:	4611      	mov	r1, r2
 8002f86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002f8a:	623b      	str	r3, [r7, #32]
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	627b      	str	r3, [r7, #36]	; 0x24
 8002f90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002f94:	4642      	mov	r2, r8
 8002f96:	464b      	mov	r3, r9
 8002f98:	f04f 0000 	mov.w	r0, #0
 8002f9c:	f04f 0100 	mov.w	r1, #0
 8002fa0:	0159      	lsls	r1, r3, #5
 8002fa2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fa6:	0150      	lsls	r0, r2, #5
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4641      	mov	r1, r8
 8002fae:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fb2:	4649      	mov	r1, r9
 8002fb4:	eb63 0b01 	sbc.w	fp, r3, r1
 8002fb8:	f04f 0200 	mov.w	r2, #0
 8002fbc:	f04f 0300 	mov.w	r3, #0
 8002fc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002fc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002fc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002fcc:	ebb2 040a 	subs.w	r4, r2, sl
 8002fd0:	eb63 050b 	sbc.w	r5, r3, fp
 8002fd4:	f04f 0200 	mov.w	r2, #0
 8002fd8:	f04f 0300 	mov.w	r3, #0
 8002fdc:	00eb      	lsls	r3, r5, #3
 8002fde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002fe2:	00e2      	lsls	r2, r4, #3
 8002fe4:	4614      	mov	r4, r2
 8002fe6:	461d      	mov	r5, r3
 8002fe8:	4643      	mov	r3, r8
 8002fea:	18e3      	adds	r3, r4, r3
 8002fec:	603b      	str	r3, [r7, #0]
 8002fee:	464b      	mov	r3, r9
 8002ff0:	eb45 0303 	adc.w	r3, r5, r3
 8002ff4:	607b      	str	r3, [r7, #4]
 8002ff6:	f04f 0200 	mov.w	r2, #0
 8002ffa:	f04f 0300 	mov.w	r3, #0
 8002ffe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003002:	4629      	mov	r1, r5
 8003004:	028b      	lsls	r3, r1, #10
 8003006:	4621      	mov	r1, r4
 8003008:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800300c:	4621      	mov	r1, r4
 800300e:	028a      	lsls	r2, r1, #10
 8003010:	4610      	mov	r0, r2
 8003012:	4619      	mov	r1, r3
 8003014:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003016:	2200      	movs	r2, #0
 8003018:	61bb      	str	r3, [r7, #24]
 800301a:	61fa      	str	r2, [r7, #28]
 800301c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003020:	f7fd f8de 	bl	80001e0 <__aeabi_uldivmod>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4613      	mov	r3, r2
 800302a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800302c:	4b0b      	ldr	r3, [pc, #44]	; (800305c <HAL_RCC_GetSysClockFreq+0x200>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	0c1b      	lsrs	r3, r3, #16
 8003032:	f003 0303 	and.w	r3, r3, #3
 8003036:	3301      	adds	r3, #1
 8003038:	005b      	lsls	r3, r3, #1
 800303a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800303c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800303e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003040:	fbb2 f3f3 	udiv	r3, r2, r3
 8003044:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003046:	e002      	b.n	800304e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003048:	4b05      	ldr	r3, [pc, #20]	; (8003060 <HAL_RCC_GetSysClockFreq+0x204>)
 800304a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800304c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800304e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003050:	4618      	mov	r0, r3
 8003052:	3750      	adds	r7, #80	; 0x50
 8003054:	46bd      	mov	sp, r7
 8003056:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800305a:	bf00      	nop
 800305c:	40023800 	.word	0x40023800
 8003060:	00f42400 	.word	0x00f42400
 8003064:	007a1200 	.word	0x007a1200

08003068 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003068:	b480      	push	{r7}
 800306a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800306c:	4b03      	ldr	r3, [pc, #12]	; (800307c <HAL_RCC_GetHCLKFreq+0x14>)
 800306e:	681b      	ldr	r3, [r3, #0]
}
 8003070:	4618      	mov	r0, r3
 8003072:	46bd      	mov	sp, r7
 8003074:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003078:	4770      	bx	lr
 800307a:	bf00      	nop
 800307c:	20000004 	.word	0x20000004

08003080 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003080:	b580      	push	{r7, lr}
 8003082:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003084:	f7ff fff0 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 8003088:	4602      	mov	r2, r0
 800308a:	4b05      	ldr	r3, [pc, #20]	; (80030a0 <HAL_RCC_GetPCLK1Freq+0x20>)
 800308c:	689b      	ldr	r3, [r3, #8]
 800308e:	0a9b      	lsrs	r3, r3, #10
 8003090:	f003 0307 	and.w	r3, r3, #7
 8003094:	4903      	ldr	r1, [pc, #12]	; (80030a4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003096:	5ccb      	ldrb	r3, [r1, r3]
 8003098:	fa22 f303 	lsr.w	r3, r2, r3
}
 800309c:	4618      	mov	r0, r3
 800309e:	bd80      	pop	{r7, pc}
 80030a0:	40023800 	.word	0x40023800
 80030a4:	08008444 	.word	0x08008444

080030a8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030a8:	b580      	push	{r7, lr}
 80030aa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030ac:	f7ff ffdc 	bl	8003068 <HAL_RCC_GetHCLKFreq>
 80030b0:	4602      	mov	r2, r0
 80030b2:	4b05      	ldr	r3, [pc, #20]	; (80030c8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030b4:	689b      	ldr	r3, [r3, #8]
 80030b6:	0b5b      	lsrs	r3, r3, #13
 80030b8:	f003 0307 	and.w	r3, r3, #7
 80030bc:	4903      	ldr	r1, [pc, #12]	; (80030cc <HAL_RCC_GetPCLK2Freq+0x24>)
 80030be:	5ccb      	ldrb	r3, [r1, r3]
 80030c0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030c4:	4618      	mov	r0, r3
 80030c6:	bd80      	pop	{r7, pc}
 80030c8:	40023800 	.word	0x40023800
 80030cc:	08008444 	.word	0x08008444

080030d0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80030d0:	b480      	push	{r7}
 80030d2:	b083      	sub	sp, #12
 80030d4:	af00      	add	r7, sp, #0
 80030d6:	6078      	str	r0, [r7, #4]
 80030d8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	220f      	movs	r2, #15
 80030de:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80030e0:	4b12      	ldr	r3, [pc, #72]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030e2:	689b      	ldr	r3, [r3, #8]
 80030e4:	f003 0203 	and.w	r2, r3, #3
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80030ec:	4b0f      	ldr	r3, [pc, #60]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80030f8:	4b0c      	ldr	r3, [pc, #48]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 80030fa:	689b      	ldr	r3, [r3, #8]
 80030fc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003100:	687b      	ldr	r3, [r7, #4]
 8003102:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003104:	4b09      	ldr	r3, [pc, #36]	; (800312c <HAL_RCC_GetClockConfig+0x5c>)
 8003106:	689b      	ldr	r3, [r3, #8]
 8003108:	08db      	lsrs	r3, r3, #3
 800310a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003112:	4b07      	ldr	r3, [pc, #28]	; (8003130 <HAL_RCC_GetClockConfig+0x60>)
 8003114:	681b      	ldr	r3, [r3, #0]
 8003116:	f003 0207 	and.w	r2, r3, #7
 800311a:	683b      	ldr	r3, [r7, #0]
 800311c:	601a      	str	r2, [r3, #0]
}
 800311e:	bf00      	nop
 8003120:	370c      	adds	r7, #12
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40023800 	.word	0x40023800
 8003130:	40023c00 	.word	0x40023c00

08003134 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003134:	b580      	push	{r7, lr}
 8003136:	b082      	sub	sp, #8
 8003138:	af00      	add	r7, sp, #0
 800313a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	2b00      	cmp	r3, #0
 8003140:	d101      	bne.n	8003146 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003142:	2301      	movs	r3, #1
 8003144:	e041      	b.n	80031ca <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fe fa48 	bl	80015f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681a      	ldr	r2, [r3, #0]
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	3304      	adds	r3, #4
 8003170:	4619      	mov	r1, r3
 8003172:	4610      	mov	r0, r2
 8003174:	f000 fe80 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	2201      	movs	r2, #1
 800317c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	2201      	movs	r2, #1
 8003184:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003188:	687b      	ldr	r3, [r7, #4]
 800318a:	2201      	movs	r2, #1
 800318c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	2201      	movs	r2, #1
 8003194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	2201      	movs	r2, #1
 800319c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	2201      	movs	r2, #1
 80031a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	2201      	movs	r2, #1
 80031ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	2201      	movs	r2, #1
 80031b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	2201      	movs	r2, #1
 80031bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	2201      	movs	r2, #1
 80031c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031c8:	2300      	movs	r3, #0
}
 80031ca:	4618      	mov	r0, r3
 80031cc:	3708      	adds	r7, #8
 80031ce:	46bd      	mov	sp, r7
 80031d0:	bd80      	pop	{r7, pc}
	...

080031d4 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80031d4:	b480      	push	{r7}
 80031d6:	b085      	sub	sp, #20
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80031e2:	b2db      	uxtb	r3, r3
 80031e4:	2b01      	cmp	r3, #1
 80031e6:	d001      	beq.n	80031ec <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80031e8:	2301      	movs	r3, #1
 80031ea:	e03c      	b.n	8003266 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	2202      	movs	r2, #2
 80031f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	4a1e      	ldr	r2, [pc, #120]	; (8003274 <HAL_TIM_Base_Start+0xa0>)
 80031fa:	4293      	cmp	r3, r2
 80031fc:	d018      	beq.n	8003230 <HAL_TIM_Base_Start+0x5c>
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003206:	d013      	beq.n	8003230 <HAL_TIM_Base_Start+0x5c>
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	4a1a      	ldr	r2, [pc, #104]	; (8003278 <HAL_TIM_Base_Start+0xa4>)
 800320e:	4293      	cmp	r3, r2
 8003210:	d00e      	beq.n	8003230 <HAL_TIM_Base_Start+0x5c>
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	4a19      	ldr	r2, [pc, #100]	; (800327c <HAL_TIM_Base_Start+0xa8>)
 8003218:	4293      	cmp	r3, r2
 800321a:	d009      	beq.n	8003230 <HAL_TIM_Base_Start+0x5c>
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	4a17      	ldr	r2, [pc, #92]	; (8003280 <HAL_TIM_Base_Start+0xac>)
 8003222:	4293      	cmp	r3, r2
 8003224:	d004      	beq.n	8003230 <HAL_TIM_Base_Start+0x5c>
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4a16      	ldr	r2, [pc, #88]	; (8003284 <HAL_TIM_Base_Start+0xb0>)
 800322c:	4293      	cmp	r3, r2
 800322e:	d111      	bne.n	8003254 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	f003 0307 	and.w	r3, r3, #7
 800323a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2b06      	cmp	r3, #6
 8003240:	d010      	beq.n	8003264 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	681a      	ldr	r2, [r3, #0]
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f042 0201 	orr.w	r2, r2, #1
 8003250:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003252:	e007      	b.n	8003264 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	681a      	ldr	r2, [r3, #0]
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f042 0201 	orr.w	r2, r2, #1
 8003262:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003264:	2300      	movs	r3, #0
}
 8003266:	4618      	mov	r0, r3
 8003268:	3714      	adds	r7, #20
 800326a:	46bd      	mov	sp, r7
 800326c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003270:	4770      	bx	lr
 8003272:	bf00      	nop
 8003274:	40010000 	.word	0x40010000
 8003278:	40000400 	.word	0x40000400
 800327c:	40000800 	.word	0x40000800
 8003280:	40000c00 	.word	0x40000c00
 8003284:	40014000 	.word	0x40014000

08003288 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003288:	b480      	push	{r7}
 800328a:	b085      	sub	sp, #20
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003296:	b2db      	uxtb	r3, r3
 8003298:	2b01      	cmp	r3, #1
 800329a:	d001      	beq.n	80032a0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800329c:	2301      	movs	r3, #1
 800329e:	e044      	b.n	800332a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	2202      	movs	r2, #2
 80032a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	68da      	ldr	r2, [r3, #12]
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f042 0201 	orr.w	r2, r2, #1
 80032b6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	4a1e      	ldr	r2, [pc, #120]	; (8003338 <HAL_TIM_Base_Start_IT+0xb0>)
 80032be:	4293      	cmp	r3, r2
 80032c0:	d018      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032ca:	d013      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a1a      	ldr	r2, [pc, #104]	; (800333c <HAL_TIM_Base_Start_IT+0xb4>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d00e      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_TIM_Base_Start_IT+0xb8>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d009      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_TIM_Base_Start_IT+0xbc>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d004      	beq.n	80032f4 <HAL_TIM_Base_Start_IT+0x6c>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_TIM_Base_Start_IT+0xc0>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d111      	bne.n	8003318 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	689b      	ldr	r3, [r3, #8]
 80032fa:	f003 0307 	and.w	r3, r3, #7
 80032fe:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	2b06      	cmp	r3, #6
 8003304:	d010      	beq.n	8003328 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f042 0201 	orr.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003316:	e007      	b.n	8003328 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	681a      	ldr	r2, [r3, #0]
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	f042 0201 	orr.w	r2, r2, #1
 8003326:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003328:	2300      	movs	r3, #0
}
 800332a:	4618      	mov	r0, r3
 800332c:	3714      	adds	r7, #20
 800332e:	46bd      	mov	sp, r7
 8003330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003334:	4770      	bx	lr
 8003336:	bf00      	nop
 8003338:	40010000 	.word	0x40010000
 800333c:	40000400 	.word	0x40000400
 8003340:	40000800 	.word	0x40000800
 8003344:	40000c00 	.word	0x40000c00
 8003348:	40014000 	.word	0x40014000

0800334c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800334c:	b580      	push	{r7, lr}
 800334e:	b082      	sub	sp, #8
 8003350:	af00      	add	r7, sp, #0
 8003352:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2b00      	cmp	r3, #0
 8003358:	d101      	bne.n	800335e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800335a:	2301      	movs	r3, #1
 800335c:	e041      	b.n	80033e2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003364:	b2db      	uxtb	r3, r3
 8003366:	2b00      	cmp	r3, #0
 8003368:	d106      	bne.n	8003378 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	2200      	movs	r2, #0
 800336e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003372:	6878      	ldr	r0, [r7, #4]
 8003374:	f7fe fa1e 	bl	80017b4 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	2202      	movs	r2, #2
 800337c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681a      	ldr	r2, [r3, #0]
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	3304      	adds	r3, #4
 8003388:	4619      	mov	r1, r3
 800338a:	4610      	mov	r0, r2
 800338c:	f000 fd74 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	2201      	movs	r2, #1
 8003394:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	2201      	movs	r2, #1
 800339c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	2201      	movs	r2, #1
 80033a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	2201      	movs	r2, #1
 80033ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2201      	movs	r2, #1
 80033b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2201      	movs	r2, #1
 80033bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	2201      	movs	r2, #1
 80033c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	2201      	movs	r2, #1
 80033cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2201      	movs	r2, #1
 80033d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2201      	movs	r2, #1
 80033dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80033e0:	2300      	movs	r3, #0
}
 80033e2:	4618      	mov	r0, r3
 80033e4:	3708      	adds	r7, #8
 80033e6:	46bd      	mov	sp, r7
 80033e8:	bd80      	pop	{r7, pc}
	...

080033ec <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80033ec:	b580      	push	{r7, lr}
 80033ee:	b084      	sub	sp, #16
 80033f0:	af00      	add	r7, sp, #0
 80033f2:	6078      	str	r0, [r7, #4]
 80033f4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80033f6:	683b      	ldr	r3, [r7, #0]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d109      	bne.n	8003410 <HAL_TIM_PWM_Start+0x24>
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003402:	b2db      	uxtb	r3, r3
 8003404:	2b01      	cmp	r3, #1
 8003406:	bf14      	ite	ne
 8003408:	2301      	movne	r3, #1
 800340a:	2300      	moveq	r3, #0
 800340c:	b2db      	uxtb	r3, r3
 800340e:	e022      	b.n	8003456 <HAL_TIM_PWM_Start+0x6a>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	2b04      	cmp	r3, #4
 8003414:	d109      	bne.n	800342a <HAL_TIM_PWM_Start+0x3e>
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b01      	cmp	r3, #1
 8003420:	bf14      	ite	ne
 8003422:	2301      	movne	r3, #1
 8003424:	2300      	moveq	r3, #0
 8003426:	b2db      	uxtb	r3, r3
 8003428:	e015      	b.n	8003456 <HAL_TIM_PWM_Start+0x6a>
 800342a:	683b      	ldr	r3, [r7, #0]
 800342c:	2b08      	cmp	r3, #8
 800342e:	d109      	bne.n	8003444 <HAL_TIM_PWM_Start+0x58>
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003436:	b2db      	uxtb	r3, r3
 8003438:	2b01      	cmp	r3, #1
 800343a:	bf14      	ite	ne
 800343c:	2301      	movne	r3, #1
 800343e:	2300      	moveq	r3, #0
 8003440:	b2db      	uxtb	r3, r3
 8003442:	e008      	b.n	8003456 <HAL_TIM_PWM_Start+0x6a>
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800344a:	b2db      	uxtb	r3, r3
 800344c:	2b01      	cmp	r3, #1
 800344e:	bf14      	ite	ne
 8003450:	2301      	movne	r3, #1
 8003452:	2300      	moveq	r3, #0
 8003454:	b2db      	uxtb	r3, r3
 8003456:	2b00      	cmp	r3, #0
 8003458:	d001      	beq.n	800345e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e068      	b.n	8003530 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d104      	bne.n	800346e <HAL_TIM_PWM_Start+0x82>
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2202      	movs	r2, #2
 8003468:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800346c:	e013      	b.n	8003496 <HAL_TIM_PWM_Start+0xaa>
 800346e:	683b      	ldr	r3, [r7, #0]
 8003470:	2b04      	cmp	r3, #4
 8003472:	d104      	bne.n	800347e <HAL_TIM_PWM_Start+0x92>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	2202      	movs	r2, #2
 8003478:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800347c:	e00b      	b.n	8003496 <HAL_TIM_PWM_Start+0xaa>
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	2b08      	cmp	r3, #8
 8003482:	d104      	bne.n	800348e <HAL_TIM_PWM_Start+0xa2>
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2202      	movs	r2, #2
 8003488:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800348c:	e003      	b.n	8003496 <HAL_TIM_PWM_Start+0xaa>
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	2202      	movs	r2, #2
 8003492:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	2201      	movs	r2, #1
 800349c:	6839      	ldr	r1, [r7, #0]
 800349e:	4618      	mov	r0, r3
 80034a0:	f001 f8ba 	bl	8004618 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a23      	ldr	r2, [pc, #140]	; (8003538 <HAL_TIM_PWM_Start+0x14c>)
 80034aa:	4293      	cmp	r3, r2
 80034ac:	d107      	bne.n	80034be <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4a1d      	ldr	r2, [pc, #116]	; (8003538 <HAL_TIM_PWM_Start+0x14c>)
 80034c4:	4293      	cmp	r3, r2
 80034c6:	d018      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80034d0:	d013      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	4a19      	ldr	r2, [pc, #100]	; (800353c <HAL_TIM_PWM_Start+0x150>)
 80034d8:	4293      	cmp	r3, r2
 80034da:	d00e      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	4a17      	ldr	r2, [pc, #92]	; (8003540 <HAL_TIM_PWM_Start+0x154>)
 80034e2:	4293      	cmp	r3, r2
 80034e4:	d009      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	4a16      	ldr	r2, [pc, #88]	; (8003544 <HAL_TIM_PWM_Start+0x158>)
 80034ec:	4293      	cmp	r3, r2
 80034ee:	d004      	beq.n	80034fa <HAL_TIM_PWM_Start+0x10e>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	4a14      	ldr	r2, [pc, #80]	; (8003548 <HAL_TIM_PWM_Start+0x15c>)
 80034f6:	4293      	cmp	r3, r2
 80034f8:	d111      	bne.n	800351e <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	689b      	ldr	r3, [r3, #8]
 8003500:	f003 0307 	and.w	r3, r3, #7
 8003504:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	2b06      	cmp	r3, #6
 800350a:	d010      	beq.n	800352e <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	681a      	ldr	r2, [r3, #0]
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f042 0201 	orr.w	r2, r2, #1
 800351a:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800351c:	e007      	b.n	800352e <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	f042 0201 	orr.w	r2, r2, #1
 800352c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800352e:	2300      	movs	r3, #0
}
 8003530:	4618      	mov	r0, r3
 8003532:	3710      	adds	r7, #16
 8003534:	46bd      	mov	sp, r7
 8003536:	bd80      	pop	{r7, pc}
 8003538:	40010000 	.word	0x40010000
 800353c:	40000400 	.word	0x40000400
 8003540:	40000800 	.word	0x40000800
 8003544:	40000c00 	.word	0x40000c00
 8003548:	40014000 	.word	0x40014000

0800354c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800354c:	b580      	push	{r7, lr}
 800354e:	b082      	sub	sp, #8
 8003550:	af00      	add	r7, sp, #0
 8003552:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	2b00      	cmp	r3, #0
 8003558:	d101      	bne.n	800355e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800355a:	2301      	movs	r3, #1
 800355c:	e041      	b.n	80035e2 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003564:	b2db      	uxtb	r3, r3
 8003566:	2b00      	cmp	r3, #0
 8003568:	d106      	bne.n	8003578 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800356a:	687b      	ldr	r3, [r7, #4]
 800356c:	2200      	movs	r2, #0
 800356e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f7fe f894 	bl	80016a0 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2202      	movs	r2, #2
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681a      	ldr	r2, [r3, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	3304      	adds	r3, #4
 8003588:	4619      	mov	r1, r3
 800358a:	4610      	mov	r0, r2
 800358c:	f000 fc74 	bl	8003e78 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2201      	movs	r2, #1
 8003594:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	2201      	movs	r2, #1
 800359c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	2201      	movs	r2, #1
 80035a4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2201      	movs	r2, #1
 80035ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	2201      	movs	r2, #1
 80035b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	2201      	movs	r2, #1
 80035bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80035c0:	687b      	ldr	r3, [r7, #4]
 80035c2:	2201      	movs	r2, #1
 80035c4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	2201      	movs	r2, #1
 80035cc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	2201      	movs	r2, #1
 80035d4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	2201      	movs	r2, #1
 80035dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80035e0:	2300      	movs	r3, #0
}
 80035e2:	4618      	mov	r0, r3
 80035e4:	3708      	adds	r7, #8
 80035e6:	46bd      	mov	sp, r7
 80035e8:	bd80      	pop	{r7, pc}
	...

080035ec <HAL_TIM_IC_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80035ec:	b580      	push	{r7, lr}
 80035ee:	b084      	sub	sp, #16
 80035f0:	af00      	add	r7, sp, #0
 80035f2:	6078      	str	r0, [r7, #4]
 80035f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d104      	bne.n	8003606 <HAL_TIM_IC_Start+0x1a>
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003602:	b2db      	uxtb	r3, r3
 8003604:	e013      	b.n	800362e <HAL_TIM_IC_Start+0x42>
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	2b04      	cmp	r3, #4
 800360a:	d104      	bne.n	8003616 <HAL_TIM_IC_Start+0x2a>
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003612:	b2db      	uxtb	r3, r3
 8003614:	e00b      	b.n	800362e <HAL_TIM_IC_Start+0x42>
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	2b08      	cmp	r3, #8
 800361a:	d104      	bne.n	8003626 <HAL_TIM_IC_Start+0x3a>
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003622:	b2db      	uxtb	r3, r3
 8003624:	e003      	b.n	800362e <HAL_TIM_IC_Start+0x42>
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800362c:	b2db      	uxtb	r3, r3
 800362e:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8003630:	683b      	ldr	r3, [r7, #0]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d104      	bne.n	8003640 <HAL_TIM_IC_Start+0x54>
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800363c:	b2db      	uxtb	r3, r3
 800363e:	e013      	b.n	8003668 <HAL_TIM_IC_Start+0x7c>
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	2b04      	cmp	r3, #4
 8003644:	d104      	bne.n	8003650 <HAL_TIM_IC_Start+0x64>
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800364c:	b2db      	uxtb	r3, r3
 800364e:	e00b      	b.n	8003668 <HAL_TIM_IC_Start+0x7c>
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	2b08      	cmp	r3, #8
 8003654:	d104      	bne.n	8003660 <HAL_TIM_IC_Start+0x74>
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800365c:	b2db      	uxtb	r3, r3
 800365e:	e003      	b.n	8003668 <HAL_TIM_IC_Start+0x7c>
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8003666:	b2db      	uxtb	r3, r3
 8003668:	73bb      	strb	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800366a:	7bfb      	ldrb	r3, [r7, #15]
 800366c:	2b01      	cmp	r3, #1
 800366e:	d102      	bne.n	8003676 <HAL_TIM_IC_Start+0x8a>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8003670:	7bbb      	ldrb	r3, [r7, #14]
 8003672:	2b01      	cmp	r3, #1
 8003674:	d001      	beq.n	800367a <HAL_TIM_IC_Start+0x8e>
  {
    return HAL_ERROR;
 8003676:	2301      	movs	r3, #1
 8003678:	e077      	b.n	800376a <HAL_TIM_IC_Start+0x17e>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	2b00      	cmp	r3, #0
 800367e:	d104      	bne.n	800368a <HAL_TIM_IC_Start+0x9e>
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	2202      	movs	r2, #2
 8003684:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003688:	e013      	b.n	80036b2 <HAL_TIM_IC_Start+0xc6>
 800368a:	683b      	ldr	r3, [r7, #0]
 800368c:	2b04      	cmp	r3, #4
 800368e:	d104      	bne.n	800369a <HAL_TIM_IC_Start+0xae>
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2202      	movs	r2, #2
 8003694:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003698:	e00b      	b.n	80036b2 <HAL_TIM_IC_Start+0xc6>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	2b08      	cmp	r3, #8
 800369e:	d104      	bne.n	80036aa <HAL_TIM_IC_Start+0xbe>
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	2202      	movs	r2, #2
 80036a4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80036a8:	e003      	b.n	80036b2 <HAL_TIM_IC_Start+0xc6>
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2202      	movs	r2, #2
 80036ae:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80036b2:	683b      	ldr	r3, [r7, #0]
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d104      	bne.n	80036c2 <HAL_TIM_IC_Start+0xd6>
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80036c0:	e013      	b.n	80036ea <HAL_TIM_IC_Start+0xfe>
 80036c2:	683b      	ldr	r3, [r7, #0]
 80036c4:	2b04      	cmp	r3, #4
 80036c6:	d104      	bne.n	80036d2 <HAL_TIM_IC_Start+0xe6>
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2202      	movs	r2, #2
 80036cc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036d0:	e00b      	b.n	80036ea <HAL_TIM_IC_Start+0xfe>
 80036d2:	683b      	ldr	r3, [r7, #0]
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d104      	bne.n	80036e2 <HAL_TIM_IC_Start+0xf6>
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	2202      	movs	r2, #2
 80036dc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036e0:	e003      	b.n	80036ea <HAL_TIM_IC_Start+0xfe>
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	2202      	movs	r2, #2
 80036e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Enable the Input Capture channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	2201      	movs	r2, #1
 80036f0:	6839      	ldr	r1, [r7, #0]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 ff90 	bl	8004618 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1d      	ldr	r2, [pc, #116]	; (8003774 <HAL_TIM_IC_Start+0x188>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_TIM_IC_Start+0x148>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d013      	beq.n	8003734 <HAL_TIM_IC_Start+0x148>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a19      	ldr	r2, [pc, #100]	; (8003778 <HAL_TIM_IC_Start+0x18c>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_TIM_IC_Start+0x148>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a18      	ldr	r2, [pc, #96]	; (800377c <HAL_TIM_IC_Start+0x190>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_TIM_IC_Start+0x148>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a16      	ldr	r2, [pc, #88]	; (8003780 <HAL_TIM_IC_Start+0x194>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIM_IC_Start+0x148>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a15      	ldr	r2, [pc, #84]	; (8003784 <HAL_TIM_IC_Start+0x198>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d111      	bne.n	8003758 <HAL_TIM_IC_Start+0x16c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60bb      	str	r3, [r7, #8]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003740:	68bb      	ldr	r3, [r7, #8]
 8003742:	2b06      	cmp	r3, #6
 8003744:	d010      	beq.n	8003768 <HAL_TIM_IC_Start+0x17c>
    {
      __HAL_TIM_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003756:	e007      	b.n	8003768 <HAL_TIM_IC_Start+0x17c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3710      	adds	r7, #16
 800376e:	46bd      	mov	sp, r7
 8003770:	bd80      	pop	{r7, pc}
 8003772:	bf00      	nop
 8003774:	40010000 	.word	0x40010000
 8003778:	40000400 	.word	0x40000400
 800377c:	40000800 	.word	0x40000800
 8003780:	40000c00 	.word	0x40000c00
 8003784:	40014000 	.word	0x40014000

08003788 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	68db      	ldr	r3, [r3, #12]
 8003796:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	691b      	ldr	r3, [r3, #16]
 800379e:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80037a0:	68bb      	ldr	r3, [r7, #8]
 80037a2:	f003 0302 	and.w	r3, r3, #2
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d020      	beq.n	80037ec <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	f003 0302 	and.w	r3, r3, #2
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d01b      	beq.n	80037ec <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	681b      	ldr	r3, [r3, #0]
 80037b8:	f06f 0202 	mvn.w	r2, #2
 80037bc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	2201      	movs	r2, #1
 80037c2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	681b      	ldr	r3, [r3, #0]
 80037c8:	699b      	ldr	r3, [r3, #24]
 80037ca:	f003 0303 	and.w	r3, r3, #3
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d003      	beq.n	80037da <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fc ffa6 	bl	8000724 <HAL_TIM_IC_CaptureCallback>
 80037d8:	e005      	b.n	80037e6 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80037da:	6878      	ldr	r0, [r7, #4]
 80037dc:	f000 fb2e 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037e0:	6878      	ldr	r0, [r7, #4]
 80037e2:	f000 fb35 	bl	8003e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80037ec:	68bb      	ldr	r3, [r7, #8]
 80037ee:	f003 0304 	and.w	r3, r3, #4
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d020      	beq.n	8003838 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80037f6:	68fb      	ldr	r3, [r7, #12]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d01b      	beq.n	8003838 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	f06f 0204 	mvn.w	r2, #4
 8003808:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	2202      	movs	r2, #2
 800380e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	699b      	ldr	r3, [r3, #24]
 8003816:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800381a:	2b00      	cmp	r3, #0
 800381c:	d003      	beq.n	8003826 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800381e:	6878      	ldr	r0, [r7, #4]
 8003820:	f7fc ff80 	bl	8000724 <HAL_TIM_IC_CaptureCallback>
 8003824:	e005      	b.n	8003832 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003826:	6878      	ldr	r0, [r7, #4]
 8003828:	f000 fb08 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800382c:	6878      	ldr	r0, [r7, #4]
 800382e:	f000 fb0f 	bl	8003e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	2200      	movs	r2, #0
 8003836:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003838:	68bb      	ldr	r3, [r7, #8]
 800383a:	f003 0308 	and.w	r3, r3, #8
 800383e:	2b00      	cmp	r3, #0
 8003840:	d020      	beq.n	8003884 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	f003 0308 	and.w	r3, r3, #8
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f06f 0208 	mvn.w	r2, #8
 8003854:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	2204      	movs	r2, #4
 800385a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0303 	and.w	r3, r3, #3
 8003866:	2b00      	cmp	r3, #0
 8003868:	d003      	beq.n	8003872 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800386a:	6878      	ldr	r0, [r7, #4]
 800386c:	f7fc ff5a 	bl	8000724 <HAL_TIM_IC_CaptureCallback>
 8003870:	e005      	b.n	800387e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003872:	6878      	ldr	r0, [r7, #4]
 8003874:	f000 fae2 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003878:	6878      	ldr	r0, [r7, #4]
 800387a:	f000 fae9 	bl	8003e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	2200      	movs	r2, #0
 8003882:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003884:	68bb      	ldr	r3, [r7, #8]
 8003886:	f003 0310 	and.w	r3, r3, #16
 800388a:	2b00      	cmp	r3, #0
 800388c:	d020      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	f003 0310 	and.w	r3, r3, #16
 8003894:	2b00      	cmp	r3, #0
 8003896:	d01b      	beq.n	80038d0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f06f 0210 	mvn.w	r2, #16
 80038a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	2208      	movs	r2, #8
 80038a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	69db      	ldr	r3, [r3, #28]
 80038ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80038b2:	2b00      	cmp	r3, #0
 80038b4:	d003      	beq.n	80038be <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80038b6:	6878      	ldr	r0, [r7, #4]
 80038b8:	f7fc ff34 	bl	8000724 <HAL_TIM_IC_CaptureCallback>
 80038bc:	e005      	b.n	80038ca <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80038be:	6878      	ldr	r0, [r7, #4]
 80038c0:	f000 fabc 	bl	8003e3c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80038c4:	6878      	ldr	r0, [r7, #4]
 80038c6:	f000 fac3 	bl	8003e50 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80038d0:	68bb      	ldr	r3, [r7, #8]
 80038d2:	f003 0301 	and.w	r3, r3, #1
 80038d6:	2b00      	cmp	r3, #0
 80038d8:	d00c      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80038da:	68fb      	ldr	r3, [r7, #12]
 80038dc:	f003 0301 	and.w	r3, r3, #1
 80038e0:	2b00      	cmp	r3, #0
 80038e2:	d007      	beq.n	80038f4 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f06f 0201 	mvn.w	r2, #1
 80038ec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80038ee:	6878      	ldr	r0, [r7, #4]
 80038f0:	f7fd fbd6 	bl	80010a0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80038f4:	68bb      	ldr	r3, [r7, #8]
 80038f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d00c      	beq.n	8003918 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003904:	2b00      	cmp	r3, #0
 8003906:	d007      	beq.n	8003918 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003910:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003912:	6878      	ldr	r0, [r7, #4]
 8003914:	f000 ff1e 	bl	8004754 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003918:	68bb      	ldr	r3, [r7, #8]
 800391a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00c      	beq.n	800393c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003928:	2b00      	cmp	r3, #0
 800392a:	d007      	beq.n	800393c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003934:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003936:	6878      	ldr	r0, [r7, #4]
 8003938:	f000 fa94 	bl	8003e64 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800393c:	68bb      	ldr	r3, [r7, #8]
 800393e:	f003 0320 	and.w	r3, r3, #32
 8003942:	2b00      	cmp	r3, #0
 8003944:	d00c      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003946:	68fb      	ldr	r3, [r7, #12]
 8003948:	f003 0320 	and.w	r3, r3, #32
 800394c:	2b00      	cmp	r3, #0
 800394e:	d007      	beq.n	8003960 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f06f 0220 	mvn.w	r2, #32
 8003958:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 fef0 	bl	8004740 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003960:	bf00      	nop
 8003962:	3710      	adds	r7, #16
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}

08003968 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, const TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8003968:	b580      	push	{r7, lr}
 800396a:	b086      	sub	sp, #24
 800396c:	af00      	add	r7, sp, #0
 800396e:	60f8      	str	r0, [r7, #12]
 8003970:	60b9      	str	r1, [r7, #8]
 8003972:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003974:	2300      	movs	r3, #0
 8003976:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003978:	68fb      	ldr	r3, [r7, #12]
 800397a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800397e:	2b01      	cmp	r3, #1
 8003980:	d101      	bne.n	8003986 <HAL_TIM_IC_ConfigChannel+0x1e>
 8003982:	2302      	movs	r3, #2
 8003984:	e088      	b.n	8003a98 <HAL_TIM_IC_ConfigChannel+0x130>
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	2201      	movs	r2, #1
 800398a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2b00      	cmp	r3, #0
 8003992:	d11b      	bne.n	80039cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003998:	68bb      	ldr	r3, [r7, #8]
 800399a:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 800399c:	68bb      	ldr	r3, [r7, #8]
 800399e:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039a0:	68bb      	ldr	r3, [r7, #8]
 80039a2:	68db      	ldr	r3, [r3, #12]
    TIM_TI1_SetConfig(htim->Instance,
 80039a4:	f000 fc80 	bl	80042a8 <TIM_TI1_SetConfig>

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	699a      	ldr	r2, [r3, #24]
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f022 020c 	bic.w	r2, r2, #12
 80039b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	6999      	ldr	r1, [r3, #24]
 80039be:	68bb      	ldr	r3, [r7, #8]
 80039c0:	689a      	ldr	r2, [r3, #8]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	430a      	orrs	r2, r1
 80039c8:	619a      	str	r2, [r3, #24]
 80039ca:	e060      	b.n	8003a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d11c      	bne.n	8003a0c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 80039d6:	68bb      	ldr	r3, [r7, #8]
 80039d8:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	68db      	ldr	r3, [r3, #12]
    TIM_TI2_SetConfig(htim->Instance,
 80039e2:	f000 fcf8 	bl	80043d6 <TIM_TI2_SetConfig>

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	699a      	ldr	r2, [r3, #24]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80039f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	6999      	ldr	r1, [r3, #24]
 80039fc:	68bb      	ldr	r3, [r7, #8]
 80039fe:	689b      	ldr	r3, [r3, #8]
 8003a00:	021a      	lsls	r2, r3, #8
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	430a      	orrs	r2, r1
 8003a08:	619a      	str	r2, [r3, #24]
 8003a0a:	e040      	b.n	8003a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	2b08      	cmp	r3, #8
 8003a10:	d11b      	bne.n	8003a4a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a16:	68bb      	ldr	r3, [r7, #8]
 8003a18:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a1a:	68bb      	ldr	r3, [r7, #8]
 8003a1c:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a1e:	68bb      	ldr	r3, [r7, #8]
 8003a20:	68db      	ldr	r3, [r3, #12]
    TIM_TI3_SetConfig(htim->Instance,
 8003a22:	f000 fd45 	bl	80044b0 <TIM_TI3_SetConfig>

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	69da      	ldr	r2, [r3, #28]
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f022 020c 	bic.w	r2, r2, #12
 8003a34:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	69d9      	ldr	r1, [r3, #28]
 8003a3c:	68bb      	ldr	r3, [r7, #8]
 8003a3e:	689a      	ldr	r2, [r3, #8]
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	61da      	str	r2, [r3, #28]
 8003a48:	e021      	b.n	8003a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2b0c      	cmp	r3, #12
 8003a4e:	d11c      	bne.n	8003a8a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	6818      	ldr	r0, [r3, #0]
                      sConfig->ICPolarity,
 8003a54:	68bb      	ldr	r3, [r7, #8]
 8003a56:	6819      	ldr	r1, [r3, #0]
                      sConfig->ICSelection,
 8003a58:	68bb      	ldr	r3, [r7, #8]
 8003a5a:	685a      	ldr	r2, [r3, #4]
                      sConfig->ICFilter);
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	68db      	ldr	r3, [r3, #12]
    TIM_TI4_SetConfig(htim->Instance,
 8003a60:	f000 fd62 	bl	8004528 <TIM_TI4_SetConfig>

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8003a64:	68fb      	ldr	r3, [r7, #12]
 8003a66:	681b      	ldr	r3, [r3, #0]
 8003a68:	69da      	ldr	r2, [r3, #28]
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8003a72:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	69d9      	ldr	r1, [r3, #28]
 8003a7a:	68bb      	ldr	r3, [r7, #8]
 8003a7c:	689b      	ldr	r3, [r3, #8]
 8003a7e:	021a      	lsls	r2, r3, #8
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	430a      	orrs	r2, r1
 8003a86:	61da      	str	r2, [r3, #28]
 8003a88:	e001      	b.n	8003a8e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8003a8a:	2301      	movs	r3, #1
 8003a8c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	2200      	movs	r2, #0
 8003a92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003a96:	7dfb      	ldrb	r3, [r7, #23]
}
 8003a98:	4618      	mov	r0, r3
 8003a9a:	3718      	adds	r7, #24
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	bd80      	pop	{r7, pc}

08003aa0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b086      	sub	sp, #24
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	60f8      	str	r0, [r7, #12]
 8003aa8:	60b9      	str	r1, [r7, #8]
 8003aaa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003aac:	2300      	movs	r3, #0
 8003aae:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003ab0:	68fb      	ldr	r3, [r7, #12]
 8003ab2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d101      	bne.n	8003abe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003aba:	2302      	movs	r3, #2
 8003abc:	e0ae      	b.n	8003c1c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2201      	movs	r2, #1
 8003ac2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2b0c      	cmp	r3, #12
 8003aca:	f200 809f 	bhi.w	8003c0c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003ace:	a201      	add	r2, pc, #4	; (adr r2, 8003ad4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ad0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ad4:	08003b09 	.word	0x08003b09
 8003ad8:	08003c0d 	.word	0x08003c0d
 8003adc:	08003c0d 	.word	0x08003c0d
 8003ae0:	08003c0d 	.word	0x08003c0d
 8003ae4:	08003b49 	.word	0x08003b49
 8003ae8:	08003c0d 	.word	0x08003c0d
 8003aec:	08003c0d 	.word	0x08003c0d
 8003af0:	08003c0d 	.word	0x08003c0d
 8003af4:	08003b8b 	.word	0x08003b8b
 8003af8:	08003c0d 	.word	0x08003c0d
 8003afc:	08003c0d 	.word	0x08003c0d
 8003b00:	08003c0d 	.word	0x08003c0d
 8003b04:	08003bcb 	.word	0x08003bcb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	68b9      	ldr	r1, [r7, #8]
 8003b0e:	4618      	mov	r0, r3
 8003b10:	f000 fa3e 	bl	8003f90 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	699a      	ldr	r2, [r3, #24]
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f042 0208 	orr.w	r2, r2, #8
 8003b22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	699a      	ldr	r2, [r3, #24]
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	f022 0204 	bic.w	r2, r2, #4
 8003b32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003b34:	68fb      	ldr	r3, [r7, #12]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	6999      	ldr	r1, [r3, #24]
 8003b3a:	68bb      	ldr	r3, [r7, #8]
 8003b3c:	691a      	ldr	r2, [r3, #16]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	619a      	str	r2, [r3, #24]
      break;
 8003b46:	e064      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	68b9      	ldr	r1, [r7, #8]
 8003b4e:	4618      	mov	r0, r3
 8003b50:	f000 fa84 	bl	800405c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	699a      	ldr	r2, [r3, #24]
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699a      	ldr	r2, [r3, #24]
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003b74:	68fb      	ldr	r3, [r7, #12]
 8003b76:	681b      	ldr	r3, [r3, #0]
 8003b78:	6999      	ldr	r1, [r3, #24]
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	021a      	lsls	r2, r3, #8
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	619a      	str	r2, [r3, #24]
      break;
 8003b88:	e043      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68b9      	ldr	r1, [r7, #8]
 8003b90:	4618      	mov	r0, r3
 8003b92:	f000 facf 	bl	8004134 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	69da      	ldr	r2, [r3, #28]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f042 0208 	orr.w	r2, r2, #8
 8003ba4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	69da      	ldr	r2, [r3, #28]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	f022 0204 	bic.w	r2, r2, #4
 8003bb4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	69d9      	ldr	r1, [r3, #28]
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	691a      	ldr	r2, [r3, #16]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	61da      	str	r2, [r3, #28]
      break;
 8003bc8:	e023      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	68b9      	ldr	r1, [r7, #8]
 8003bd0:	4618      	mov	r0, r3
 8003bd2:	f000 fb19 	bl	8004208 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	69da      	ldr	r2, [r3, #28]
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003be4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	69da      	ldr	r2, [r3, #28]
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bf4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	69d9      	ldr	r1, [r3, #28]
 8003bfc:	68bb      	ldr	r3, [r7, #8]
 8003bfe:	691b      	ldr	r3, [r3, #16]
 8003c00:	021a      	lsls	r2, r3, #8
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	430a      	orrs	r2, r1
 8003c08:	61da      	str	r2, [r3, #28]
      break;
 8003c0a:	e002      	b.n	8003c12 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003c0c:	2301      	movs	r3, #1
 8003c0e:	75fb      	strb	r3, [r7, #23]
      break;
 8003c10:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003c1a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003c1c:	4618      	mov	r0, r3
 8003c1e:	3718      	adds	r7, #24
 8003c20:	46bd      	mov	sp, r7
 8003c22:	bd80      	pop	{r7, pc}

08003c24 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
 8003c2c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003c2e:	2300      	movs	r3, #0
 8003c30:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c38:	2b01      	cmp	r3, #1
 8003c3a:	d101      	bne.n	8003c40 <HAL_TIM_ConfigClockSource+0x1c>
 8003c3c:	2302      	movs	r3, #2
 8003c3e:	e0b4      	b.n	8003daa <HAL_TIM_ConfigClockSource+0x186>
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2202      	movs	r2, #2
 8003c4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	689b      	ldr	r3, [r3, #8]
 8003c56:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003c5e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c60:	68bb      	ldr	r3, [r7, #8]
 8003c62:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003c66:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	68ba      	ldr	r2, [r7, #8]
 8003c6e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c78:	d03e      	beq.n	8003cf8 <HAL_TIM_ConfigClockSource+0xd4>
 8003c7a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003c7e:	f200 8087 	bhi.w	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003c82:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c86:	f000 8086 	beq.w	8003d96 <HAL_TIM_ConfigClockSource+0x172>
 8003c8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003c8e:	d87f      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003c90:	2b70      	cmp	r3, #112	; 0x70
 8003c92:	d01a      	beq.n	8003cca <HAL_TIM_ConfigClockSource+0xa6>
 8003c94:	2b70      	cmp	r3, #112	; 0x70
 8003c96:	d87b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003c98:	2b60      	cmp	r3, #96	; 0x60
 8003c9a:	d050      	beq.n	8003d3e <HAL_TIM_ConfigClockSource+0x11a>
 8003c9c:	2b60      	cmp	r3, #96	; 0x60
 8003c9e:	d877      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca0:	2b50      	cmp	r3, #80	; 0x50
 8003ca2:	d03c      	beq.n	8003d1e <HAL_TIM_ConfigClockSource+0xfa>
 8003ca4:	2b50      	cmp	r3, #80	; 0x50
 8003ca6:	d873      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003ca8:	2b40      	cmp	r3, #64	; 0x40
 8003caa:	d058      	beq.n	8003d5e <HAL_TIM_ConfigClockSource+0x13a>
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d86f      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb0:	2b30      	cmp	r3, #48	; 0x30
 8003cb2:	d064      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cb4:	2b30      	cmp	r3, #48	; 0x30
 8003cb6:	d86b      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003cb8:	2b20      	cmp	r3, #32
 8003cba:	d060      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cbc:	2b20      	cmp	r3, #32
 8003cbe:	d867      	bhi.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
 8003cc0:	2b00      	cmp	r3, #0
 8003cc2:	d05c      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cc4:	2b10      	cmp	r3, #16
 8003cc6:	d05a      	beq.n	8003d7e <HAL_TIM_ConfigClockSource+0x15a>
 8003cc8:	e062      	b.n	8003d90 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cce:	683b      	ldr	r3, [r7, #0]
 8003cd0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003cd2:	683b      	ldr	r3, [r7, #0]
 8003cd4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003cd6:	683b      	ldr	r3, [r7, #0]
 8003cd8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003cda:	f000 fc7d 	bl	80045d8 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	689b      	ldr	r3, [r3, #8]
 8003ce4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ce6:	68bb      	ldr	r3, [r7, #8]
 8003ce8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003cec:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	68ba      	ldr	r2, [r7, #8]
 8003cf4:	609a      	str	r2, [r3, #8]
      break;
 8003cf6:	e04f      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003cfc:	683b      	ldr	r3, [r7, #0]
 8003cfe:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003d00:	683b      	ldr	r3, [r7, #0]
 8003d02:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003d04:	683b      	ldr	r3, [r7, #0]
 8003d06:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003d08:	f000 fc66 	bl	80045d8 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	689a      	ldr	r2, [r3, #8]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d1a:	609a      	str	r2, [r3, #8]
      break;
 8003d1c:	e03c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d22:	683b      	ldr	r3, [r7, #0]
 8003d24:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d26:	683b      	ldr	r3, [r7, #0]
 8003d28:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	f000 fb24 	bl	8004378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	2150      	movs	r1, #80	; 0x50
 8003d36:	4618      	mov	r0, r3
 8003d38:	f000 fc33 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 8003d3c:	e02c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d42:	683b      	ldr	r3, [r7, #0]
 8003d44:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d46:	683b      	ldr	r3, [r7, #0]
 8003d48:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003d4a:	461a      	mov	r2, r3
 8003d4c:	f000 fb80 	bl	8004450 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	2160      	movs	r1, #96	; 0x60
 8003d56:	4618      	mov	r0, r3
 8003d58:	f000 fc23 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 8003d5c:	e01c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003d66:	683b      	ldr	r3, [r7, #0]
 8003d68:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003d6a:	461a      	mov	r2, r3
 8003d6c:	f000 fb04 	bl	8004378 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	2140      	movs	r1, #64	; 0x40
 8003d76:	4618      	mov	r0, r3
 8003d78:	f000 fc13 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 8003d7c:	e00c      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	683b      	ldr	r3, [r7, #0]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	4619      	mov	r1, r3
 8003d88:	4610      	mov	r0, r2
 8003d8a:	f000 fc0a 	bl	80045a2 <TIM_ITRx_SetConfig>
      break;
 8003d8e:	e003      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003d90:	2301      	movs	r3, #1
 8003d92:	73fb      	strb	r3, [r7, #15]
      break;
 8003d94:	e000      	b.n	8003d98 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003d96:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	2201      	movs	r2, #1
 8003d9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	2200      	movs	r2, #0
 8003da4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003da8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}
	...

08003db4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(const TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b085      	sub	sp, #20
 8003db8:	af00      	add	r7, sp, #0
 8003dba:	6078      	str	r0, [r7, #4]
 8003dbc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8003dbe:	2300      	movs	r3, #0
 8003dc0:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8003dc2:	683b      	ldr	r3, [r7, #0]
 8003dc4:	2b0c      	cmp	r3, #12
 8003dc6:	d831      	bhi.n	8003e2c <HAL_TIM_ReadCapturedValue+0x78>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_TIM_ReadCapturedValue+0x1c>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e05 	.word	0x08003e05
 8003dd4:	08003e2d 	.word	0x08003e2d
 8003dd8:	08003e2d 	.word	0x08003e2d
 8003ddc:	08003e2d 	.word	0x08003e2d
 8003de0:	08003e0f 	.word	0x08003e0f
 8003de4:	08003e2d 	.word	0x08003e2d
 8003de8:	08003e2d 	.word	0x08003e2d
 8003dec:	08003e2d 	.word	0x08003e2d
 8003df0:	08003e19 	.word	0x08003e19
 8003df4:	08003e2d 	.word	0x08003e2d
 8003df8:	08003e2d 	.word	0x08003e2d
 8003dfc:	08003e2d 	.word	0x08003e2d
 8003e00:	08003e23 	.word	0x08003e23
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e0a:	60fb      	str	r3, [r7, #12]

      break;
 8003e0c:	e00f      	b.n	8003e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003e14:	60fb      	str	r3, [r7, #12]

      break;
 8003e16:	e00a      	b.n	8003e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003e1e:	60fb      	str	r3, [r7, #12]

      break;
 8003e20:	e005      	b.n	8003e2e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e28:	60fb      	str	r3, [r7, #12]

      break;
 8003e2a:	e000      	b.n	8003e2e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 8003e2c:	bf00      	nop
  }

  return tmpreg;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
}
 8003e30:	4618      	mov	r0, r3
 8003e32:	3714      	adds	r7, #20
 8003e34:	46bd      	mov	sp, r7
 8003e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e3a:	4770      	bx	lr

08003e3c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e3c:	b480      	push	{r7}
 8003e3e:	b083      	sub	sp, #12
 8003e40:	af00      	add	r7, sp, #0
 8003e42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr

08003e50 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e50:	b480      	push	{r7}
 8003e52:	b083      	sub	sp, #12
 8003e54:	af00      	add	r7, sp, #0
 8003e56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e58:	bf00      	nop
 8003e5a:	370c      	adds	r7, #12
 8003e5c:	46bd      	mov	sp, r7
 8003e5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e62:	4770      	bx	lr

08003e64 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e64:	b480      	push	{r7}
 8003e66:	b083      	sub	sp, #12
 8003e68:	af00      	add	r7, sp, #0
 8003e6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e6c:	bf00      	nop
 8003e6e:	370c      	adds	r7, #12
 8003e70:	46bd      	mov	sp, r7
 8003e72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e76:	4770      	bx	lr

08003e78 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e78:	b480      	push	{r7}
 8003e7a:	b085      	sub	sp, #20
 8003e7c:	af00      	add	r7, sp, #0
 8003e7e:	6078      	str	r0, [r7, #4]
 8003e80:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	4a3a      	ldr	r2, [pc, #232]	; (8003f74 <TIM_Base_SetConfig+0xfc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d00f      	beq.n	8003eb0 <TIM_Base_SetConfig+0x38>
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e96:	d00b      	beq.n	8003eb0 <TIM_Base_SetConfig+0x38>
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	4a37      	ldr	r2, [pc, #220]	; (8003f78 <TIM_Base_SetConfig+0x100>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d007      	beq.n	8003eb0 <TIM_Base_SetConfig+0x38>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	4a36      	ldr	r2, [pc, #216]	; (8003f7c <TIM_Base_SetConfig+0x104>)
 8003ea4:	4293      	cmp	r3, r2
 8003ea6:	d003      	beq.n	8003eb0 <TIM_Base_SetConfig+0x38>
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	4a35      	ldr	r2, [pc, #212]	; (8003f80 <TIM_Base_SetConfig+0x108>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d108      	bne.n	8003ec2 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb0:	68fb      	ldr	r3, [r7, #12]
 8003eb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003eb6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003eb8:	683b      	ldr	r3, [r7, #0]
 8003eba:	685b      	ldr	r3, [r3, #4]
 8003ebc:	68fa      	ldr	r2, [r7, #12]
 8003ebe:	4313      	orrs	r3, r2
 8003ec0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	4a2b      	ldr	r2, [pc, #172]	; (8003f74 <TIM_Base_SetConfig+0xfc>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d01b      	beq.n	8003f02 <TIM_Base_SetConfig+0x8a>
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ed0:	d017      	beq.n	8003f02 <TIM_Base_SetConfig+0x8a>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	4a28      	ldr	r2, [pc, #160]	; (8003f78 <TIM_Base_SetConfig+0x100>)
 8003ed6:	4293      	cmp	r3, r2
 8003ed8:	d013      	beq.n	8003f02 <TIM_Base_SetConfig+0x8a>
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	4a27      	ldr	r2, [pc, #156]	; (8003f7c <TIM_Base_SetConfig+0x104>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d00f      	beq.n	8003f02 <TIM_Base_SetConfig+0x8a>
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	4a26      	ldr	r2, [pc, #152]	; (8003f80 <TIM_Base_SetConfig+0x108>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d00b      	beq.n	8003f02 <TIM_Base_SetConfig+0x8a>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	4a25      	ldr	r2, [pc, #148]	; (8003f84 <TIM_Base_SetConfig+0x10c>)
 8003eee:	4293      	cmp	r3, r2
 8003ef0:	d007      	beq.n	8003f02 <TIM_Base_SetConfig+0x8a>
 8003ef2:	687b      	ldr	r3, [r7, #4]
 8003ef4:	4a24      	ldr	r2, [pc, #144]	; (8003f88 <TIM_Base_SetConfig+0x110>)
 8003ef6:	4293      	cmp	r3, r2
 8003ef8:	d003      	beq.n	8003f02 <TIM_Base_SetConfig+0x8a>
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	4a23      	ldr	r2, [pc, #140]	; (8003f8c <TIM_Base_SetConfig+0x114>)
 8003efe:	4293      	cmp	r3, r2
 8003f00:	d108      	bne.n	8003f14 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003f08:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f0a:	683b      	ldr	r3, [r7, #0]
 8003f0c:	68db      	ldr	r3, [r3, #12]
 8003f0e:	68fa      	ldr	r2, [r7, #12]
 8003f10:	4313      	orrs	r3, r2
 8003f12:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	4313      	orrs	r3, r2
 8003f20:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	68fa      	ldr	r2, [r7, #12]
 8003f26:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f28:	683b      	ldr	r3, [r7, #0]
 8003f2a:	689a      	ldr	r2, [r3, #8]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f30:	683b      	ldr	r3, [r7, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	4a0e      	ldr	r2, [pc, #56]	; (8003f74 <TIM_Base_SetConfig+0xfc>)
 8003f3c:	4293      	cmp	r3, r2
 8003f3e:	d103      	bne.n	8003f48 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f40:	683b      	ldr	r3, [r7, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2201      	movs	r2, #1
 8003f4c:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	691b      	ldr	r3, [r3, #16]
 8003f52:	f003 0301 	and.w	r3, r3, #1
 8003f56:	2b01      	cmp	r3, #1
 8003f58:	d105      	bne.n	8003f66 <TIM_Base_SetConfig+0xee>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	691b      	ldr	r3, [r3, #16]
 8003f5e:	f023 0201 	bic.w	r2, r3, #1
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	611a      	str	r2, [r3, #16]
  }
}
 8003f66:	bf00      	nop
 8003f68:	3714      	adds	r7, #20
 8003f6a:	46bd      	mov	sp, r7
 8003f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f70:	4770      	bx	lr
 8003f72:	bf00      	nop
 8003f74:	40010000 	.word	0x40010000
 8003f78:	40000400 	.word	0x40000400
 8003f7c:	40000800 	.word	0x40000800
 8003f80:	40000c00 	.word	0x40000c00
 8003f84:	40014000 	.word	0x40014000
 8003f88:	40014400 	.word	0x40014400
 8003f8c:	40014800 	.word	0x40014800

08003f90 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003f90:	b480      	push	{r7}
 8003f92:	b087      	sub	sp, #28
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	6a1b      	ldr	r3, [r3, #32]
 8003f9e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	6a1b      	ldr	r3, [r3, #32]
 8003fa4:	f023 0201 	bic.w	r2, r3, #1
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	685b      	ldr	r3, [r3, #4]
 8003fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	699b      	ldr	r3, [r3, #24]
 8003fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003fc0:	68fb      	ldr	r3, [r7, #12]
 8003fc2:	f023 0303 	bic.w	r3, r3, #3
 8003fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003fc8:	683b      	ldr	r3, [r7, #0]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	68fa      	ldr	r2, [r7, #12]
 8003fce:	4313      	orrs	r3, r2
 8003fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8003fd2:	697b      	ldr	r3, [r7, #20]
 8003fd4:	f023 0302 	bic.w	r3, r3, #2
 8003fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003fda:	683b      	ldr	r3, [r7, #0]
 8003fdc:	689b      	ldr	r3, [r3, #8]
 8003fde:	697a      	ldr	r2, [r7, #20]
 8003fe0:	4313      	orrs	r3, r2
 8003fe2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	4a1c      	ldr	r2, [pc, #112]	; (8004058 <TIM_OC1_SetConfig+0xc8>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	d10c      	bne.n	8004006 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003fec:	697b      	ldr	r3, [r7, #20]
 8003fee:	f023 0308 	bic.w	r3, r3, #8
 8003ff2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003ff4:	683b      	ldr	r3, [r7, #0]
 8003ff6:	68db      	ldr	r3, [r3, #12]
 8003ff8:	697a      	ldr	r2, [r7, #20]
 8003ffa:	4313      	orrs	r3, r2
 8003ffc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8003ffe:	697b      	ldr	r3, [r7, #20]
 8004000:	f023 0304 	bic.w	r3, r3, #4
 8004004:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	4a13      	ldr	r2, [pc, #76]	; (8004058 <TIM_OC1_SetConfig+0xc8>)
 800400a:	4293      	cmp	r3, r2
 800400c:	d111      	bne.n	8004032 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800400e:	693b      	ldr	r3, [r7, #16]
 8004010:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004014:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004016:	693b      	ldr	r3, [r7, #16]
 8004018:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800401c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800401e:	683b      	ldr	r3, [r7, #0]
 8004020:	695b      	ldr	r3, [r3, #20]
 8004022:	693a      	ldr	r2, [r7, #16]
 8004024:	4313      	orrs	r3, r2
 8004026:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004028:	683b      	ldr	r3, [r7, #0]
 800402a:	699b      	ldr	r3, [r3, #24]
 800402c:	693a      	ldr	r2, [r7, #16]
 800402e:	4313      	orrs	r3, r2
 8004030:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	693a      	ldr	r2, [r7, #16]
 8004036:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	68fa      	ldr	r2, [r7, #12]
 800403c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	697a      	ldr	r2, [r7, #20]
 800404a:	621a      	str	r2, [r3, #32]
}
 800404c:	bf00      	nop
 800404e:	371c      	adds	r7, #28
 8004050:	46bd      	mov	sp, r7
 8004052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004056:	4770      	bx	lr
 8004058:	40010000 	.word	0x40010000

0800405c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800405c:	b480      	push	{r7}
 800405e:	b087      	sub	sp, #28
 8004060:	af00      	add	r7, sp, #0
 8004062:	6078      	str	r0, [r7, #4]
 8004064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6a1b      	ldr	r3, [r3, #32]
 800406a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6a1b      	ldr	r3, [r3, #32]
 8004070:	f023 0210 	bic.w	r2, r3, #16
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	685b      	ldr	r3, [r3, #4]
 800407c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	699b      	ldr	r3, [r3, #24]
 8004082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800408a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004092:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004094:	683b      	ldr	r3, [r7, #0]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	021b      	lsls	r3, r3, #8
 800409a:	68fa      	ldr	r2, [r7, #12]
 800409c:	4313      	orrs	r3, r2
 800409e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80040a0:	697b      	ldr	r3, [r7, #20]
 80040a2:	f023 0320 	bic.w	r3, r3, #32
 80040a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	689b      	ldr	r3, [r3, #8]
 80040ac:	011b      	lsls	r3, r3, #4
 80040ae:	697a      	ldr	r2, [r7, #20]
 80040b0:	4313      	orrs	r3, r2
 80040b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a1e      	ldr	r2, [pc, #120]	; (8004130 <TIM_OC2_SetConfig+0xd4>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d10d      	bne.n	80040d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80040bc:	697b      	ldr	r3, [r7, #20]
 80040be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80040c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80040c4:	683b      	ldr	r3, [r7, #0]
 80040c6:	68db      	ldr	r3, [r3, #12]
 80040c8:	011b      	lsls	r3, r3, #4
 80040ca:	697a      	ldr	r2, [r7, #20]
 80040cc:	4313      	orrs	r3, r2
 80040ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80040d0:	697b      	ldr	r3, [r7, #20]
 80040d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80040d6:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	4a15      	ldr	r2, [pc, #84]	; (8004130 <TIM_OC2_SetConfig+0xd4>)
 80040dc:	4293      	cmp	r3, r2
 80040de:	d113      	bne.n	8004108 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80040e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80040ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	695b      	ldr	r3, [r3, #20]
 80040f4:	009b      	lsls	r3, r3, #2
 80040f6:	693a      	ldr	r2, [r7, #16]
 80040f8:	4313      	orrs	r3, r2
 80040fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	699b      	ldr	r3, [r3, #24]
 8004100:	009b      	lsls	r3, r3, #2
 8004102:	693a      	ldr	r2, [r7, #16]
 8004104:	4313      	orrs	r3, r2
 8004106:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	693a      	ldr	r2, [r7, #16]
 800410c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	685a      	ldr	r2, [r3, #4]
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	697a      	ldr	r2, [r7, #20]
 8004120:	621a      	str	r2, [r3, #32]
}
 8004122:	bf00      	nop
 8004124:	371c      	adds	r7, #28
 8004126:	46bd      	mov	sp, r7
 8004128:	f85d 7b04 	ldr.w	r7, [sp], #4
 800412c:	4770      	bx	lr
 800412e:	bf00      	nop
 8004130:	40010000 	.word	0x40010000

08004134 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004134:	b480      	push	{r7}
 8004136:	b087      	sub	sp, #28
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
 800413c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	6a1b      	ldr	r3, [r3, #32]
 8004142:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	6a1b      	ldr	r3, [r3, #32]
 8004148:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	685b      	ldr	r3, [r3, #4]
 8004154:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	69db      	ldr	r3, [r3, #28]
 800415a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004162:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004164:	68fb      	ldr	r3, [r7, #12]
 8004166:	f023 0303 	bic.w	r3, r3, #3
 800416a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800416c:	683b      	ldr	r3, [r7, #0]
 800416e:	681b      	ldr	r3, [r3, #0]
 8004170:	68fa      	ldr	r2, [r7, #12]
 8004172:	4313      	orrs	r3, r2
 8004174:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004176:	697b      	ldr	r3, [r7, #20]
 8004178:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800417c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	689b      	ldr	r3, [r3, #8]
 8004182:	021b      	lsls	r3, r3, #8
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	4a1d      	ldr	r2, [pc, #116]	; (8004204 <TIM_OC3_SetConfig+0xd0>)
 800418e:	4293      	cmp	r3, r2
 8004190:	d10d      	bne.n	80041ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004192:	697b      	ldr	r3, [r7, #20]
 8004194:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004198:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800419a:	683b      	ldr	r3, [r7, #0]
 800419c:	68db      	ldr	r3, [r3, #12]
 800419e:	021b      	lsls	r3, r3, #8
 80041a0:	697a      	ldr	r2, [r7, #20]
 80041a2:	4313      	orrs	r3, r2
 80041a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80041a6:	697b      	ldr	r3, [r7, #20]
 80041a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80041ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	4a14      	ldr	r2, [pc, #80]	; (8004204 <TIM_OC3_SetConfig+0xd0>)
 80041b2:	4293      	cmp	r3, r2
 80041b4:	d113      	bne.n	80041de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80041b6:	693b      	ldr	r3, [r7, #16]
 80041b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80041bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80041be:	693b      	ldr	r3, [r7, #16]
 80041c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80041c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80041c6:	683b      	ldr	r3, [r7, #0]
 80041c8:	695b      	ldr	r3, [r3, #20]
 80041ca:	011b      	lsls	r3, r3, #4
 80041cc:	693a      	ldr	r2, [r7, #16]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80041d2:	683b      	ldr	r3, [r7, #0]
 80041d4:	699b      	ldr	r3, [r3, #24]
 80041d6:	011b      	lsls	r3, r3, #4
 80041d8:	693a      	ldr	r2, [r7, #16]
 80041da:	4313      	orrs	r3, r2
 80041dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	693a      	ldr	r2, [r7, #16]
 80041e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80041ea:	683b      	ldr	r3, [r7, #0]
 80041ec:	685a      	ldr	r2, [r3, #4]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	697a      	ldr	r2, [r7, #20]
 80041f6:	621a      	str	r2, [r3, #32]
}
 80041f8:	bf00      	nop
 80041fa:	371c      	adds	r7, #28
 80041fc:	46bd      	mov	sp, r7
 80041fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004202:	4770      	bx	lr
 8004204:	40010000 	.word	0x40010000

08004208 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004208:	b480      	push	{r7}
 800420a:	b087      	sub	sp, #28
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
 8004210:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	6a1b      	ldr	r3, [r3, #32]
 8004216:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a1b      	ldr	r3, [r3, #32]
 800421c:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004224:	687b      	ldr	r3, [r7, #4]
 8004226:	685b      	ldr	r3, [r3, #4]
 8004228:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	69db      	ldr	r3, [r3, #28]
 800422e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004236:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800423e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	681b      	ldr	r3, [r3, #0]
 8004244:	021b      	lsls	r3, r3, #8
 8004246:	68fa      	ldr	r2, [r7, #12]
 8004248:	4313      	orrs	r3, r2
 800424a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800424c:	693b      	ldr	r3, [r7, #16]
 800424e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004252:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004254:	683b      	ldr	r3, [r7, #0]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	031b      	lsls	r3, r3, #12
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	4313      	orrs	r3, r2
 800425e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	4a10      	ldr	r2, [pc, #64]	; (80042a4 <TIM_OC4_SetConfig+0x9c>)
 8004264:	4293      	cmp	r3, r2
 8004266:	d109      	bne.n	800427c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004268:	697b      	ldr	r3, [r7, #20]
 800426a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800426e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004270:	683b      	ldr	r3, [r7, #0]
 8004272:	695b      	ldr	r3, [r3, #20]
 8004274:	019b      	lsls	r3, r3, #6
 8004276:	697a      	ldr	r2, [r7, #20]
 8004278:	4313      	orrs	r3, r2
 800427a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	697a      	ldr	r2, [r7, #20]
 8004280:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	68fa      	ldr	r2, [r7, #12]
 8004286:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	685a      	ldr	r2, [r3, #4]
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	693a      	ldr	r2, [r7, #16]
 8004294:	621a      	str	r2, [r3, #32]
}
 8004296:	bf00      	nop
 8004298:	371c      	adds	r7, #28
 800429a:	46bd      	mov	sp, r7
 800429c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a0:	4770      	bx	lr
 80042a2:	bf00      	nop
 80042a4:	40010000 	.word	0x40010000

080042a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b087      	sub	sp, #28
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	60f8      	str	r0, [r7, #12]
 80042b0:	60b9      	str	r1, [r7, #8]
 80042b2:	607a      	str	r2, [r7, #4]
 80042b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80042b6:	68fb      	ldr	r3, [r7, #12]
 80042b8:	6a1b      	ldr	r3, [r3, #32]
 80042ba:	613b      	str	r3, [r7, #16]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	6a1b      	ldr	r3, [r3, #32]
 80042c0:	f023 0201 	bic.w	r2, r3, #1
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	617b      	str	r3, [r7, #20]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	4a24      	ldr	r2, [pc, #144]	; (8004364 <TIM_TI1_SetConfig+0xbc>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d013      	beq.n	80042fe <TIM_TI1_SetConfig+0x56>
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80042dc:	d00f      	beq.n	80042fe <TIM_TI1_SetConfig+0x56>
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	4a21      	ldr	r2, [pc, #132]	; (8004368 <TIM_TI1_SetConfig+0xc0>)
 80042e2:	4293      	cmp	r3, r2
 80042e4:	d00b      	beq.n	80042fe <TIM_TI1_SetConfig+0x56>
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	4a20      	ldr	r2, [pc, #128]	; (800436c <TIM_TI1_SetConfig+0xc4>)
 80042ea:	4293      	cmp	r3, r2
 80042ec:	d007      	beq.n	80042fe <TIM_TI1_SetConfig+0x56>
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	4a1f      	ldr	r2, [pc, #124]	; (8004370 <TIM_TI1_SetConfig+0xc8>)
 80042f2:	4293      	cmp	r3, r2
 80042f4:	d003      	beq.n	80042fe <TIM_TI1_SetConfig+0x56>
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	4a1e      	ldr	r2, [pc, #120]	; (8004374 <TIM_TI1_SetConfig+0xcc>)
 80042fa:	4293      	cmp	r3, r2
 80042fc:	d101      	bne.n	8004302 <TIM_TI1_SetConfig+0x5a>
 80042fe:	2301      	movs	r3, #1
 8004300:	e000      	b.n	8004304 <TIM_TI1_SetConfig+0x5c>
 8004302:	2300      	movs	r3, #0
 8004304:	2b00      	cmp	r3, #0
 8004306:	d008      	beq.n	800431a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8004308:	697b      	ldr	r3, [r7, #20]
 800430a:	f023 0303 	bic.w	r3, r3, #3
 800430e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8004310:	697a      	ldr	r2, [r7, #20]
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4313      	orrs	r3, r2
 8004316:	617b      	str	r3, [r7, #20]
 8004318:	e003      	b.n	8004322 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f043 0301 	orr.w	r3, r3, #1
 8004320:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004322:	697b      	ldr	r3, [r7, #20]
 8004324:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004328:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800432a:	683b      	ldr	r3, [r7, #0]
 800432c:	011b      	lsls	r3, r3, #4
 800432e:	b2db      	uxtb	r3, r3
 8004330:	697a      	ldr	r2, [r7, #20]
 8004332:	4313      	orrs	r3, r2
 8004334:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004336:	693b      	ldr	r3, [r7, #16]
 8004338:	f023 030a 	bic.w	r3, r3, #10
 800433c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800433e:	68bb      	ldr	r3, [r7, #8]
 8004340:	f003 030a 	and.w	r3, r3, #10
 8004344:	693a      	ldr	r2, [r7, #16]
 8004346:	4313      	orrs	r3, r2
 8004348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	697a      	ldr	r2, [r7, #20]
 800434e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004350:	68fb      	ldr	r3, [r7, #12]
 8004352:	693a      	ldr	r2, [r7, #16]
 8004354:	621a      	str	r2, [r3, #32]
}
 8004356:	bf00      	nop
 8004358:	371c      	adds	r7, #28
 800435a:	46bd      	mov	sp, r7
 800435c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004360:	4770      	bx	lr
 8004362:	bf00      	nop
 8004364:	40010000 	.word	0x40010000
 8004368:	40000400 	.word	0x40000400
 800436c:	40000800 	.word	0x40000800
 8004370:	40000c00 	.word	0x40000c00
 8004374:	40014000 	.word	0x40014000

08004378 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004378:	b480      	push	{r7}
 800437a:	b087      	sub	sp, #28
 800437c:	af00      	add	r7, sp, #0
 800437e:	60f8      	str	r0, [r7, #12]
 8004380:	60b9      	str	r1, [r7, #8]
 8004382:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	6a1b      	ldr	r3, [r3, #32]
 8004388:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6a1b      	ldr	r3, [r3, #32]
 800438e:	f023 0201 	bic.w	r2, r3, #1
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	699b      	ldr	r3, [r3, #24]
 800439a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80043a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	011b      	lsls	r3, r3, #4
 80043a8:	693a      	ldr	r2, [r7, #16]
 80043aa:	4313      	orrs	r3, r2
 80043ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f023 030a 	bic.w	r3, r3, #10
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80043b6:	697a      	ldr	r2, [r7, #20]
 80043b8:	68bb      	ldr	r3, [r7, #8]
 80043ba:	4313      	orrs	r3, r2
 80043bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	693a      	ldr	r2, [r7, #16]
 80043c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	697a      	ldr	r2, [r7, #20]
 80043c8:	621a      	str	r2, [r3, #32]
}
 80043ca:	bf00      	nop
 80043cc:	371c      	adds	r7, #28
 80043ce:	46bd      	mov	sp, r7
 80043d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043d4:	4770      	bx	lr

080043d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80043d6:	b480      	push	{r7}
 80043d8:	b087      	sub	sp, #28
 80043da:	af00      	add	r7, sp, #0
 80043dc:	60f8      	str	r0, [r7, #12]
 80043de:	60b9      	str	r1, [r7, #8]
 80043e0:	607a      	str	r2, [r7, #4]
 80043e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	6a1b      	ldr	r3, [r3, #32]
 80043e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	6a1b      	ldr	r3, [r3, #32]
 80043ee:	f023 0210 	bic.w	r2, r3, #16
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	699b      	ldr	r3, [r3, #24]
 80043fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80043fc:	693b      	ldr	r3, [r7, #16]
 80043fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004402:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	021b      	lsls	r3, r3, #8
 8004408:	693a      	ldr	r2, [r7, #16]
 800440a:	4313      	orrs	r3, r2
 800440c:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800440e:	693b      	ldr	r3, [r7, #16]
 8004410:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004414:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8004416:	683b      	ldr	r3, [r7, #0]
 8004418:	031b      	lsls	r3, r3, #12
 800441a:	b29b      	uxth	r3, r3
 800441c:	693a      	ldr	r2, [r7, #16]
 800441e:	4313      	orrs	r3, r2
 8004420:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004422:	697b      	ldr	r3, [r7, #20]
 8004424:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8004428:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800442a:	68bb      	ldr	r3, [r7, #8]
 800442c:	011b      	lsls	r3, r3, #4
 800442e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8004432:	697a      	ldr	r2, [r7, #20]
 8004434:	4313      	orrs	r3, r2
 8004436:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	693a      	ldr	r2, [r7, #16]
 800443c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	697a      	ldr	r2, [r7, #20]
 8004442:	621a      	str	r2, [r3, #32]
}
 8004444:	bf00      	nop
 8004446:	371c      	adds	r7, #28
 8004448:	46bd      	mov	sp, r7
 800444a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800444e:	4770      	bx	lr

08004450 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004450:	b480      	push	{r7}
 8004452:	b087      	sub	sp, #28
 8004454:	af00      	add	r7, sp, #0
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a1b      	ldr	r3, [r3, #32]
 8004460:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	6a1b      	ldr	r3, [r3, #32]
 8004466:	f023 0210 	bic.w	r2, r3, #16
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	699b      	ldr	r3, [r3, #24]
 8004472:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004474:	693b      	ldr	r3, [r7, #16]
 8004476:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800447a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	031b      	lsls	r3, r3, #12
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004486:	697b      	ldr	r3, [r7, #20]
 8004488:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800448c:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800448e:	68bb      	ldr	r3, [r7, #8]
 8004490:	011b      	lsls	r3, r3, #4
 8004492:	697a      	ldr	r2, [r7, #20]
 8004494:	4313      	orrs	r3, r2
 8004496:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	693a      	ldr	r2, [r7, #16]
 800449c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	697a      	ldr	r2, [r7, #20]
 80044a2:	621a      	str	r2, [r3, #32]
}
 80044a4:	bf00      	nop
 80044a6:	371c      	adds	r7, #28
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	60f8      	str	r0, [r7, #12]
 80044b8:	60b9      	str	r1, [r7, #8]
 80044ba:	607a      	str	r2, [r7, #4]
 80044bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  tmpccer = TIMx->CCER;
 80044be:	68fb      	ldr	r3, [r7, #12]
 80044c0:	6a1b      	ldr	r3, [r3, #32]
 80044c2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	6a1b      	ldr	r3, [r3, #32]
 80044c8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	69db      	ldr	r3, [r3, #28]
 80044d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80044d6:	693b      	ldr	r3, [r7, #16]
 80044d8:	f023 0303 	bic.w	r3, r3, #3
 80044dc:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= TIM_ICSelection;
 80044de:	693a      	ldr	r2, [r7, #16]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80044e6:	693b      	ldr	r3, [r7, #16]
 80044e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80044ec:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80044ee:	683b      	ldr	r3, [r7, #0]
 80044f0:	011b      	lsls	r3, r3, #4
 80044f2:	b2db      	uxtb	r3, r3
 80044f4:	693a      	ldr	r2, [r7, #16]
 80044f6:	4313      	orrs	r3, r2
 80044f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80044fa:	697b      	ldr	r3, [r7, #20]
 80044fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8004500:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	021b      	lsls	r3, r3, #8
 8004506:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800450a:	697a      	ldr	r2, [r7, #20]
 800450c:	4313      	orrs	r3, r2
 800450e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8004510:	68fb      	ldr	r3, [r7, #12]
 8004512:	693a      	ldr	r2, [r7, #16]
 8004514:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	697a      	ldr	r2, [r7, #20]
 800451a:	621a      	str	r2, [r3, #32]
}
 800451c:	bf00      	nop
 800451e:	371c      	adds	r7, #28
 8004520:	46bd      	mov	sp, r7
 8004522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004526:	4770      	bx	lr

08004528 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8004528:	b480      	push	{r7}
 800452a:	b087      	sub	sp, #28
 800452c:	af00      	add	r7, sp, #0
 800452e:	60f8      	str	r0, [r7, #12]
 8004530:	60b9      	str	r1, [r7, #8]
 8004532:	607a      	str	r2, [r7, #4]
 8004534:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  tmpccer = TIMx->CCER;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	6a1b      	ldr	r3, [r3, #32]
 8004540:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	69db      	ldr	r3, [r3, #28]
 800454c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800454e:	693b      	ldr	r3, [r7, #16]
 8004550:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004554:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	021b      	lsls	r3, r3, #8
 800455a:	693a      	ldr	r2, [r7, #16]
 800455c:	4313      	orrs	r3, r2
 800455e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8004560:	693b      	ldr	r3, [r7, #16]
 8004562:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8004566:	613b      	str	r3, [r7, #16]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8004568:	683b      	ldr	r3, [r7, #0]
 800456a:	031b      	lsls	r3, r3, #12
 800456c:	b29b      	uxth	r3, r3
 800456e:	693a      	ldr	r2, [r7, #16]
 8004570:	4313      	orrs	r3, r2
 8004572:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8004574:	697b      	ldr	r3, [r7, #20]
 8004576:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800457a:	617b      	str	r3, [r7, #20]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800457c:	68bb      	ldr	r3, [r7, #8]
 800457e:	031b      	lsls	r3, r3, #12
 8004580:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8004584:	697a      	ldr	r2, [r7, #20]
 8004586:	4313      	orrs	r3, r2
 8004588:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	693a      	ldr	r2, [r7, #16]
 800458e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	697a      	ldr	r2, [r7, #20]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045a0:	4770      	bx	lr

080045a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80045a2:	b480      	push	{r7}
 80045a4:	b085      	sub	sp, #20
 80045a6:	af00      	add	r7, sp, #0
 80045a8:	6078      	str	r0, [r7, #4]
 80045aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	689b      	ldr	r3, [r3, #8]
 80045b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80045b2:	68fb      	ldr	r3, [r7, #12]
 80045b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80045b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80045ba:	683a      	ldr	r2, [r7, #0]
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	4313      	orrs	r3, r2
 80045c0:	f043 0307 	orr.w	r3, r3, #7
 80045c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	68fa      	ldr	r2, [r7, #12]
 80045ca:	609a      	str	r2, [r3, #8]
}
 80045cc:	bf00      	nop
 80045ce:	3714      	adds	r7, #20
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr

080045d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	60f8      	str	r0, [r7, #12]
 80045e0:	60b9      	str	r1, [r7, #8]
 80045e2:	607a      	str	r2, [r7, #4]
 80045e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	689b      	ldr	r3, [r3, #8]
 80045ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80045ec:	697b      	ldr	r3, [r7, #20]
 80045ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80045f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80045f4:	683b      	ldr	r3, [r7, #0]
 80045f6:	021a      	lsls	r2, r3, #8
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	431a      	orrs	r2, r3
 80045fc:	68bb      	ldr	r3, [r7, #8]
 80045fe:	4313      	orrs	r3, r2
 8004600:	697a      	ldr	r2, [r7, #20]
 8004602:	4313      	orrs	r3, r2
 8004604:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004606:	68fb      	ldr	r3, [r7, #12]
 8004608:	697a      	ldr	r2, [r7, #20]
 800460a:	609a      	str	r2, [r3, #8]
}
 800460c:	bf00      	nop
 800460e:	371c      	adds	r7, #28
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr

08004618 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004618:	b480      	push	{r7}
 800461a:	b087      	sub	sp, #28
 800461c:	af00      	add	r7, sp, #0
 800461e:	60f8      	str	r0, [r7, #12]
 8004620:	60b9      	str	r1, [r7, #8]
 8004622:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004624:	68bb      	ldr	r3, [r7, #8]
 8004626:	f003 031f 	and.w	r3, r3, #31
 800462a:	2201      	movs	r2, #1
 800462c:	fa02 f303 	lsl.w	r3, r2, r3
 8004630:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	6a1a      	ldr	r2, [r3, #32]
 8004636:	697b      	ldr	r3, [r7, #20]
 8004638:	43db      	mvns	r3, r3
 800463a:	401a      	ands	r2, r3
 800463c:	68fb      	ldr	r3, [r7, #12]
 800463e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	6a1a      	ldr	r2, [r3, #32]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	f003 031f 	and.w	r3, r3, #31
 800464a:	6879      	ldr	r1, [r7, #4]
 800464c:	fa01 f303 	lsl.w	r3, r1, r3
 8004650:	431a      	orrs	r2, r3
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr
	...

08004664 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
 800466c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004674:	2b01      	cmp	r3, #1
 8004676:	d101      	bne.n	800467c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004678:	2302      	movs	r3, #2
 800467a:	e050      	b.n	800471e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	2201      	movs	r2, #1
 8004680:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	2202      	movs	r2, #2
 8004688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	685b      	ldr	r3, [r3, #4]
 8004692:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	689b      	ldr	r3, [r3, #8]
 800469a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	68fa      	ldr	r2, [r7, #12]
 80046aa:	4313      	orrs	r3, r2
 80046ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a1c      	ldr	r2, [pc, #112]	; (800472c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d018      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80046c8:	d013      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4a18      	ldr	r2, [pc, #96]	; (8004730 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80046d0:	4293      	cmp	r3, r2
 80046d2:	d00e      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4a16      	ldr	r2, [pc, #88]	; (8004734 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80046da:	4293      	cmp	r3, r2
 80046dc:	d009      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	4a15      	ldr	r2, [pc, #84]	; (8004738 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80046e4:	4293      	cmp	r3, r2
 80046e6:	d004      	beq.n	80046f2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	4a13      	ldr	r2, [pc, #76]	; (800473c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80046ee:	4293      	cmp	r3, r2
 80046f0:	d10c      	bne.n	800470c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80046f2:	68bb      	ldr	r3, [r7, #8]
 80046f4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80046f8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80046fa:	683b      	ldr	r3, [r7, #0]
 80046fc:	685b      	ldr	r3, [r3, #4]
 80046fe:	68ba      	ldr	r2, [r7, #8]
 8004700:	4313      	orrs	r3, r2
 8004702:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68ba      	ldr	r2, [r7, #8]
 800470a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	2201      	movs	r2, #1
 8004710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	2200      	movs	r2, #0
 8004718:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800471c:	2300      	movs	r3, #0
}
 800471e:	4618      	mov	r0, r3
 8004720:	3714      	adds	r7, #20
 8004722:	46bd      	mov	sp, r7
 8004724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004728:	4770      	bx	lr
 800472a:	bf00      	nop
 800472c:	40010000 	.word	0x40010000
 8004730:	40000400 	.word	0x40000400
 8004734:	40000800 	.word	0x40000800
 8004738:	40000c00 	.word	0x40000c00
 800473c:	40014000 	.word	0x40014000

08004740 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004740:	b480      	push	{r7}
 8004742:	b083      	sub	sp, #12
 8004744:	af00      	add	r7, sp, #0
 8004746:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004748:	bf00      	nop
 800474a:	370c      	adds	r7, #12
 800474c:	46bd      	mov	sp, r7
 800474e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004752:	4770      	bx	lr

08004754 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004754:	b480      	push	{r7}
 8004756:	b083      	sub	sp, #12
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800475c:	bf00      	nop
 800475e:	370c      	adds	r7, #12
 8004760:	46bd      	mov	sp, r7
 8004762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004766:	4770      	bx	lr

08004768 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004768:	b580      	push	{r7, lr}
 800476a:	b082      	sub	sp, #8
 800476c:	af00      	add	r7, sp, #0
 800476e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004770:	687b      	ldr	r3, [r7, #4]
 8004772:	2b00      	cmp	r3, #0
 8004774:	d101      	bne.n	800477a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004776:	2301      	movs	r3, #1
 8004778:	e042      	b.n	8004800 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004780:	b2db      	uxtb	r3, r3
 8004782:	2b00      	cmp	r3, #0
 8004784:	d106      	bne.n	8004794 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	2200      	movs	r2, #0
 800478a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800478e:	6878      	ldr	r0, [r7, #4]
 8004790:	f7fd f8c0 	bl	8001914 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	2224      	movs	r2, #36	; 0x24
 8004798:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	68da      	ldr	r2, [r3, #12]
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	681b      	ldr	r3, [r3, #0]
 80047a6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80047aa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80047ac:	6878      	ldr	r0, [r7, #4]
 80047ae:	f000 fcdb 	bl	8005168 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	691a      	ldr	r2, [r3, #16]
 80047b8:	687b      	ldr	r3, [r7, #4]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80047c0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80047c2:	687b      	ldr	r3, [r7, #4]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	695a      	ldr	r2, [r3, #20]
 80047c8:	687b      	ldr	r3, [r7, #4]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80047d0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	68da      	ldr	r2, [r3, #12]
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	681b      	ldr	r3, [r3, #0]
 80047dc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80047e0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	645a      	str	r2, [r3, #68]	; 0x44
  huart->gState = HAL_UART_STATE_READY;
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	2220      	movs	r2, #32
 80047ec:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	2220      	movs	r2, #32
 80047f4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	2200      	movs	r2, #0
 80047fc:	635a      	str	r2, [r3, #52]	; 0x34

  return HAL_OK;
 80047fe:	2300      	movs	r3, #0
}
 8004800:	4618      	mov	r0, r3
 8004802:	3708      	adds	r7, #8
 8004804:	46bd      	mov	sp, r7
 8004806:	bd80      	pop	{r7, pc}

08004808 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004808:	b580      	push	{r7, lr}
 800480a:	b084      	sub	sp, #16
 800480c:	af00      	add	r7, sp, #0
 800480e:	60f8      	str	r0, [r7, #12]
 8004810:	60b9      	str	r1, [r7, #8]
 8004812:	4613      	mov	r3, r2
 8004814:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004816:	68fb      	ldr	r3, [r7, #12]
 8004818:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800481c:	b2db      	uxtb	r3, r3
 800481e:	2b20      	cmp	r3, #32
 8004820:	d112      	bne.n	8004848 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	2b00      	cmp	r3, #0
 8004826:	d002      	beq.n	800482e <HAL_UART_Receive_IT+0x26>
 8004828:	88fb      	ldrh	r3, [r7, #6]
 800482a:	2b00      	cmp	r3, #0
 800482c:	d101      	bne.n	8004832 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800482e:	2301      	movs	r3, #1
 8004830:	e00b      	b.n	800484a <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	2200      	movs	r2, #0
 8004836:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004838:	88fb      	ldrh	r3, [r7, #6]
 800483a:	461a      	mov	r2, r3
 800483c:	68b9      	ldr	r1, [r7, #8]
 800483e:	68f8      	ldr	r0, [r7, #12]
 8004840:	f000 faba 	bl	8004db8 <UART_Start_Receive_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	e000      	b.n	800484a <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004848:	2302      	movs	r3, #2
  }
}
 800484a:	4618      	mov	r0, r3
 800484c:	3710      	adds	r7, #16
 800484e:	46bd      	mov	sp, r7
 8004850:	bd80      	pop	{r7, pc}
	...

08004854 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b0ba      	sub	sp, #232	; 0xe8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	681b      	ldr	r3, [r3, #0]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	68db      	ldr	r3, [r3, #12]
 800486c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	695b      	ldr	r3, [r3, #20]
 8004876:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800487a:	2300      	movs	r3, #0
 800487c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8004880:	2300      	movs	r3, #0
 8004882:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004886:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800488a:	f003 030f 	and.w	r3, r3, #15
 800488e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8004892:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8004896:	2b00      	cmp	r3, #0
 8004898:	d10f      	bne.n	80048ba <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800489a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800489e:	f003 0320 	and.w	r3, r3, #32
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d009      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
 80048a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048aa:	f003 0320 	and.w	r3, r3, #32
 80048ae:	2b00      	cmp	r3, #0
 80048b0:	d003      	beq.n	80048ba <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80048b2:	6878      	ldr	r0, [r7, #4]
 80048b4:	f000 fb99 	bl	8004fea <UART_Receive_IT>
      return;
 80048b8:	e25b      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80048ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80048be:	2b00      	cmp	r3, #0
 80048c0:	f000 80de 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
 80048c4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80048c8:	f003 0301 	and.w	r3, r3, #1
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d106      	bne.n	80048de <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80048d0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048d4:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80048d8:	2b00      	cmp	r3, #0
 80048da:	f000 80d1 	beq.w	8004a80 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80048de:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80048e2:	f003 0301 	and.w	r3, r3, #1
 80048e6:	2b00      	cmp	r3, #0
 80048e8:	d00b      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
 80048ea:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80048ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80048f2:	2b00      	cmp	r3, #0
 80048f4:	d005      	beq.n	8004902 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048fa:	f043 0201 	orr.w	r2, r3, #1
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004902:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004906:	f003 0304 	and.w	r3, r3, #4
 800490a:	2b00      	cmp	r3, #0
 800490c:	d00b      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
 800490e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004912:	f003 0301 	and.w	r3, r3, #1
 8004916:	2b00      	cmp	r3, #0
 8004918:	d005      	beq.n	8004926 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800491e:	f043 0202 	orr.w	r2, r3, #2
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004926:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800492a:	f003 0302 	and.w	r3, r3, #2
 800492e:	2b00      	cmp	r3, #0
 8004930:	d00b      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
 8004932:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b00      	cmp	r3, #0
 800493c:	d005      	beq.n	800494a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004942:	f043 0204 	orr.w	r2, r3, #4
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800494a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800494e:	f003 0308 	and.w	r3, r3, #8
 8004952:	2b00      	cmp	r3, #0
 8004954:	d011      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
 8004956:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800495a:	f003 0320 	and.w	r3, r3, #32
 800495e:	2b00      	cmp	r3, #0
 8004960:	d105      	bne.n	800496e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004962:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8004966:	f003 0301 	and.w	r3, r3, #1
 800496a:	2b00      	cmp	r3, #0
 800496c:	d005      	beq.n	800497a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004972:	f043 0208 	orr.w	r2, r3, #8
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800497e:	2b00      	cmp	r3, #0
 8004980:	f000 81f2 	beq.w	8004d68 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004984:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004988:	f003 0320 	and.w	r3, r3, #32
 800498c:	2b00      	cmp	r3, #0
 800498e:	d008      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
 8004990:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004994:	f003 0320 	and.w	r3, r3, #32
 8004998:	2b00      	cmp	r3, #0
 800499a:	d002      	beq.n	80049a2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800499c:	6878      	ldr	r0, [r7, #4]
 800499e:	f000 fb24 	bl	8004fea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	695b      	ldr	r3, [r3, #20]
 80049a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049ac:	2b40      	cmp	r3, #64	; 0x40
 80049ae:	bf0c      	ite	eq
 80049b0:	2301      	moveq	r3, #1
 80049b2:	2300      	movne	r3, #0
 80049b4:	b2db      	uxtb	r3, r3
 80049b6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049be:	f003 0308 	and.w	r3, r3, #8
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d103      	bne.n	80049ce <HAL_UART_IRQHandler+0x17a>
 80049c6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80049ca:	2b00      	cmp	r3, #0
 80049cc:	d04f      	beq.n	8004a6e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80049ce:	6878      	ldr	r0, [r7, #4]
 80049d0:	f000 fa2c 	bl	8004e2c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	681b      	ldr	r3, [r3, #0]
 80049d8:	695b      	ldr	r3, [r3, #20]
 80049da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80049de:	2b40      	cmp	r3, #64	; 0x40
 80049e0:	d141      	bne.n	8004a66 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	3314      	adds	r3, #20
 80049e8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049ec:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80049f0:	e853 3f00 	ldrex	r3, [r3]
 80049f4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80049f8:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80049fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004a00:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	3314      	adds	r3, #20
 8004a0a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8004a0e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8004a12:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a16:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8004a1a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8004a26:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d1d9      	bne.n	80049e2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d013      	beq.n	8004a5e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a3a:	4a7e      	ldr	r2, [pc, #504]	; (8004c34 <HAL_UART_IRQHandler+0x3e0>)
 8004a3c:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a42:	4618      	mov	r0, r3
 8004a44:	f7fd fab0 	bl	8001fa8 <HAL_DMA_Abort_IT>
 8004a48:	4603      	mov	r3, r0
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	d016      	beq.n	8004a7c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004a4e:	687b      	ldr	r3, [r7, #4]
 8004a50:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a54:	687a      	ldr	r2, [r7, #4]
 8004a56:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8004a58:	4610      	mov	r0, r2
 8004a5a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a5c:	e00e      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 f994 	bl	8004d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a64:	e00a      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f000 f990 	bl	8004d8c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	e006      	b.n	8004a7c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a6e:	6878      	ldr	r0, [r7, #4]
 8004a70:	f000 f98c 	bl	8004d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	645a      	str	r2, [r3, #68]	; 0x44
      }
    }
    return;
 8004a7a:	e175      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a7c:	bf00      	nop
    return;
 8004a7e:	e173      	b.n	8004d68 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004a84:	2b01      	cmp	r3, #1
 8004a86:	f040 814f 	bne.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a8e:	f003 0310 	and.w	r3, r3, #16
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	f000 8148 	beq.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004a98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004a9c:	f003 0310 	and.w	r3, r3, #16
 8004aa0:	2b00      	cmp	r3, #0
 8004aa2:	f000 8141 	beq.w	8004d28 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004aa6:	2300      	movs	r3, #0
 8004aa8:	60bb      	str	r3, [r7, #8]
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	60bb      	str	r3, [r7, #8]
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	681b      	ldr	r3, [r3, #0]
 8004ab6:	685b      	ldr	r3, [r3, #4]
 8004ab8:	60bb      	str	r3, [r7, #8]
 8004aba:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	695b      	ldr	r3, [r3, #20]
 8004ac2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ac6:	2b40      	cmp	r3, #64	; 0x40
 8004ac8:	f040 80b6 	bne.w	8004c38 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004ad0:	681b      	ldr	r3, [r3, #0]
 8004ad2:	685b      	ldr	r3, [r3, #4]
 8004ad4:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ad8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	f000 8145 	beq.w	8004d6c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8004ae6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004aea:	429a      	cmp	r2, r3
 8004aec:	f080 813e 	bcs.w	8004d6c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8004af6:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004afc:	69db      	ldr	r3, [r3, #28]
 8004afe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b02:	f000 8088 	beq.w	8004c16 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	330c      	adds	r3, #12
 8004b0c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b10:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8004b14:	e853 3f00 	ldrex	r3, [r3]
 8004b18:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8004b1c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8004b20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004b24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	330c      	adds	r3, #12
 8004b2e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8004b32:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004b36:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b3a:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8004b3e:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8004b42:	e841 2300 	strex	r3, r2, [r1]
 8004b46:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8004b4a:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8004b4e:	2b00      	cmp	r3, #0
 8004b50:	d1d9      	bne.n	8004b06 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	3314      	adds	r3, #20
 8004b58:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b5a:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004b5c:	e853 3f00 	ldrex	r3, [r3]
 8004b60:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8004b62:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004b64:	f023 0301 	bic.w	r3, r3, #1
 8004b68:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004b6c:	687b      	ldr	r3, [r7, #4]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	3314      	adds	r3, #20
 8004b72:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8004b76:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8004b7a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b7c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8004b7e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8004b82:	e841 2300 	strex	r3, r2, [r1]
 8004b86:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8004b88:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d1e1      	bne.n	8004b52 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	3314      	adds	r3, #20
 8004b94:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b96:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8004b98:	e853 3f00 	ldrex	r3, [r3]
 8004b9c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8004b9e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ba0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004ba4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	3314      	adds	r3, #20
 8004bae:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8004bb2:	66fa      	str	r2, [r7, #108]	; 0x6c
 8004bb4:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bb6:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8004bb8:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8004bba:	e841 2300 	strex	r3, r2, [r1]
 8004bbe:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8004bc0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8004bc2:	2b00      	cmp	r3, #0
 8004bc4:	d1e3      	bne.n	8004b8e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2220      	movs	r2, #32
 8004bca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	2200      	movs	r2, #0
 8004bd2:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	330c      	adds	r3, #12
 8004bda:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bdc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004bde:	e853 3f00 	ldrex	r3, [r3]
 8004be2:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8004be4:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004be6:	f023 0310 	bic.w	r3, r3, #16
 8004bea:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	330c      	adds	r3, #12
 8004bf4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8004bf8:	65ba      	str	r2, [r7, #88]	; 0x58
 8004bfa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bfc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8004bfe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8004c00:	e841 2300 	strex	r3, r2, [r1]
 8004c04:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8004c06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d1e3      	bne.n	8004bd4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004c10:	4618      	mov	r0, r3
 8004c12:	f7fd f959 	bl	8001ec8 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c20:	687b      	ldr	r3, [r7, #4]
 8004c22:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c24:	b29b      	uxth	r3, r3
 8004c26:	1ad3      	subs	r3, r2, r3
 8004c28:	b29b      	uxth	r3, r3
 8004c2a:	4619      	mov	r1, r3
 8004c2c:	6878      	ldr	r0, [r7, #4]
 8004c2e:	f000 f8b7 	bl	8004da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004c32:	e09b      	b.n	8004d6c <HAL_UART_IRQHandler+0x518>
 8004c34:	08004ef3 	.word	0x08004ef3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c40:	b29b      	uxth	r3, r3
 8004c42:	1ad3      	subs	r3, r2, r3
 8004c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8004c48:	687b      	ldr	r3, [r7, #4]
 8004c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	f000 808e 	beq.w	8004d70 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 8089 	beq.w	8004d70 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	330c      	adds	r3, #12
 8004c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004c68:	e853 3f00 	ldrex	r3, [r3]
 8004c6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8004c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	330c      	adds	r3, #12
 8004c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8004c82:	647a      	str	r2, [r7, #68]	; 0x44
 8004c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8004c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004c8a:	e841 2300 	strex	r3, r2, [r1]
 8004c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8004c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d1e3      	bne.n	8004c5e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	3314      	adds	r3, #20
 8004c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ca0:	e853 3f00 	ldrex	r3, [r3]
 8004ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8004ca6:	6a3b      	ldr	r3, [r7, #32]
 8004ca8:	f023 0301 	bic.w	r3, r3, #1
 8004cac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3314      	adds	r3, #20
 8004cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8004cba:	633a      	str	r2, [r7, #48]	; 0x30
 8004cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8004cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004cc2:	e841 2300 	strex	r3, r2, [r1]
 8004cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8004cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d1e3      	bne.n	8004c96 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	2220      	movs	r2, #32
 8004cd2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	2200      	movs	r2, #0
 8004cda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	330c      	adds	r3, #12
 8004ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ce4:	693b      	ldr	r3, [r7, #16]
 8004ce6:	e853 3f00 	ldrex	r3, [r3]
 8004cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	f023 0310 	bic.w	r3, r3, #16
 8004cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	330c      	adds	r3, #12
 8004cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8004d00:	61fa      	str	r2, [r7, #28]
 8004d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d04:	69b9      	ldr	r1, [r7, #24]
 8004d06:	69fa      	ldr	r2, [r7, #28]
 8004d08:	e841 2300 	strex	r3, r2, [r1]
 8004d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d1e3      	bne.n	8004cdc <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2202      	movs	r2, #2
 8004d18:	635a      	str	r2, [r3, #52]	; 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004d1a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8004d1e:	4619      	mov	r1, r3
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f83d 	bl	8004da0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d26:	e023      	b.n	8004d70 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d009      	beq.n	8004d48 <HAL_UART_IRQHandler+0x4f4>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d003      	beq.n	8004d48 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f8ea 	bl	8004f1a <UART_Transmit_IT>
    return;
 8004d46:	e014      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	d00e      	beq.n	8004d72 <HAL_UART_IRQHandler+0x51e>
 8004d54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8004d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d5c:	2b00      	cmp	r3, #0
 8004d5e:	d008      	beq.n	8004d72 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004d60:	6878      	ldr	r0, [r7, #4]
 8004d62:	f000 f92a 	bl	8004fba <UART_EndTransmit_IT>
    return;
 8004d66:	e004      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
    return;
 8004d68:	bf00      	nop
 8004d6a:	e002      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d6c:	bf00      	nop
 8004d6e:	e000      	b.n	8004d72 <HAL_UART_IRQHandler+0x51e>
      return;
 8004d70:	bf00      	nop
  }
}
 8004d72:	37e8      	adds	r7, #232	; 0xe8
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d78:	b480      	push	{r7}
 8004d7a:	b083      	sub	sp, #12
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d80:	bf00      	nop
 8004d82:	370c      	adds	r7, #12
 8004d84:	46bd      	mov	sp, r7
 8004d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d8a:	4770      	bx	lr

08004d8c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d8c:	b480      	push	{r7}
 8004d8e:	b083      	sub	sp, #12
 8004d90:	af00      	add	r7, sp, #0
 8004d92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d94:	bf00      	nop
 8004d96:	370c      	adds	r7, #12
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr

08004da0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004da0:	b480      	push	{r7}
 8004da2:	b083      	sub	sp, #12
 8004da4:	af00      	add	r7, sp, #0
 8004da6:	6078      	str	r0, [r7, #4]
 8004da8:	460b      	mov	r3, r1
 8004daa:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004dac:	bf00      	nop
 8004dae:	370c      	adds	r7, #12
 8004db0:	46bd      	mov	sp, r7
 8004db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004db6:	4770      	bx	lr

08004db8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004db8:	b480      	push	{r7}
 8004dba:	b085      	sub	sp, #20
 8004dbc:	af00      	add	r7, sp, #0
 8004dbe:	60f8      	str	r0, [r7, #12]
 8004dc0:	60b9      	str	r1, [r7, #8]
 8004dc2:	4613      	mov	r3, r2
 8004dc4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004dc6:	68fb      	ldr	r3, [r7, #12]
 8004dc8:	68ba      	ldr	r2, [r7, #8]
 8004dca:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8004dcc:	68fb      	ldr	r3, [r7, #12]
 8004dce:	88fa      	ldrh	r2, [r7, #6]
 8004dd0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	88fa      	ldrh	r2, [r7, #6]
 8004dd6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	2200      	movs	r2, #0
 8004ddc:	645a      	str	r2, [r3, #68]	; 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	2222      	movs	r2, #34	; 0x22
 8004de2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8004de6:	68fb      	ldr	r3, [r7, #12]
 8004de8:	691b      	ldr	r3, [r3, #16]
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d007      	beq.n	8004dfe <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8004dee:	68fb      	ldr	r3, [r7, #12]
 8004df0:	681b      	ldr	r3, [r3, #0]
 8004df2:	68da      	ldr	r2, [r3, #12]
 8004df4:	68fb      	ldr	r3, [r7, #12]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004dfc:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	695a      	ldr	r2, [r3, #20]
 8004e04:	68fb      	ldr	r3, [r7, #12]
 8004e06:	681b      	ldr	r3, [r3, #0]
 8004e08:	f042 0201 	orr.w	r2, r2, #1
 8004e0c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8004e0e:	68fb      	ldr	r3, [r7, #12]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	68da      	ldr	r2, [r3, #12]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	f042 0220 	orr.w	r2, r2, #32
 8004e1c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8004e1e:	2300      	movs	r3, #0
}
 8004e20:	4618      	mov	r0, r3
 8004e22:	3714      	adds	r7, #20
 8004e24:	46bd      	mov	sp, r7
 8004e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e2a:	4770      	bx	lr

08004e2c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e2c:	b480      	push	{r7}
 8004e2e:	b095      	sub	sp, #84	; 0x54
 8004e30:	af00      	add	r7, sp, #0
 8004e32:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	681b      	ldr	r3, [r3, #0]
 8004e38:	330c      	adds	r3, #12
 8004e3a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e3e:	e853 3f00 	ldrex	r3, [r3]
 8004e42:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8004e44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004e46:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8004e4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	681b      	ldr	r3, [r3, #0]
 8004e50:	330c      	adds	r3, #12
 8004e52:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8004e54:	643a      	str	r2, [r7, #64]	; 0x40
 8004e56:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e58:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8004e5a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e5c:	e841 2300 	strex	r3, r2, [r1]
 8004e60:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8004e62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	d1e5      	bne.n	8004e34 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e68:	687b      	ldr	r3, [r7, #4]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	3314      	adds	r3, #20
 8004e6e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e70:	6a3b      	ldr	r3, [r7, #32]
 8004e72:	e853 3f00 	ldrex	r3, [r3]
 8004e76:	61fb      	str	r3, [r7, #28]
   return(result);
 8004e78:	69fb      	ldr	r3, [r7, #28]
 8004e7a:	f023 0301 	bic.w	r3, r3, #1
 8004e7e:	64bb      	str	r3, [r7, #72]	; 0x48
 8004e80:	687b      	ldr	r3, [r7, #4]
 8004e82:	681b      	ldr	r3, [r3, #0]
 8004e84:	3314      	adds	r3, #20
 8004e86:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e88:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004e8a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004e8e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8004e90:	e841 2300 	strex	r3, r2, [r1]
 8004e94:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8004e96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004e98:	2b00      	cmp	r3, #0
 8004e9a:	d1e5      	bne.n	8004e68 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ea0:	2b01      	cmp	r3, #1
 8004ea2:	d119      	bne.n	8004ed8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ea4:	687b      	ldr	r3, [r7, #4]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	330c      	adds	r3, #12
 8004eaa:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	e853 3f00 	ldrex	r3, [r3]
 8004eb2:	60bb      	str	r3, [r7, #8]
   return(result);
 8004eb4:	68bb      	ldr	r3, [r7, #8]
 8004eb6:	f023 0310 	bic.w	r3, r3, #16
 8004eba:	647b      	str	r3, [r7, #68]	; 0x44
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	330c      	adds	r3, #12
 8004ec2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8004ec4:	61ba      	str	r2, [r7, #24]
 8004ec6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ec8:	6979      	ldr	r1, [r7, #20]
 8004eca:	69ba      	ldr	r2, [r7, #24]
 8004ecc:	e841 2300 	strex	r3, r2, [r1]
 8004ed0:	613b      	str	r3, [r7, #16]
   return(result);
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d1e5      	bne.n	8004ea4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2220      	movs	r2, #32
 8004edc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2200      	movs	r2, #0
 8004ee4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8004ee6:	bf00      	nop
 8004ee8:	3754      	adds	r7, #84	; 0x54
 8004eea:	46bd      	mov	sp, r7
 8004eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ef0:	4770      	bx	lr

08004ef2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ef2:	b580      	push	{r7, lr}
 8004ef4:	b084      	sub	sp, #16
 8004ef6:	af00      	add	r7, sp, #0
 8004ef8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004efe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	2200      	movs	r2, #0
 8004f04:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8004f06:	68fb      	ldr	r3, [r7, #12]
 8004f08:	2200      	movs	r2, #0
 8004f0a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f0c:	68f8      	ldr	r0, [r7, #12]
 8004f0e:	f7ff ff3d 	bl	8004d8c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f12:	bf00      	nop
 8004f14:	3710      	adds	r7, #16
 8004f16:	46bd      	mov	sp, r7
 8004f18:	bd80      	pop	{r7, pc}

08004f1a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f1a:	b480      	push	{r7}
 8004f1c:	b085      	sub	sp, #20
 8004f1e:	af00      	add	r7, sp, #0
 8004f20:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004f28:	b2db      	uxtb	r3, r3
 8004f2a:	2b21      	cmp	r3, #33	; 0x21
 8004f2c:	d13e      	bne.n	8004fac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	689b      	ldr	r3, [r3, #8]
 8004f32:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004f36:	d114      	bne.n	8004f62 <UART_Transmit_IT+0x48>
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	691b      	ldr	r3, [r3, #16]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d110      	bne.n	8004f62 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a1b      	ldr	r3, [r3, #32]
 8004f44:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	881b      	ldrh	r3, [r3, #0]
 8004f4a:	461a      	mov	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f54:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6a1b      	ldr	r3, [r3, #32]
 8004f5a:	1c9a      	adds	r2, r3, #2
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	621a      	str	r2, [r3, #32]
 8004f60:	e008      	b.n	8004f74 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f62:	687b      	ldr	r3, [r7, #4]
 8004f64:	6a1b      	ldr	r3, [r3, #32]
 8004f66:	1c59      	adds	r1, r3, #1
 8004f68:	687a      	ldr	r2, [r7, #4]
 8004f6a:	6211      	str	r1, [r2, #32]
 8004f6c:	781a      	ldrb	r2, [r3, #0]
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8004f78:	b29b      	uxth	r3, r3
 8004f7a:	3b01      	subs	r3, #1
 8004f7c:	b29b      	uxth	r3, r3
 8004f7e:	687a      	ldr	r2, [r7, #4]
 8004f80:	4619      	mov	r1, r3
 8004f82:	84d1      	strh	r1, [r2, #38]	; 0x26
 8004f84:	2b00      	cmp	r3, #0
 8004f86:	d10f      	bne.n	8004fa8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	68da      	ldr	r2, [r3, #12]
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	681b      	ldr	r3, [r3, #0]
 8004f92:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004f96:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	681b      	ldr	r3, [r3, #0]
 8004f9c:	68da      	ldr	r2, [r3, #12]
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004fa6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fa8:	2300      	movs	r3, #0
 8004faa:	e000      	b.n	8004fae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fac:	2302      	movs	r3, #2
  }
}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3714      	adds	r7, #20
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb8:	4770      	bx	lr

08004fba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fba:	b580      	push	{r7, lr}
 8004fbc:	b082      	sub	sp, #8
 8004fbe:	af00      	add	r7, sp, #0
 8004fc0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fc2:	687b      	ldr	r3, [r7, #4]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	68da      	ldr	r2, [r3, #12]
 8004fc8:	687b      	ldr	r3, [r7, #4]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004fd0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	2220      	movs	r2, #32
 8004fd6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004fda:	6878      	ldr	r0, [r7, #4]
 8004fdc:	f7ff fecc 	bl	8004d78 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004fe0:	2300      	movs	r3, #0
}
 8004fe2:	4618      	mov	r0, r3
 8004fe4:	3708      	adds	r7, #8
 8004fe6:	46bd      	mov	sp, r7
 8004fe8:	bd80      	pop	{r7, pc}

08004fea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004fea:	b580      	push	{r7, lr}
 8004fec:	b08c      	sub	sp, #48	; 0x30
 8004fee:	af00      	add	r7, sp, #0
 8004ff0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ff8:	b2db      	uxtb	r3, r3
 8004ffa:	2b22      	cmp	r3, #34	; 0x22
 8004ffc:	f040 80ae 	bne.w	800515c <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	689b      	ldr	r3, [r3, #8]
 8005004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005008:	d117      	bne.n	800503a <UART_Receive_IT+0x50>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	691b      	ldr	r3, [r3, #16]
 800500e:	2b00      	cmp	r3, #0
 8005010:	d113      	bne.n	800503a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005012:	2300      	movs	r3, #0
 8005014:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800501a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	681b      	ldr	r3, [r3, #0]
 8005020:	685b      	ldr	r3, [r3, #4]
 8005022:	b29b      	uxth	r3, r3
 8005024:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005028:	b29a      	uxth	r2, r3
 800502a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800502c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005032:	1c9a      	adds	r2, r3, #2
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	629a      	str	r2, [r3, #40]	; 0x28
 8005038:	e026      	b.n	8005088 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800503e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8005040:	2300      	movs	r3, #0
 8005042:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	689b      	ldr	r3, [r3, #8]
 8005048:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800504c:	d007      	beq.n	800505e <UART_Receive_IT+0x74>
 800504e:	687b      	ldr	r3, [r7, #4]
 8005050:	689b      	ldr	r3, [r3, #8]
 8005052:	2b00      	cmp	r3, #0
 8005054:	d10a      	bne.n	800506c <UART_Receive_IT+0x82>
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	691b      	ldr	r3, [r3, #16]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d106      	bne.n	800506c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	685b      	ldr	r3, [r3, #4]
 8005064:	b2da      	uxtb	r2, r3
 8005066:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005068:	701a      	strb	r2, [r3, #0]
 800506a:	e008      	b.n	800507e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	681b      	ldr	r3, [r3, #0]
 8005070:	685b      	ldr	r3, [r3, #4]
 8005072:	b2db      	uxtb	r3, r3
 8005074:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005078:	b2da      	uxtb	r2, r3
 800507a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800507c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005082:	1c5a      	adds	r2, r3, #1
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800508c:	b29b      	uxth	r3, r3
 800508e:	3b01      	subs	r3, #1
 8005090:	b29b      	uxth	r3, r3
 8005092:	687a      	ldr	r2, [r7, #4]
 8005094:	4619      	mov	r1, r3
 8005096:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8005098:	2b00      	cmp	r3, #0
 800509a:	d15d      	bne.n	8005158 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	68da      	ldr	r2, [r3, #12]
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f022 0220 	bic.w	r2, r2, #32
 80050aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	68da      	ldr	r2, [r3, #12]
 80050b2:	687b      	ldr	r3, [r7, #4]
 80050b4:	681b      	ldr	r3, [r3, #0]
 80050b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80050ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	681b      	ldr	r3, [r3, #0]
 80050c0:	695a      	ldr	r2, [r3, #20]
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	681b      	ldr	r3, [r3, #0]
 80050c6:	f022 0201 	bic.w	r2, r2, #1
 80050ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	2220      	movs	r2, #32
 80050d0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	2200      	movs	r2, #0
 80050d8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050de:	2b01      	cmp	r3, #1
 80050e0:	d135      	bne.n	800514e <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	2200      	movs	r2, #0
 80050e6:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	330c      	adds	r3, #12
 80050ee:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050f0:	697b      	ldr	r3, [r7, #20]
 80050f2:	e853 3f00 	ldrex	r3, [r3]
 80050f6:	613b      	str	r3, [r7, #16]
   return(result);
 80050f8:	693b      	ldr	r3, [r7, #16]
 80050fa:	f023 0310 	bic.w	r3, r3, #16
 80050fe:	627b      	str	r3, [r7, #36]	; 0x24
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	330c      	adds	r3, #12
 8005106:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005108:	623a      	str	r2, [r7, #32]
 800510a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800510c:	69f9      	ldr	r1, [r7, #28]
 800510e:	6a3a      	ldr	r2, [r7, #32]
 8005110:	e841 2300 	strex	r3, r2, [r1]
 8005114:	61bb      	str	r3, [r7, #24]
   return(result);
 8005116:	69bb      	ldr	r3, [r7, #24]
 8005118:	2b00      	cmp	r3, #0
 800511a:	d1e5      	bne.n	80050e8 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800511c:	687b      	ldr	r3, [r7, #4]
 800511e:	681b      	ldr	r3, [r3, #0]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	f003 0310 	and.w	r3, r3, #16
 8005126:	2b10      	cmp	r3, #16
 8005128:	d10a      	bne.n	8005140 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800512a:	2300      	movs	r3, #0
 800512c:	60fb      	str	r3, [r7, #12]
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	60fb      	str	r3, [r7, #12]
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	685b      	ldr	r3, [r3, #4]
 800513c:	60fb      	str	r3, [r7, #12]
 800513e:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8005144:	4619      	mov	r1, r3
 8005146:	6878      	ldr	r0, [r7, #4]
 8005148:	f7ff fe2a 	bl	8004da0 <HAL_UARTEx_RxEventCallback>
 800514c:	e002      	b.n	8005154 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800514e:	6878      	ldr	r0, [r7, #4]
 8005150:	f7fb fedc 	bl	8000f0c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005154:	2300      	movs	r3, #0
 8005156:	e002      	b.n	800515e <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005158:	2300      	movs	r3, #0
 800515a:	e000      	b.n	800515e <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800515c:	2302      	movs	r3, #2
  }
}
 800515e:	4618      	mov	r0, r3
 8005160:	3730      	adds	r7, #48	; 0x30
 8005162:	46bd      	mov	sp, r7
 8005164:	bd80      	pop	{r7, pc}
	...

08005168 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005168:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800516c:	b0c0      	sub	sp, #256	; 0x100
 800516e:	af00      	add	r7, sp, #0
 8005170:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005174:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	691b      	ldr	r3, [r3, #16]
 800517c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005180:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005184:	68d9      	ldr	r1, [r3, #12]
 8005186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800518a:	681a      	ldr	r2, [r3, #0]
 800518c:	ea40 0301 	orr.w	r3, r0, r1
 8005190:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005192:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005196:	689a      	ldr	r2, [r3, #8]
 8005198:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800519c:	691b      	ldr	r3, [r3, #16]
 800519e:	431a      	orrs	r2, r3
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051a4:	695b      	ldr	r3, [r3, #20]
 80051a6:	431a      	orrs	r2, r3
 80051a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051ac:	69db      	ldr	r3, [r3, #28]
 80051ae:	4313      	orrs	r3, r2
 80051b0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051b8:	681b      	ldr	r3, [r3, #0]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80051c0:	f021 010c 	bic.w	r1, r1, #12
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051c8:	681a      	ldr	r2, [r3, #0]
 80051ca:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80051ce:	430b      	orrs	r3, r1
 80051d0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051d6:	681b      	ldr	r3, [r3, #0]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80051de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e2:	6999      	ldr	r1, [r3, #24]
 80051e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051e8:	681a      	ldr	r2, [r3, #0]
 80051ea:	ea40 0301 	orr.w	r3, r0, r1
 80051ee:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	4b8f      	ldr	r3, [pc, #572]	; (8005434 <UART_SetConfig+0x2cc>)
 80051f8:	429a      	cmp	r2, r3
 80051fa:	d005      	beq.n	8005208 <UART_SetConfig+0xa0>
 80051fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005200:	681a      	ldr	r2, [r3, #0]
 8005202:	4b8d      	ldr	r3, [pc, #564]	; (8005438 <UART_SetConfig+0x2d0>)
 8005204:	429a      	cmp	r2, r3
 8005206:	d104      	bne.n	8005212 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005208:	f7fd ff4e 	bl	80030a8 <HAL_RCC_GetPCLK2Freq>
 800520c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005210:	e003      	b.n	800521a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005212:	f7fd ff35 	bl	8003080 <HAL_RCC_GetPCLK1Freq>
 8005216:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800521a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800521e:	69db      	ldr	r3, [r3, #28]
 8005220:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005224:	f040 810c 	bne.w	8005440 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005228:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800522c:	2200      	movs	r2, #0
 800522e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005232:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005236:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800523a:	4622      	mov	r2, r4
 800523c:	462b      	mov	r3, r5
 800523e:	1891      	adds	r1, r2, r2
 8005240:	65b9      	str	r1, [r7, #88]	; 0x58
 8005242:	415b      	adcs	r3, r3
 8005244:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005246:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800524a:	4621      	mov	r1, r4
 800524c:	eb12 0801 	adds.w	r8, r2, r1
 8005250:	4629      	mov	r1, r5
 8005252:	eb43 0901 	adc.w	r9, r3, r1
 8005256:	f04f 0200 	mov.w	r2, #0
 800525a:	f04f 0300 	mov.w	r3, #0
 800525e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005262:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005266:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800526a:	4690      	mov	r8, r2
 800526c:	4699      	mov	r9, r3
 800526e:	4623      	mov	r3, r4
 8005270:	eb18 0303 	adds.w	r3, r8, r3
 8005274:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005278:	462b      	mov	r3, r5
 800527a:	eb49 0303 	adc.w	r3, r9, r3
 800527e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005282:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	2200      	movs	r2, #0
 800528a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800528e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005292:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005296:	460b      	mov	r3, r1
 8005298:	18db      	adds	r3, r3, r3
 800529a:	653b      	str	r3, [r7, #80]	; 0x50
 800529c:	4613      	mov	r3, r2
 800529e:	eb42 0303 	adc.w	r3, r2, r3
 80052a2:	657b      	str	r3, [r7, #84]	; 0x54
 80052a4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80052a8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80052ac:	f7fa ff98 	bl	80001e0 <__aeabi_uldivmod>
 80052b0:	4602      	mov	r2, r0
 80052b2:	460b      	mov	r3, r1
 80052b4:	4b61      	ldr	r3, [pc, #388]	; (800543c <UART_SetConfig+0x2d4>)
 80052b6:	fba3 2302 	umull	r2, r3, r3, r2
 80052ba:	095b      	lsrs	r3, r3, #5
 80052bc:	011c      	lsls	r4, r3, #4
 80052be:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80052c2:	2200      	movs	r2, #0
 80052c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80052c8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80052cc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80052d0:	4642      	mov	r2, r8
 80052d2:	464b      	mov	r3, r9
 80052d4:	1891      	adds	r1, r2, r2
 80052d6:	64b9      	str	r1, [r7, #72]	; 0x48
 80052d8:	415b      	adcs	r3, r3
 80052da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80052dc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80052e0:	4641      	mov	r1, r8
 80052e2:	eb12 0a01 	adds.w	sl, r2, r1
 80052e6:	4649      	mov	r1, r9
 80052e8:	eb43 0b01 	adc.w	fp, r3, r1
 80052ec:	f04f 0200 	mov.w	r2, #0
 80052f0:	f04f 0300 	mov.w	r3, #0
 80052f4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80052f8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80052fc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005300:	4692      	mov	sl, r2
 8005302:	469b      	mov	fp, r3
 8005304:	4643      	mov	r3, r8
 8005306:	eb1a 0303 	adds.w	r3, sl, r3
 800530a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800530e:	464b      	mov	r3, r9
 8005310:	eb4b 0303 	adc.w	r3, fp, r3
 8005314:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800531c:	685b      	ldr	r3, [r3, #4]
 800531e:	2200      	movs	r2, #0
 8005320:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005324:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005328:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800532c:	460b      	mov	r3, r1
 800532e:	18db      	adds	r3, r3, r3
 8005330:	643b      	str	r3, [r7, #64]	; 0x40
 8005332:	4613      	mov	r3, r2
 8005334:	eb42 0303 	adc.w	r3, r2, r3
 8005338:	647b      	str	r3, [r7, #68]	; 0x44
 800533a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800533e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005342:	f7fa ff4d 	bl	80001e0 <__aeabi_uldivmod>
 8005346:	4602      	mov	r2, r0
 8005348:	460b      	mov	r3, r1
 800534a:	4611      	mov	r1, r2
 800534c:	4b3b      	ldr	r3, [pc, #236]	; (800543c <UART_SetConfig+0x2d4>)
 800534e:	fba3 2301 	umull	r2, r3, r3, r1
 8005352:	095b      	lsrs	r3, r3, #5
 8005354:	2264      	movs	r2, #100	; 0x64
 8005356:	fb02 f303 	mul.w	r3, r2, r3
 800535a:	1acb      	subs	r3, r1, r3
 800535c:	00db      	lsls	r3, r3, #3
 800535e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005362:	4b36      	ldr	r3, [pc, #216]	; (800543c <UART_SetConfig+0x2d4>)
 8005364:	fba3 2302 	umull	r2, r3, r3, r2
 8005368:	095b      	lsrs	r3, r3, #5
 800536a:	005b      	lsls	r3, r3, #1
 800536c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005370:	441c      	add	r4, r3
 8005372:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005376:	2200      	movs	r2, #0
 8005378:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800537c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005380:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005384:	4642      	mov	r2, r8
 8005386:	464b      	mov	r3, r9
 8005388:	1891      	adds	r1, r2, r2
 800538a:	63b9      	str	r1, [r7, #56]	; 0x38
 800538c:	415b      	adcs	r3, r3
 800538e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005390:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005394:	4641      	mov	r1, r8
 8005396:	1851      	adds	r1, r2, r1
 8005398:	6339      	str	r1, [r7, #48]	; 0x30
 800539a:	4649      	mov	r1, r9
 800539c:	414b      	adcs	r3, r1
 800539e:	637b      	str	r3, [r7, #52]	; 0x34
 80053a0:	f04f 0200 	mov.w	r2, #0
 80053a4:	f04f 0300 	mov.w	r3, #0
 80053a8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80053ac:	4659      	mov	r1, fp
 80053ae:	00cb      	lsls	r3, r1, #3
 80053b0:	4651      	mov	r1, sl
 80053b2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053b6:	4651      	mov	r1, sl
 80053b8:	00ca      	lsls	r2, r1, #3
 80053ba:	4610      	mov	r0, r2
 80053bc:	4619      	mov	r1, r3
 80053be:	4603      	mov	r3, r0
 80053c0:	4642      	mov	r2, r8
 80053c2:	189b      	adds	r3, r3, r2
 80053c4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80053c8:	464b      	mov	r3, r9
 80053ca:	460a      	mov	r2, r1
 80053cc:	eb42 0303 	adc.w	r3, r2, r3
 80053d0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80053d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80053d8:	685b      	ldr	r3, [r3, #4]
 80053da:	2200      	movs	r2, #0
 80053dc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80053e0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80053e4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80053e8:	460b      	mov	r3, r1
 80053ea:	18db      	adds	r3, r3, r3
 80053ec:	62bb      	str	r3, [r7, #40]	; 0x28
 80053ee:	4613      	mov	r3, r2
 80053f0:	eb42 0303 	adc.w	r3, r2, r3
 80053f4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80053f6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80053fa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80053fe:	f7fa feef 	bl	80001e0 <__aeabi_uldivmod>
 8005402:	4602      	mov	r2, r0
 8005404:	460b      	mov	r3, r1
 8005406:	4b0d      	ldr	r3, [pc, #52]	; (800543c <UART_SetConfig+0x2d4>)
 8005408:	fba3 1302 	umull	r1, r3, r3, r2
 800540c:	095b      	lsrs	r3, r3, #5
 800540e:	2164      	movs	r1, #100	; 0x64
 8005410:	fb01 f303 	mul.w	r3, r1, r3
 8005414:	1ad3      	subs	r3, r2, r3
 8005416:	00db      	lsls	r3, r3, #3
 8005418:	3332      	adds	r3, #50	; 0x32
 800541a:	4a08      	ldr	r2, [pc, #32]	; (800543c <UART_SetConfig+0x2d4>)
 800541c:	fba2 2303 	umull	r2, r3, r2, r3
 8005420:	095b      	lsrs	r3, r3, #5
 8005422:	f003 0207 	and.w	r2, r3, #7
 8005426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	4422      	add	r2, r4
 800542e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005430:	e106      	b.n	8005640 <UART_SetConfig+0x4d8>
 8005432:	bf00      	nop
 8005434:	40011000 	.word	0x40011000
 8005438:	40011400 	.word	0x40011400
 800543c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005440:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005444:	2200      	movs	r2, #0
 8005446:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800544a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800544e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005452:	4642      	mov	r2, r8
 8005454:	464b      	mov	r3, r9
 8005456:	1891      	adds	r1, r2, r2
 8005458:	6239      	str	r1, [r7, #32]
 800545a:	415b      	adcs	r3, r3
 800545c:	627b      	str	r3, [r7, #36]	; 0x24
 800545e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005462:	4641      	mov	r1, r8
 8005464:	1854      	adds	r4, r2, r1
 8005466:	4649      	mov	r1, r9
 8005468:	eb43 0501 	adc.w	r5, r3, r1
 800546c:	f04f 0200 	mov.w	r2, #0
 8005470:	f04f 0300 	mov.w	r3, #0
 8005474:	00eb      	lsls	r3, r5, #3
 8005476:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800547a:	00e2      	lsls	r2, r4, #3
 800547c:	4614      	mov	r4, r2
 800547e:	461d      	mov	r5, r3
 8005480:	4643      	mov	r3, r8
 8005482:	18e3      	adds	r3, r4, r3
 8005484:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005488:	464b      	mov	r3, r9
 800548a:	eb45 0303 	adc.w	r3, r5, r3
 800548e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005496:	685b      	ldr	r3, [r3, #4]
 8005498:	2200      	movs	r2, #0
 800549a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800549e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80054a2:	f04f 0200 	mov.w	r2, #0
 80054a6:	f04f 0300 	mov.w	r3, #0
 80054aa:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80054ae:	4629      	mov	r1, r5
 80054b0:	008b      	lsls	r3, r1, #2
 80054b2:	4621      	mov	r1, r4
 80054b4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054b8:	4621      	mov	r1, r4
 80054ba:	008a      	lsls	r2, r1, #2
 80054bc:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80054c0:	f7fa fe8e 	bl	80001e0 <__aeabi_uldivmod>
 80054c4:	4602      	mov	r2, r0
 80054c6:	460b      	mov	r3, r1
 80054c8:	4b60      	ldr	r3, [pc, #384]	; (800564c <UART_SetConfig+0x4e4>)
 80054ca:	fba3 2302 	umull	r2, r3, r3, r2
 80054ce:	095b      	lsrs	r3, r3, #5
 80054d0:	011c      	lsls	r4, r3, #4
 80054d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80054d6:	2200      	movs	r2, #0
 80054d8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80054dc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80054e0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80054e4:	4642      	mov	r2, r8
 80054e6:	464b      	mov	r3, r9
 80054e8:	1891      	adds	r1, r2, r2
 80054ea:	61b9      	str	r1, [r7, #24]
 80054ec:	415b      	adcs	r3, r3
 80054ee:	61fb      	str	r3, [r7, #28]
 80054f0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80054f4:	4641      	mov	r1, r8
 80054f6:	1851      	adds	r1, r2, r1
 80054f8:	6139      	str	r1, [r7, #16]
 80054fa:	4649      	mov	r1, r9
 80054fc:	414b      	adcs	r3, r1
 80054fe:	617b      	str	r3, [r7, #20]
 8005500:	f04f 0200 	mov.w	r2, #0
 8005504:	f04f 0300 	mov.w	r3, #0
 8005508:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800550c:	4659      	mov	r1, fp
 800550e:	00cb      	lsls	r3, r1, #3
 8005510:	4651      	mov	r1, sl
 8005512:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005516:	4651      	mov	r1, sl
 8005518:	00ca      	lsls	r2, r1, #3
 800551a:	4610      	mov	r0, r2
 800551c:	4619      	mov	r1, r3
 800551e:	4603      	mov	r3, r0
 8005520:	4642      	mov	r2, r8
 8005522:	189b      	adds	r3, r3, r2
 8005524:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005528:	464b      	mov	r3, r9
 800552a:	460a      	mov	r2, r1
 800552c:	eb42 0303 	adc.w	r3, r2, r3
 8005530:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005534:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005538:	685b      	ldr	r3, [r3, #4]
 800553a:	2200      	movs	r2, #0
 800553c:	67bb      	str	r3, [r7, #120]	; 0x78
 800553e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005540:	f04f 0200 	mov.w	r2, #0
 8005544:	f04f 0300 	mov.w	r3, #0
 8005548:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800554c:	4649      	mov	r1, r9
 800554e:	008b      	lsls	r3, r1, #2
 8005550:	4641      	mov	r1, r8
 8005552:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005556:	4641      	mov	r1, r8
 8005558:	008a      	lsls	r2, r1, #2
 800555a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800555e:	f7fa fe3f 	bl	80001e0 <__aeabi_uldivmod>
 8005562:	4602      	mov	r2, r0
 8005564:	460b      	mov	r3, r1
 8005566:	4611      	mov	r1, r2
 8005568:	4b38      	ldr	r3, [pc, #224]	; (800564c <UART_SetConfig+0x4e4>)
 800556a:	fba3 2301 	umull	r2, r3, r3, r1
 800556e:	095b      	lsrs	r3, r3, #5
 8005570:	2264      	movs	r2, #100	; 0x64
 8005572:	fb02 f303 	mul.w	r3, r2, r3
 8005576:	1acb      	subs	r3, r1, r3
 8005578:	011b      	lsls	r3, r3, #4
 800557a:	3332      	adds	r3, #50	; 0x32
 800557c:	4a33      	ldr	r2, [pc, #204]	; (800564c <UART_SetConfig+0x4e4>)
 800557e:	fba2 2303 	umull	r2, r3, r2, r3
 8005582:	095b      	lsrs	r3, r3, #5
 8005584:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005588:	441c      	add	r4, r3
 800558a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800558e:	2200      	movs	r2, #0
 8005590:	673b      	str	r3, [r7, #112]	; 0x70
 8005592:	677a      	str	r2, [r7, #116]	; 0x74
 8005594:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005598:	4642      	mov	r2, r8
 800559a:	464b      	mov	r3, r9
 800559c:	1891      	adds	r1, r2, r2
 800559e:	60b9      	str	r1, [r7, #8]
 80055a0:	415b      	adcs	r3, r3
 80055a2:	60fb      	str	r3, [r7, #12]
 80055a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055a8:	4641      	mov	r1, r8
 80055aa:	1851      	adds	r1, r2, r1
 80055ac:	6039      	str	r1, [r7, #0]
 80055ae:	4649      	mov	r1, r9
 80055b0:	414b      	adcs	r3, r1
 80055b2:	607b      	str	r3, [r7, #4]
 80055b4:	f04f 0200 	mov.w	r2, #0
 80055b8:	f04f 0300 	mov.w	r3, #0
 80055bc:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055c0:	4659      	mov	r1, fp
 80055c2:	00cb      	lsls	r3, r1, #3
 80055c4:	4651      	mov	r1, sl
 80055c6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055ca:	4651      	mov	r1, sl
 80055cc:	00ca      	lsls	r2, r1, #3
 80055ce:	4610      	mov	r0, r2
 80055d0:	4619      	mov	r1, r3
 80055d2:	4603      	mov	r3, r0
 80055d4:	4642      	mov	r2, r8
 80055d6:	189b      	adds	r3, r3, r2
 80055d8:	66bb      	str	r3, [r7, #104]	; 0x68
 80055da:	464b      	mov	r3, r9
 80055dc:	460a      	mov	r2, r1
 80055de:	eb42 0303 	adc.w	r3, r2, r3
 80055e2:	66fb      	str	r3, [r7, #108]	; 0x6c
 80055e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80055e8:	685b      	ldr	r3, [r3, #4]
 80055ea:	2200      	movs	r2, #0
 80055ec:	663b      	str	r3, [r7, #96]	; 0x60
 80055ee:	667a      	str	r2, [r7, #100]	; 0x64
 80055f0:	f04f 0200 	mov.w	r2, #0
 80055f4:	f04f 0300 	mov.w	r3, #0
 80055f8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80055fc:	4649      	mov	r1, r9
 80055fe:	008b      	lsls	r3, r1, #2
 8005600:	4641      	mov	r1, r8
 8005602:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005606:	4641      	mov	r1, r8
 8005608:	008a      	lsls	r2, r1, #2
 800560a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800560e:	f7fa fde7 	bl	80001e0 <__aeabi_uldivmod>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4b0d      	ldr	r3, [pc, #52]	; (800564c <UART_SetConfig+0x4e4>)
 8005618:	fba3 1302 	umull	r1, r3, r3, r2
 800561c:	095b      	lsrs	r3, r3, #5
 800561e:	2164      	movs	r1, #100	; 0x64
 8005620:	fb01 f303 	mul.w	r3, r1, r3
 8005624:	1ad3      	subs	r3, r2, r3
 8005626:	011b      	lsls	r3, r3, #4
 8005628:	3332      	adds	r3, #50	; 0x32
 800562a:	4a08      	ldr	r2, [pc, #32]	; (800564c <UART_SetConfig+0x4e4>)
 800562c:	fba2 2303 	umull	r2, r3, r2, r3
 8005630:	095b      	lsrs	r3, r3, #5
 8005632:	f003 020f 	and.w	r2, r3, #15
 8005636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	4422      	add	r2, r4
 800563e:	609a      	str	r2, [r3, #8]
}
 8005640:	bf00      	nop
 8005642:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005646:	46bd      	mov	sp, r7
 8005648:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800564c:	51eb851f 	.word	0x51eb851f

08005650 <__NVIC_SetPriority>:
{
 8005650:	b480      	push	{r7}
 8005652:	b083      	sub	sp, #12
 8005654:	af00      	add	r7, sp, #0
 8005656:	4603      	mov	r3, r0
 8005658:	6039      	str	r1, [r7, #0]
 800565a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800565c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005660:	2b00      	cmp	r3, #0
 8005662:	db0a      	blt.n	800567a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005664:	683b      	ldr	r3, [r7, #0]
 8005666:	b2da      	uxtb	r2, r3
 8005668:	490c      	ldr	r1, [pc, #48]	; (800569c <__NVIC_SetPriority+0x4c>)
 800566a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800566e:	0112      	lsls	r2, r2, #4
 8005670:	b2d2      	uxtb	r2, r2
 8005672:	440b      	add	r3, r1
 8005674:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005678:	e00a      	b.n	8005690 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	b2da      	uxtb	r2, r3
 800567e:	4908      	ldr	r1, [pc, #32]	; (80056a0 <__NVIC_SetPriority+0x50>)
 8005680:	79fb      	ldrb	r3, [r7, #7]
 8005682:	f003 030f 	and.w	r3, r3, #15
 8005686:	3b04      	subs	r3, #4
 8005688:	0112      	lsls	r2, r2, #4
 800568a:	b2d2      	uxtb	r2, r2
 800568c:	440b      	add	r3, r1
 800568e:	761a      	strb	r2, [r3, #24]
}
 8005690:	bf00      	nop
 8005692:	370c      	adds	r7, #12
 8005694:	46bd      	mov	sp, r7
 8005696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800569a:	4770      	bx	lr
 800569c:	e000e100 	.word	0xe000e100
 80056a0:	e000ed00 	.word	0xe000ed00

080056a4 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80056a4:	b580      	push	{r7, lr}
 80056a6:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80056a8:	4b05      	ldr	r3, [pc, #20]	; (80056c0 <SysTick_Handler+0x1c>)
 80056aa:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80056ac:	f001 fd28 	bl	8007100 <xTaskGetSchedulerState>
 80056b0:	4603      	mov	r3, r0
 80056b2:	2b01      	cmp	r3, #1
 80056b4:	d001      	beq.n	80056ba <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80056b6:	f002 fb0f 	bl	8007cd8 <xPortSysTickHandler>
  }
}
 80056ba:	bf00      	nop
 80056bc:	bd80      	pop	{r7, pc}
 80056be:	bf00      	nop
 80056c0:	e000e010 	.word	0xe000e010

080056c4 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056c4:	b580      	push	{r7, lr}
 80056c6:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056c8:	2100      	movs	r1, #0
 80056ca:	f06f 0004 	mvn.w	r0, #4
 80056ce:	f7ff ffbf 	bl	8005650 <__NVIC_SetPriority>
#endif
}
 80056d2:	bf00      	nop
 80056d4:	bd80      	pop	{r7, pc}
	...

080056d8 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80056d8:	b480      	push	{r7}
 80056da:	b083      	sub	sp, #12
 80056dc:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80056de:	f3ef 8305 	mrs	r3, IPSR
 80056e2:	603b      	str	r3, [r7, #0]
  return(result);
 80056e4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d003      	beq.n	80056f2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80056ea:	f06f 0305 	mvn.w	r3, #5
 80056ee:	607b      	str	r3, [r7, #4]
 80056f0:	e00c      	b.n	800570c <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80056f2:	4b0a      	ldr	r3, [pc, #40]	; (800571c <osKernelInitialize+0x44>)
 80056f4:	681b      	ldr	r3, [r3, #0]
 80056f6:	2b00      	cmp	r3, #0
 80056f8:	d105      	bne.n	8005706 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80056fa:	4b08      	ldr	r3, [pc, #32]	; (800571c <osKernelInitialize+0x44>)
 80056fc:	2201      	movs	r2, #1
 80056fe:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005700:	2300      	movs	r3, #0
 8005702:	607b      	str	r3, [r7, #4]
 8005704:	e002      	b.n	800570c <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005706:	f04f 33ff 	mov.w	r3, #4294967295
 800570a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800570c:	687b      	ldr	r3, [r7, #4]
}
 800570e:	4618      	mov	r0, r3
 8005710:	370c      	adds	r7, #12
 8005712:	46bd      	mov	sp, r7
 8005714:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005718:	4770      	bx	lr
 800571a:	bf00      	nop
 800571c:	20000384 	.word	0x20000384

08005720 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005720:	b580      	push	{r7, lr}
 8005722:	b082      	sub	sp, #8
 8005724:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005726:	f3ef 8305 	mrs	r3, IPSR
 800572a:	603b      	str	r3, [r7, #0]
  return(result);
 800572c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800572e:	2b00      	cmp	r3, #0
 8005730:	d003      	beq.n	800573a <osKernelStart+0x1a>
    stat = osErrorISR;
 8005732:	f06f 0305 	mvn.w	r3, #5
 8005736:	607b      	str	r3, [r7, #4]
 8005738:	e010      	b.n	800575c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 800573a:	4b0b      	ldr	r3, [pc, #44]	; (8005768 <osKernelStart+0x48>)
 800573c:	681b      	ldr	r3, [r3, #0]
 800573e:	2b01      	cmp	r3, #1
 8005740:	d109      	bne.n	8005756 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8005742:	f7ff ffbf 	bl	80056c4 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005746:	4b08      	ldr	r3, [pc, #32]	; (8005768 <osKernelStart+0x48>)
 8005748:	2202      	movs	r2, #2
 800574a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800574c:	f001 f87c 	bl	8006848 <vTaskStartScheduler>
      stat = osOK;
 8005750:	2300      	movs	r3, #0
 8005752:	607b      	str	r3, [r7, #4]
 8005754:	e002      	b.n	800575c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005756:	f04f 33ff 	mov.w	r3, #4294967295
 800575a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800575c:	687b      	ldr	r3, [r7, #4]
}
 800575e:	4618      	mov	r0, r3
 8005760:	3708      	adds	r7, #8
 8005762:	46bd      	mov	sp, r7
 8005764:	bd80      	pop	{r7, pc}
 8005766:	bf00      	nop
 8005768:	20000384 	.word	0x20000384

0800576c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800576c:	b580      	push	{r7, lr}
 800576e:	b08e      	sub	sp, #56	; 0x38
 8005770:	af04      	add	r7, sp, #16
 8005772:	60f8      	str	r0, [r7, #12]
 8005774:	60b9      	str	r1, [r7, #8]
 8005776:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005778:	2300      	movs	r3, #0
 800577a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800577c:	f3ef 8305 	mrs	r3, IPSR
 8005780:	617b      	str	r3, [r7, #20]
  return(result);
 8005782:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005784:	2b00      	cmp	r3, #0
 8005786:	d17e      	bne.n	8005886 <osThreadNew+0x11a>
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b00      	cmp	r3, #0
 800578c:	d07b      	beq.n	8005886 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800578e:	2380      	movs	r3, #128	; 0x80
 8005790:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005792:	2318      	movs	r3, #24
 8005794:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005796:	2300      	movs	r3, #0
 8005798:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800579a:	f04f 33ff 	mov.w	r3, #4294967295
 800579e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	2b00      	cmp	r3, #0
 80057a4:	d045      	beq.n	8005832 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	2b00      	cmp	r3, #0
 80057ac:	d002      	beq.n	80057b4 <osThreadNew+0x48>
        name = attr->name;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	699b      	ldr	r3, [r3, #24]
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	699b      	ldr	r3, [r3, #24]
 80057c0:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057c2:	69fb      	ldr	r3, [r7, #28]
 80057c4:	2b00      	cmp	r3, #0
 80057c6:	d008      	beq.n	80057da <osThreadNew+0x6e>
 80057c8:	69fb      	ldr	r3, [r7, #28]
 80057ca:	2b38      	cmp	r3, #56	; 0x38
 80057cc:	d805      	bhi.n	80057da <osThreadNew+0x6e>
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	685b      	ldr	r3, [r3, #4]
 80057d2:	f003 0301 	and.w	r3, r3, #1
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d001      	beq.n	80057de <osThreadNew+0x72>
        return (NULL);
 80057da:	2300      	movs	r3, #0
 80057dc:	e054      	b.n	8005888 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	695b      	ldr	r3, [r3, #20]
 80057e2:	2b00      	cmp	r3, #0
 80057e4:	d003      	beq.n	80057ee <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	695b      	ldr	r3, [r3, #20]
 80057ea:	089b      	lsrs	r3, r3, #2
 80057ec:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	689b      	ldr	r3, [r3, #8]
 80057f2:	2b00      	cmp	r3, #0
 80057f4:	d00e      	beq.n	8005814 <osThreadNew+0xa8>
 80057f6:	687b      	ldr	r3, [r7, #4]
 80057f8:	68db      	ldr	r3, [r3, #12]
 80057fa:	2ba7      	cmp	r3, #167	; 0xa7
 80057fc:	d90a      	bls.n	8005814 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005802:	2b00      	cmp	r3, #0
 8005804:	d006      	beq.n	8005814 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	695b      	ldr	r3, [r3, #20]
 800580a:	2b00      	cmp	r3, #0
 800580c:	d002      	beq.n	8005814 <osThreadNew+0xa8>
        mem = 1;
 800580e:	2301      	movs	r3, #1
 8005810:	61bb      	str	r3, [r7, #24]
 8005812:	e010      	b.n	8005836 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	689b      	ldr	r3, [r3, #8]
 8005818:	2b00      	cmp	r3, #0
 800581a:	d10c      	bne.n	8005836 <osThreadNew+0xca>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	68db      	ldr	r3, [r3, #12]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d108      	bne.n	8005836 <osThreadNew+0xca>
 8005824:	687b      	ldr	r3, [r7, #4]
 8005826:	691b      	ldr	r3, [r3, #16]
 8005828:	2b00      	cmp	r3, #0
 800582a:	d104      	bne.n	8005836 <osThreadNew+0xca>
          mem = 0;
 800582c:	2300      	movs	r3, #0
 800582e:	61bb      	str	r3, [r7, #24]
 8005830:	e001      	b.n	8005836 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8005832:	2300      	movs	r3, #0
 8005834:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005836:	69bb      	ldr	r3, [r7, #24]
 8005838:	2b01      	cmp	r3, #1
 800583a:	d110      	bne.n	800585e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005840:	687a      	ldr	r2, [r7, #4]
 8005842:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005844:	9202      	str	r2, [sp, #8]
 8005846:	9301      	str	r3, [sp, #4]
 8005848:	69fb      	ldr	r3, [r7, #28]
 800584a:	9300      	str	r3, [sp, #0]
 800584c:	68bb      	ldr	r3, [r7, #8]
 800584e:	6a3a      	ldr	r2, [r7, #32]
 8005850:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005852:	68f8      	ldr	r0, [r7, #12]
 8005854:	f000 fe0c 	bl	8006470 <xTaskCreateStatic>
 8005858:	4603      	mov	r3, r0
 800585a:	613b      	str	r3, [r7, #16]
 800585c:	e013      	b.n	8005886 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800585e:	69bb      	ldr	r3, [r7, #24]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d110      	bne.n	8005886 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005864:	6a3b      	ldr	r3, [r7, #32]
 8005866:	b29a      	uxth	r2, r3
 8005868:	f107 0310 	add.w	r3, r7, #16
 800586c:	9301      	str	r3, [sp, #4]
 800586e:	69fb      	ldr	r3, [r7, #28]
 8005870:	9300      	str	r3, [sp, #0]
 8005872:	68bb      	ldr	r3, [r7, #8]
 8005874:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005876:	68f8      	ldr	r0, [r7, #12]
 8005878:	f000 fe57 	bl	800652a <xTaskCreate>
 800587c:	4603      	mov	r3, r0
 800587e:	2b01      	cmp	r3, #1
 8005880:	d001      	beq.n	8005886 <osThreadNew+0x11a>
            hTask = NULL;
 8005882:	2300      	movs	r3, #0
 8005884:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005886:	693b      	ldr	r3, [r7, #16]
}
 8005888:	4618      	mov	r0, r3
 800588a:	3728      	adds	r7, #40	; 0x28
 800588c:	46bd      	mov	sp, r7
 800588e:	bd80      	pop	{r7, pc}

08005890 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005890:	b580      	push	{r7, lr}
 8005892:	b084      	sub	sp, #16
 8005894:	af00      	add	r7, sp, #0
 8005896:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005898:	f3ef 8305 	mrs	r3, IPSR
 800589c:	60bb      	str	r3, [r7, #8]
  return(result);
 800589e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058a0:	2b00      	cmp	r3, #0
 80058a2:	d003      	beq.n	80058ac <osDelay+0x1c>
    stat = osErrorISR;
 80058a4:	f06f 0305 	mvn.w	r3, #5
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e007      	b.n	80058bc <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058ac:	2300      	movs	r3, #0
 80058ae:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d002      	beq.n	80058bc <osDelay+0x2c>
      vTaskDelay(ticks);
 80058b6:	6878      	ldr	r0, [r7, #4]
 80058b8:	f000 ff92 	bl	80067e0 <vTaskDelay>
    }
  }

  return (stat);
 80058bc:	68fb      	ldr	r3, [r7, #12]
}
 80058be:	4618      	mov	r0, r3
 80058c0:	3710      	adds	r7, #16
 80058c2:	46bd      	mov	sp, r7
 80058c4:	bd80      	pop	{r7, pc}
	...

080058c8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80058c8:	b480      	push	{r7}
 80058ca:	b085      	sub	sp, #20
 80058cc:	af00      	add	r7, sp, #0
 80058ce:	60f8      	str	r0, [r7, #12]
 80058d0:	60b9      	str	r1, [r7, #8]
 80058d2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	4a07      	ldr	r2, [pc, #28]	; (80058f4 <vApplicationGetIdleTaskMemory+0x2c>)
 80058d8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80058da:	68bb      	ldr	r3, [r7, #8]
 80058dc:	4a06      	ldr	r2, [pc, #24]	; (80058f8 <vApplicationGetIdleTaskMemory+0x30>)
 80058de:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	2280      	movs	r2, #128	; 0x80
 80058e4:	601a      	str	r2, [r3, #0]
}
 80058e6:	bf00      	nop
 80058e8:	3714      	adds	r7, #20
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20000388 	.word	0x20000388
 80058f8:	20000430 	.word	0x20000430

080058fc <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 80058fc:	b480      	push	{r7}
 80058fe:	b085      	sub	sp, #20
 8005900:	af00      	add	r7, sp, #0
 8005902:	60f8      	str	r0, [r7, #12]
 8005904:	60b9      	str	r1, [r7, #8]
 8005906:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	4a07      	ldr	r2, [pc, #28]	; (8005928 <vApplicationGetTimerTaskMemory+0x2c>)
 800590c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	4a06      	ldr	r2, [pc, #24]	; (800592c <vApplicationGetTimerTaskMemory+0x30>)
 8005912:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	f44f 7280 	mov.w	r2, #256	; 0x100
 800591a:	601a      	str	r2, [r3, #0]
}
 800591c:	bf00      	nop
 800591e:	3714      	adds	r7, #20
 8005920:	46bd      	mov	sp, r7
 8005922:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005926:	4770      	bx	lr
 8005928:	20000630 	.word	0x20000630
 800592c:	200006d8 	.word	0x200006d8

08005930 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005930:	b480      	push	{r7}
 8005932:	b083      	sub	sp, #12
 8005934:	af00      	add	r7, sp, #0
 8005936:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	f103 0208 	add.w	r2, r3, #8
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005942:	687b      	ldr	r3, [r7, #4]
 8005944:	f04f 32ff 	mov.w	r2, #4294967295
 8005948:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f103 0208 	add.w	r2, r3, #8
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	f103 0208 	add.w	r2, r3, #8
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	2200      	movs	r2, #0
 8005962:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005964:	bf00      	nop
 8005966:	370c      	adds	r7, #12
 8005968:	46bd      	mov	sp, r7
 800596a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596e:	4770      	bx	lr

08005970 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005970:	b480      	push	{r7}
 8005972:	b083      	sub	sp, #12
 8005974:	af00      	add	r7, sp, #0
 8005976:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	2200      	movs	r2, #0
 800597c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800597e:	bf00      	nop
 8005980:	370c      	adds	r7, #12
 8005982:	46bd      	mov	sp, r7
 8005984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005988:	4770      	bx	lr

0800598a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800598a:	b480      	push	{r7}
 800598c:	b085      	sub	sp, #20
 800598e:	af00      	add	r7, sp, #0
 8005990:	6078      	str	r0, [r7, #4]
 8005992:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	685b      	ldr	r3, [r3, #4]
 8005998:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800599a:	683b      	ldr	r3, [r7, #0]
 800599c:	68fa      	ldr	r2, [r7, #12]
 800599e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80059a0:	68fb      	ldr	r3, [r7, #12]
 80059a2:	689a      	ldr	r2, [r3, #8]
 80059a4:	683b      	ldr	r3, [r7, #0]
 80059a6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	689b      	ldr	r3, [r3, #8]
 80059ac:	683a      	ldr	r2, [r7, #0]
 80059ae:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	683a      	ldr	r2, [r7, #0]
 80059b4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80059b6:	683b      	ldr	r3, [r7, #0]
 80059b8:	687a      	ldr	r2, [r7, #4]
 80059ba:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	1c5a      	adds	r2, r3, #1
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	601a      	str	r2, [r3, #0]
}
 80059c6:	bf00      	nop
 80059c8:	3714      	adds	r7, #20
 80059ca:	46bd      	mov	sp, r7
 80059cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059d0:	4770      	bx	lr

080059d2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80059d2:	b480      	push	{r7}
 80059d4:	b085      	sub	sp, #20
 80059d6:	af00      	add	r7, sp, #0
 80059d8:	6078      	str	r0, [r7, #4]
 80059da:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80059dc:	683b      	ldr	r3, [r7, #0]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80059e2:	68bb      	ldr	r3, [r7, #8]
 80059e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80059e8:	d103      	bne.n	80059f2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	60fb      	str	r3, [r7, #12]
 80059f0:	e00c      	b.n	8005a0c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	3308      	adds	r3, #8
 80059f6:	60fb      	str	r3, [r7, #12]
 80059f8:	e002      	b.n	8005a00 <vListInsert+0x2e>
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	685b      	ldr	r3, [r3, #4]
 80059fe:	60fb      	str	r3, [r7, #12]
 8005a00:	68fb      	ldr	r3, [r7, #12]
 8005a02:	685b      	ldr	r3, [r3, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	68ba      	ldr	r2, [r7, #8]
 8005a08:	429a      	cmp	r2, r3
 8005a0a:	d2f6      	bcs.n	80059fa <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	685a      	ldr	r2, [r3, #4]
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005a14:	683b      	ldr	r3, [r7, #0]
 8005a16:	685b      	ldr	r3, [r3, #4]
 8005a18:	683a      	ldr	r2, [r7, #0]
 8005a1a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005a1c:	683b      	ldr	r3, [r7, #0]
 8005a1e:	68fa      	ldr	r2, [r7, #12]
 8005a20:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	683a      	ldr	r2, [r7, #0]
 8005a26:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	687a      	ldr	r2, [r7, #4]
 8005a2c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	681b      	ldr	r3, [r3, #0]
 8005a32:	1c5a      	adds	r2, r3, #1
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	601a      	str	r2, [r3, #0]
}
 8005a38:	bf00      	nop
 8005a3a:	3714      	adds	r7, #20
 8005a3c:	46bd      	mov	sp, r7
 8005a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a42:	4770      	bx	lr

08005a44 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005a44:	b480      	push	{r7}
 8005a46:	b085      	sub	sp, #20
 8005a48:	af00      	add	r7, sp, #0
 8005a4a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	691b      	ldr	r3, [r3, #16]
 8005a50:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	685b      	ldr	r3, [r3, #4]
 8005a56:	687a      	ldr	r2, [r7, #4]
 8005a58:	6892      	ldr	r2, [r2, #8]
 8005a5a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005a5c:	687b      	ldr	r3, [r7, #4]
 8005a5e:	689b      	ldr	r3, [r3, #8]
 8005a60:	687a      	ldr	r2, [r7, #4]
 8005a62:	6852      	ldr	r2, [r2, #4]
 8005a64:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005a66:	68fb      	ldr	r3, [r7, #12]
 8005a68:	685b      	ldr	r3, [r3, #4]
 8005a6a:	687a      	ldr	r2, [r7, #4]
 8005a6c:	429a      	cmp	r2, r3
 8005a6e:	d103      	bne.n	8005a78 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	689a      	ldr	r2, [r3, #8]
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	2200      	movs	r2, #0
 8005a7c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	1e5a      	subs	r2, r3, #1
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3714      	adds	r7, #20
 8005a90:	46bd      	mov	sp, r7
 8005a92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a96:	4770      	bx	lr

08005a98 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005a98:	b580      	push	{r7, lr}
 8005a9a:	b084      	sub	sp, #16
 8005a9c:	af00      	add	r7, sp, #0
 8005a9e:	6078      	str	r0, [r7, #4]
 8005aa0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	2b00      	cmp	r3, #0
 8005aaa:	d10a      	bne.n	8005ac2 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005aac:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ab0:	f383 8811 	msr	BASEPRI, r3
 8005ab4:	f3bf 8f6f 	isb	sy
 8005ab8:	f3bf 8f4f 	dsb	sy
 8005abc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005abe:	bf00      	nop
 8005ac0:	e7fe      	b.n	8005ac0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005ac2:	f002 f877 	bl	8007bb4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005ac6:	68fb      	ldr	r3, [r7, #12]
 8005ac8:	681a      	ldr	r2, [r3, #0]
 8005aca:	68fb      	ldr	r3, [r7, #12]
 8005acc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ace:	68f9      	ldr	r1, [r7, #12]
 8005ad0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005ad2:	fb01 f303 	mul.w	r3, r1, r3
 8005ad6:	441a      	add	r2, r3
 8005ad8:	68fb      	ldr	r3, [r7, #12]
 8005ada:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005adc:	68fb      	ldr	r3, [r7, #12]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ae2:	68fb      	ldr	r3, [r7, #12]
 8005ae4:	681a      	ldr	r2, [r3, #0]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681a      	ldr	r2, [r3, #0]
 8005aee:	68fb      	ldr	r3, [r7, #12]
 8005af0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005af2:	3b01      	subs	r3, #1
 8005af4:	68f9      	ldr	r1, [r7, #12]
 8005af6:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8005af8:	fb01 f303 	mul.w	r3, r1, r3
 8005afc:	441a      	add	r2, r3
 8005afe:	68fb      	ldr	r3, [r7, #12]
 8005b00:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005b02:	68fb      	ldr	r3, [r7, #12]
 8005b04:	22ff      	movs	r2, #255	; 0xff
 8005b06:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	22ff      	movs	r2, #255	; 0xff
 8005b0e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8005b12:	683b      	ldr	r3, [r7, #0]
 8005b14:	2b00      	cmp	r3, #0
 8005b16:	d114      	bne.n	8005b42 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	691b      	ldr	r3, [r3, #16]
 8005b1c:	2b00      	cmp	r3, #0
 8005b1e:	d01a      	beq.n	8005b56 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b20:	68fb      	ldr	r3, [r7, #12]
 8005b22:	3310      	adds	r3, #16
 8005b24:	4618      	mov	r0, r3
 8005b26:	f001 f929 	bl	8006d7c <xTaskRemoveFromEventList>
 8005b2a:	4603      	mov	r3, r0
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d012      	beq.n	8005b56 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005b30:	4b0c      	ldr	r3, [pc, #48]	; (8005b64 <xQueueGenericReset+0xcc>)
 8005b32:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005b36:	601a      	str	r2, [r3, #0]
 8005b38:	f3bf 8f4f 	dsb	sy
 8005b3c:	f3bf 8f6f 	isb	sy
 8005b40:	e009      	b.n	8005b56 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005b42:	68fb      	ldr	r3, [r7, #12]
 8005b44:	3310      	adds	r3, #16
 8005b46:	4618      	mov	r0, r3
 8005b48:	f7ff fef2 	bl	8005930 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005b4c:	68fb      	ldr	r3, [r7, #12]
 8005b4e:	3324      	adds	r3, #36	; 0x24
 8005b50:	4618      	mov	r0, r3
 8005b52:	f7ff feed 	bl	8005930 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005b56:	f002 f85d 	bl	8007c14 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005b5a:	2301      	movs	r3, #1
}
 8005b5c:	4618      	mov	r0, r3
 8005b5e:	3710      	adds	r7, #16
 8005b60:	46bd      	mov	sp, r7
 8005b62:	bd80      	pop	{r7, pc}
 8005b64:	e000ed04 	.word	0xe000ed04

08005b68 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005b68:	b580      	push	{r7, lr}
 8005b6a:	b08e      	sub	sp, #56	; 0x38
 8005b6c:	af02      	add	r7, sp, #8
 8005b6e:	60f8      	str	r0, [r7, #12]
 8005b70:	60b9      	str	r1, [r7, #8]
 8005b72:	607a      	str	r2, [r7, #4]
 8005b74:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	2b00      	cmp	r3, #0
 8005b7a:	d10a      	bne.n	8005b92 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8005b7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b80:	f383 8811 	msr	BASEPRI, r3
 8005b84:	f3bf 8f6f 	isb	sy
 8005b88:	f3bf 8f4f 	dsb	sy
 8005b8c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005b8e:	bf00      	nop
 8005b90:	e7fe      	b.n	8005b90 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	2b00      	cmp	r3, #0
 8005b96:	d10a      	bne.n	8005bae <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8005b98:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005b9c:	f383 8811 	msr	BASEPRI, r3
 8005ba0:	f3bf 8f6f 	isb	sy
 8005ba4:	f3bf 8f4f 	dsb	sy
 8005ba8:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005baa:	bf00      	nop
 8005bac:	e7fe      	b.n	8005bac <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d002      	beq.n	8005bba <xQueueGenericCreateStatic+0x52>
 8005bb4:	68bb      	ldr	r3, [r7, #8]
 8005bb6:	2b00      	cmp	r3, #0
 8005bb8:	d001      	beq.n	8005bbe <xQueueGenericCreateStatic+0x56>
 8005bba:	2301      	movs	r3, #1
 8005bbc:	e000      	b.n	8005bc0 <xQueueGenericCreateStatic+0x58>
 8005bbe:	2300      	movs	r3, #0
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d10a      	bne.n	8005bda <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8005bc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bc8:	f383 8811 	msr	BASEPRI, r3
 8005bcc:	f3bf 8f6f 	isb	sy
 8005bd0:	f3bf 8f4f 	dsb	sy
 8005bd4:	623b      	str	r3, [r7, #32]
}
 8005bd6:	bf00      	nop
 8005bd8:	e7fe      	b.n	8005bd8 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d102      	bne.n	8005be6 <xQueueGenericCreateStatic+0x7e>
 8005be0:	68bb      	ldr	r3, [r7, #8]
 8005be2:	2b00      	cmp	r3, #0
 8005be4:	d101      	bne.n	8005bea <xQueueGenericCreateStatic+0x82>
 8005be6:	2301      	movs	r3, #1
 8005be8:	e000      	b.n	8005bec <xQueueGenericCreateStatic+0x84>
 8005bea:	2300      	movs	r3, #0
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10a      	bne.n	8005c06 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8005bf0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005bf4:	f383 8811 	msr	BASEPRI, r3
 8005bf8:	f3bf 8f6f 	isb	sy
 8005bfc:	f3bf 8f4f 	dsb	sy
 8005c00:	61fb      	str	r3, [r7, #28]
}
 8005c02:	bf00      	nop
 8005c04:	e7fe      	b.n	8005c04 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005c06:	2350      	movs	r3, #80	; 0x50
 8005c08:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005c0a:	697b      	ldr	r3, [r7, #20]
 8005c0c:	2b50      	cmp	r3, #80	; 0x50
 8005c0e:	d00a      	beq.n	8005c26 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	61bb      	str	r3, [r7, #24]
}
 8005c22:	bf00      	nop
 8005c24:	e7fe      	b.n	8005c24 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005c26:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8005c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d00d      	beq.n	8005c4e <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c34:	2201      	movs	r2, #1
 8005c36:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005c3a:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8005c3e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005c40:	9300      	str	r3, [sp, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	687a      	ldr	r2, [r7, #4]
 8005c46:	68b9      	ldr	r1, [r7, #8]
 8005c48:	68f8      	ldr	r0, [r7, #12]
 8005c4a:	f000 f805 	bl	8005c58 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3730      	adds	r7, #48	; 0x30
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005c58:	b580      	push	{r7, lr}
 8005c5a:	b084      	sub	sp, #16
 8005c5c:	af00      	add	r7, sp, #0
 8005c5e:	60f8      	str	r0, [r7, #12]
 8005c60:	60b9      	str	r1, [r7, #8]
 8005c62:	607a      	str	r2, [r7, #4]
 8005c64:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	2b00      	cmp	r3, #0
 8005c6a:	d103      	bne.n	8005c74 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005c6c:	69bb      	ldr	r3, [r7, #24]
 8005c6e:	69ba      	ldr	r2, [r7, #24]
 8005c70:	601a      	str	r2, [r3, #0]
 8005c72:	e002      	b.n	8005c7a <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005c74:	69bb      	ldr	r3, [r7, #24]
 8005c76:	687a      	ldr	r2, [r7, #4]
 8005c78:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005c7a:	69bb      	ldr	r3, [r7, #24]
 8005c7c:	68fa      	ldr	r2, [r7, #12]
 8005c7e:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005c80:	69bb      	ldr	r3, [r7, #24]
 8005c82:	68ba      	ldr	r2, [r7, #8]
 8005c84:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005c86:	2101      	movs	r1, #1
 8005c88:	69b8      	ldr	r0, [r7, #24]
 8005c8a:	f7ff ff05 	bl	8005a98 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005c8e:	69bb      	ldr	r3, [r7, #24]
 8005c90:	78fa      	ldrb	r2, [r7, #3]
 8005c92:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005c96:	bf00      	nop
 8005c98:	3710      	adds	r7, #16
 8005c9a:	46bd      	mov	sp, r7
 8005c9c:	bd80      	pop	{r7, pc}
	...

08005ca0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005ca0:	b580      	push	{r7, lr}
 8005ca2:	b08e      	sub	sp, #56	; 0x38
 8005ca4:	af00      	add	r7, sp, #0
 8005ca6:	60f8      	str	r0, [r7, #12]
 8005ca8:	60b9      	str	r1, [r7, #8]
 8005caa:	607a      	str	r2, [r7, #4]
 8005cac:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005cae:	2300      	movs	r3, #0
 8005cb0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8005cb6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	d10a      	bne.n	8005cd2 <xQueueGenericSend+0x32>
	__asm volatile
 8005cbc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cc0:	f383 8811 	msr	BASEPRI, r3
 8005cc4:	f3bf 8f6f 	isb	sy
 8005cc8:	f3bf 8f4f 	dsb	sy
 8005ccc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005cce:	bf00      	nop
 8005cd0:	e7fe      	b.n	8005cd0 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cd2:	68bb      	ldr	r3, [r7, #8]
 8005cd4:	2b00      	cmp	r3, #0
 8005cd6:	d103      	bne.n	8005ce0 <xQueueGenericSend+0x40>
 8005cd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005cda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cdc:	2b00      	cmp	r3, #0
 8005cde:	d101      	bne.n	8005ce4 <xQueueGenericSend+0x44>
 8005ce0:	2301      	movs	r3, #1
 8005ce2:	e000      	b.n	8005ce6 <xQueueGenericSend+0x46>
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10a      	bne.n	8005d00 <xQueueGenericSend+0x60>
	__asm volatile
 8005cea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005cee:	f383 8811 	msr	BASEPRI, r3
 8005cf2:	f3bf 8f6f 	isb	sy
 8005cf6:	f3bf 8f4f 	dsb	sy
 8005cfa:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005cfc:	bf00      	nop
 8005cfe:	e7fe      	b.n	8005cfe <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d00:	683b      	ldr	r3, [r7, #0]
 8005d02:	2b02      	cmp	r3, #2
 8005d04:	d103      	bne.n	8005d0e <xQueueGenericSend+0x6e>
 8005d06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d0a:	2b01      	cmp	r3, #1
 8005d0c:	d101      	bne.n	8005d12 <xQueueGenericSend+0x72>
 8005d0e:	2301      	movs	r3, #1
 8005d10:	e000      	b.n	8005d14 <xQueueGenericSend+0x74>
 8005d12:	2300      	movs	r3, #0
 8005d14:	2b00      	cmp	r3, #0
 8005d16:	d10a      	bne.n	8005d2e <xQueueGenericSend+0x8e>
	__asm volatile
 8005d18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d1c:	f383 8811 	msr	BASEPRI, r3
 8005d20:	f3bf 8f6f 	isb	sy
 8005d24:	f3bf 8f4f 	dsb	sy
 8005d28:	623b      	str	r3, [r7, #32]
}
 8005d2a:	bf00      	nop
 8005d2c:	e7fe      	b.n	8005d2c <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2e:	f001 f9e7 	bl	8007100 <xTaskGetSchedulerState>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <xQueueGenericSend+0x9e>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <xQueueGenericSend+0xa2>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <xQueueGenericSend+0xa4>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10a      	bne.n	8005d5e <xQueueGenericSend+0xbe>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	61fb      	str	r3, [r7, #28]
}
 8005d5a:	bf00      	nop
 8005d5c:	e7fe      	b.n	8005d5c <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d5e:	f001 ff29 	bl	8007bb4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005d62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d64:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005d66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d68:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005d6a:	429a      	cmp	r2, r3
 8005d6c:	d302      	bcc.n	8005d74 <xQueueGenericSend+0xd4>
 8005d6e:	683b      	ldr	r3, [r7, #0]
 8005d70:	2b02      	cmp	r3, #2
 8005d72:	d129      	bne.n	8005dc8 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005d74:	683a      	ldr	r2, [r7, #0]
 8005d76:	68b9      	ldr	r1, [r7, #8]
 8005d78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005d7a:	f000 fa0b 	bl	8006194 <prvCopyDataToQueue>
 8005d7e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005d80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d010      	beq.n	8005daa <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005d88:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005d8a:	3324      	adds	r3, #36	; 0x24
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 fff5 	bl	8006d7c <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d013      	beq.n	8005dc0 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b3f      	ldr	r3, [pc, #252]	; (8005e98 <xQueueGenericSend+0x1f8>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
 8005da8:	e00a      	b.n	8005dc0 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005dac:	2b00      	cmp	r3, #0
 8005dae:	d007      	beq.n	8005dc0 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005db0:	4b39      	ldr	r3, [pc, #228]	; (8005e98 <xQueueGenericSend+0x1f8>)
 8005db2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005db6:	601a      	str	r2, [r3, #0]
 8005db8:	f3bf 8f4f 	dsb	sy
 8005dbc:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005dc0:	f001 ff28 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	e063      	b.n	8005e90 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	2b00      	cmp	r3, #0
 8005dcc:	d103      	bne.n	8005dd6 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dce:	f001 ff21 	bl	8007c14 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	e05c      	b.n	8005e90 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dd6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d106      	bne.n	8005dea <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ddc:	f107 0314 	add.w	r3, r7, #20
 8005de0:	4618      	mov	r0, r3
 8005de2:	f001 f82f 	bl	8006e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005de6:	2301      	movs	r3, #1
 8005de8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dea:	f001 ff13 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dee:	f000 fd9b 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005df2:	f001 fedf 	bl	8007bb4 <vPortEnterCritical>
 8005df6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005df8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005dfc:	b25b      	sxtb	r3, r3
 8005dfe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e02:	d103      	bne.n	8005e0c <xQueueGenericSend+0x16c>
 8005e04:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e06:	2200      	movs	r2, #0
 8005e08:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e0e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005e12:	b25b      	sxtb	r3, r3
 8005e14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e18:	d103      	bne.n	8005e22 <xQueueGenericSend+0x182>
 8005e1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e1c:	2200      	movs	r2, #0
 8005e1e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8005e22:	f001 fef7 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e26:	1d3a      	adds	r2, r7, #4
 8005e28:	f107 0314 	add.w	r3, r7, #20
 8005e2c:	4611      	mov	r1, r2
 8005e2e:	4618      	mov	r0, r3
 8005e30:	f001 f81e 	bl	8006e70 <xTaskCheckForTimeOut>
 8005e34:	4603      	mov	r3, r0
 8005e36:	2b00      	cmp	r3, #0
 8005e38:	d124      	bne.n	8005e84 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005e3a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e3c:	f000 faa2 	bl	8006384 <prvIsQueueFull>
 8005e40:	4603      	mov	r3, r0
 8005e42:	2b00      	cmp	r3, #0
 8005e44:	d018      	beq.n	8005e78 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005e46:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005e48:	3310      	adds	r3, #16
 8005e4a:	687a      	ldr	r2, [r7, #4]
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 ff44 	bl	8006cdc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005e54:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e56:	f000 fa2d 	bl	80062b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005e5a:	f000 fd73 	bl	8006944 <xTaskResumeAll>
 8005e5e:	4603      	mov	r3, r0
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	f47f af7c 	bne.w	8005d5e <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8005e66:	4b0c      	ldr	r3, [pc, #48]	; (8005e98 <xQueueGenericSend+0x1f8>)
 8005e68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e6c:	601a      	str	r2, [r3, #0]
 8005e6e:	f3bf 8f4f 	dsb	sy
 8005e72:	f3bf 8f6f 	isb	sy
 8005e76:	e772      	b.n	8005d5e <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005e78:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e7a:	f000 fa1b 	bl	80062b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e7e:	f000 fd61 	bl	8006944 <xTaskResumeAll>
 8005e82:	e76c      	b.n	8005d5e <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005e84:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8005e86:	f000 fa15 	bl	80062b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e8a:	f000 fd5b 	bl	8006944 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005e8e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005e90:	4618      	mov	r0, r3
 8005e92:	3738      	adds	r7, #56	; 0x38
 8005e94:	46bd      	mov	sp, r7
 8005e96:	bd80      	pop	{r7, pc}
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b090      	sub	sp, #64	; 0x40
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	60f8      	str	r0, [r7, #12]
 8005ea4:	60b9      	str	r1, [r7, #8]
 8005ea6:	607a      	str	r2, [r7, #4]
 8005ea8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8005eae:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eb0:	2b00      	cmp	r3, #0
 8005eb2:	d10a      	bne.n	8005eca <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8005eb4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005eb8:	f383 8811 	msr	BASEPRI, r3
 8005ebc:	f3bf 8f6f 	isb	sy
 8005ec0:	f3bf 8f4f 	dsb	sy
 8005ec4:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8005ec6:	bf00      	nop
 8005ec8:	e7fe      	b.n	8005ec8 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005eca:	68bb      	ldr	r3, [r7, #8]
 8005ecc:	2b00      	cmp	r3, #0
 8005ece:	d103      	bne.n	8005ed8 <xQueueGenericSendFromISR+0x3c>
 8005ed0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <xQueueGenericSendFromISR+0x40>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <xQueueGenericSendFromISR+0x42>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10a      	bne.n	8005ef8 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	627b      	str	r3, [r7, #36]	; 0x24
}
 8005ef4:	bf00      	nop
 8005ef6:	e7fe      	b.n	8005ef6 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005ef8:	683b      	ldr	r3, [r7, #0]
 8005efa:	2b02      	cmp	r3, #2
 8005efc:	d103      	bne.n	8005f06 <xQueueGenericSendFromISR+0x6a>
 8005efe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f02:	2b01      	cmp	r3, #1
 8005f04:	d101      	bne.n	8005f0a <xQueueGenericSendFromISR+0x6e>
 8005f06:	2301      	movs	r3, #1
 8005f08:	e000      	b.n	8005f0c <xQueueGenericSendFromISR+0x70>
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d10a      	bne.n	8005f26 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8005f10:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f14:	f383 8811 	msr	BASEPRI, r3
 8005f18:	f3bf 8f6f 	isb	sy
 8005f1c:	f3bf 8f4f 	dsb	sy
 8005f20:	623b      	str	r3, [r7, #32]
}
 8005f22:	bf00      	nop
 8005f24:	e7fe      	b.n	8005f24 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005f26:	f001 ff27 	bl	8007d78 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005f2a:	f3ef 8211 	mrs	r2, BASEPRI
 8005f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005f32:	f383 8811 	msr	BASEPRI, r3
 8005f36:	f3bf 8f6f 	isb	sy
 8005f3a:	f3bf 8f4f 	dsb	sy
 8005f3e:	61fa      	str	r2, [r7, #28]
 8005f40:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005f42:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f44:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005f46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f48:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8005f4a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005f4e:	429a      	cmp	r2, r3
 8005f50:	d302      	bcc.n	8005f58 <xQueueGenericSendFromISR+0xbc>
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	2b02      	cmp	r3, #2
 8005f56:	d12f      	bne.n	8005fb8 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005f5e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f62:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f66:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f68:	683a      	ldr	r2, [r7, #0]
 8005f6a:	68b9      	ldr	r1, [r7, #8]
 8005f6c:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f6e:	f000 f911 	bl	8006194 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005f72:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8005f76:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f7a:	d112      	bne.n	8005fa2 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d016      	beq.n	8005fb2 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f86:	3324      	adds	r3, #36	; 0x24
 8005f88:	4618      	mov	r0, r3
 8005f8a:	f000 fef7 	bl	8006d7c <xTaskRemoveFromEventList>
 8005f8e:	4603      	mov	r3, r0
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d00e      	beq.n	8005fb2 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00b      	beq.n	8005fb2 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2201      	movs	r2, #1
 8005f9e:	601a      	str	r2, [r3, #0]
 8005fa0:	e007      	b.n	8005fb2 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8005fa6:	3301      	adds	r3, #1
 8005fa8:	b2db      	uxtb	r3, r3
 8005faa:	b25a      	sxtb	r2, r3
 8005fac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005fae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8005fb2:	2301      	movs	r3, #1
 8005fb4:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8005fb6:	e001      	b.n	8005fbc <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005fb8:	2300      	movs	r3, #0
 8005fba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005fbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fbe:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005fc6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005fc8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8005fca:	4618      	mov	r0, r3
 8005fcc:	3740      	adds	r7, #64	; 0x40
 8005fce:	46bd      	mov	sp, r7
 8005fd0:	bd80      	pop	{r7, pc}
	...

08005fd4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b08c      	sub	sp, #48	; 0x30
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005fe8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d10a      	bne.n	8006004 <xQueueReceive+0x30>
	__asm volatile
 8005fee:	f04f 0350 	mov.w	r3, #80	; 0x50
 8005ff2:	f383 8811 	msr	BASEPRI, r3
 8005ff6:	f3bf 8f6f 	isb	sy
 8005ffa:	f3bf 8f4f 	dsb	sy
 8005ffe:	623b      	str	r3, [r7, #32]
}
 8006000:	bf00      	nop
 8006002:	e7fe      	b.n	8006002 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006004:	68bb      	ldr	r3, [r7, #8]
 8006006:	2b00      	cmp	r3, #0
 8006008:	d103      	bne.n	8006012 <xQueueReceive+0x3e>
 800600a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800600c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800600e:	2b00      	cmp	r3, #0
 8006010:	d101      	bne.n	8006016 <xQueueReceive+0x42>
 8006012:	2301      	movs	r3, #1
 8006014:	e000      	b.n	8006018 <xQueueReceive+0x44>
 8006016:	2300      	movs	r3, #0
 8006018:	2b00      	cmp	r3, #0
 800601a:	d10a      	bne.n	8006032 <xQueueReceive+0x5e>
	__asm volatile
 800601c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006020:	f383 8811 	msr	BASEPRI, r3
 8006024:	f3bf 8f6f 	isb	sy
 8006028:	f3bf 8f4f 	dsb	sy
 800602c:	61fb      	str	r3, [r7, #28]
}
 800602e:	bf00      	nop
 8006030:	e7fe      	b.n	8006030 <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006032:	f001 f865 	bl	8007100 <xTaskGetSchedulerState>
 8006036:	4603      	mov	r3, r0
 8006038:	2b00      	cmp	r3, #0
 800603a:	d102      	bne.n	8006042 <xQueueReceive+0x6e>
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	2b00      	cmp	r3, #0
 8006040:	d101      	bne.n	8006046 <xQueueReceive+0x72>
 8006042:	2301      	movs	r3, #1
 8006044:	e000      	b.n	8006048 <xQueueReceive+0x74>
 8006046:	2300      	movs	r3, #0
 8006048:	2b00      	cmp	r3, #0
 800604a:	d10a      	bne.n	8006062 <xQueueReceive+0x8e>
	__asm volatile
 800604c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006050:	f383 8811 	msr	BASEPRI, r3
 8006054:	f3bf 8f6f 	isb	sy
 8006058:	f3bf 8f4f 	dsb	sy
 800605c:	61bb      	str	r3, [r7, #24]
}
 800605e:	bf00      	nop
 8006060:	e7fe      	b.n	8006060 <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006062:	f001 fda7 	bl	8007bb4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800606c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800606e:	2b00      	cmp	r3, #0
 8006070:	d01f      	beq.n	80060b2 <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006076:	f000 f8f7 	bl	8006268 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800607a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800607c:	1e5a      	subs	r2, r3, #1
 800607e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006080:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006082:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006084:	691b      	ldr	r3, [r3, #16]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d00f      	beq.n	80060aa <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800608a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800608c:	3310      	adds	r3, #16
 800608e:	4618      	mov	r0, r3
 8006090:	f000 fe74 	bl	8006d7c <xTaskRemoveFromEventList>
 8006094:	4603      	mov	r3, r0
 8006096:	2b00      	cmp	r3, #0
 8006098:	d007      	beq.n	80060aa <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800609a:	4b3d      	ldr	r3, [pc, #244]	; (8006190 <xQueueReceive+0x1bc>)
 800609c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060a0:	601a      	str	r2, [r3, #0]
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80060aa:	f001 fdb3 	bl	8007c14 <vPortExitCritical>
				return pdPASS;
 80060ae:	2301      	movs	r3, #1
 80060b0:	e069      	b.n	8006186 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d103      	bne.n	80060c0 <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80060b8:	f001 fdac 	bl	8007c14 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80060bc:	2300      	movs	r3, #0
 80060be:	e062      	b.n	8006186 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80060c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d106      	bne.n	80060d4 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80060c6:	f107 0310 	add.w	r3, r7, #16
 80060ca:	4618      	mov	r0, r3
 80060cc:	f000 feba 	bl	8006e44 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80060d4:	f001 fd9e 	bl	8007c14 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80060d8:	f000 fc26 	bl	8006928 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80060dc:	f001 fd6a 	bl	8007bb4 <vPortEnterCritical>
 80060e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060e2:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80060e6:	b25b      	sxtb	r3, r3
 80060e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060ec:	d103      	bne.n	80060f6 <xQueueReceive+0x122>
 80060ee:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f0:	2200      	movs	r2, #0
 80060f2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80060f6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060f8:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80060fc:	b25b      	sxtb	r3, r3
 80060fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006102:	d103      	bne.n	800610c <xQueueReceive+0x138>
 8006104:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006106:	2200      	movs	r2, #0
 8006108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800610c:	f001 fd82 	bl	8007c14 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006110:	1d3a      	adds	r2, r7, #4
 8006112:	f107 0310 	add.w	r3, r7, #16
 8006116:	4611      	mov	r1, r2
 8006118:	4618      	mov	r0, r3
 800611a:	f000 fea9 	bl	8006e70 <xTaskCheckForTimeOut>
 800611e:	4603      	mov	r3, r0
 8006120:	2b00      	cmp	r3, #0
 8006122:	d123      	bne.n	800616c <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006124:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006126:	f000 f917 	bl	8006358 <prvIsQueueEmpty>
 800612a:	4603      	mov	r3, r0
 800612c:	2b00      	cmp	r3, #0
 800612e:	d017      	beq.n	8006160 <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006130:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006132:	3324      	adds	r3, #36	; 0x24
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	4611      	mov	r1, r2
 8006138:	4618      	mov	r0, r3
 800613a:	f000 fdcf 	bl	8006cdc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800613e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006140:	f000 f8b8 	bl	80062b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006144:	f000 fbfe 	bl	8006944 <xTaskResumeAll>
 8006148:	4603      	mov	r3, r0
 800614a:	2b00      	cmp	r3, #0
 800614c:	d189      	bne.n	8006062 <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800614e:	4b10      	ldr	r3, [pc, #64]	; (8006190 <xQueueReceive+0x1bc>)
 8006150:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006154:	601a      	str	r2, [r3, #0]
 8006156:	f3bf 8f4f 	dsb	sy
 800615a:	f3bf 8f6f 	isb	sy
 800615e:	e780      	b.n	8006062 <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006162:	f000 f8a7 	bl	80062b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006166:	f000 fbed 	bl	8006944 <xTaskResumeAll>
 800616a:	e77a      	b.n	8006062 <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800616c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800616e:	f000 f8a1 	bl	80062b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006172:	f000 fbe7 	bl	8006944 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006176:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006178:	f000 f8ee 	bl	8006358 <prvIsQueueEmpty>
 800617c:	4603      	mov	r3, r0
 800617e:	2b00      	cmp	r3, #0
 8006180:	f43f af6f 	beq.w	8006062 <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006184:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006186:	4618      	mov	r0, r3
 8006188:	3730      	adds	r7, #48	; 0x30
 800618a:	46bd      	mov	sp, r7
 800618c:	bd80      	pop	{r7, pc}
 800618e:	bf00      	nop
 8006190:	e000ed04 	.word	0xe000ed04

08006194 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006194:	b580      	push	{r7, lr}
 8006196:	b086      	sub	sp, #24
 8006198:	af00      	add	r7, sp, #0
 800619a:	60f8      	str	r0, [r7, #12]
 800619c:	60b9      	str	r1, [r7, #8]
 800619e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80061a0:	2300      	movs	r3, #0
 80061a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d10d      	bne.n	80061ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	681b      	ldr	r3, [r3, #0]
 80061b6:	2b00      	cmp	r3, #0
 80061b8:	d14d      	bne.n	8006256 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80061ba:	68fb      	ldr	r3, [r7, #12]
 80061bc:	689b      	ldr	r3, [r3, #8]
 80061be:	4618      	mov	r0, r3
 80061c0:	f000 ffbc 	bl	800713c <xTaskPriorityDisinherit>
 80061c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	2200      	movs	r2, #0
 80061ca:	609a      	str	r2, [r3, #8]
 80061cc:	e043      	b.n	8006256 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d119      	bne.n	8006208 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	6858      	ldr	r0, [r3, #4]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061dc:	461a      	mov	r2, r3
 80061de:	68b9      	ldr	r1, [r7, #8]
 80061e0:	f002 f878 	bl	80082d4 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80061e4:	68fb      	ldr	r3, [r7, #12]
 80061e6:	685a      	ldr	r2, [r3, #4]
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061ec:	441a      	add	r2, r3
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	685a      	ldr	r2, [r3, #4]
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	689b      	ldr	r3, [r3, #8]
 80061fa:	429a      	cmp	r2, r3
 80061fc:	d32b      	bcc.n	8006256 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	681a      	ldr	r2, [r3, #0]
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	605a      	str	r2, [r3, #4]
 8006206:	e026      	b.n	8006256 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006208:	68fb      	ldr	r3, [r7, #12]
 800620a:	68d8      	ldr	r0, [r3, #12]
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006210:	461a      	mov	r2, r3
 8006212:	68b9      	ldr	r1, [r7, #8]
 8006214:	f002 f85e 	bl	80082d4 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006218:	68fb      	ldr	r3, [r7, #12]
 800621a:	68da      	ldr	r2, [r3, #12]
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006220:	425b      	negs	r3, r3
 8006222:	441a      	add	r2, r3
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	68fb      	ldr	r3, [r7, #12]
 800622e:	681b      	ldr	r3, [r3, #0]
 8006230:	429a      	cmp	r2, r3
 8006232:	d207      	bcs.n	8006244 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006234:	68fb      	ldr	r3, [r7, #12]
 8006236:	689a      	ldr	r2, [r3, #8]
 8006238:	68fb      	ldr	r3, [r7, #12]
 800623a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800623c:	425b      	negs	r3, r3
 800623e:	441a      	add	r2, r3
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2b02      	cmp	r3, #2
 8006248:	d105      	bne.n	8006256 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800624a:	693b      	ldr	r3, [r7, #16]
 800624c:	2b00      	cmp	r3, #0
 800624e:	d002      	beq.n	8006256 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006250:	693b      	ldr	r3, [r7, #16]
 8006252:	3b01      	subs	r3, #1
 8006254:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006256:	693b      	ldr	r3, [r7, #16]
 8006258:	1c5a      	adds	r2, r3, #1
 800625a:	68fb      	ldr	r3, [r7, #12]
 800625c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800625e:	697b      	ldr	r3, [r7, #20]
}
 8006260:	4618      	mov	r0, r3
 8006262:	3718      	adds	r7, #24
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}

08006268 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006268:	b580      	push	{r7, lr}
 800626a:	b082      	sub	sp, #8
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006276:	2b00      	cmp	r3, #0
 8006278:	d018      	beq.n	80062ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	68da      	ldr	r2, [r3, #12]
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006282:	441a      	add	r2, r3
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	68da      	ldr	r2, [r3, #12]
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	689b      	ldr	r3, [r3, #8]
 8006290:	429a      	cmp	r2, r3
 8006292:	d303      	bcc.n	800629c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	681a      	ldr	r2, [r3, #0]
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	68d9      	ldr	r1, [r3, #12]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062a4:	461a      	mov	r2, r3
 80062a6:	6838      	ldr	r0, [r7, #0]
 80062a8:	f002 f814 	bl	80082d4 <memcpy>
	}
}
 80062ac:	bf00      	nop
 80062ae:	3708      	adds	r7, #8
 80062b0:	46bd      	mov	sp, r7
 80062b2:	bd80      	pop	{r7, pc}

080062b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80062b4:	b580      	push	{r7, lr}
 80062b6:	b084      	sub	sp, #16
 80062b8:	af00      	add	r7, sp, #0
 80062ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80062bc:	f001 fc7a 	bl	8007bb4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80062c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062c8:	e011      	b.n	80062ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ce:	2b00      	cmp	r3, #0
 80062d0:	d012      	beq.n	80062f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	3324      	adds	r3, #36	; 0x24
 80062d6:	4618      	mov	r0, r3
 80062d8:	f000 fd50 	bl	8006d7c <xTaskRemoveFromEventList>
 80062dc:	4603      	mov	r3, r0
 80062de:	2b00      	cmp	r3, #0
 80062e0:	d001      	beq.n	80062e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80062e2:	f000 fe27 	bl	8006f34 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80062e6:	7bfb      	ldrb	r3, [r7, #15]
 80062e8:	3b01      	subs	r3, #1
 80062ea:	b2db      	uxtb	r3, r3
 80062ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80062ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	dce9      	bgt.n	80062ca <prvUnlockQueue+0x16>
 80062f6:	e000      	b.n	80062fa <prvUnlockQueue+0x46>
					break;
 80062f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	22ff      	movs	r2, #255	; 0xff
 80062fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8006302:	f001 fc87 	bl	8007c14 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006306:	f001 fc55 	bl	8007bb4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006310:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006312:	e011      	b.n	8006338 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	691b      	ldr	r3, [r3, #16]
 8006318:	2b00      	cmp	r3, #0
 800631a:	d012      	beq.n	8006342 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800631c:	687b      	ldr	r3, [r7, #4]
 800631e:	3310      	adds	r3, #16
 8006320:	4618      	mov	r0, r3
 8006322:	f000 fd2b 	bl	8006d7c <xTaskRemoveFromEventList>
 8006326:	4603      	mov	r3, r0
 8006328:	2b00      	cmp	r3, #0
 800632a:	d001      	beq.n	8006330 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800632c:	f000 fe02 	bl	8006f34 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006330:	7bbb      	ldrb	r3, [r7, #14]
 8006332:	3b01      	subs	r3, #1
 8006334:	b2db      	uxtb	r3, r3
 8006336:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006338:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800633c:	2b00      	cmp	r3, #0
 800633e:	dce9      	bgt.n	8006314 <prvUnlockQueue+0x60>
 8006340:	e000      	b.n	8006344 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006342:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	22ff      	movs	r2, #255	; 0xff
 8006348:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800634c:	f001 fc62 	bl	8007c14 <vPortExitCritical>
}
 8006350:	bf00      	nop
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006360:	f001 fc28 	bl	8007bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	2b00      	cmp	r3, #0
 800636a:	d102      	bne.n	8006372 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800636c:	2301      	movs	r3, #1
 800636e:	60fb      	str	r3, [r7, #12]
 8006370:	e001      	b.n	8006376 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006372:	2300      	movs	r3, #0
 8006374:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006376:	f001 fc4d 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 800637a:	68fb      	ldr	r3, [r7, #12]
}
 800637c:	4618      	mov	r0, r3
 800637e:	3710      	adds	r7, #16
 8006380:	46bd      	mov	sp, r7
 8006382:	bd80      	pop	{r7, pc}

08006384 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006384:	b580      	push	{r7, lr}
 8006386:	b084      	sub	sp, #16
 8006388:	af00      	add	r7, sp, #0
 800638a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800638c:	f001 fc12 	bl	8007bb4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006398:	429a      	cmp	r2, r3
 800639a:	d102      	bne.n	80063a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800639c:	2301      	movs	r3, #1
 800639e:	60fb      	str	r3, [r7, #12]
 80063a0:	e001      	b.n	80063a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80063a2:	2300      	movs	r3, #0
 80063a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80063a6:	f001 fc35 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 80063aa:	68fb      	ldr	r3, [r7, #12]
}
 80063ac:	4618      	mov	r0, r3
 80063ae:	3710      	adds	r7, #16
 80063b0:	46bd      	mov	sp, r7
 80063b2:	bd80      	pop	{r7, pc}

080063b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80063b4:	b480      	push	{r7}
 80063b6:	b085      	sub	sp, #20
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
 80063bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063be:	2300      	movs	r3, #0
 80063c0:	60fb      	str	r3, [r7, #12]
 80063c2:	e014      	b.n	80063ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80063c4:	4a0f      	ldr	r2, [pc, #60]	; (8006404 <vQueueAddToRegistry+0x50>)
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d10b      	bne.n	80063e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80063d0:	490c      	ldr	r1, [pc, #48]	; (8006404 <vQueueAddToRegistry+0x50>)
 80063d2:	68fb      	ldr	r3, [r7, #12]
 80063d4:	683a      	ldr	r2, [r7, #0]
 80063d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80063da:	4a0a      	ldr	r2, [pc, #40]	; (8006404 <vQueueAddToRegistry+0x50>)
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	00db      	lsls	r3, r3, #3
 80063e0:	4413      	add	r3, r2
 80063e2:	687a      	ldr	r2, [r7, #4]
 80063e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80063e6:	e006      	b.n	80063f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80063e8:	68fb      	ldr	r3, [r7, #12]
 80063ea:	3301      	adds	r3, #1
 80063ec:	60fb      	str	r3, [r7, #12]
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	2b07      	cmp	r3, #7
 80063f2:	d9e7      	bls.n	80063c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80063f4:	bf00      	nop
 80063f6:	bf00      	nop
 80063f8:	3714      	adds	r7, #20
 80063fa:	46bd      	mov	sp, r7
 80063fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006400:	4770      	bx	lr
 8006402:	bf00      	nop
 8006404:	20000ad8 	.word	0x20000ad8

08006408 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006408:	b580      	push	{r7, lr}
 800640a:	b086      	sub	sp, #24
 800640c:	af00      	add	r7, sp, #0
 800640e:	60f8      	str	r0, [r7, #12]
 8006410:	60b9      	str	r1, [r7, #8]
 8006412:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006418:	f001 fbcc 	bl	8007bb4 <vPortEnterCritical>
 800641c:	697b      	ldr	r3, [r7, #20]
 800641e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006422:	b25b      	sxtb	r3, r3
 8006424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006428:	d103      	bne.n	8006432 <vQueueWaitForMessageRestricted+0x2a>
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	2200      	movs	r2, #0
 800642e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006438:	b25b      	sxtb	r3, r3
 800643a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800643e:	d103      	bne.n	8006448 <vQueueWaitForMessageRestricted+0x40>
 8006440:	697b      	ldr	r3, [r7, #20]
 8006442:	2200      	movs	r2, #0
 8006444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006448:	f001 fbe4 	bl	8007c14 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800644c:	697b      	ldr	r3, [r7, #20]
 800644e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006450:	2b00      	cmp	r3, #0
 8006452:	d106      	bne.n	8006462 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006454:	697b      	ldr	r3, [r7, #20]
 8006456:	3324      	adds	r3, #36	; 0x24
 8006458:	687a      	ldr	r2, [r7, #4]
 800645a:	68b9      	ldr	r1, [r7, #8]
 800645c:	4618      	mov	r0, r3
 800645e:	f000 fc61 	bl	8006d24 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006462:	6978      	ldr	r0, [r7, #20]
 8006464:	f7ff ff26 	bl	80062b4 <prvUnlockQueue>
	}
 8006468:	bf00      	nop
 800646a:	3718      	adds	r7, #24
 800646c:	46bd      	mov	sp, r7
 800646e:	bd80      	pop	{r7, pc}

08006470 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006470:	b580      	push	{r7, lr}
 8006472:	b08e      	sub	sp, #56	; 0x38
 8006474:	af04      	add	r7, sp, #16
 8006476:	60f8      	str	r0, [r7, #12]
 8006478:	60b9      	str	r1, [r7, #8]
 800647a:	607a      	str	r2, [r7, #4]
 800647c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800647e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006480:	2b00      	cmp	r3, #0
 8006482:	d10a      	bne.n	800649a <xTaskCreateStatic+0x2a>
	__asm volatile
 8006484:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006488:	f383 8811 	msr	BASEPRI, r3
 800648c:	f3bf 8f6f 	isb	sy
 8006490:	f3bf 8f4f 	dsb	sy
 8006494:	623b      	str	r3, [r7, #32]
}
 8006496:	bf00      	nop
 8006498:	e7fe      	b.n	8006498 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800649a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800649c:	2b00      	cmp	r3, #0
 800649e:	d10a      	bne.n	80064b6 <xTaskCreateStatic+0x46>
	__asm volatile
 80064a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064a4:	f383 8811 	msr	BASEPRI, r3
 80064a8:	f3bf 8f6f 	isb	sy
 80064ac:	f3bf 8f4f 	dsb	sy
 80064b0:	61fb      	str	r3, [r7, #28]
}
 80064b2:	bf00      	nop
 80064b4:	e7fe      	b.n	80064b4 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80064b6:	23a8      	movs	r3, #168	; 0xa8
 80064b8:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80064ba:	693b      	ldr	r3, [r7, #16]
 80064bc:	2ba8      	cmp	r3, #168	; 0xa8
 80064be:	d00a      	beq.n	80064d6 <xTaskCreateStatic+0x66>
	__asm volatile
 80064c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80064c4:	f383 8811 	msr	BASEPRI, r3
 80064c8:	f3bf 8f6f 	isb	sy
 80064cc:	f3bf 8f4f 	dsb	sy
 80064d0:	61bb      	str	r3, [r7, #24]
}
 80064d2:	bf00      	nop
 80064d4:	e7fe      	b.n	80064d4 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80064d6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80064d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064da:	2b00      	cmp	r3, #0
 80064dc:	d01e      	beq.n	800651c <xTaskCreateStatic+0xac>
 80064de:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d01b      	beq.n	800651c <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80064e4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80064e6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80064e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064ea:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80064ec:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80064ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064f0:	2202      	movs	r2, #2
 80064f2:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80064f6:	2300      	movs	r3, #0
 80064f8:	9303      	str	r3, [sp, #12]
 80064fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80064fc:	9302      	str	r3, [sp, #8]
 80064fe:	f107 0314 	add.w	r3, r7, #20
 8006502:	9301      	str	r3, [sp, #4]
 8006504:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006506:	9300      	str	r3, [sp, #0]
 8006508:	683b      	ldr	r3, [r7, #0]
 800650a:	687a      	ldr	r2, [r7, #4]
 800650c:	68b9      	ldr	r1, [r7, #8]
 800650e:	68f8      	ldr	r0, [r7, #12]
 8006510:	f000 f850 	bl	80065b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006514:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8006516:	f000 f8f3 	bl	8006700 <prvAddNewTaskToReadyList>
 800651a:	e001      	b.n	8006520 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 800651c:	2300      	movs	r3, #0
 800651e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006520:	697b      	ldr	r3, [r7, #20]
	}
 8006522:	4618      	mov	r0, r3
 8006524:	3728      	adds	r7, #40	; 0x28
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800652a:	b580      	push	{r7, lr}
 800652c:	b08c      	sub	sp, #48	; 0x30
 800652e:	af04      	add	r7, sp, #16
 8006530:	60f8      	str	r0, [r7, #12]
 8006532:	60b9      	str	r1, [r7, #8]
 8006534:	603b      	str	r3, [r7, #0]
 8006536:	4613      	mov	r3, r2
 8006538:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800653a:	88fb      	ldrh	r3, [r7, #6]
 800653c:	009b      	lsls	r3, r3, #2
 800653e:	4618      	mov	r0, r3
 8006540:	f001 fc5a 	bl	8007df8 <pvPortMalloc>
 8006544:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	2b00      	cmp	r3, #0
 800654a:	d00e      	beq.n	800656a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800654c:	20a8      	movs	r0, #168	; 0xa8
 800654e:	f001 fc53 	bl	8007df8 <pvPortMalloc>
 8006552:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8006554:	69fb      	ldr	r3, [r7, #28]
 8006556:	2b00      	cmp	r3, #0
 8006558:	d003      	beq.n	8006562 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800655a:	69fb      	ldr	r3, [r7, #28]
 800655c:	697a      	ldr	r2, [r7, #20]
 800655e:	631a      	str	r2, [r3, #48]	; 0x30
 8006560:	e005      	b.n	800656e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006562:	6978      	ldr	r0, [r7, #20]
 8006564:	f001 fd14 	bl	8007f90 <vPortFree>
 8006568:	e001      	b.n	800656e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800656a:	2300      	movs	r3, #0
 800656c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800656e:	69fb      	ldr	r3, [r7, #28]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d017      	beq.n	80065a4 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8006574:	69fb      	ldr	r3, [r7, #28]
 8006576:	2200      	movs	r2, #0
 8006578:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800657c:	88fa      	ldrh	r2, [r7, #6]
 800657e:	2300      	movs	r3, #0
 8006580:	9303      	str	r3, [sp, #12]
 8006582:	69fb      	ldr	r3, [r7, #28]
 8006584:	9302      	str	r3, [sp, #8]
 8006586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006588:	9301      	str	r3, [sp, #4]
 800658a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800658c:	9300      	str	r3, [sp, #0]
 800658e:	683b      	ldr	r3, [r7, #0]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	68f8      	ldr	r0, [r7, #12]
 8006594:	f000 f80e 	bl	80065b4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006598:	69f8      	ldr	r0, [r7, #28]
 800659a:	f000 f8b1 	bl	8006700 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800659e:	2301      	movs	r3, #1
 80065a0:	61bb      	str	r3, [r7, #24]
 80065a2:	e002      	b.n	80065aa <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80065a4:	f04f 33ff 	mov.w	r3, #4294967295
 80065a8:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80065aa:	69bb      	ldr	r3, [r7, #24]
	}
 80065ac:	4618      	mov	r0, r3
 80065ae:	3720      	adds	r7, #32
 80065b0:	46bd      	mov	sp, r7
 80065b2:	bd80      	pop	{r7, pc}

080065b4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b088      	sub	sp, #32
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	60f8      	str	r0, [r7, #12]
 80065bc:	60b9      	str	r1, [r7, #8]
 80065be:	607a      	str	r2, [r7, #4]
 80065c0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80065c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065c4:	6b18      	ldr	r0, [r3, #48]	; 0x30
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	009b      	lsls	r3, r3, #2
 80065ca:	461a      	mov	r2, r3
 80065cc:	21a5      	movs	r1, #165	; 0xa5
 80065ce:	f001 fdfd 	bl	80081cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80065d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80065d4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 80065dc:	3b01      	subs	r3, #1
 80065de:	009b      	lsls	r3, r3, #2
 80065e0:	4413      	add	r3, r2
 80065e2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80065e4:	69bb      	ldr	r3, [r7, #24]
 80065e6:	f023 0307 	bic.w	r3, r3, #7
 80065ea:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80065ec:	69bb      	ldr	r3, [r7, #24]
 80065ee:	f003 0307 	and.w	r3, r3, #7
 80065f2:	2b00      	cmp	r3, #0
 80065f4:	d00a      	beq.n	800660c <prvInitialiseNewTask+0x58>
	__asm volatile
 80065f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065fa:	f383 8811 	msr	BASEPRI, r3
 80065fe:	f3bf 8f6f 	isb	sy
 8006602:	f3bf 8f4f 	dsb	sy
 8006606:	617b      	str	r3, [r7, #20]
}
 8006608:	bf00      	nop
 800660a:	e7fe      	b.n	800660a <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	2b00      	cmp	r3, #0
 8006610:	d01f      	beq.n	8006652 <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006612:	2300      	movs	r3, #0
 8006614:	61fb      	str	r3, [r7, #28]
 8006616:	e012      	b.n	800663e <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006618:	68ba      	ldr	r2, [r7, #8]
 800661a:	69fb      	ldr	r3, [r7, #28]
 800661c:	4413      	add	r3, r2
 800661e:	7819      	ldrb	r1, [r3, #0]
 8006620:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006622:	69fb      	ldr	r3, [r7, #28]
 8006624:	4413      	add	r3, r2
 8006626:	3334      	adds	r3, #52	; 0x34
 8006628:	460a      	mov	r2, r1
 800662a:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800662c:	68ba      	ldr	r2, [r7, #8]
 800662e:	69fb      	ldr	r3, [r7, #28]
 8006630:	4413      	add	r3, r2
 8006632:	781b      	ldrb	r3, [r3, #0]
 8006634:	2b00      	cmp	r3, #0
 8006636:	d006      	beq.n	8006646 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006638:	69fb      	ldr	r3, [r7, #28]
 800663a:	3301      	adds	r3, #1
 800663c:	61fb      	str	r3, [r7, #28]
 800663e:	69fb      	ldr	r3, [r7, #28]
 8006640:	2b0f      	cmp	r3, #15
 8006642:	d9e9      	bls.n	8006618 <prvInitialiseNewTask+0x64>
 8006644:	e000      	b.n	8006648 <prvInitialiseNewTask+0x94>
			{
				break;
 8006646:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800664a:	2200      	movs	r2, #0
 800664c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006650:	e003      	b.n	800665a <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006652:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006654:	2200      	movs	r2, #0
 8006656:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800665a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800665c:	2b37      	cmp	r3, #55	; 0x37
 800665e:	d901      	bls.n	8006664 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8006660:	2337      	movs	r3, #55	; 0x37
 8006662:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006664:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006666:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006668:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800666a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800666c:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800666e:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8006670:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006672:	2200      	movs	r2, #0
 8006674:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006678:	3304      	adds	r3, #4
 800667a:	4618      	mov	r0, r3
 800667c:	f7ff f978 	bl	8005970 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8006680:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006682:	3318      	adds	r3, #24
 8006684:	4618      	mov	r0, r3
 8006686:	f7ff f973 	bl	8005970 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800668a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800668c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800668e:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006690:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006692:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 8006696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006698:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800669a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800669c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800669e:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80066a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066a2:	2200      	movs	r2, #0
 80066a4:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80066a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066aa:	2200      	movs	r2, #0
 80066ac:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80066b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066b2:	3354      	adds	r3, #84	; 0x54
 80066b4:	224c      	movs	r2, #76	; 0x4c
 80066b6:	2100      	movs	r1, #0
 80066b8:	4618      	mov	r0, r3
 80066ba:	f001 fd87 	bl	80081cc <memset>
 80066be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c0:	4a0c      	ldr	r2, [pc, #48]	; (80066f4 <prvInitialiseNewTask+0x140>)
 80066c2:	659a      	str	r2, [r3, #88]	; 0x58
 80066c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066c6:	4a0c      	ldr	r2, [pc, #48]	; (80066f8 <prvInitialiseNewTask+0x144>)
 80066c8:	65da      	str	r2, [r3, #92]	; 0x5c
 80066ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066cc:	4a0b      	ldr	r2, [pc, #44]	; (80066fc <prvInitialiseNewTask+0x148>)
 80066ce:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80066d0:	683a      	ldr	r2, [r7, #0]
 80066d2:	68f9      	ldr	r1, [r7, #12]
 80066d4:	69b8      	ldr	r0, [r7, #24]
 80066d6:	f001 f941 	bl	800795c <pxPortInitialiseStack>
 80066da:	4602      	mov	r2, r0
 80066dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80066de:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80066e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d002      	beq.n	80066ec <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80066e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80066e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80066ea:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80066ec:	bf00      	nop
 80066ee:	3720      	adds	r7, #32
 80066f0:	46bd      	mov	sp, r7
 80066f2:	bd80      	pop	{r7, pc}
 80066f4:	20004d6c 	.word	0x20004d6c
 80066f8:	20004dd4 	.word	0x20004dd4
 80066fc:	20004e3c 	.word	0x20004e3c

08006700 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006700:	b580      	push	{r7, lr}
 8006702:	b082      	sub	sp, #8
 8006704:	af00      	add	r7, sp, #0
 8006706:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006708:	f001 fa54 	bl	8007bb4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800670c:	4b2d      	ldr	r3, [pc, #180]	; (80067c4 <prvAddNewTaskToReadyList+0xc4>)
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	3301      	adds	r3, #1
 8006712:	4a2c      	ldr	r2, [pc, #176]	; (80067c4 <prvAddNewTaskToReadyList+0xc4>)
 8006714:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006716:	4b2c      	ldr	r3, [pc, #176]	; (80067c8 <prvAddNewTaskToReadyList+0xc8>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d109      	bne.n	8006732 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800671e:	4a2a      	ldr	r2, [pc, #168]	; (80067c8 <prvAddNewTaskToReadyList+0xc8>)
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006724:	4b27      	ldr	r3, [pc, #156]	; (80067c4 <prvAddNewTaskToReadyList+0xc4>)
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	2b01      	cmp	r3, #1
 800672a:	d110      	bne.n	800674e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800672c:	f000 fc26 	bl	8006f7c <prvInitialiseTaskLists>
 8006730:	e00d      	b.n	800674e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006732:	4b26      	ldr	r3, [pc, #152]	; (80067cc <prvAddNewTaskToReadyList+0xcc>)
 8006734:	681b      	ldr	r3, [r3, #0]
 8006736:	2b00      	cmp	r3, #0
 8006738:	d109      	bne.n	800674e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800673a:	4b23      	ldr	r3, [pc, #140]	; (80067c8 <prvAddNewTaskToReadyList+0xc8>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006744:	429a      	cmp	r2, r3
 8006746:	d802      	bhi.n	800674e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006748:	4a1f      	ldr	r2, [pc, #124]	; (80067c8 <prvAddNewTaskToReadyList+0xc8>)
 800674a:	687b      	ldr	r3, [r7, #4]
 800674c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800674e:	4b20      	ldr	r3, [pc, #128]	; (80067d0 <prvAddNewTaskToReadyList+0xd0>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3301      	adds	r3, #1
 8006754:	4a1e      	ldr	r2, [pc, #120]	; (80067d0 <prvAddNewTaskToReadyList+0xd0>)
 8006756:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006758:	4b1d      	ldr	r3, [pc, #116]	; (80067d0 <prvAddNewTaskToReadyList+0xd0>)
 800675a:	681a      	ldr	r2, [r3, #0]
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006764:	4b1b      	ldr	r3, [pc, #108]	; (80067d4 <prvAddNewTaskToReadyList+0xd4>)
 8006766:	681b      	ldr	r3, [r3, #0]
 8006768:	429a      	cmp	r2, r3
 800676a:	d903      	bls.n	8006774 <prvAddNewTaskToReadyList+0x74>
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006770:	4a18      	ldr	r2, [pc, #96]	; (80067d4 <prvAddNewTaskToReadyList+0xd4>)
 8006772:	6013      	str	r3, [r2, #0]
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006778:	4613      	mov	r3, r2
 800677a:	009b      	lsls	r3, r3, #2
 800677c:	4413      	add	r3, r2
 800677e:	009b      	lsls	r3, r3, #2
 8006780:	4a15      	ldr	r2, [pc, #84]	; (80067d8 <prvAddNewTaskToReadyList+0xd8>)
 8006782:	441a      	add	r2, r3
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	3304      	adds	r3, #4
 8006788:	4619      	mov	r1, r3
 800678a:	4610      	mov	r0, r2
 800678c:	f7ff f8fd 	bl	800598a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006790:	f001 fa40 	bl	8007c14 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006794:	4b0d      	ldr	r3, [pc, #52]	; (80067cc <prvAddNewTaskToReadyList+0xcc>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d00e      	beq.n	80067ba <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800679c:	4b0a      	ldr	r3, [pc, #40]	; (80067c8 <prvAddNewTaskToReadyList+0xc8>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80067a6:	429a      	cmp	r2, r3
 80067a8:	d207      	bcs.n	80067ba <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80067aa:	4b0c      	ldr	r3, [pc, #48]	; (80067dc <prvAddNewTaskToReadyList+0xdc>)
 80067ac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80067b0:	601a      	str	r2, [r3, #0]
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80067ba:	bf00      	nop
 80067bc:	3708      	adds	r7, #8
 80067be:	46bd      	mov	sp, r7
 80067c0:	bd80      	pop	{r7, pc}
 80067c2:	bf00      	nop
 80067c4:	20000fec 	.word	0x20000fec
 80067c8:	20000b18 	.word	0x20000b18
 80067cc:	20000ff8 	.word	0x20000ff8
 80067d0:	20001008 	.word	0x20001008
 80067d4:	20000ff4 	.word	0x20000ff4
 80067d8:	20000b1c 	.word	0x20000b1c
 80067dc:	e000ed04 	.word	0xe000ed04

080067e0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80067e0:	b580      	push	{r7, lr}
 80067e2:	b084      	sub	sp, #16
 80067e4:	af00      	add	r7, sp, #0
 80067e6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80067e8:	2300      	movs	r3, #0
 80067ea:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2b00      	cmp	r3, #0
 80067f0:	d017      	beq.n	8006822 <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80067f2:	4b13      	ldr	r3, [pc, #76]	; (8006840 <vTaskDelay+0x60>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	2b00      	cmp	r3, #0
 80067f8:	d00a      	beq.n	8006810 <vTaskDelay+0x30>
	__asm volatile
 80067fa:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067fe:	f383 8811 	msr	BASEPRI, r3
 8006802:	f3bf 8f6f 	isb	sy
 8006806:	f3bf 8f4f 	dsb	sy
 800680a:	60bb      	str	r3, [r7, #8]
}
 800680c:	bf00      	nop
 800680e:	e7fe      	b.n	800680e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006810:	f000 f88a 	bl	8006928 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006814:	2100      	movs	r1, #0
 8006816:	6878      	ldr	r0, [r7, #4]
 8006818:	f000 fcfe 	bl	8007218 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800681c:	f000 f892 	bl	8006944 <xTaskResumeAll>
 8006820:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	2b00      	cmp	r3, #0
 8006826:	d107      	bne.n	8006838 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8006828:	4b06      	ldr	r3, [pc, #24]	; (8006844 <vTaskDelay+0x64>)
 800682a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800682e:	601a      	str	r2, [r3, #0]
 8006830:	f3bf 8f4f 	dsb	sy
 8006834:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006838:	bf00      	nop
 800683a:	3710      	adds	r7, #16
 800683c:	46bd      	mov	sp, r7
 800683e:	bd80      	pop	{r7, pc}
 8006840:	20001014 	.word	0x20001014
 8006844:	e000ed04 	.word	0xe000ed04

08006848 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006848:	b580      	push	{r7, lr}
 800684a:	b08a      	sub	sp, #40	; 0x28
 800684c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800684e:	2300      	movs	r3, #0
 8006850:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006852:	2300      	movs	r3, #0
 8006854:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006856:	463a      	mov	r2, r7
 8006858:	1d39      	adds	r1, r7, #4
 800685a:	f107 0308 	add.w	r3, r7, #8
 800685e:	4618      	mov	r0, r3
 8006860:	f7ff f832 	bl	80058c8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006864:	6839      	ldr	r1, [r7, #0]
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	68ba      	ldr	r2, [r7, #8]
 800686a:	9202      	str	r2, [sp, #8]
 800686c:	9301      	str	r3, [sp, #4]
 800686e:	2300      	movs	r3, #0
 8006870:	9300      	str	r3, [sp, #0]
 8006872:	2300      	movs	r3, #0
 8006874:	460a      	mov	r2, r1
 8006876:	4924      	ldr	r1, [pc, #144]	; (8006908 <vTaskStartScheduler+0xc0>)
 8006878:	4824      	ldr	r0, [pc, #144]	; (800690c <vTaskStartScheduler+0xc4>)
 800687a:	f7ff fdf9 	bl	8006470 <xTaskCreateStatic>
 800687e:	4603      	mov	r3, r0
 8006880:	4a23      	ldr	r2, [pc, #140]	; (8006910 <vTaskStartScheduler+0xc8>)
 8006882:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006884:	4b22      	ldr	r3, [pc, #136]	; (8006910 <vTaskStartScheduler+0xc8>)
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	2b00      	cmp	r3, #0
 800688a:	d002      	beq.n	8006892 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800688c:	2301      	movs	r3, #1
 800688e:	617b      	str	r3, [r7, #20]
 8006890:	e001      	b.n	8006896 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006892:	2300      	movs	r3, #0
 8006894:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006896:	697b      	ldr	r3, [r7, #20]
 8006898:	2b01      	cmp	r3, #1
 800689a:	d102      	bne.n	80068a2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800689c:	f000 fd10 	bl	80072c0 <xTimerCreateTimerTask>
 80068a0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80068a2:	697b      	ldr	r3, [r7, #20]
 80068a4:	2b01      	cmp	r3, #1
 80068a6:	d11b      	bne.n	80068e0 <vTaskStartScheduler+0x98>
	__asm volatile
 80068a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ac:	f383 8811 	msr	BASEPRI, r3
 80068b0:	f3bf 8f6f 	isb	sy
 80068b4:	f3bf 8f4f 	dsb	sy
 80068b8:	613b      	str	r3, [r7, #16]
}
 80068ba:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80068bc:	4b15      	ldr	r3, [pc, #84]	; (8006914 <vTaskStartScheduler+0xcc>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3354      	adds	r3, #84	; 0x54
 80068c2:	4a15      	ldr	r2, [pc, #84]	; (8006918 <vTaskStartScheduler+0xd0>)
 80068c4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80068c6:	4b15      	ldr	r3, [pc, #84]	; (800691c <vTaskStartScheduler+0xd4>)
 80068c8:	f04f 32ff 	mov.w	r2, #4294967295
 80068cc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80068ce:	4b14      	ldr	r3, [pc, #80]	; (8006920 <vTaskStartScheduler+0xd8>)
 80068d0:	2201      	movs	r2, #1
 80068d2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80068d4:	4b13      	ldr	r3, [pc, #76]	; (8006924 <vTaskStartScheduler+0xdc>)
 80068d6:	2200      	movs	r2, #0
 80068d8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80068da:	f001 f8c9 	bl	8007a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80068de:	e00e      	b.n	80068fe <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80068e0:	697b      	ldr	r3, [r7, #20]
 80068e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80068e6:	d10a      	bne.n	80068fe <vTaskStartScheduler+0xb6>
	__asm volatile
 80068e8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068ec:	f383 8811 	msr	BASEPRI, r3
 80068f0:	f3bf 8f6f 	isb	sy
 80068f4:	f3bf 8f4f 	dsb	sy
 80068f8:	60fb      	str	r3, [r7, #12]
}
 80068fa:	bf00      	nop
 80068fc:	e7fe      	b.n	80068fc <vTaskStartScheduler+0xb4>
}
 80068fe:	bf00      	nop
 8006900:	3718      	adds	r7, #24
 8006902:	46bd      	mov	sp, r7
 8006904:	bd80      	pop	{r7, pc}
 8006906:	bf00      	nop
 8006908:	080083d4 	.word	0x080083d4
 800690c:	08006f4d 	.word	0x08006f4d
 8006910:	20001010 	.word	0x20001010
 8006914:	20000b18 	.word	0x20000b18
 8006918:	20000060 	.word	0x20000060
 800691c:	2000100c 	.word	0x2000100c
 8006920:	20000ff8 	.word	0x20000ff8
 8006924:	20000ff0 	.word	0x20000ff0

08006928 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800692c:	4b04      	ldr	r3, [pc, #16]	; (8006940 <vTaskSuspendAll+0x18>)
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	3301      	adds	r3, #1
 8006932:	4a03      	ldr	r2, [pc, #12]	; (8006940 <vTaskSuspendAll+0x18>)
 8006934:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006936:	bf00      	nop
 8006938:	46bd      	mov	sp, r7
 800693a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800693e:	4770      	bx	lr
 8006940:	20001014 	.word	0x20001014

08006944 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006944:	b580      	push	{r7, lr}
 8006946:	b084      	sub	sp, #16
 8006948:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800694a:	2300      	movs	r3, #0
 800694c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800694e:	2300      	movs	r3, #0
 8006950:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006952:	4b42      	ldr	r3, [pc, #264]	; (8006a5c <xTaskResumeAll+0x118>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	2b00      	cmp	r3, #0
 8006958:	d10a      	bne.n	8006970 <xTaskResumeAll+0x2c>
	__asm volatile
 800695a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800695e:	f383 8811 	msr	BASEPRI, r3
 8006962:	f3bf 8f6f 	isb	sy
 8006966:	f3bf 8f4f 	dsb	sy
 800696a:	603b      	str	r3, [r7, #0]
}
 800696c:	bf00      	nop
 800696e:	e7fe      	b.n	800696e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006970:	f001 f920 	bl	8007bb4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006974:	4b39      	ldr	r3, [pc, #228]	; (8006a5c <xTaskResumeAll+0x118>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	3b01      	subs	r3, #1
 800697a:	4a38      	ldr	r2, [pc, #224]	; (8006a5c <xTaskResumeAll+0x118>)
 800697c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800697e:	4b37      	ldr	r3, [pc, #220]	; (8006a5c <xTaskResumeAll+0x118>)
 8006980:	681b      	ldr	r3, [r3, #0]
 8006982:	2b00      	cmp	r3, #0
 8006984:	d162      	bne.n	8006a4c <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006986:	4b36      	ldr	r3, [pc, #216]	; (8006a60 <xTaskResumeAll+0x11c>)
 8006988:	681b      	ldr	r3, [r3, #0]
 800698a:	2b00      	cmp	r3, #0
 800698c:	d05e      	beq.n	8006a4c <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800698e:	e02f      	b.n	80069f0 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006990:	4b34      	ldr	r3, [pc, #208]	; (8006a64 <xTaskResumeAll+0x120>)
 8006992:	68db      	ldr	r3, [r3, #12]
 8006994:	68db      	ldr	r3, [r3, #12]
 8006996:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006998:	68fb      	ldr	r3, [r7, #12]
 800699a:	3318      	adds	r3, #24
 800699c:	4618      	mov	r0, r3
 800699e:	f7ff f851 	bl	8005a44 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80069a2:	68fb      	ldr	r3, [r7, #12]
 80069a4:	3304      	adds	r3, #4
 80069a6:	4618      	mov	r0, r3
 80069a8:	f7ff f84c 	bl	8005a44 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80069ac:	68fb      	ldr	r3, [r7, #12]
 80069ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069b0:	4b2d      	ldr	r3, [pc, #180]	; (8006a68 <xTaskResumeAll+0x124>)
 80069b2:	681b      	ldr	r3, [r3, #0]
 80069b4:	429a      	cmp	r2, r3
 80069b6:	d903      	bls.n	80069c0 <xTaskResumeAll+0x7c>
 80069b8:	68fb      	ldr	r3, [r7, #12]
 80069ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069bc:	4a2a      	ldr	r2, [pc, #168]	; (8006a68 <xTaskResumeAll+0x124>)
 80069be:	6013      	str	r3, [r2, #0]
 80069c0:	68fb      	ldr	r3, [r7, #12]
 80069c2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069c4:	4613      	mov	r3, r2
 80069c6:	009b      	lsls	r3, r3, #2
 80069c8:	4413      	add	r3, r2
 80069ca:	009b      	lsls	r3, r3, #2
 80069cc:	4a27      	ldr	r2, [pc, #156]	; (8006a6c <xTaskResumeAll+0x128>)
 80069ce:	441a      	add	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	3304      	adds	r3, #4
 80069d4:	4619      	mov	r1, r3
 80069d6:	4610      	mov	r0, r2
 80069d8:	f7fe ffd7 	bl	800598a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069dc:	68fb      	ldr	r3, [r7, #12]
 80069de:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80069e0:	4b23      	ldr	r3, [pc, #140]	; (8006a70 <xTaskResumeAll+0x12c>)
 80069e2:	681b      	ldr	r3, [r3, #0]
 80069e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d302      	bcc.n	80069f0 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 80069ea:	4b22      	ldr	r3, [pc, #136]	; (8006a74 <xTaskResumeAll+0x130>)
 80069ec:	2201      	movs	r2, #1
 80069ee:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069f0:	4b1c      	ldr	r3, [pc, #112]	; (8006a64 <xTaskResumeAll+0x120>)
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d1cb      	bne.n	8006990 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069fe:	f000 fb5f 	bl	80070c0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006a02:	4b1d      	ldr	r3, [pc, #116]	; (8006a78 <xTaskResumeAll+0x134>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006a08:	687b      	ldr	r3, [r7, #4]
 8006a0a:	2b00      	cmp	r3, #0
 8006a0c:	d010      	beq.n	8006a30 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006a0e:	f000 f847 	bl	8006aa0 <xTaskIncrementTick>
 8006a12:	4603      	mov	r3, r0
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d002      	beq.n	8006a1e <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8006a18:	4b16      	ldr	r3, [pc, #88]	; (8006a74 <xTaskResumeAll+0x130>)
 8006a1a:	2201      	movs	r2, #1
 8006a1c:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3b01      	subs	r3, #1
 8006a22:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2b00      	cmp	r3, #0
 8006a28:	d1f1      	bne.n	8006a0e <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8006a2a:	4b13      	ldr	r3, [pc, #76]	; (8006a78 <xTaskResumeAll+0x134>)
 8006a2c:	2200      	movs	r2, #0
 8006a2e:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006a30:	4b10      	ldr	r3, [pc, #64]	; (8006a74 <xTaskResumeAll+0x130>)
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	2b00      	cmp	r3, #0
 8006a36:	d009      	beq.n	8006a4c <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006a38:	2301      	movs	r3, #1
 8006a3a:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006a3c:	4b0f      	ldr	r3, [pc, #60]	; (8006a7c <xTaskResumeAll+0x138>)
 8006a3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006a42:	601a      	str	r2, [r3, #0]
 8006a44:	f3bf 8f4f 	dsb	sy
 8006a48:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006a4c:	f001 f8e2 	bl	8007c14 <vPortExitCritical>

	return xAlreadyYielded;
 8006a50:	68bb      	ldr	r3, [r7, #8]
}
 8006a52:	4618      	mov	r0, r3
 8006a54:	3710      	adds	r7, #16
 8006a56:	46bd      	mov	sp, r7
 8006a58:	bd80      	pop	{r7, pc}
 8006a5a:	bf00      	nop
 8006a5c:	20001014 	.word	0x20001014
 8006a60:	20000fec 	.word	0x20000fec
 8006a64:	20000fac 	.word	0x20000fac
 8006a68:	20000ff4 	.word	0x20000ff4
 8006a6c:	20000b1c 	.word	0x20000b1c
 8006a70:	20000b18 	.word	0x20000b18
 8006a74:	20001000 	.word	0x20001000
 8006a78:	20000ffc 	.word	0x20000ffc
 8006a7c:	e000ed04 	.word	0xe000ed04

08006a80 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a80:	b480      	push	{r7}
 8006a82:	b083      	sub	sp, #12
 8006a84:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a86:	4b05      	ldr	r3, [pc, #20]	; (8006a9c <xTaskGetTickCount+0x1c>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a8c:	687b      	ldr	r3, [r7, #4]
}
 8006a8e:	4618      	mov	r0, r3
 8006a90:	370c      	adds	r7, #12
 8006a92:	46bd      	mov	sp, r7
 8006a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a98:	4770      	bx	lr
 8006a9a:	bf00      	nop
 8006a9c:	20000ff0 	.word	0x20000ff0

08006aa0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006aa0:	b580      	push	{r7, lr}
 8006aa2:	b086      	sub	sp, #24
 8006aa4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006aa6:	2300      	movs	r3, #0
 8006aa8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006aaa:	4b4f      	ldr	r3, [pc, #316]	; (8006be8 <xTaskIncrementTick+0x148>)
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	f040 808f 	bne.w	8006bd2 <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006ab4:	4b4d      	ldr	r3, [pc, #308]	; (8006bec <xTaskIncrementTick+0x14c>)
 8006ab6:	681b      	ldr	r3, [r3, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006abc:	4a4b      	ldr	r2, [pc, #300]	; (8006bec <xTaskIncrementTick+0x14c>)
 8006abe:	693b      	ldr	r3, [r7, #16]
 8006ac0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006ac2:	693b      	ldr	r3, [r7, #16]
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d120      	bne.n	8006b0a <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8006ac8:	4b49      	ldr	r3, [pc, #292]	; (8006bf0 <xTaskIncrementTick+0x150>)
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	2b00      	cmp	r3, #0
 8006ad0:	d00a      	beq.n	8006ae8 <xTaskIncrementTick+0x48>
	__asm volatile
 8006ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ad6:	f383 8811 	msr	BASEPRI, r3
 8006ada:	f3bf 8f6f 	isb	sy
 8006ade:	f3bf 8f4f 	dsb	sy
 8006ae2:	603b      	str	r3, [r7, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	e7fe      	b.n	8006ae6 <xTaskIncrementTick+0x46>
 8006ae8:	4b41      	ldr	r3, [pc, #260]	; (8006bf0 <xTaskIncrementTick+0x150>)
 8006aea:	681b      	ldr	r3, [r3, #0]
 8006aec:	60fb      	str	r3, [r7, #12]
 8006aee:	4b41      	ldr	r3, [pc, #260]	; (8006bf4 <xTaskIncrementTick+0x154>)
 8006af0:	681b      	ldr	r3, [r3, #0]
 8006af2:	4a3f      	ldr	r2, [pc, #252]	; (8006bf0 <xTaskIncrementTick+0x150>)
 8006af4:	6013      	str	r3, [r2, #0]
 8006af6:	4a3f      	ldr	r2, [pc, #252]	; (8006bf4 <xTaskIncrementTick+0x154>)
 8006af8:	68fb      	ldr	r3, [r7, #12]
 8006afa:	6013      	str	r3, [r2, #0]
 8006afc:	4b3e      	ldr	r3, [pc, #248]	; (8006bf8 <xTaskIncrementTick+0x158>)
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3301      	adds	r3, #1
 8006b02:	4a3d      	ldr	r2, [pc, #244]	; (8006bf8 <xTaskIncrementTick+0x158>)
 8006b04:	6013      	str	r3, [r2, #0]
 8006b06:	f000 fadb 	bl	80070c0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006b0a:	4b3c      	ldr	r3, [pc, #240]	; (8006bfc <xTaskIncrementTick+0x15c>)
 8006b0c:	681b      	ldr	r3, [r3, #0]
 8006b0e:	693a      	ldr	r2, [r7, #16]
 8006b10:	429a      	cmp	r2, r3
 8006b12:	d349      	bcc.n	8006ba8 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b14:	4b36      	ldr	r3, [pc, #216]	; (8006bf0 <xTaskIncrementTick+0x150>)
 8006b16:	681b      	ldr	r3, [r3, #0]
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d104      	bne.n	8006b28 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b1e:	4b37      	ldr	r3, [pc, #220]	; (8006bfc <xTaskIncrementTick+0x15c>)
 8006b20:	f04f 32ff 	mov.w	r2, #4294967295
 8006b24:	601a      	str	r2, [r3, #0]
					break;
 8006b26:	e03f      	b.n	8006ba8 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b28:	4b31      	ldr	r3, [pc, #196]	; (8006bf0 <xTaskIncrementTick+0x150>)
 8006b2a:	681b      	ldr	r3, [r3, #0]
 8006b2c:	68db      	ldr	r3, [r3, #12]
 8006b2e:	68db      	ldr	r3, [r3, #12]
 8006b30:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006b32:	68bb      	ldr	r3, [r7, #8]
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006b38:	693a      	ldr	r2, [r7, #16]
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d203      	bcs.n	8006b48 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006b40:	4a2e      	ldr	r2, [pc, #184]	; (8006bfc <xTaskIncrementTick+0x15c>)
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006b46:	e02f      	b.n	8006ba8 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b48:	68bb      	ldr	r3, [r7, #8]
 8006b4a:	3304      	adds	r3, #4
 8006b4c:	4618      	mov	r0, r3
 8006b4e:	f7fe ff79 	bl	8005a44 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b52:	68bb      	ldr	r3, [r7, #8]
 8006b54:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d004      	beq.n	8006b64 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b5a:	68bb      	ldr	r3, [r7, #8]
 8006b5c:	3318      	adds	r3, #24
 8006b5e:	4618      	mov	r0, r3
 8006b60:	f7fe ff70 	bl	8005a44 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b64:	68bb      	ldr	r3, [r7, #8]
 8006b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b68:	4b25      	ldr	r3, [pc, #148]	; (8006c00 <xTaskIncrementTick+0x160>)
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	429a      	cmp	r2, r3
 8006b6e:	d903      	bls.n	8006b78 <xTaskIncrementTick+0xd8>
 8006b70:	68bb      	ldr	r3, [r7, #8]
 8006b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b74:	4a22      	ldr	r2, [pc, #136]	; (8006c00 <xTaskIncrementTick+0x160>)
 8006b76:	6013      	str	r3, [r2, #0]
 8006b78:	68bb      	ldr	r3, [r7, #8]
 8006b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b7c:	4613      	mov	r3, r2
 8006b7e:	009b      	lsls	r3, r3, #2
 8006b80:	4413      	add	r3, r2
 8006b82:	009b      	lsls	r3, r3, #2
 8006b84:	4a1f      	ldr	r2, [pc, #124]	; (8006c04 <xTaskIncrementTick+0x164>)
 8006b86:	441a      	add	r2, r3
 8006b88:	68bb      	ldr	r3, [r7, #8]
 8006b8a:	3304      	adds	r3, #4
 8006b8c:	4619      	mov	r1, r3
 8006b8e:	4610      	mov	r0, r2
 8006b90:	f7fe fefb 	bl	800598a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b94:	68bb      	ldr	r3, [r7, #8]
 8006b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006b98:	4b1b      	ldr	r3, [pc, #108]	; (8006c08 <xTaskIncrementTick+0x168>)
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b9e:	429a      	cmp	r2, r3
 8006ba0:	d3b8      	bcc.n	8006b14 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ba6:	e7b5      	b.n	8006b14 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006ba8:	4b17      	ldr	r3, [pc, #92]	; (8006c08 <xTaskIncrementTick+0x168>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006bae:	4915      	ldr	r1, [pc, #84]	; (8006c04 <xTaskIncrementTick+0x164>)
 8006bb0:	4613      	mov	r3, r2
 8006bb2:	009b      	lsls	r3, r3, #2
 8006bb4:	4413      	add	r3, r2
 8006bb6:	009b      	lsls	r3, r3, #2
 8006bb8:	440b      	add	r3, r1
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	2b01      	cmp	r3, #1
 8006bbe:	d901      	bls.n	8006bc4 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8006bc0:	2301      	movs	r3, #1
 8006bc2:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006bc4:	4b11      	ldr	r3, [pc, #68]	; (8006c0c <xTaskIncrementTick+0x16c>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d007      	beq.n	8006bdc <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8006bcc:	2301      	movs	r3, #1
 8006bce:	617b      	str	r3, [r7, #20]
 8006bd0:	e004      	b.n	8006bdc <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006bd2:	4b0f      	ldr	r3, [pc, #60]	; (8006c10 <xTaskIncrementTick+0x170>)
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	3301      	adds	r3, #1
 8006bd8:	4a0d      	ldr	r2, [pc, #52]	; (8006c10 <xTaskIncrementTick+0x170>)
 8006bda:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006bdc:	697b      	ldr	r3, [r7, #20]
}
 8006bde:	4618      	mov	r0, r3
 8006be0:	3718      	adds	r7, #24
 8006be2:	46bd      	mov	sp, r7
 8006be4:	bd80      	pop	{r7, pc}
 8006be6:	bf00      	nop
 8006be8:	20001014 	.word	0x20001014
 8006bec:	20000ff0 	.word	0x20000ff0
 8006bf0:	20000fa4 	.word	0x20000fa4
 8006bf4:	20000fa8 	.word	0x20000fa8
 8006bf8:	20001004 	.word	0x20001004
 8006bfc:	2000100c 	.word	0x2000100c
 8006c00:	20000ff4 	.word	0x20000ff4
 8006c04:	20000b1c 	.word	0x20000b1c
 8006c08:	20000b18 	.word	0x20000b18
 8006c0c:	20001000 	.word	0x20001000
 8006c10:	20000ffc 	.word	0x20000ffc

08006c14 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006c14:	b480      	push	{r7}
 8006c16:	b085      	sub	sp, #20
 8006c18:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006c1a:	4b2a      	ldr	r3, [pc, #168]	; (8006cc4 <vTaskSwitchContext+0xb0>)
 8006c1c:	681b      	ldr	r3, [r3, #0]
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d003      	beq.n	8006c2a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006c22:	4b29      	ldr	r3, [pc, #164]	; (8006cc8 <vTaskSwitchContext+0xb4>)
 8006c24:	2201      	movs	r2, #1
 8006c26:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006c28:	e046      	b.n	8006cb8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8006c2a:	4b27      	ldr	r3, [pc, #156]	; (8006cc8 <vTaskSwitchContext+0xb4>)
 8006c2c:	2200      	movs	r2, #0
 8006c2e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c30:	4b26      	ldr	r3, [pc, #152]	; (8006ccc <vTaskSwitchContext+0xb8>)
 8006c32:	681b      	ldr	r3, [r3, #0]
 8006c34:	60fb      	str	r3, [r7, #12]
 8006c36:	e010      	b.n	8006c5a <vTaskSwitchContext+0x46>
 8006c38:	68fb      	ldr	r3, [r7, #12]
 8006c3a:	2b00      	cmp	r3, #0
 8006c3c:	d10a      	bne.n	8006c54 <vTaskSwitchContext+0x40>
	__asm volatile
 8006c3e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c42:	f383 8811 	msr	BASEPRI, r3
 8006c46:	f3bf 8f6f 	isb	sy
 8006c4a:	f3bf 8f4f 	dsb	sy
 8006c4e:	607b      	str	r3, [r7, #4]
}
 8006c50:	bf00      	nop
 8006c52:	e7fe      	b.n	8006c52 <vTaskSwitchContext+0x3e>
 8006c54:	68fb      	ldr	r3, [r7, #12]
 8006c56:	3b01      	subs	r3, #1
 8006c58:	60fb      	str	r3, [r7, #12]
 8006c5a:	491d      	ldr	r1, [pc, #116]	; (8006cd0 <vTaskSwitchContext+0xbc>)
 8006c5c:	68fa      	ldr	r2, [r7, #12]
 8006c5e:	4613      	mov	r3, r2
 8006c60:	009b      	lsls	r3, r3, #2
 8006c62:	4413      	add	r3, r2
 8006c64:	009b      	lsls	r3, r3, #2
 8006c66:	440b      	add	r3, r1
 8006c68:	681b      	ldr	r3, [r3, #0]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d0e4      	beq.n	8006c38 <vTaskSwitchContext+0x24>
 8006c6e:	68fa      	ldr	r2, [r7, #12]
 8006c70:	4613      	mov	r3, r2
 8006c72:	009b      	lsls	r3, r3, #2
 8006c74:	4413      	add	r3, r2
 8006c76:	009b      	lsls	r3, r3, #2
 8006c78:	4a15      	ldr	r2, [pc, #84]	; (8006cd0 <vTaskSwitchContext+0xbc>)
 8006c7a:	4413      	add	r3, r2
 8006c7c:	60bb      	str	r3, [r7, #8]
 8006c7e:	68bb      	ldr	r3, [r7, #8]
 8006c80:	685b      	ldr	r3, [r3, #4]
 8006c82:	685a      	ldr	r2, [r3, #4]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	605a      	str	r2, [r3, #4]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	685a      	ldr	r2, [r3, #4]
 8006c8c:	68bb      	ldr	r3, [r7, #8]
 8006c8e:	3308      	adds	r3, #8
 8006c90:	429a      	cmp	r2, r3
 8006c92:	d104      	bne.n	8006c9e <vTaskSwitchContext+0x8a>
 8006c94:	68bb      	ldr	r3, [r7, #8]
 8006c96:	685b      	ldr	r3, [r3, #4]
 8006c98:	685a      	ldr	r2, [r3, #4]
 8006c9a:	68bb      	ldr	r3, [r7, #8]
 8006c9c:	605a      	str	r2, [r3, #4]
 8006c9e:	68bb      	ldr	r3, [r7, #8]
 8006ca0:	685b      	ldr	r3, [r3, #4]
 8006ca2:	68db      	ldr	r3, [r3, #12]
 8006ca4:	4a0b      	ldr	r2, [pc, #44]	; (8006cd4 <vTaskSwitchContext+0xc0>)
 8006ca6:	6013      	str	r3, [r2, #0]
 8006ca8:	4a08      	ldr	r2, [pc, #32]	; (8006ccc <vTaskSwitchContext+0xb8>)
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006cae:	4b09      	ldr	r3, [pc, #36]	; (8006cd4 <vTaskSwitchContext+0xc0>)
 8006cb0:	681b      	ldr	r3, [r3, #0]
 8006cb2:	3354      	adds	r3, #84	; 0x54
 8006cb4:	4a08      	ldr	r2, [pc, #32]	; (8006cd8 <vTaskSwitchContext+0xc4>)
 8006cb6:	6013      	str	r3, [r2, #0]
}
 8006cb8:	bf00      	nop
 8006cba:	3714      	adds	r7, #20
 8006cbc:	46bd      	mov	sp, r7
 8006cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cc2:	4770      	bx	lr
 8006cc4:	20001014 	.word	0x20001014
 8006cc8:	20001000 	.word	0x20001000
 8006ccc:	20000ff4 	.word	0x20000ff4
 8006cd0:	20000b1c 	.word	0x20000b1c
 8006cd4:	20000b18 	.word	0x20000b18
 8006cd8:	20000060 	.word	0x20000060

08006cdc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b084      	sub	sp, #16
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006ce6:	687b      	ldr	r3, [r7, #4]
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d10a      	bne.n	8006d02 <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8006cec:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006cf0:	f383 8811 	msr	BASEPRI, r3
 8006cf4:	f3bf 8f6f 	isb	sy
 8006cf8:	f3bf 8f4f 	dsb	sy
 8006cfc:	60fb      	str	r3, [r7, #12]
}
 8006cfe:	bf00      	nop
 8006d00:	e7fe      	b.n	8006d00 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d02:	4b07      	ldr	r3, [pc, #28]	; (8006d20 <vTaskPlaceOnEventList+0x44>)
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	3318      	adds	r3, #24
 8006d08:	4619      	mov	r1, r3
 8006d0a:	6878      	ldr	r0, [r7, #4]
 8006d0c:	f7fe fe61 	bl	80059d2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006d10:	2101      	movs	r1, #1
 8006d12:	6838      	ldr	r0, [r7, #0]
 8006d14:	f000 fa80 	bl	8007218 <prvAddCurrentTaskToDelayedList>
}
 8006d18:	bf00      	nop
 8006d1a:	3710      	adds	r7, #16
 8006d1c:	46bd      	mov	sp, r7
 8006d1e:	bd80      	pop	{r7, pc}
 8006d20:	20000b18 	.word	0x20000b18

08006d24 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006d24:	b580      	push	{r7, lr}
 8006d26:	b086      	sub	sp, #24
 8006d28:	af00      	add	r7, sp, #0
 8006d2a:	60f8      	str	r0, [r7, #12]
 8006d2c:	60b9      	str	r1, [r7, #8]
 8006d2e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006d30:	68fb      	ldr	r3, [r7, #12]
 8006d32:	2b00      	cmp	r3, #0
 8006d34:	d10a      	bne.n	8006d4c <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8006d36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d3a:	f383 8811 	msr	BASEPRI, r3
 8006d3e:	f3bf 8f6f 	isb	sy
 8006d42:	f3bf 8f4f 	dsb	sy
 8006d46:	617b      	str	r3, [r7, #20]
}
 8006d48:	bf00      	nop
 8006d4a:	e7fe      	b.n	8006d4a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d4c:	4b0a      	ldr	r3, [pc, #40]	; (8006d78 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	3318      	adds	r3, #24
 8006d52:	4619      	mov	r1, r3
 8006d54:	68f8      	ldr	r0, [r7, #12]
 8006d56:	f7fe fe18 	bl	800598a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d002      	beq.n	8006d66 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8006d60:	f04f 33ff 	mov.w	r3, #4294967295
 8006d64:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d66:	6879      	ldr	r1, [r7, #4]
 8006d68:	68b8      	ldr	r0, [r7, #8]
 8006d6a:	f000 fa55 	bl	8007218 <prvAddCurrentTaskToDelayedList>
	}
 8006d6e:	bf00      	nop
 8006d70:	3718      	adds	r7, #24
 8006d72:	46bd      	mov	sp, r7
 8006d74:	bd80      	pop	{r7, pc}
 8006d76:	bf00      	nop
 8006d78:	20000b18 	.word	0x20000b18

08006d7c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d7c:	b580      	push	{r7, lr}
 8006d7e:	b086      	sub	sp, #24
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	68db      	ldr	r3, [r3, #12]
 8006d88:	68db      	ldr	r3, [r3, #12]
 8006d8a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d8c:	693b      	ldr	r3, [r7, #16]
 8006d8e:	2b00      	cmp	r3, #0
 8006d90:	d10a      	bne.n	8006da8 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8006d92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d96:	f383 8811 	msr	BASEPRI, r3
 8006d9a:	f3bf 8f6f 	isb	sy
 8006d9e:	f3bf 8f4f 	dsb	sy
 8006da2:	60fb      	str	r3, [r7, #12]
}
 8006da4:	bf00      	nop
 8006da6:	e7fe      	b.n	8006da6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006da8:	693b      	ldr	r3, [r7, #16]
 8006daa:	3318      	adds	r3, #24
 8006dac:	4618      	mov	r0, r3
 8006dae:	f7fe fe49 	bl	8005a44 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006db2:	4b1e      	ldr	r3, [pc, #120]	; (8006e2c <xTaskRemoveFromEventList+0xb0>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	2b00      	cmp	r3, #0
 8006db8:	d11d      	bne.n	8006df6 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006dba:	693b      	ldr	r3, [r7, #16]
 8006dbc:	3304      	adds	r3, #4
 8006dbe:	4618      	mov	r0, r3
 8006dc0:	f7fe fe40 	bl	8005a44 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006dc4:	693b      	ldr	r3, [r7, #16]
 8006dc6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006dc8:	4b19      	ldr	r3, [pc, #100]	; (8006e30 <xTaskRemoveFromEventList+0xb4>)
 8006dca:	681b      	ldr	r3, [r3, #0]
 8006dcc:	429a      	cmp	r2, r3
 8006dce:	d903      	bls.n	8006dd8 <xTaskRemoveFromEventList+0x5c>
 8006dd0:	693b      	ldr	r3, [r7, #16]
 8006dd2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd4:	4a16      	ldr	r2, [pc, #88]	; (8006e30 <xTaskRemoveFromEventList+0xb4>)
 8006dd6:	6013      	str	r3, [r2, #0]
 8006dd8:	693b      	ldr	r3, [r7, #16]
 8006dda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006ddc:	4613      	mov	r3, r2
 8006dde:	009b      	lsls	r3, r3, #2
 8006de0:	4413      	add	r3, r2
 8006de2:	009b      	lsls	r3, r3, #2
 8006de4:	4a13      	ldr	r2, [pc, #76]	; (8006e34 <xTaskRemoveFromEventList+0xb8>)
 8006de6:	441a      	add	r2, r3
 8006de8:	693b      	ldr	r3, [r7, #16]
 8006dea:	3304      	adds	r3, #4
 8006dec:	4619      	mov	r1, r3
 8006dee:	4610      	mov	r0, r2
 8006df0:	f7fe fdcb 	bl	800598a <vListInsertEnd>
 8006df4:	e005      	b.n	8006e02 <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006df6:	693b      	ldr	r3, [r7, #16]
 8006df8:	3318      	adds	r3, #24
 8006dfa:	4619      	mov	r1, r3
 8006dfc:	480e      	ldr	r0, [pc, #56]	; (8006e38 <xTaskRemoveFromEventList+0xbc>)
 8006dfe:	f7fe fdc4 	bl	800598a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006e02:	693b      	ldr	r3, [r7, #16]
 8006e04:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8006e06:	4b0d      	ldr	r3, [pc, #52]	; (8006e3c <xTaskRemoveFromEventList+0xc0>)
 8006e08:	681b      	ldr	r3, [r3, #0]
 8006e0a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e0c:	429a      	cmp	r2, r3
 8006e0e:	d905      	bls.n	8006e1c <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006e10:	2301      	movs	r3, #1
 8006e12:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006e14:	4b0a      	ldr	r3, [pc, #40]	; (8006e40 <xTaskRemoveFromEventList+0xc4>)
 8006e16:	2201      	movs	r2, #1
 8006e18:	601a      	str	r2, [r3, #0]
 8006e1a:	e001      	b.n	8006e20 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8006e1c:	2300      	movs	r3, #0
 8006e1e:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006e20:	697b      	ldr	r3, [r7, #20]
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3718      	adds	r7, #24
 8006e26:	46bd      	mov	sp, r7
 8006e28:	bd80      	pop	{r7, pc}
 8006e2a:	bf00      	nop
 8006e2c:	20001014 	.word	0x20001014
 8006e30:	20000ff4 	.word	0x20000ff4
 8006e34:	20000b1c 	.word	0x20000b1c
 8006e38:	20000fac 	.word	0x20000fac
 8006e3c:	20000b18 	.word	0x20000b18
 8006e40:	20001000 	.word	0x20001000

08006e44 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006e44:	b480      	push	{r7}
 8006e46:	b083      	sub	sp, #12
 8006e48:	af00      	add	r7, sp, #0
 8006e4a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e4c:	4b06      	ldr	r3, [pc, #24]	; (8006e68 <vTaskInternalSetTimeOutState+0x24>)
 8006e4e:	681a      	ldr	r2, [r3, #0]
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e54:	4b05      	ldr	r3, [pc, #20]	; (8006e6c <vTaskInternalSetTimeOutState+0x28>)
 8006e56:	681a      	ldr	r2, [r3, #0]
 8006e58:	687b      	ldr	r3, [r7, #4]
 8006e5a:	605a      	str	r2, [r3, #4]
}
 8006e5c:	bf00      	nop
 8006e5e:	370c      	adds	r7, #12
 8006e60:	46bd      	mov	sp, r7
 8006e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e66:	4770      	bx	lr
 8006e68:	20001004 	.word	0x20001004
 8006e6c:	20000ff0 	.word	0x20000ff0

08006e70 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e70:	b580      	push	{r7, lr}
 8006e72:	b088      	sub	sp, #32
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	6078      	str	r0, [r7, #4]
 8006e78:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e7a:	687b      	ldr	r3, [r7, #4]
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d10a      	bne.n	8006e96 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 8006e80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006e84:	f383 8811 	msr	BASEPRI, r3
 8006e88:	f3bf 8f6f 	isb	sy
 8006e8c:	f3bf 8f4f 	dsb	sy
 8006e90:	613b      	str	r3, [r7, #16]
}
 8006e92:	bf00      	nop
 8006e94:	e7fe      	b.n	8006e94 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e96:	683b      	ldr	r3, [r7, #0]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d10a      	bne.n	8006eb2 <xTaskCheckForTimeOut+0x42>
	__asm volatile
 8006e9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006ea0:	f383 8811 	msr	BASEPRI, r3
 8006ea4:	f3bf 8f6f 	isb	sy
 8006ea8:	f3bf 8f4f 	dsb	sy
 8006eac:	60fb      	str	r3, [r7, #12]
}
 8006eae:	bf00      	nop
 8006eb0:	e7fe      	b.n	8006eb0 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 8006eb2:	f000 fe7f 	bl	8007bb4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006eb6:	4b1d      	ldr	r3, [pc, #116]	; (8006f2c <xTaskCheckForTimeOut+0xbc>)
 8006eb8:	681b      	ldr	r3, [r3, #0]
 8006eba:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006ebc:	687b      	ldr	r3, [r7, #4]
 8006ebe:	685b      	ldr	r3, [r3, #4]
 8006ec0:	69ba      	ldr	r2, [r7, #24]
 8006ec2:	1ad3      	subs	r3, r2, r3
 8006ec4:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ec6:	683b      	ldr	r3, [r7, #0]
 8006ec8:	681b      	ldr	r3, [r3, #0]
 8006eca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ece:	d102      	bne.n	8006ed6 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006ed0:	2300      	movs	r3, #0
 8006ed2:	61fb      	str	r3, [r7, #28]
 8006ed4:	e023      	b.n	8006f1e <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	681a      	ldr	r2, [r3, #0]
 8006eda:	4b15      	ldr	r3, [pc, #84]	; (8006f30 <xTaskCheckForTimeOut+0xc0>)
 8006edc:	681b      	ldr	r3, [r3, #0]
 8006ede:	429a      	cmp	r2, r3
 8006ee0:	d007      	beq.n	8006ef2 <xTaskCheckForTimeOut+0x82>
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	685b      	ldr	r3, [r3, #4]
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	429a      	cmp	r2, r3
 8006eea:	d302      	bcc.n	8006ef2 <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006eec:	2301      	movs	r3, #1
 8006eee:	61fb      	str	r3, [r7, #28]
 8006ef0:	e015      	b.n	8006f1e <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006ef2:	683b      	ldr	r3, [r7, #0]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	697a      	ldr	r2, [r7, #20]
 8006ef8:	429a      	cmp	r2, r3
 8006efa:	d20b      	bcs.n	8006f14 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006efc:	683b      	ldr	r3, [r7, #0]
 8006efe:	681a      	ldr	r2, [r3, #0]
 8006f00:	697b      	ldr	r3, [r7, #20]
 8006f02:	1ad2      	subs	r2, r2, r3
 8006f04:	683b      	ldr	r3, [r7, #0]
 8006f06:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006f08:	6878      	ldr	r0, [r7, #4]
 8006f0a:	f7ff ff9b 	bl	8006e44 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006f0e:	2300      	movs	r3, #0
 8006f10:	61fb      	str	r3, [r7, #28]
 8006f12:	e004      	b.n	8006f1e <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 8006f14:	683b      	ldr	r3, [r7, #0]
 8006f16:	2200      	movs	r2, #0
 8006f18:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006f1a:	2301      	movs	r3, #1
 8006f1c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006f1e:	f000 fe79 	bl	8007c14 <vPortExitCritical>

	return xReturn;
 8006f22:	69fb      	ldr	r3, [r7, #28]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3720      	adds	r7, #32
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	bd80      	pop	{r7, pc}
 8006f2c:	20000ff0 	.word	0x20000ff0
 8006f30:	20001004 	.word	0x20001004

08006f34 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006f34:	b480      	push	{r7}
 8006f36:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006f38:	4b03      	ldr	r3, [pc, #12]	; (8006f48 <vTaskMissedYield+0x14>)
 8006f3a:	2201      	movs	r2, #1
 8006f3c:	601a      	str	r2, [r3, #0]
}
 8006f3e:	bf00      	nop
 8006f40:	46bd      	mov	sp, r7
 8006f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f46:	4770      	bx	lr
 8006f48:	20001000 	.word	0x20001000

08006f4c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f4c:	b580      	push	{r7, lr}
 8006f4e:	b082      	sub	sp, #8
 8006f50:	af00      	add	r7, sp, #0
 8006f52:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f54:	f000 f852 	bl	8006ffc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f58:	4b06      	ldr	r3, [pc, #24]	; (8006f74 <prvIdleTask+0x28>)
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	2b01      	cmp	r3, #1
 8006f5e:	d9f9      	bls.n	8006f54 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f60:	4b05      	ldr	r3, [pc, #20]	; (8006f78 <prvIdleTask+0x2c>)
 8006f62:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006f66:	601a      	str	r2, [r3, #0]
 8006f68:	f3bf 8f4f 	dsb	sy
 8006f6c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f70:	e7f0      	b.n	8006f54 <prvIdleTask+0x8>
 8006f72:	bf00      	nop
 8006f74:	20000b1c 	.word	0x20000b1c
 8006f78:	e000ed04 	.word	0xe000ed04

08006f7c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	b082      	sub	sp, #8
 8006f80:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f82:	2300      	movs	r3, #0
 8006f84:	607b      	str	r3, [r7, #4]
 8006f86:	e00c      	b.n	8006fa2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f88:	687a      	ldr	r2, [r7, #4]
 8006f8a:	4613      	mov	r3, r2
 8006f8c:	009b      	lsls	r3, r3, #2
 8006f8e:	4413      	add	r3, r2
 8006f90:	009b      	lsls	r3, r3, #2
 8006f92:	4a12      	ldr	r2, [pc, #72]	; (8006fdc <prvInitialiseTaskLists+0x60>)
 8006f94:	4413      	add	r3, r2
 8006f96:	4618      	mov	r0, r3
 8006f98:	f7fe fcca 	bl	8005930 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f9c:	687b      	ldr	r3, [r7, #4]
 8006f9e:	3301      	adds	r3, #1
 8006fa0:	607b      	str	r3, [r7, #4]
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	2b37      	cmp	r3, #55	; 0x37
 8006fa6:	d9ef      	bls.n	8006f88 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006fa8:	480d      	ldr	r0, [pc, #52]	; (8006fe0 <prvInitialiseTaskLists+0x64>)
 8006faa:	f7fe fcc1 	bl	8005930 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006fae:	480d      	ldr	r0, [pc, #52]	; (8006fe4 <prvInitialiseTaskLists+0x68>)
 8006fb0:	f7fe fcbe 	bl	8005930 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006fb4:	480c      	ldr	r0, [pc, #48]	; (8006fe8 <prvInitialiseTaskLists+0x6c>)
 8006fb6:	f7fe fcbb 	bl	8005930 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006fba:	480c      	ldr	r0, [pc, #48]	; (8006fec <prvInitialiseTaskLists+0x70>)
 8006fbc:	f7fe fcb8 	bl	8005930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006fc0:	480b      	ldr	r0, [pc, #44]	; (8006ff0 <prvInitialiseTaskLists+0x74>)
 8006fc2:	f7fe fcb5 	bl	8005930 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006fc6:	4b0b      	ldr	r3, [pc, #44]	; (8006ff4 <prvInitialiseTaskLists+0x78>)
 8006fc8:	4a05      	ldr	r2, [pc, #20]	; (8006fe0 <prvInitialiseTaskLists+0x64>)
 8006fca:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006fcc:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <prvInitialiseTaskLists+0x7c>)
 8006fce:	4a05      	ldr	r2, [pc, #20]	; (8006fe4 <prvInitialiseTaskLists+0x68>)
 8006fd0:	601a      	str	r2, [r3, #0]
}
 8006fd2:	bf00      	nop
 8006fd4:	3708      	adds	r7, #8
 8006fd6:	46bd      	mov	sp, r7
 8006fd8:	bd80      	pop	{r7, pc}
 8006fda:	bf00      	nop
 8006fdc:	20000b1c 	.word	0x20000b1c
 8006fe0:	20000f7c 	.word	0x20000f7c
 8006fe4:	20000f90 	.word	0x20000f90
 8006fe8:	20000fac 	.word	0x20000fac
 8006fec:	20000fc0 	.word	0x20000fc0
 8006ff0:	20000fd8 	.word	0x20000fd8
 8006ff4:	20000fa4 	.word	0x20000fa4
 8006ff8:	20000fa8 	.word	0x20000fa8

08006ffc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006ffc:	b580      	push	{r7, lr}
 8006ffe:	b082      	sub	sp, #8
 8007000:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007002:	e019      	b.n	8007038 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8007004:	f000 fdd6 	bl	8007bb4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007008:	4b10      	ldr	r3, [pc, #64]	; (800704c <prvCheckTasksWaitingTermination+0x50>)
 800700a:	68db      	ldr	r3, [r3, #12]
 800700c:	68db      	ldr	r3, [r3, #12]
 800700e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	3304      	adds	r3, #4
 8007014:	4618      	mov	r0, r3
 8007016:	f7fe fd15 	bl	8005a44 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800701a:	4b0d      	ldr	r3, [pc, #52]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3b01      	subs	r3, #1
 8007020:	4a0b      	ldr	r2, [pc, #44]	; (8007050 <prvCheckTasksWaitingTermination+0x54>)
 8007022:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8007024:	4b0b      	ldr	r3, [pc, #44]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 8007026:	681b      	ldr	r3, [r3, #0]
 8007028:	3b01      	subs	r3, #1
 800702a:	4a0a      	ldr	r2, [pc, #40]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 800702c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800702e:	f000 fdf1 	bl	8007c14 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8007032:	6878      	ldr	r0, [r7, #4]
 8007034:	f000 f810 	bl	8007058 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8007038:	4b06      	ldr	r3, [pc, #24]	; (8007054 <prvCheckTasksWaitingTermination+0x58>)
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d1e1      	bne.n	8007004 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007040:	bf00      	nop
 8007042:	bf00      	nop
 8007044:	3708      	adds	r7, #8
 8007046:	46bd      	mov	sp, r7
 8007048:	bd80      	pop	{r7, pc}
 800704a:	bf00      	nop
 800704c:	20000fc0 	.word	0x20000fc0
 8007050:	20000fec 	.word	0x20000fec
 8007054:	20000fd4 	.word	0x20000fd4

08007058 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007058:	b580      	push	{r7, lr}
 800705a:	b084      	sub	sp, #16
 800705c:	af00      	add	r7, sp, #0
 800705e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007060:	687b      	ldr	r3, [r7, #4]
 8007062:	3354      	adds	r3, #84	; 0x54
 8007064:	4618      	mov	r0, r3
 8007066:	f001 f8b9 	bl	80081dc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800706a:	687b      	ldr	r3, [r7, #4]
 800706c:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8007070:	2b00      	cmp	r3, #0
 8007072:	d108      	bne.n	8007086 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	4618      	mov	r0, r3
 800707a:	f000 ff89 	bl	8007f90 <vPortFree>
				vPortFree( pxTCB );
 800707e:	6878      	ldr	r0, [r7, #4]
 8007080:	f000 ff86 	bl	8007f90 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007084:	e018      	b.n	80070b8 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800708c:	2b01      	cmp	r3, #1
 800708e:	d103      	bne.n	8007098 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007090:	6878      	ldr	r0, [r7, #4]
 8007092:	f000 ff7d 	bl	8007f90 <vPortFree>
	}
 8007096:	e00f      	b.n	80070b8 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 800709e:	2b02      	cmp	r3, #2
 80070a0:	d00a      	beq.n	80070b8 <prvDeleteTCB+0x60>
	__asm volatile
 80070a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80070a6:	f383 8811 	msr	BASEPRI, r3
 80070aa:	f3bf 8f6f 	isb	sy
 80070ae:	f3bf 8f4f 	dsb	sy
 80070b2:	60fb      	str	r3, [r7, #12]
}
 80070b4:	bf00      	nop
 80070b6:	e7fe      	b.n	80070b6 <prvDeleteTCB+0x5e>
	}
 80070b8:	bf00      	nop
 80070ba:	3710      	adds	r7, #16
 80070bc:	46bd      	mov	sp, r7
 80070be:	bd80      	pop	{r7, pc}

080070c0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80070c6:	4b0c      	ldr	r3, [pc, #48]	; (80070f8 <prvResetNextTaskUnblockTime+0x38>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	2b00      	cmp	r3, #0
 80070ce:	d104      	bne.n	80070da <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80070d0:	4b0a      	ldr	r3, [pc, #40]	; (80070fc <prvResetNextTaskUnblockTime+0x3c>)
 80070d2:	f04f 32ff 	mov.w	r2, #4294967295
 80070d6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80070d8:	e008      	b.n	80070ec <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80070da:	4b07      	ldr	r3, [pc, #28]	; (80070f8 <prvResetNextTaskUnblockTime+0x38>)
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68db      	ldr	r3, [r3, #12]
 80070e0:	68db      	ldr	r3, [r3, #12]
 80070e2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070e4:	687b      	ldr	r3, [r7, #4]
 80070e6:	685b      	ldr	r3, [r3, #4]
 80070e8:	4a04      	ldr	r2, [pc, #16]	; (80070fc <prvResetNextTaskUnblockTime+0x3c>)
 80070ea:	6013      	str	r3, [r2, #0]
}
 80070ec:	bf00      	nop
 80070ee:	370c      	adds	r7, #12
 80070f0:	46bd      	mov	sp, r7
 80070f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f6:	4770      	bx	lr
 80070f8:	20000fa4 	.word	0x20000fa4
 80070fc:	2000100c 	.word	0x2000100c

08007100 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8007100:	b480      	push	{r7}
 8007102:	b083      	sub	sp, #12
 8007104:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8007106:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <xTaskGetSchedulerState+0x34>)
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	2b00      	cmp	r3, #0
 800710c:	d102      	bne.n	8007114 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800710e:	2301      	movs	r3, #1
 8007110:	607b      	str	r3, [r7, #4]
 8007112:	e008      	b.n	8007126 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007114:	4b08      	ldr	r3, [pc, #32]	; (8007138 <xTaskGetSchedulerState+0x38>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	2b00      	cmp	r3, #0
 800711a:	d102      	bne.n	8007122 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800711c:	2302      	movs	r3, #2
 800711e:	607b      	str	r3, [r7, #4]
 8007120:	e001      	b.n	8007126 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8007122:	2300      	movs	r3, #0
 8007124:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8007126:	687b      	ldr	r3, [r7, #4]
	}
 8007128:	4618      	mov	r0, r3
 800712a:	370c      	adds	r7, #12
 800712c:	46bd      	mov	sp, r7
 800712e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007132:	4770      	bx	lr
 8007134:	20000ff8 	.word	0x20000ff8
 8007138:	20001014 	.word	0x20001014

0800713c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800713c:	b580      	push	{r7, lr}
 800713e:	b086      	sub	sp, #24
 8007140:	af00      	add	r7, sp, #0
 8007142:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007148:	2300      	movs	r3, #0
 800714a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800714c:	687b      	ldr	r3, [r7, #4]
 800714e:	2b00      	cmp	r3, #0
 8007150:	d056      	beq.n	8007200 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007152:	4b2e      	ldr	r3, [pc, #184]	; (800720c <xTaskPriorityDisinherit+0xd0>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	693a      	ldr	r2, [r7, #16]
 8007158:	429a      	cmp	r2, r3
 800715a:	d00a      	beq.n	8007172 <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800715c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007160:	f383 8811 	msr	BASEPRI, r3
 8007164:	f3bf 8f6f 	isb	sy
 8007168:	f3bf 8f4f 	dsb	sy
 800716c:	60fb      	str	r3, [r7, #12]
}
 800716e:	bf00      	nop
 8007170:	e7fe      	b.n	8007170 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007176:	2b00      	cmp	r3, #0
 8007178:	d10a      	bne.n	8007190 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800717a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800717e:	f383 8811 	msr	BASEPRI, r3
 8007182:	f3bf 8f6f 	isb	sy
 8007186:	f3bf 8f4f 	dsb	sy
 800718a:	60bb      	str	r3, [r7, #8]
}
 800718c:	bf00      	nop
 800718e:	e7fe      	b.n	800718e <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007194:	1e5a      	subs	r2, r3, #1
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800719a:	693b      	ldr	r3, [r7, #16]
 800719c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80071a2:	429a      	cmp	r2, r3
 80071a4:	d02c      	beq.n	8007200 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80071a6:	693b      	ldr	r3, [r7, #16]
 80071a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d128      	bne.n	8007200 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	3304      	adds	r3, #4
 80071b2:	4618      	mov	r0, r3
 80071b4:	f7fe fc46 	bl	8005a44 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80071b8:	693b      	ldr	r3, [r7, #16]
 80071ba:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80071bc:	693b      	ldr	r3, [r7, #16]
 80071be:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80071c0:	693b      	ldr	r3, [r7, #16]
 80071c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071c4:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80071c8:	693b      	ldr	r3, [r7, #16]
 80071ca:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80071cc:	693b      	ldr	r3, [r7, #16]
 80071ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071d0:	4b0f      	ldr	r3, [pc, #60]	; (8007210 <xTaskPriorityDisinherit+0xd4>)
 80071d2:	681b      	ldr	r3, [r3, #0]
 80071d4:	429a      	cmp	r2, r3
 80071d6:	d903      	bls.n	80071e0 <xTaskPriorityDisinherit+0xa4>
 80071d8:	693b      	ldr	r3, [r7, #16]
 80071da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80071dc:	4a0c      	ldr	r2, [pc, #48]	; (8007210 <xTaskPriorityDisinherit+0xd4>)
 80071de:	6013      	str	r3, [r2, #0]
 80071e0:	693b      	ldr	r3, [r7, #16]
 80071e2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80071e4:	4613      	mov	r3, r2
 80071e6:	009b      	lsls	r3, r3, #2
 80071e8:	4413      	add	r3, r2
 80071ea:	009b      	lsls	r3, r3, #2
 80071ec:	4a09      	ldr	r2, [pc, #36]	; (8007214 <xTaskPriorityDisinherit+0xd8>)
 80071ee:	441a      	add	r2, r3
 80071f0:	693b      	ldr	r3, [r7, #16]
 80071f2:	3304      	adds	r3, #4
 80071f4:	4619      	mov	r1, r3
 80071f6:	4610      	mov	r0, r2
 80071f8:	f7fe fbc7 	bl	800598a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071fc:	2301      	movs	r3, #1
 80071fe:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007200:	697b      	ldr	r3, [r7, #20]
	}
 8007202:	4618      	mov	r0, r3
 8007204:	3718      	adds	r7, #24
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000b18 	.word	0x20000b18
 8007210:	20000ff4 	.word	0x20000ff4
 8007214:	20000b1c 	.word	0x20000b1c

08007218 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
 8007220:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007222:	4b21      	ldr	r3, [pc, #132]	; (80072a8 <prvAddCurrentTaskToDelayedList+0x90>)
 8007224:	681b      	ldr	r3, [r3, #0]
 8007226:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007228:	4b20      	ldr	r3, [pc, #128]	; (80072ac <prvAddCurrentTaskToDelayedList+0x94>)
 800722a:	681b      	ldr	r3, [r3, #0]
 800722c:	3304      	adds	r3, #4
 800722e:	4618      	mov	r0, r3
 8007230:	f7fe fc08 	bl	8005a44 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	f1b3 3fff 	cmp.w	r3, #4294967295
 800723a:	d10a      	bne.n	8007252 <prvAddCurrentTaskToDelayedList+0x3a>
 800723c:	683b      	ldr	r3, [r7, #0]
 800723e:	2b00      	cmp	r3, #0
 8007240:	d007      	beq.n	8007252 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007242:	4b1a      	ldr	r3, [pc, #104]	; (80072ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	3304      	adds	r3, #4
 8007248:	4619      	mov	r1, r3
 800724a:	4819      	ldr	r0, [pc, #100]	; (80072b0 <prvAddCurrentTaskToDelayedList+0x98>)
 800724c:	f7fe fb9d 	bl	800598a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007250:	e026      	b.n	80072a0 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007252:	68fa      	ldr	r2, [r7, #12]
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4413      	add	r3, r2
 8007258:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800725a:	4b14      	ldr	r3, [pc, #80]	; (80072ac <prvAddCurrentTaskToDelayedList+0x94>)
 800725c:	681b      	ldr	r3, [r3, #0]
 800725e:	68ba      	ldr	r2, [r7, #8]
 8007260:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007262:	68ba      	ldr	r2, [r7, #8]
 8007264:	68fb      	ldr	r3, [r7, #12]
 8007266:	429a      	cmp	r2, r3
 8007268:	d209      	bcs.n	800727e <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800726a:	4b12      	ldr	r3, [pc, #72]	; (80072b4 <prvAddCurrentTaskToDelayedList+0x9c>)
 800726c:	681a      	ldr	r2, [r3, #0]
 800726e:	4b0f      	ldr	r3, [pc, #60]	; (80072ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007270:	681b      	ldr	r3, [r3, #0]
 8007272:	3304      	adds	r3, #4
 8007274:	4619      	mov	r1, r3
 8007276:	4610      	mov	r0, r2
 8007278:	f7fe fbab 	bl	80059d2 <vListInsert>
}
 800727c:	e010      	b.n	80072a0 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800727e:	4b0e      	ldr	r3, [pc, #56]	; (80072b8 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007280:	681a      	ldr	r2, [r3, #0]
 8007282:	4b0a      	ldr	r3, [pc, #40]	; (80072ac <prvAddCurrentTaskToDelayedList+0x94>)
 8007284:	681b      	ldr	r3, [r3, #0]
 8007286:	3304      	adds	r3, #4
 8007288:	4619      	mov	r1, r3
 800728a:	4610      	mov	r0, r2
 800728c:	f7fe fba1 	bl	80059d2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007290:	4b0a      	ldr	r3, [pc, #40]	; (80072bc <prvAddCurrentTaskToDelayedList+0xa4>)
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68ba      	ldr	r2, [r7, #8]
 8007296:	429a      	cmp	r2, r3
 8007298:	d202      	bcs.n	80072a0 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800729a:	4a08      	ldr	r2, [pc, #32]	; (80072bc <prvAddCurrentTaskToDelayedList+0xa4>)
 800729c:	68bb      	ldr	r3, [r7, #8]
 800729e:	6013      	str	r3, [r2, #0]
}
 80072a0:	bf00      	nop
 80072a2:	3710      	adds	r7, #16
 80072a4:	46bd      	mov	sp, r7
 80072a6:	bd80      	pop	{r7, pc}
 80072a8:	20000ff0 	.word	0x20000ff0
 80072ac:	20000b18 	.word	0x20000b18
 80072b0:	20000fd8 	.word	0x20000fd8
 80072b4:	20000fa8 	.word	0x20000fa8
 80072b8:	20000fa4 	.word	0x20000fa4
 80072bc:	2000100c 	.word	0x2000100c

080072c0 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80072c0:	b580      	push	{r7, lr}
 80072c2:	b08a      	sub	sp, #40	; 0x28
 80072c4:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80072c6:	2300      	movs	r3, #0
 80072c8:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80072ca:	f000 fb07 	bl	80078dc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80072ce:	4b1c      	ldr	r3, [pc, #112]	; (8007340 <xTimerCreateTimerTask+0x80>)
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d021      	beq.n	800731a <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80072d6:	2300      	movs	r3, #0
 80072d8:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80072da:	2300      	movs	r3, #0
 80072dc:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072de:	1d3a      	adds	r2, r7, #4
 80072e0:	f107 0108 	add.w	r1, r7, #8
 80072e4:	f107 030c 	add.w	r3, r7, #12
 80072e8:	4618      	mov	r0, r3
 80072ea:	f7fe fb07 	bl	80058fc <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072ee:	6879      	ldr	r1, [r7, #4]
 80072f0:	68bb      	ldr	r3, [r7, #8]
 80072f2:	68fa      	ldr	r2, [r7, #12]
 80072f4:	9202      	str	r2, [sp, #8]
 80072f6:	9301      	str	r3, [sp, #4]
 80072f8:	2302      	movs	r3, #2
 80072fa:	9300      	str	r3, [sp, #0]
 80072fc:	2300      	movs	r3, #0
 80072fe:	460a      	mov	r2, r1
 8007300:	4910      	ldr	r1, [pc, #64]	; (8007344 <xTimerCreateTimerTask+0x84>)
 8007302:	4811      	ldr	r0, [pc, #68]	; (8007348 <xTimerCreateTimerTask+0x88>)
 8007304:	f7ff f8b4 	bl	8006470 <xTaskCreateStatic>
 8007308:	4603      	mov	r3, r0
 800730a:	4a10      	ldr	r2, [pc, #64]	; (800734c <xTimerCreateTimerTask+0x8c>)
 800730c:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800730e:	4b0f      	ldr	r3, [pc, #60]	; (800734c <xTimerCreateTimerTask+0x8c>)
 8007310:	681b      	ldr	r3, [r3, #0]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d001      	beq.n	800731a <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8007316:	2301      	movs	r3, #1
 8007318:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800731a:	697b      	ldr	r3, [r7, #20]
 800731c:	2b00      	cmp	r3, #0
 800731e:	d10a      	bne.n	8007336 <xTimerCreateTimerTask+0x76>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	613b      	str	r3, [r7, #16]
}
 8007332:	bf00      	nop
 8007334:	e7fe      	b.n	8007334 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007336:	697b      	ldr	r3, [r7, #20]
}
 8007338:	4618      	mov	r0, r3
 800733a:	3718      	adds	r7, #24
 800733c:	46bd      	mov	sp, r7
 800733e:	bd80      	pop	{r7, pc}
 8007340:	20001048 	.word	0x20001048
 8007344:	080083dc 	.word	0x080083dc
 8007348:	08007485 	.word	0x08007485
 800734c:	2000104c 	.word	0x2000104c

08007350 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007350:	b580      	push	{r7, lr}
 8007352:	b08a      	sub	sp, #40	; 0x28
 8007354:	af00      	add	r7, sp, #0
 8007356:	60f8      	str	r0, [r7, #12]
 8007358:	60b9      	str	r1, [r7, #8]
 800735a:	607a      	str	r2, [r7, #4]
 800735c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800735e:	2300      	movs	r3, #0
 8007360:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8007362:	68fb      	ldr	r3, [r7, #12]
 8007364:	2b00      	cmp	r3, #0
 8007366:	d10a      	bne.n	800737e <xTimerGenericCommand+0x2e>
	__asm volatile
 8007368:	f04f 0350 	mov.w	r3, #80	; 0x50
 800736c:	f383 8811 	msr	BASEPRI, r3
 8007370:	f3bf 8f6f 	isb	sy
 8007374:	f3bf 8f4f 	dsb	sy
 8007378:	623b      	str	r3, [r7, #32]
}
 800737a:	bf00      	nop
 800737c:	e7fe      	b.n	800737c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800737e:	4b1a      	ldr	r3, [pc, #104]	; (80073e8 <xTimerGenericCommand+0x98>)
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d02a      	beq.n	80073dc <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800738a:	687b      	ldr	r3, [r7, #4]
 800738c:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007392:	68bb      	ldr	r3, [r7, #8]
 8007394:	2b05      	cmp	r3, #5
 8007396:	dc18      	bgt.n	80073ca <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007398:	f7ff feb2 	bl	8007100 <xTaskGetSchedulerState>
 800739c:	4603      	mov	r3, r0
 800739e:	2b02      	cmp	r3, #2
 80073a0:	d109      	bne.n	80073b6 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80073a2:	4b11      	ldr	r3, [pc, #68]	; (80073e8 <xTimerGenericCommand+0x98>)
 80073a4:	6818      	ldr	r0, [r3, #0]
 80073a6:	f107 0110 	add.w	r1, r7, #16
 80073aa:	2300      	movs	r3, #0
 80073ac:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80073ae:	f7fe fc77 	bl	8005ca0 <xQueueGenericSend>
 80073b2:	6278      	str	r0, [r7, #36]	; 0x24
 80073b4:	e012      	b.n	80073dc <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80073b6:	4b0c      	ldr	r3, [pc, #48]	; (80073e8 <xTimerGenericCommand+0x98>)
 80073b8:	6818      	ldr	r0, [r3, #0]
 80073ba:	f107 0110 	add.w	r1, r7, #16
 80073be:	2300      	movs	r3, #0
 80073c0:	2200      	movs	r2, #0
 80073c2:	f7fe fc6d 	bl	8005ca0 <xQueueGenericSend>
 80073c6:	6278      	str	r0, [r7, #36]	; 0x24
 80073c8:	e008      	b.n	80073dc <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80073ca:	4b07      	ldr	r3, [pc, #28]	; (80073e8 <xTimerGenericCommand+0x98>)
 80073cc:	6818      	ldr	r0, [r3, #0]
 80073ce:	f107 0110 	add.w	r1, r7, #16
 80073d2:	2300      	movs	r3, #0
 80073d4:	683a      	ldr	r2, [r7, #0]
 80073d6:	f7fe fd61 	bl	8005e9c <xQueueGenericSendFromISR>
 80073da:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80073de:	4618      	mov	r0, r3
 80073e0:	3728      	adds	r7, #40	; 0x28
 80073e2:	46bd      	mov	sp, r7
 80073e4:	bd80      	pop	{r7, pc}
 80073e6:	bf00      	nop
 80073e8:	20001048 	.word	0x20001048

080073ec <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073ec:	b580      	push	{r7, lr}
 80073ee:	b088      	sub	sp, #32
 80073f0:	af02      	add	r7, sp, #8
 80073f2:	6078      	str	r0, [r7, #4]
 80073f4:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073f6:	4b22      	ldr	r3, [pc, #136]	; (8007480 <prvProcessExpiredTimer+0x94>)
 80073f8:	681b      	ldr	r3, [r3, #0]
 80073fa:	68db      	ldr	r3, [r3, #12]
 80073fc:	68db      	ldr	r3, [r3, #12]
 80073fe:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007400:	697b      	ldr	r3, [r7, #20]
 8007402:	3304      	adds	r3, #4
 8007404:	4618      	mov	r0, r3
 8007406:	f7fe fb1d 	bl	8005a44 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800740a:	697b      	ldr	r3, [r7, #20]
 800740c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	2b00      	cmp	r3, #0
 8007416:	d022      	beq.n	800745e <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007418:	697b      	ldr	r3, [r7, #20]
 800741a:	699a      	ldr	r2, [r3, #24]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	18d1      	adds	r1, r2, r3
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	683a      	ldr	r2, [r7, #0]
 8007424:	6978      	ldr	r0, [r7, #20]
 8007426:	f000 f8d1 	bl	80075cc <prvInsertTimerInActiveList>
 800742a:	4603      	mov	r3, r0
 800742c:	2b00      	cmp	r3, #0
 800742e:	d01f      	beq.n	8007470 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007430:	2300      	movs	r3, #0
 8007432:	9300      	str	r3, [sp, #0]
 8007434:	2300      	movs	r3, #0
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	2100      	movs	r1, #0
 800743a:	6978      	ldr	r0, [r7, #20]
 800743c:	f7ff ff88 	bl	8007350 <xTimerGenericCommand>
 8007440:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8007442:	693b      	ldr	r3, [r7, #16]
 8007444:	2b00      	cmp	r3, #0
 8007446:	d113      	bne.n	8007470 <prvProcessExpiredTimer+0x84>
	__asm volatile
 8007448:	f04f 0350 	mov.w	r3, #80	; 0x50
 800744c:	f383 8811 	msr	BASEPRI, r3
 8007450:	f3bf 8f6f 	isb	sy
 8007454:	f3bf 8f4f 	dsb	sy
 8007458:	60fb      	str	r3, [r7, #12]
}
 800745a:	bf00      	nop
 800745c:	e7fe      	b.n	800745c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800745e:	697b      	ldr	r3, [r7, #20]
 8007460:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007464:	f023 0301 	bic.w	r3, r3, #1
 8007468:	b2da      	uxtb	r2, r3
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	6a1b      	ldr	r3, [r3, #32]
 8007474:	6978      	ldr	r0, [r7, #20]
 8007476:	4798      	blx	r3
}
 8007478:	bf00      	nop
 800747a:	3718      	adds	r7, #24
 800747c:	46bd      	mov	sp, r7
 800747e:	bd80      	pop	{r7, pc}
 8007480:	20001040 	.word	0x20001040

08007484 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007484:	b580      	push	{r7, lr}
 8007486:	b084      	sub	sp, #16
 8007488:	af00      	add	r7, sp, #0
 800748a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800748c:	f107 0308 	add.w	r3, r7, #8
 8007490:	4618      	mov	r0, r3
 8007492:	f000 f857 	bl	8007544 <prvGetNextExpireTime>
 8007496:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007498:	68bb      	ldr	r3, [r7, #8]
 800749a:	4619      	mov	r1, r3
 800749c:	68f8      	ldr	r0, [r7, #12]
 800749e:	f000 f803 	bl	80074a8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80074a2:	f000 f8d5 	bl	8007650 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80074a6:	e7f1      	b.n	800748c <prvTimerTask+0x8>

080074a8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80074a8:	b580      	push	{r7, lr}
 80074aa:	b084      	sub	sp, #16
 80074ac:	af00      	add	r7, sp, #0
 80074ae:	6078      	str	r0, [r7, #4]
 80074b0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80074b2:	f7ff fa39 	bl	8006928 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074b6:	f107 0308 	add.w	r3, r7, #8
 80074ba:	4618      	mov	r0, r3
 80074bc:	f000 f866 	bl	800758c <prvSampleTimeNow>
 80074c0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80074c2:	68bb      	ldr	r3, [r7, #8]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d130      	bne.n	800752a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80074c8:	683b      	ldr	r3, [r7, #0]
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d10a      	bne.n	80074e4 <prvProcessTimerOrBlockTask+0x3c>
 80074ce:	687a      	ldr	r2, [r7, #4]
 80074d0:	68fb      	ldr	r3, [r7, #12]
 80074d2:	429a      	cmp	r2, r3
 80074d4:	d806      	bhi.n	80074e4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074d6:	f7ff fa35 	bl	8006944 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074da:	68f9      	ldr	r1, [r7, #12]
 80074dc:	6878      	ldr	r0, [r7, #4]
 80074de:	f7ff ff85 	bl	80073ec <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074e2:	e024      	b.n	800752e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d008      	beq.n	80074fc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074ea:	4b13      	ldr	r3, [pc, #76]	; (8007538 <prvProcessTimerOrBlockTask+0x90>)
 80074ec:	681b      	ldr	r3, [r3, #0]
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	2b00      	cmp	r3, #0
 80074f2:	d101      	bne.n	80074f8 <prvProcessTimerOrBlockTask+0x50>
 80074f4:	2301      	movs	r3, #1
 80074f6:	e000      	b.n	80074fa <prvProcessTimerOrBlockTask+0x52>
 80074f8:	2300      	movs	r3, #0
 80074fa:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074fc:	4b0f      	ldr	r3, [pc, #60]	; (800753c <prvProcessTimerOrBlockTask+0x94>)
 80074fe:	6818      	ldr	r0, [r3, #0]
 8007500:	687a      	ldr	r2, [r7, #4]
 8007502:	68fb      	ldr	r3, [r7, #12]
 8007504:	1ad3      	subs	r3, r2, r3
 8007506:	683a      	ldr	r2, [r7, #0]
 8007508:	4619      	mov	r1, r3
 800750a:	f7fe ff7d 	bl	8006408 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800750e:	f7ff fa19 	bl	8006944 <xTaskResumeAll>
 8007512:	4603      	mov	r3, r0
 8007514:	2b00      	cmp	r3, #0
 8007516:	d10a      	bne.n	800752e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007518:	4b09      	ldr	r3, [pc, #36]	; (8007540 <prvProcessTimerOrBlockTask+0x98>)
 800751a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f3bf 8f4f 	dsb	sy
 8007524:	f3bf 8f6f 	isb	sy
}
 8007528:	e001      	b.n	800752e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800752a:	f7ff fa0b 	bl	8006944 <xTaskResumeAll>
}
 800752e:	bf00      	nop
 8007530:	3710      	adds	r7, #16
 8007532:	46bd      	mov	sp, r7
 8007534:	bd80      	pop	{r7, pc}
 8007536:	bf00      	nop
 8007538:	20001044 	.word	0x20001044
 800753c:	20001048 	.word	0x20001048
 8007540:	e000ed04 	.word	0xe000ed04

08007544 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007544:	b480      	push	{r7}
 8007546:	b085      	sub	sp, #20
 8007548:	af00      	add	r7, sp, #0
 800754a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800754c:	4b0e      	ldr	r3, [pc, #56]	; (8007588 <prvGetNextExpireTime+0x44>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	681b      	ldr	r3, [r3, #0]
 8007552:	2b00      	cmp	r3, #0
 8007554:	d101      	bne.n	800755a <prvGetNextExpireTime+0x16>
 8007556:	2201      	movs	r2, #1
 8007558:	e000      	b.n	800755c <prvGetNextExpireTime+0x18>
 800755a:	2200      	movs	r2, #0
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	681b      	ldr	r3, [r3, #0]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d105      	bne.n	8007574 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007568:	4b07      	ldr	r3, [pc, #28]	; (8007588 <prvGetNextExpireTime+0x44>)
 800756a:	681b      	ldr	r3, [r3, #0]
 800756c:	68db      	ldr	r3, [r3, #12]
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	e001      	b.n	8007578 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007578:	68fb      	ldr	r3, [r7, #12]
}
 800757a:	4618      	mov	r0, r3
 800757c:	3714      	adds	r7, #20
 800757e:	46bd      	mov	sp, r7
 8007580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007584:	4770      	bx	lr
 8007586:	bf00      	nop
 8007588:	20001040 	.word	0x20001040

0800758c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800758c:	b580      	push	{r7, lr}
 800758e:	b084      	sub	sp, #16
 8007590:	af00      	add	r7, sp, #0
 8007592:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007594:	f7ff fa74 	bl	8006a80 <xTaskGetTickCount>
 8007598:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800759a:	4b0b      	ldr	r3, [pc, #44]	; (80075c8 <prvSampleTimeNow+0x3c>)
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	68fa      	ldr	r2, [r7, #12]
 80075a0:	429a      	cmp	r2, r3
 80075a2:	d205      	bcs.n	80075b0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80075a4:	f000 f936 	bl	8007814 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	2201      	movs	r2, #1
 80075ac:	601a      	str	r2, [r3, #0]
 80075ae:	e002      	b.n	80075b6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80075b0:	687b      	ldr	r3, [r7, #4]
 80075b2:	2200      	movs	r2, #0
 80075b4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80075b6:	4a04      	ldr	r2, [pc, #16]	; (80075c8 <prvSampleTimeNow+0x3c>)
 80075b8:	68fb      	ldr	r3, [r7, #12]
 80075ba:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80075bc:	68fb      	ldr	r3, [r7, #12]
}
 80075be:	4618      	mov	r0, r3
 80075c0:	3710      	adds	r7, #16
 80075c2:	46bd      	mov	sp, r7
 80075c4:	bd80      	pop	{r7, pc}
 80075c6:	bf00      	nop
 80075c8:	20001050 	.word	0x20001050

080075cc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80075cc:	b580      	push	{r7, lr}
 80075ce:	b086      	sub	sp, #24
 80075d0:	af00      	add	r7, sp, #0
 80075d2:	60f8      	str	r0, [r7, #12]
 80075d4:	60b9      	str	r1, [r7, #8]
 80075d6:	607a      	str	r2, [r7, #4]
 80075d8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075da:	2300      	movs	r3, #0
 80075dc:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	68ba      	ldr	r2, [r7, #8]
 80075e2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	68fa      	ldr	r2, [r7, #12]
 80075e8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075ea:	68ba      	ldr	r2, [r7, #8]
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	429a      	cmp	r2, r3
 80075f0:	d812      	bhi.n	8007618 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075f2:	687a      	ldr	r2, [r7, #4]
 80075f4:	683b      	ldr	r3, [r7, #0]
 80075f6:	1ad2      	subs	r2, r2, r3
 80075f8:	68fb      	ldr	r3, [r7, #12]
 80075fa:	699b      	ldr	r3, [r3, #24]
 80075fc:	429a      	cmp	r2, r3
 80075fe:	d302      	bcc.n	8007606 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007600:	2301      	movs	r3, #1
 8007602:	617b      	str	r3, [r7, #20]
 8007604:	e01b      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007606:	4b10      	ldr	r3, [pc, #64]	; (8007648 <prvInsertTimerInActiveList+0x7c>)
 8007608:	681a      	ldr	r2, [r3, #0]
 800760a:	68fb      	ldr	r3, [r7, #12]
 800760c:	3304      	adds	r3, #4
 800760e:	4619      	mov	r1, r3
 8007610:	4610      	mov	r0, r2
 8007612:	f7fe f9de 	bl	80059d2 <vListInsert>
 8007616:	e012      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007618:	687a      	ldr	r2, [r7, #4]
 800761a:	683b      	ldr	r3, [r7, #0]
 800761c:	429a      	cmp	r2, r3
 800761e:	d206      	bcs.n	800762e <prvInsertTimerInActiveList+0x62>
 8007620:	68ba      	ldr	r2, [r7, #8]
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	429a      	cmp	r2, r3
 8007626:	d302      	bcc.n	800762e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007628:	2301      	movs	r3, #1
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	e007      	b.n	800763e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800762e:	4b07      	ldr	r3, [pc, #28]	; (800764c <prvInsertTimerInActiveList+0x80>)
 8007630:	681a      	ldr	r2, [r3, #0]
 8007632:	68fb      	ldr	r3, [r7, #12]
 8007634:	3304      	adds	r3, #4
 8007636:	4619      	mov	r1, r3
 8007638:	4610      	mov	r0, r2
 800763a:	f7fe f9ca 	bl	80059d2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 800763e:	697b      	ldr	r3, [r7, #20]
}
 8007640:	4618      	mov	r0, r3
 8007642:	3718      	adds	r7, #24
 8007644:	46bd      	mov	sp, r7
 8007646:	bd80      	pop	{r7, pc}
 8007648:	20001044 	.word	0x20001044
 800764c:	20001040 	.word	0x20001040

08007650 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007650:	b580      	push	{r7, lr}
 8007652:	b08e      	sub	sp, #56	; 0x38
 8007654:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007656:	e0ca      	b.n	80077ee <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	2b00      	cmp	r3, #0
 800765c:	da18      	bge.n	8007690 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800765e:	1d3b      	adds	r3, r7, #4
 8007660:	3304      	adds	r3, #4
 8007662:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007666:	2b00      	cmp	r3, #0
 8007668:	d10a      	bne.n	8007680 <prvProcessReceivedCommands+0x30>
	__asm volatile
 800766a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800766e:	f383 8811 	msr	BASEPRI, r3
 8007672:	f3bf 8f6f 	isb	sy
 8007676:	f3bf 8f4f 	dsb	sy
 800767a:	61fb      	str	r3, [r7, #28]
}
 800767c:	bf00      	nop
 800767e:	e7fe      	b.n	800767e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007680:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007682:	681b      	ldr	r3, [r3, #0]
 8007684:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007686:	6850      	ldr	r0, [r2, #4]
 8007688:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800768a:	6892      	ldr	r2, [r2, #8]
 800768c:	4611      	mov	r1, r2
 800768e:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007690:	687b      	ldr	r3, [r7, #4]
 8007692:	2b00      	cmp	r3, #0
 8007694:	f2c0 80ab 	blt.w	80077ee <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8007698:	68fb      	ldr	r3, [r7, #12]
 800769a:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800769c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769e:	695b      	ldr	r3, [r3, #20]
 80076a0:	2b00      	cmp	r3, #0
 80076a2:	d004      	beq.n	80076ae <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80076a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076a6:	3304      	adds	r3, #4
 80076a8:	4618      	mov	r0, r3
 80076aa:	f7fe f9cb 	bl	8005a44 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80076ae:	463b      	mov	r3, r7
 80076b0:	4618      	mov	r0, r3
 80076b2:	f7ff ff6b 	bl	800758c <prvSampleTimeNow>
 80076b6:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 80076b8:	687b      	ldr	r3, [r7, #4]
 80076ba:	2b09      	cmp	r3, #9
 80076bc:	f200 8096 	bhi.w	80077ec <prvProcessReceivedCommands+0x19c>
 80076c0:	a201      	add	r2, pc, #4	; (adr r2, 80076c8 <prvProcessReceivedCommands+0x78>)
 80076c2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076c6:	bf00      	nop
 80076c8:	080076f1 	.word	0x080076f1
 80076cc:	080076f1 	.word	0x080076f1
 80076d0:	080076f1 	.word	0x080076f1
 80076d4:	08007765 	.word	0x08007765
 80076d8:	08007779 	.word	0x08007779
 80076dc:	080077c3 	.word	0x080077c3
 80076e0:	080076f1 	.word	0x080076f1
 80076e4:	080076f1 	.word	0x080076f1
 80076e8:	08007765 	.word	0x08007765
 80076ec:	08007779 	.word	0x08007779
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076f2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80076f6:	f043 0301 	orr.w	r3, r3, #1
 80076fa:	b2da      	uxtb	r2, r3
 80076fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80076fe:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007702:	68ba      	ldr	r2, [r7, #8]
 8007704:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007706:	699b      	ldr	r3, [r3, #24]
 8007708:	18d1      	adds	r1, r2, r3
 800770a:	68bb      	ldr	r3, [r7, #8]
 800770c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800770e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007710:	f7ff ff5c 	bl	80075cc <prvInsertTimerInActiveList>
 8007714:	4603      	mov	r3, r0
 8007716:	2b00      	cmp	r3, #0
 8007718:	d069      	beq.n	80077ee <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800771a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007720:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007722:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007724:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007728:	f003 0304 	and.w	r3, r3, #4
 800772c:	2b00      	cmp	r3, #0
 800772e:	d05e      	beq.n	80077ee <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007730:	68ba      	ldr	r2, [r7, #8]
 8007732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007734:	699b      	ldr	r3, [r3, #24]
 8007736:	441a      	add	r2, r3
 8007738:	2300      	movs	r3, #0
 800773a:	9300      	str	r3, [sp, #0]
 800773c:	2300      	movs	r3, #0
 800773e:	2100      	movs	r1, #0
 8007740:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8007742:	f7ff fe05 	bl	8007350 <xTimerGenericCommand>
 8007746:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007748:	6a3b      	ldr	r3, [r7, #32]
 800774a:	2b00      	cmp	r3, #0
 800774c:	d14f      	bne.n	80077ee <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800774e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007752:	f383 8811 	msr	BASEPRI, r3
 8007756:	f3bf 8f6f 	isb	sy
 800775a:	f3bf 8f4f 	dsb	sy
 800775e:	61bb      	str	r3, [r7, #24]
}
 8007760:	bf00      	nop
 8007762:	e7fe      	b.n	8007762 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007764:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007766:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800776a:	f023 0301 	bic.w	r3, r3, #1
 800776e:	b2da      	uxtb	r2, r3
 8007770:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007772:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8007776:	e03a      	b.n	80077ee <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007778:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800777a:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800777e:	f043 0301 	orr.w	r3, r3, #1
 8007782:	b2da      	uxtb	r2, r3
 8007784:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007786:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800778a:	68ba      	ldr	r2, [r7, #8]
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007790:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007792:	699b      	ldr	r3, [r3, #24]
 8007794:	2b00      	cmp	r3, #0
 8007796:	d10a      	bne.n	80077ae <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8007798:	f04f 0350 	mov.w	r3, #80	; 0x50
 800779c:	f383 8811 	msr	BASEPRI, r3
 80077a0:	f3bf 8f6f 	isb	sy
 80077a4:	f3bf 8f4f 	dsb	sy
 80077a8:	617b      	str	r3, [r7, #20]
}
 80077aa:	bf00      	nop
 80077ac:	e7fe      	b.n	80077ac <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80077ae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077b0:	699a      	ldr	r2, [r3, #24]
 80077b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b4:	18d1      	adds	r1, r2, r3
 80077b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80077b8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80077ba:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077bc:	f7ff ff06 	bl	80075cc <prvInsertTimerInActiveList>
					break;
 80077c0:	e015      	b.n	80077ee <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80077c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077c4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077c8:	f003 0302 	and.w	r3, r3, #2
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d103      	bne.n	80077d8 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 80077d0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80077d2:	f000 fbdd 	bl	8007f90 <vPortFree>
 80077d6:	e00a      	b.n	80077ee <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077da:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80077de:	f023 0301 	bic.w	r3, r3, #1
 80077e2:	b2da      	uxtb	r2, r3
 80077e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80077e6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077ea:	e000      	b.n	80077ee <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 80077ec:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077ee:	4b08      	ldr	r3, [pc, #32]	; (8007810 <prvProcessReceivedCommands+0x1c0>)
 80077f0:	681b      	ldr	r3, [r3, #0]
 80077f2:	1d39      	adds	r1, r7, #4
 80077f4:	2200      	movs	r2, #0
 80077f6:	4618      	mov	r0, r3
 80077f8:	f7fe fbec 	bl	8005fd4 <xQueueReceive>
 80077fc:	4603      	mov	r3, r0
 80077fe:	2b00      	cmp	r3, #0
 8007800:	f47f af2a 	bne.w	8007658 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007804:	bf00      	nop
 8007806:	bf00      	nop
 8007808:	3730      	adds	r7, #48	; 0x30
 800780a:	46bd      	mov	sp, r7
 800780c:	bd80      	pop	{r7, pc}
 800780e:	bf00      	nop
 8007810:	20001048 	.word	0x20001048

08007814 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007814:	b580      	push	{r7, lr}
 8007816:	b088      	sub	sp, #32
 8007818:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800781a:	e048      	b.n	80078ae <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800781c:	4b2d      	ldr	r3, [pc, #180]	; (80078d4 <prvSwitchTimerLists+0xc0>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	68db      	ldr	r3, [r3, #12]
 8007822:	681b      	ldr	r3, [r3, #0]
 8007824:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007826:	4b2b      	ldr	r3, [pc, #172]	; (80078d4 <prvSwitchTimerLists+0xc0>)
 8007828:	681b      	ldr	r3, [r3, #0]
 800782a:	68db      	ldr	r3, [r3, #12]
 800782c:	68db      	ldr	r3, [r3, #12]
 800782e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007830:	68fb      	ldr	r3, [r7, #12]
 8007832:	3304      	adds	r3, #4
 8007834:	4618      	mov	r0, r3
 8007836:	f7fe f905 	bl	8005a44 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	6a1b      	ldr	r3, [r3, #32]
 800783e:	68f8      	ldr	r0, [r7, #12]
 8007840:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8007848:	f003 0304 	and.w	r3, r3, #4
 800784c:	2b00      	cmp	r3, #0
 800784e:	d02e      	beq.n	80078ae <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007850:	68fb      	ldr	r3, [r7, #12]
 8007852:	699b      	ldr	r3, [r3, #24]
 8007854:	693a      	ldr	r2, [r7, #16]
 8007856:	4413      	add	r3, r2
 8007858:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800785a:	68ba      	ldr	r2, [r7, #8]
 800785c:	693b      	ldr	r3, [r7, #16]
 800785e:	429a      	cmp	r2, r3
 8007860:	d90e      	bls.n	8007880 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	68ba      	ldr	r2, [r7, #8]
 8007866:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007868:	68fb      	ldr	r3, [r7, #12]
 800786a:	68fa      	ldr	r2, [r7, #12]
 800786c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800786e:	4b19      	ldr	r3, [pc, #100]	; (80078d4 <prvSwitchTimerLists+0xc0>)
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	68fb      	ldr	r3, [r7, #12]
 8007874:	3304      	adds	r3, #4
 8007876:	4619      	mov	r1, r3
 8007878:	4610      	mov	r0, r2
 800787a:	f7fe f8aa 	bl	80059d2 <vListInsert>
 800787e:	e016      	b.n	80078ae <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007880:	2300      	movs	r3, #0
 8007882:	9300      	str	r3, [sp, #0]
 8007884:	2300      	movs	r3, #0
 8007886:	693a      	ldr	r2, [r7, #16]
 8007888:	2100      	movs	r1, #0
 800788a:	68f8      	ldr	r0, [r7, #12]
 800788c:	f7ff fd60 	bl	8007350 <xTimerGenericCommand>
 8007890:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2b00      	cmp	r3, #0
 8007896:	d10a      	bne.n	80078ae <prvSwitchTimerLists+0x9a>
	__asm volatile
 8007898:	f04f 0350 	mov.w	r3, #80	; 0x50
 800789c:	f383 8811 	msr	BASEPRI, r3
 80078a0:	f3bf 8f6f 	isb	sy
 80078a4:	f3bf 8f4f 	dsb	sy
 80078a8:	603b      	str	r3, [r7, #0]
}
 80078aa:	bf00      	nop
 80078ac:	e7fe      	b.n	80078ac <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80078ae:	4b09      	ldr	r3, [pc, #36]	; (80078d4 <prvSwitchTimerLists+0xc0>)
 80078b0:	681b      	ldr	r3, [r3, #0]
 80078b2:	681b      	ldr	r3, [r3, #0]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d1b1      	bne.n	800781c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80078b8:	4b06      	ldr	r3, [pc, #24]	; (80078d4 <prvSwitchTimerLists+0xc0>)
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80078be:	4b06      	ldr	r3, [pc, #24]	; (80078d8 <prvSwitchTimerLists+0xc4>)
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	4a04      	ldr	r2, [pc, #16]	; (80078d4 <prvSwitchTimerLists+0xc0>)
 80078c4:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078c6:	4a04      	ldr	r2, [pc, #16]	; (80078d8 <prvSwitchTimerLists+0xc4>)
 80078c8:	697b      	ldr	r3, [r7, #20]
 80078ca:	6013      	str	r3, [r2, #0]
}
 80078cc:	bf00      	nop
 80078ce:	3718      	adds	r7, #24
 80078d0:	46bd      	mov	sp, r7
 80078d2:	bd80      	pop	{r7, pc}
 80078d4:	20001040 	.word	0x20001040
 80078d8:	20001044 	.word	0x20001044

080078dc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078dc:	b580      	push	{r7, lr}
 80078de:	b082      	sub	sp, #8
 80078e0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078e2:	f000 f967 	bl	8007bb4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078e6:	4b15      	ldr	r3, [pc, #84]	; (800793c <prvCheckForValidListAndQueue+0x60>)
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d120      	bne.n	8007930 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078ee:	4814      	ldr	r0, [pc, #80]	; (8007940 <prvCheckForValidListAndQueue+0x64>)
 80078f0:	f7fe f81e 	bl	8005930 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078f4:	4813      	ldr	r0, [pc, #76]	; (8007944 <prvCheckForValidListAndQueue+0x68>)
 80078f6:	f7fe f81b 	bl	8005930 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078fa:	4b13      	ldr	r3, [pc, #76]	; (8007948 <prvCheckForValidListAndQueue+0x6c>)
 80078fc:	4a10      	ldr	r2, [pc, #64]	; (8007940 <prvCheckForValidListAndQueue+0x64>)
 80078fe:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007900:	4b12      	ldr	r3, [pc, #72]	; (800794c <prvCheckForValidListAndQueue+0x70>)
 8007902:	4a10      	ldr	r2, [pc, #64]	; (8007944 <prvCheckForValidListAndQueue+0x68>)
 8007904:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007906:	2300      	movs	r3, #0
 8007908:	9300      	str	r3, [sp, #0]
 800790a:	4b11      	ldr	r3, [pc, #68]	; (8007950 <prvCheckForValidListAndQueue+0x74>)
 800790c:	4a11      	ldr	r2, [pc, #68]	; (8007954 <prvCheckForValidListAndQueue+0x78>)
 800790e:	2110      	movs	r1, #16
 8007910:	200a      	movs	r0, #10
 8007912:	f7fe f929 	bl	8005b68 <xQueueGenericCreateStatic>
 8007916:	4603      	mov	r3, r0
 8007918:	4a08      	ldr	r2, [pc, #32]	; (800793c <prvCheckForValidListAndQueue+0x60>)
 800791a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800791c:	4b07      	ldr	r3, [pc, #28]	; (800793c <prvCheckForValidListAndQueue+0x60>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	2b00      	cmp	r3, #0
 8007922:	d005      	beq.n	8007930 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007924:	4b05      	ldr	r3, [pc, #20]	; (800793c <prvCheckForValidListAndQueue+0x60>)
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	490b      	ldr	r1, [pc, #44]	; (8007958 <prvCheckForValidListAndQueue+0x7c>)
 800792a:	4618      	mov	r0, r3
 800792c:	f7fe fd42 	bl	80063b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007930:	f000 f970 	bl	8007c14 <vPortExitCritical>
}
 8007934:	bf00      	nop
 8007936:	46bd      	mov	sp, r7
 8007938:	bd80      	pop	{r7, pc}
 800793a:	bf00      	nop
 800793c:	20001048 	.word	0x20001048
 8007940:	20001018 	.word	0x20001018
 8007944:	2000102c 	.word	0x2000102c
 8007948:	20001040 	.word	0x20001040
 800794c:	20001044 	.word	0x20001044
 8007950:	200010f4 	.word	0x200010f4
 8007954:	20001054 	.word	0x20001054
 8007958:	080083e4 	.word	0x080083e4

0800795c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800795c:	b480      	push	{r7}
 800795e:	b085      	sub	sp, #20
 8007960:	af00      	add	r7, sp, #0
 8007962:	60f8      	str	r0, [r7, #12]
 8007964:	60b9      	str	r1, [r7, #8]
 8007966:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	3b04      	subs	r3, #4
 800796c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007974:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	3b04      	subs	r3, #4
 800797a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800797c:	68bb      	ldr	r3, [r7, #8]
 800797e:	f023 0201 	bic.w	r2, r3, #1
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007986:	68fb      	ldr	r3, [r7, #12]
 8007988:	3b04      	subs	r3, #4
 800798a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800798c:	4a0c      	ldr	r2, [pc, #48]	; (80079c0 <pxPortInitialiseStack+0x64>)
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	3b14      	subs	r3, #20
 8007996:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007998:	687a      	ldr	r2, [r7, #4]
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	3b04      	subs	r3, #4
 80079a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80079a4:	68fb      	ldr	r3, [r7, #12]
 80079a6:	f06f 0202 	mvn.w	r2, #2
 80079aa:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80079ac:	68fb      	ldr	r3, [r7, #12]
 80079ae:	3b20      	subs	r3, #32
 80079b0:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80079b2:	68fb      	ldr	r3, [r7, #12]
}
 80079b4:	4618      	mov	r0, r3
 80079b6:	3714      	adds	r7, #20
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	080079c5 	.word	0x080079c5

080079c4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079c4:	b480      	push	{r7}
 80079c6:	b085      	sub	sp, #20
 80079c8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079ca:	2300      	movs	r3, #0
 80079cc:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079ce:	4b12      	ldr	r3, [pc, #72]	; (8007a18 <prvTaskExitError+0x54>)
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079d6:	d00a      	beq.n	80079ee <prvTaskExitError+0x2a>
	__asm volatile
 80079d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079dc:	f383 8811 	msr	BASEPRI, r3
 80079e0:	f3bf 8f6f 	isb	sy
 80079e4:	f3bf 8f4f 	dsb	sy
 80079e8:	60fb      	str	r3, [r7, #12]
}
 80079ea:	bf00      	nop
 80079ec:	e7fe      	b.n	80079ec <prvTaskExitError+0x28>
	__asm volatile
 80079ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079f2:	f383 8811 	msr	BASEPRI, r3
 80079f6:	f3bf 8f6f 	isb	sy
 80079fa:	f3bf 8f4f 	dsb	sy
 80079fe:	60bb      	str	r3, [r7, #8]
}
 8007a00:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007a02:	bf00      	nop
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	d0fc      	beq.n	8007a04 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007a0a:	bf00      	nop
 8007a0c:	bf00      	nop
 8007a0e:	3714      	adds	r7, #20
 8007a10:	46bd      	mov	sp, r7
 8007a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a16:	4770      	bx	lr
 8007a18:	20000010 	.word	0x20000010
 8007a1c:	00000000 	.word	0x00000000

08007a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a20:	4b07      	ldr	r3, [pc, #28]	; (8007a40 <pxCurrentTCBConst2>)
 8007a22:	6819      	ldr	r1, [r3, #0]
 8007a24:	6808      	ldr	r0, [r1, #0]
 8007a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a2a:	f380 8809 	msr	PSP, r0
 8007a2e:	f3bf 8f6f 	isb	sy
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8811 	msr	BASEPRI, r0
 8007a3a:	4770      	bx	lr
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst2>:
 8007a40:	20000b18 	.word	0x20000b18
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a48:	4808      	ldr	r0, [pc, #32]	; (8007a6c <prvPortStartFirstTask+0x24>)
 8007a4a:	6800      	ldr	r0, [r0, #0]
 8007a4c:	6800      	ldr	r0, [r0, #0]
 8007a4e:	f380 8808 	msr	MSP, r0
 8007a52:	f04f 0000 	mov.w	r0, #0
 8007a56:	f380 8814 	msr	CONTROL, r0
 8007a5a:	b662      	cpsie	i
 8007a5c:	b661      	cpsie	f
 8007a5e:	f3bf 8f4f 	dsb	sy
 8007a62:	f3bf 8f6f 	isb	sy
 8007a66:	df00      	svc	0
 8007a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a6a:	bf00      	nop
 8007a6c:	e000ed08 	.word	0xe000ed08

08007a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a70:	b580      	push	{r7, lr}
 8007a72:	b086      	sub	sp, #24
 8007a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a76:	4b46      	ldr	r3, [pc, #280]	; (8007b90 <xPortStartScheduler+0x120>)
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	4a46      	ldr	r2, [pc, #280]	; (8007b94 <xPortStartScheduler+0x124>)
 8007a7c:	4293      	cmp	r3, r2
 8007a7e:	d10a      	bne.n	8007a96 <xPortStartScheduler+0x26>
	__asm volatile
 8007a80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a84:	f383 8811 	msr	BASEPRI, r3
 8007a88:	f3bf 8f6f 	isb	sy
 8007a8c:	f3bf 8f4f 	dsb	sy
 8007a90:	613b      	str	r3, [r7, #16]
}
 8007a92:	bf00      	nop
 8007a94:	e7fe      	b.n	8007a94 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a96:	4b3e      	ldr	r3, [pc, #248]	; (8007b90 <xPortStartScheduler+0x120>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	4a3f      	ldr	r2, [pc, #252]	; (8007b98 <xPortStartScheduler+0x128>)
 8007a9c:	4293      	cmp	r3, r2
 8007a9e:	d10a      	bne.n	8007ab6 <xPortStartScheduler+0x46>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60fb      	str	r3, [r7, #12]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007ab6:	4b39      	ldr	r3, [pc, #228]	; (8007b9c <xPortStartScheduler+0x12c>)
 8007ab8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007aba:	697b      	ldr	r3, [r7, #20]
 8007abc:	781b      	ldrb	r3, [r3, #0]
 8007abe:	b2db      	uxtb	r3, r3
 8007ac0:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ac2:	697b      	ldr	r3, [r7, #20]
 8007ac4:	22ff      	movs	r2, #255	; 0xff
 8007ac6:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007ac8:	697b      	ldr	r3, [r7, #20]
 8007aca:	781b      	ldrb	r3, [r3, #0]
 8007acc:	b2db      	uxtb	r3, r3
 8007ace:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ad0:	78fb      	ldrb	r3, [r7, #3]
 8007ad2:	b2db      	uxtb	r3, r3
 8007ad4:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	4b31      	ldr	r3, [pc, #196]	; (8007ba0 <xPortStartScheduler+0x130>)
 8007adc:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ade:	4b31      	ldr	r3, [pc, #196]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007ae0:	2207      	movs	r2, #7
 8007ae2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ae4:	e009      	b.n	8007afa <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8007ae6:	4b2f      	ldr	r3, [pc, #188]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	3b01      	subs	r3, #1
 8007aec:	4a2d      	ldr	r2, [pc, #180]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007aee:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007af0:	78fb      	ldrb	r3, [r7, #3]
 8007af2:	b2db      	uxtb	r3, r3
 8007af4:	005b      	lsls	r3, r3, #1
 8007af6:	b2db      	uxtb	r3, r3
 8007af8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007afa:	78fb      	ldrb	r3, [r7, #3]
 8007afc:	b2db      	uxtb	r3, r3
 8007afe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007b02:	2b80      	cmp	r3, #128	; 0x80
 8007b04:	d0ef      	beq.n	8007ae6 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007b06:	4b27      	ldr	r3, [pc, #156]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	f1c3 0307 	rsb	r3, r3, #7
 8007b0e:	2b04      	cmp	r3, #4
 8007b10:	d00a      	beq.n	8007b28 <xPortStartScheduler+0xb8>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	60bb      	str	r3, [r7, #8]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b28:	4b1e      	ldr	r3, [pc, #120]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	021b      	lsls	r3, r3, #8
 8007b2e:	4a1d      	ldr	r2, [pc, #116]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b30:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b32:	4b1c      	ldr	r3, [pc, #112]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8007b3a:	4a1a      	ldr	r2, [pc, #104]	; (8007ba4 <xPortStartScheduler+0x134>)
 8007b3c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	b2da      	uxtb	r2, r3
 8007b42:	697b      	ldr	r3, [r7, #20]
 8007b44:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b46:	4b18      	ldr	r3, [pc, #96]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b48:	681b      	ldr	r3, [r3, #0]
 8007b4a:	4a17      	ldr	r2, [pc, #92]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b4c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007b50:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b52:	4b15      	ldr	r3, [pc, #84]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a14      	ldr	r2, [pc, #80]	; (8007ba8 <xPortStartScheduler+0x138>)
 8007b58:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8007b5c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b5e:	f000 f8dd 	bl	8007d1c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b62:	4b12      	ldr	r3, [pc, #72]	; (8007bac <xPortStartScheduler+0x13c>)
 8007b64:	2200      	movs	r2, #0
 8007b66:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b68:	f000 f8fc 	bl	8007d64 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b6c:	4b10      	ldr	r3, [pc, #64]	; (8007bb0 <xPortStartScheduler+0x140>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0f      	ldr	r2, [pc, #60]	; (8007bb0 <xPortStartScheduler+0x140>)
 8007b72:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8007b76:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b78:	f7ff ff66 	bl	8007a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b7c:	f7ff f84a 	bl	8006c14 <vTaskSwitchContext>
	prvTaskExitError();
 8007b80:	f7ff ff20 	bl	80079c4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b84:	2300      	movs	r3, #0
}
 8007b86:	4618      	mov	r0, r3
 8007b88:	3718      	adds	r7, #24
 8007b8a:	46bd      	mov	sp, r7
 8007b8c:	bd80      	pop	{r7, pc}
 8007b8e:	bf00      	nop
 8007b90:	e000ed00 	.word	0xe000ed00
 8007b94:	410fc271 	.word	0x410fc271
 8007b98:	410fc270 	.word	0x410fc270
 8007b9c:	e000e400 	.word	0xe000e400
 8007ba0:	20001144 	.word	0x20001144
 8007ba4:	20001148 	.word	0x20001148
 8007ba8:	e000ed20 	.word	0xe000ed20
 8007bac:	20000010 	.word	0x20000010
 8007bb0:	e000ef34 	.word	0xe000ef34

08007bb4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007bb4:	b480      	push	{r7}
 8007bb6:	b083      	sub	sp, #12
 8007bb8:	af00      	add	r7, sp, #0
	__asm volatile
 8007bba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bbe:	f383 8811 	msr	BASEPRI, r3
 8007bc2:	f3bf 8f6f 	isb	sy
 8007bc6:	f3bf 8f4f 	dsb	sy
 8007bca:	607b      	str	r3, [r7, #4]
}
 8007bcc:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bce:	4b0f      	ldr	r3, [pc, #60]	; (8007c0c <vPortEnterCritical+0x58>)
 8007bd0:	681b      	ldr	r3, [r3, #0]
 8007bd2:	3301      	adds	r3, #1
 8007bd4:	4a0d      	ldr	r2, [pc, #52]	; (8007c0c <vPortEnterCritical+0x58>)
 8007bd6:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bd8:	4b0c      	ldr	r3, [pc, #48]	; (8007c0c <vPortEnterCritical+0x58>)
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	2b01      	cmp	r3, #1
 8007bde:	d10f      	bne.n	8007c00 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007be0:	4b0b      	ldr	r3, [pc, #44]	; (8007c10 <vPortEnterCritical+0x5c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	b2db      	uxtb	r3, r3
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	d00a      	beq.n	8007c00 <vPortEnterCritical+0x4c>
	__asm volatile
 8007bea:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007bee:	f383 8811 	msr	BASEPRI, r3
 8007bf2:	f3bf 8f6f 	isb	sy
 8007bf6:	f3bf 8f4f 	dsb	sy
 8007bfa:	603b      	str	r3, [r7, #0]
}
 8007bfc:	bf00      	nop
 8007bfe:	e7fe      	b.n	8007bfe <vPortEnterCritical+0x4a>
	}
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr
 8007c0c:	20000010 	.word	0x20000010
 8007c10:	e000ed04 	.word	0xe000ed04

08007c14 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007c14:	b480      	push	{r7}
 8007c16:	b083      	sub	sp, #12
 8007c18:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c1a:	4b12      	ldr	r3, [pc, #72]	; (8007c64 <vPortExitCritical+0x50>)
 8007c1c:	681b      	ldr	r3, [r3, #0]
 8007c1e:	2b00      	cmp	r3, #0
 8007c20:	d10a      	bne.n	8007c38 <vPortExitCritical+0x24>
	__asm volatile
 8007c22:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007c26:	f383 8811 	msr	BASEPRI, r3
 8007c2a:	f3bf 8f6f 	isb	sy
 8007c2e:	f3bf 8f4f 	dsb	sy
 8007c32:	607b      	str	r3, [r7, #4]
}
 8007c34:	bf00      	nop
 8007c36:	e7fe      	b.n	8007c36 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c38:	4b0a      	ldr	r3, [pc, #40]	; (8007c64 <vPortExitCritical+0x50>)
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	3b01      	subs	r3, #1
 8007c3e:	4a09      	ldr	r2, [pc, #36]	; (8007c64 <vPortExitCritical+0x50>)
 8007c40:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c42:	4b08      	ldr	r3, [pc, #32]	; (8007c64 <vPortExitCritical+0x50>)
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	2b00      	cmp	r3, #0
 8007c48:	d105      	bne.n	8007c56 <vPortExitCritical+0x42>
 8007c4a:	2300      	movs	r3, #0
 8007c4c:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c4e:	683b      	ldr	r3, [r7, #0]
 8007c50:	f383 8811 	msr	BASEPRI, r3
}
 8007c54:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c56:	bf00      	nop
 8007c58:	370c      	adds	r7, #12
 8007c5a:	46bd      	mov	sp, r7
 8007c5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c60:	4770      	bx	lr
 8007c62:	bf00      	nop
 8007c64:	20000010 	.word	0x20000010
	...

08007c70 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c70:	f3ef 8009 	mrs	r0, PSP
 8007c74:	f3bf 8f6f 	isb	sy
 8007c78:	4b15      	ldr	r3, [pc, #84]	; (8007cd0 <pxCurrentTCBConst>)
 8007c7a:	681a      	ldr	r2, [r3, #0]
 8007c7c:	f01e 0f10 	tst.w	lr, #16
 8007c80:	bf08      	it	eq
 8007c82:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c86:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c8a:	6010      	str	r0, [r2, #0]
 8007c8c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c90:	f04f 0050 	mov.w	r0, #80	; 0x50
 8007c94:	f380 8811 	msr	BASEPRI, r0
 8007c98:	f3bf 8f4f 	dsb	sy
 8007c9c:	f3bf 8f6f 	isb	sy
 8007ca0:	f7fe ffb8 	bl	8006c14 <vTaskSwitchContext>
 8007ca4:	f04f 0000 	mov.w	r0, #0
 8007ca8:	f380 8811 	msr	BASEPRI, r0
 8007cac:	bc09      	pop	{r0, r3}
 8007cae:	6819      	ldr	r1, [r3, #0]
 8007cb0:	6808      	ldr	r0, [r1, #0]
 8007cb2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007cb6:	f01e 0f10 	tst.w	lr, #16
 8007cba:	bf08      	it	eq
 8007cbc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007cc0:	f380 8809 	msr	PSP, r0
 8007cc4:	f3bf 8f6f 	isb	sy
 8007cc8:	4770      	bx	lr
 8007cca:	bf00      	nop
 8007ccc:	f3af 8000 	nop.w

08007cd0 <pxCurrentTCBConst>:
 8007cd0:	20000b18 	.word	0x20000b18
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cd4:	bf00      	nop
 8007cd6:	bf00      	nop

08007cd8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cd8:	b580      	push	{r7, lr}
 8007cda:	b082      	sub	sp, #8
 8007cdc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cde:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ce2:	f383 8811 	msr	BASEPRI, r3
 8007ce6:	f3bf 8f6f 	isb	sy
 8007cea:	f3bf 8f4f 	dsb	sy
 8007cee:	607b      	str	r3, [r7, #4]
}
 8007cf0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cf2:	f7fe fed5 	bl	8006aa0 <xTaskIncrementTick>
 8007cf6:	4603      	mov	r3, r0
 8007cf8:	2b00      	cmp	r3, #0
 8007cfa:	d003      	beq.n	8007d04 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cfc:	4b06      	ldr	r3, [pc, #24]	; (8007d18 <xPortSysTickHandler+0x40>)
 8007cfe:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007d02:	601a      	str	r2, [r3, #0]
 8007d04:	2300      	movs	r3, #0
 8007d06:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007d08:	683b      	ldr	r3, [r7, #0]
 8007d0a:	f383 8811 	msr	BASEPRI, r3
}
 8007d0e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	e000ed04 	.word	0xe000ed04

08007d1c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007d1c:	b480      	push	{r7}
 8007d1e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d20:	4b0b      	ldr	r3, [pc, #44]	; (8007d50 <vPortSetupTimerInterrupt+0x34>)
 8007d22:	2200      	movs	r2, #0
 8007d24:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d26:	4b0b      	ldr	r3, [pc, #44]	; (8007d54 <vPortSetupTimerInterrupt+0x38>)
 8007d28:	2200      	movs	r2, #0
 8007d2a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d2c:	4b0a      	ldr	r3, [pc, #40]	; (8007d58 <vPortSetupTimerInterrupt+0x3c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a0a      	ldr	r2, [pc, #40]	; (8007d5c <vPortSetupTimerInterrupt+0x40>)
 8007d32:	fba2 2303 	umull	r2, r3, r2, r3
 8007d36:	099b      	lsrs	r3, r3, #6
 8007d38:	4a09      	ldr	r2, [pc, #36]	; (8007d60 <vPortSetupTimerInterrupt+0x44>)
 8007d3a:	3b01      	subs	r3, #1
 8007d3c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d3e:	4b04      	ldr	r3, [pc, #16]	; (8007d50 <vPortSetupTimerInterrupt+0x34>)
 8007d40:	2207      	movs	r2, #7
 8007d42:	601a      	str	r2, [r3, #0]
}
 8007d44:	bf00      	nop
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	e000e010 	.word	0xe000e010
 8007d54:	e000e018 	.word	0xe000e018
 8007d58:	20000004 	.word	0x20000004
 8007d5c:	10624dd3 	.word	0x10624dd3
 8007d60:	e000e014 	.word	0xe000e014

08007d64 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d64:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8007d74 <vPortEnableVFP+0x10>
 8007d68:	6801      	ldr	r1, [r0, #0]
 8007d6a:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8007d6e:	6001      	str	r1, [r0, #0]
 8007d70:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d72:	bf00      	nop
 8007d74:	e000ed88 	.word	0xe000ed88

08007d78 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d78:	b480      	push	{r7}
 8007d7a:	b085      	sub	sp, #20
 8007d7c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d7e:	f3ef 8305 	mrs	r3, IPSR
 8007d82:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	2b0f      	cmp	r3, #15
 8007d88:	d914      	bls.n	8007db4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d8a:	4a17      	ldr	r2, [pc, #92]	; (8007de8 <vPortValidateInterruptPriority+0x70>)
 8007d8c:	68fb      	ldr	r3, [r7, #12]
 8007d8e:	4413      	add	r3, r2
 8007d90:	781b      	ldrb	r3, [r3, #0]
 8007d92:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d94:	4b15      	ldr	r3, [pc, #84]	; (8007dec <vPortValidateInterruptPriority+0x74>)
 8007d96:	781b      	ldrb	r3, [r3, #0]
 8007d98:	7afa      	ldrb	r2, [r7, #11]
 8007d9a:	429a      	cmp	r2, r3
 8007d9c:	d20a      	bcs.n	8007db4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
}
 8007db0:	bf00      	nop
 8007db2:	e7fe      	b.n	8007db2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007db4:	4b0e      	ldr	r3, [pc, #56]	; (8007df0 <vPortValidateInterruptPriority+0x78>)
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8007dbc:	4b0d      	ldr	r3, [pc, #52]	; (8007df4 <vPortValidateInterruptPriority+0x7c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	429a      	cmp	r2, r3
 8007dc2:	d90a      	bls.n	8007dda <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8007dc4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007dc8:	f383 8811 	msr	BASEPRI, r3
 8007dcc:	f3bf 8f6f 	isb	sy
 8007dd0:	f3bf 8f4f 	dsb	sy
 8007dd4:	603b      	str	r3, [r7, #0]
}
 8007dd6:	bf00      	nop
 8007dd8:	e7fe      	b.n	8007dd8 <vPortValidateInterruptPriority+0x60>
	}
 8007dda:	bf00      	nop
 8007ddc:	3714      	adds	r7, #20
 8007dde:	46bd      	mov	sp, r7
 8007de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007de4:	4770      	bx	lr
 8007de6:	bf00      	nop
 8007de8:	e000e3f0 	.word	0xe000e3f0
 8007dec:	20001144 	.word	0x20001144
 8007df0:	e000ed0c 	.word	0xe000ed0c
 8007df4:	20001148 	.word	0x20001148

08007df8 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b08a      	sub	sp, #40	; 0x28
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007e00:	2300      	movs	r3, #0
 8007e02:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007e04:	f7fe fd90 	bl	8006928 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007e08:	4b5b      	ldr	r3, [pc, #364]	; (8007f78 <pvPortMalloc+0x180>)
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	2b00      	cmp	r3, #0
 8007e0e:	d101      	bne.n	8007e14 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007e10:	f000 f920 	bl	8008054 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007e14:	4b59      	ldr	r3, [pc, #356]	; (8007f7c <pvPortMalloc+0x184>)
 8007e16:	681a      	ldr	r2, [r3, #0]
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	4013      	ands	r3, r2
 8007e1c:	2b00      	cmp	r3, #0
 8007e1e:	f040 8093 	bne.w	8007f48 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	2b00      	cmp	r3, #0
 8007e26:	d01d      	beq.n	8007e64 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8007e28:	2208      	movs	r2, #8
 8007e2a:	687b      	ldr	r3, [r7, #4]
 8007e2c:	4413      	add	r3, r2
 8007e2e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e30:	687b      	ldr	r3, [r7, #4]
 8007e32:	f003 0307 	and.w	r3, r3, #7
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d014      	beq.n	8007e64 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	f023 0307 	bic.w	r3, r3, #7
 8007e40:	3308      	adds	r3, #8
 8007e42:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	f003 0307 	and.w	r3, r3, #7
 8007e4a:	2b00      	cmp	r3, #0
 8007e4c:	d00a      	beq.n	8007e64 <pvPortMalloc+0x6c>
	__asm volatile
 8007e4e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e52:	f383 8811 	msr	BASEPRI, r3
 8007e56:	f3bf 8f6f 	isb	sy
 8007e5a:	f3bf 8f4f 	dsb	sy
 8007e5e:	617b      	str	r3, [r7, #20]
}
 8007e60:	bf00      	nop
 8007e62:	e7fe      	b.n	8007e62 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	2b00      	cmp	r3, #0
 8007e68:	d06e      	beq.n	8007f48 <pvPortMalloc+0x150>
 8007e6a:	4b45      	ldr	r3, [pc, #276]	; (8007f80 <pvPortMalloc+0x188>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	687a      	ldr	r2, [r7, #4]
 8007e70:	429a      	cmp	r2, r3
 8007e72:	d869      	bhi.n	8007f48 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e74:	4b43      	ldr	r3, [pc, #268]	; (8007f84 <pvPortMalloc+0x18c>)
 8007e76:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e78:	4b42      	ldr	r3, [pc, #264]	; (8007f84 <pvPortMalloc+0x18c>)
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e7e:	e004      	b.n	8007e8a <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 8007e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e82:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e8c:	685b      	ldr	r3, [r3, #4]
 8007e8e:	687a      	ldr	r2, [r7, #4]
 8007e90:	429a      	cmp	r2, r3
 8007e92:	d903      	bls.n	8007e9c <pvPortMalloc+0xa4>
 8007e94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	2b00      	cmp	r3, #0
 8007e9a:	d1f1      	bne.n	8007e80 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e9c:	4b36      	ldr	r3, [pc, #216]	; (8007f78 <pvPortMalloc+0x180>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007ea2:	429a      	cmp	r2, r3
 8007ea4:	d050      	beq.n	8007f48 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007ea6:	6a3b      	ldr	r3, [r7, #32]
 8007ea8:	681b      	ldr	r3, [r3, #0]
 8007eaa:	2208      	movs	r2, #8
 8007eac:	4413      	add	r3, r2
 8007eae:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eb2:	681a      	ldr	r2, [r3, #0]
 8007eb4:	6a3b      	ldr	r3, [r7, #32]
 8007eb6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007eb8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007eba:	685a      	ldr	r2, [r3, #4]
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	1ad2      	subs	r2, r2, r3
 8007ec0:	2308      	movs	r3, #8
 8007ec2:	005b      	lsls	r3, r3, #1
 8007ec4:	429a      	cmp	r2, r3
 8007ec6:	d91f      	bls.n	8007f08 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007ec8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	4413      	add	r3, r2
 8007ece:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007ed0:	69bb      	ldr	r3, [r7, #24]
 8007ed2:	f003 0307 	and.w	r3, r3, #7
 8007ed6:	2b00      	cmp	r3, #0
 8007ed8:	d00a      	beq.n	8007ef0 <pvPortMalloc+0xf8>
	__asm volatile
 8007eda:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007ede:	f383 8811 	msr	BASEPRI, r3
 8007ee2:	f3bf 8f6f 	isb	sy
 8007ee6:	f3bf 8f4f 	dsb	sy
 8007eea:	613b      	str	r3, [r7, #16]
}
 8007eec:	bf00      	nop
 8007eee:	e7fe      	b.n	8007eee <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ef0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	1ad2      	subs	r2, r2, r3
 8007ef8:	69bb      	ldr	r3, [r7, #24]
 8007efa:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007efe:	687a      	ldr	r2, [r7, #4]
 8007f00:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007f02:	69b8      	ldr	r0, [r7, #24]
 8007f04:	f000 f908 	bl	8008118 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007f08:	4b1d      	ldr	r3, [pc, #116]	; (8007f80 <pvPortMalloc+0x188>)
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f0e:	685b      	ldr	r3, [r3, #4]
 8007f10:	1ad3      	subs	r3, r2, r3
 8007f12:	4a1b      	ldr	r2, [pc, #108]	; (8007f80 <pvPortMalloc+0x188>)
 8007f14:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007f16:	4b1a      	ldr	r3, [pc, #104]	; (8007f80 <pvPortMalloc+0x188>)
 8007f18:	681a      	ldr	r2, [r3, #0]
 8007f1a:	4b1b      	ldr	r3, [pc, #108]	; (8007f88 <pvPortMalloc+0x190>)
 8007f1c:	681b      	ldr	r3, [r3, #0]
 8007f1e:	429a      	cmp	r2, r3
 8007f20:	d203      	bcs.n	8007f2a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f22:	4b17      	ldr	r3, [pc, #92]	; (8007f80 <pvPortMalloc+0x188>)
 8007f24:	681b      	ldr	r3, [r3, #0]
 8007f26:	4a18      	ldr	r2, [pc, #96]	; (8007f88 <pvPortMalloc+0x190>)
 8007f28:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f2c:	685a      	ldr	r2, [r3, #4]
 8007f2e:	4b13      	ldr	r3, [pc, #76]	; (8007f7c <pvPortMalloc+0x184>)
 8007f30:	681b      	ldr	r3, [r3, #0]
 8007f32:	431a      	orrs	r2, r3
 8007f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f36:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f3e:	4b13      	ldr	r3, [pc, #76]	; (8007f8c <pvPortMalloc+0x194>)
 8007f40:	681b      	ldr	r3, [r3, #0]
 8007f42:	3301      	adds	r3, #1
 8007f44:	4a11      	ldr	r2, [pc, #68]	; (8007f8c <pvPortMalloc+0x194>)
 8007f46:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f48:	f7fe fcfc 	bl	8006944 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f4c:	69fb      	ldr	r3, [r7, #28]
 8007f4e:	f003 0307 	and.w	r3, r3, #7
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d00a      	beq.n	8007f6c <pvPortMalloc+0x174>
	__asm volatile
 8007f56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f5a:	f383 8811 	msr	BASEPRI, r3
 8007f5e:	f3bf 8f6f 	isb	sy
 8007f62:	f3bf 8f4f 	dsb	sy
 8007f66:	60fb      	str	r3, [r7, #12]
}
 8007f68:	bf00      	nop
 8007f6a:	e7fe      	b.n	8007f6a <pvPortMalloc+0x172>
	return pvReturn;
 8007f6c:	69fb      	ldr	r3, [r7, #28]
}
 8007f6e:	4618      	mov	r0, r3
 8007f70:	3728      	adds	r7, #40	; 0x28
 8007f72:	46bd      	mov	sp, r7
 8007f74:	bd80      	pop	{r7, pc}
 8007f76:	bf00      	nop
 8007f78:	20004d54 	.word	0x20004d54
 8007f7c:	20004d68 	.word	0x20004d68
 8007f80:	20004d58 	.word	0x20004d58
 8007f84:	20004d4c 	.word	0x20004d4c
 8007f88:	20004d5c 	.word	0x20004d5c
 8007f8c:	20004d60 	.word	0x20004d60

08007f90 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f90:	b580      	push	{r7, lr}
 8007f92:	b086      	sub	sp, #24
 8007f94:	af00      	add	r7, sp, #0
 8007f96:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d04d      	beq.n	800803e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007fa2:	2308      	movs	r3, #8
 8007fa4:	425b      	negs	r3, r3
 8007fa6:	697a      	ldr	r2, [r7, #20]
 8007fa8:	4413      	add	r3, r2
 8007faa:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007fac:	697b      	ldr	r3, [r7, #20]
 8007fae:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007fb0:	693b      	ldr	r3, [r7, #16]
 8007fb2:	685a      	ldr	r2, [r3, #4]
 8007fb4:	4b24      	ldr	r3, [pc, #144]	; (8008048 <vPortFree+0xb8>)
 8007fb6:	681b      	ldr	r3, [r3, #0]
 8007fb8:	4013      	ands	r3, r2
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d10a      	bne.n	8007fd4 <vPortFree+0x44>
	__asm volatile
 8007fbe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fc2:	f383 8811 	msr	BASEPRI, r3
 8007fc6:	f3bf 8f6f 	isb	sy
 8007fca:	f3bf 8f4f 	dsb	sy
 8007fce:	60fb      	str	r3, [r7, #12]
}
 8007fd0:	bf00      	nop
 8007fd2:	e7fe      	b.n	8007fd2 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fd4:	693b      	ldr	r3, [r7, #16]
 8007fd6:	681b      	ldr	r3, [r3, #0]
 8007fd8:	2b00      	cmp	r3, #0
 8007fda:	d00a      	beq.n	8007ff2 <vPortFree+0x62>
	__asm volatile
 8007fdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fe0:	f383 8811 	msr	BASEPRI, r3
 8007fe4:	f3bf 8f6f 	isb	sy
 8007fe8:	f3bf 8f4f 	dsb	sy
 8007fec:	60bb      	str	r3, [r7, #8]
}
 8007fee:	bf00      	nop
 8007ff0:	e7fe      	b.n	8007ff0 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007ff2:	693b      	ldr	r3, [r7, #16]
 8007ff4:	685a      	ldr	r2, [r3, #4]
 8007ff6:	4b14      	ldr	r3, [pc, #80]	; (8008048 <vPortFree+0xb8>)
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	4013      	ands	r3, r2
 8007ffc:	2b00      	cmp	r3, #0
 8007ffe:	d01e      	beq.n	800803e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	2b00      	cmp	r3, #0
 8008006:	d11a      	bne.n	800803e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	4b0e      	ldr	r3, [pc, #56]	; (8008048 <vPortFree+0xb8>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	43db      	mvns	r3, r3
 8008012:	401a      	ands	r2, r3
 8008014:	693b      	ldr	r3, [r7, #16]
 8008016:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008018:	f7fe fc86 	bl	8006928 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800801c:	693b      	ldr	r3, [r7, #16]
 800801e:	685a      	ldr	r2, [r3, #4]
 8008020:	4b0a      	ldr	r3, [pc, #40]	; (800804c <vPortFree+0xbc>)
 8008022:	681b      	ldr	r3, [r3, #0]
 8008024:	4413      	add	r3, r2
 8008026:	4a09      	ldr	r2, [pc, #36]	; (800804c <vPortFree+0xbc>)
 8008028:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800802a:	6938      	ldr	r0, [r7, #16]
 800802c:	f000 f874 	bl	8008118 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <vPortFree+0xc0>)
 8008032:	681b      	ldr	r3, [r3, #0]
 8008034:	3301      	adds	r3, #1
 8008036:	4a06      	ldr	r2, [pc, #24]	; (8008050 <vPortFree+0xc0>)
 8008038:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800803a:	f7fe fc83 	bl	8006944 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800803e:	bf00      	nop
 8008040:	3718      	adds	r7, #24
 8008042:	46bd      	mov	sp, r7
 8008044:	bd80      	pop	{r7, pc}
 8008046:	bf00      	nop
 8008048:	20004d68 	.word	0x20004d68
 800804c:	20004d58 	.word	0x20004d58
 8008050:	20004d64 	.word	0x20004d64

08008054 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800805a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800805e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8008060:	4b27      	ldr	r3, [pc, #156]	; (8008100 <prvHeapInit+0xac>)
 8008062:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008064:	68fb      	ldr	r3, [r7, #12]
 8008066:	f003 0307 	and.w	r3, r3, #7
 800806a:	2b00      	cmp	r3, #0
 800806c:	d00c      	beq.n	8008088 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800806e:	68fb      	ldr	r3, [r7, #12]
 8008070:	3307      	adds	r3, #7
 8008072:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0307 	bic.w	r3, r3, #7
 800807a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800807c:	68ba      	ldr	r2, [r7, #8]
 800807e:	68fb      	ldr	r3, [r7, #12]
 8008080:	1ad3      	subs	r3, r2, r3
 8008082:	4a1f      	ldr	r2, [pc, #124]	; (8008100 <prvHeapInit+0xac>)
 8008084:	4413      	add	r3, r2
 8008086:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008088:	68fb      	ldr	r3, [r7, #12]
 800808a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800808c:	4a1d      	ldr	r2, [pc, #116]	; (8008104 <prvHeapInit+0xb0>)
 800808e:	687b      	ldr	r3, [r7, #4]
 8008090:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8008092:	4b1c      	ldr	r3, [pc, #112]	; (8008104 <prvHeapInit+0xb0>)
 8008094:	2200      	movs	r2, #0
 8008096:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008098:	687b      	ldr	r3, [r7, #4]
 800809a:	68ba      	ldr	r2, [r7, #8]
 800809c:	4413      	add	r3, r2
 800809e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80080a0:	2208      	movs	r2, #8
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	1a9b      	subs	r3, r3, r2
 80080a6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80080a8:	68fb      	ldr	r3, [r7, #12]
 80080aa:	f023 0307 	bic.w	r3, r3, #7
 80080ae:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	4a15      	ldr	r2, [pc, #84]	; (8008108 <prvHeapInit+0xb4>)
 80080b4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080b6:	4b14      	ldr	r3, [pc, #80]	; (8008108 <prvHeapInit+0xb4>)
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	2200      	movs	r2, #0
 80080bc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080be:	4b12      	ldr	r3, [pc, #72]	; (8008108 <prvHeapInit+0xb4>)
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	2200      	movs	r2, #0
 80080c4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080c6:	687b      	ldr	r3, [r7, #4]
 80080c8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080ca:	683b      	ldr	r3, [r7, #0]
 80080cc:	68fa      	ldr	r2, [r7, #12]
 80080ce:	1ad2      	subs	r2, r2, r3
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080d4:	4b0c      	ldr	r3, [pc, #48]	; (8008108 <prvHeapInit+0xb4>)
 80080d6:	681a      	ldr	r2, [r3, #0]
 80080d8:	683b      	ldr	r3, [r7, #0]
 80080da:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080dc:	683b      	ldr	r3, [r7, #0]
 80080de:	685b      	ldr	r3, [r3, #4]
 80080e0:	4a0a      	ldr	r2, [pc, #40]	; (800810c <prvHeapInit+0xb8>)
 80080e2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080e4:	683b      	ldr	r3, [r7, #0]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	4a09      	ldr	r2, [pc, #36]	; (8008110 <prvHeapInit+0xbc>)
 80080ea:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080ec:	4b09      	ldr	r3, [pc, #36]	; (8008114 <prvHeapInit+0xc0>)
 80080ee:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80080f2:	601a      	str	r2, [r3, #0]
}
 80080f4:	bf00      	nop
 80080f6:	3714      	adds	r7, #20
 80080f8:	46bd      	mov	sp, r7
 80080fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080fe:	4770      	bx	lr
 8008100:	2000114c 	.word	0x2000114c
 8008104:	20004d4c 	.word	0x20004d4c
 8008108:	20004d54 	.word	0x20004d54
 800810c:	20004d5c 	.word	0x20004d5c
 8008110:	20004d58 	.word	0x20004d58
 8008114:	20004d68 	.word	0x20004d68

08008118 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008118:	b480      	push	{r7}
 800811a:	b085      	sub	sp, #20
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8008120:	4b28      	ldr	r3, [pc, #160]	; (80081c4 <prvInsertBlockIntoFreeList+0xac>)
 8008122:	60fb      	str	r3, [r7, #12]
 8008124:	e002      	b.n	800812c <prvInsertBlockIntoFreeList+0x14>
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	60fb      	str	r3, [r7, #12]
 800812c:	68fb      	ldr	r3, [r7, #12]
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	687a      	ldr	r2, [r7, #4]
 8008132:	429a      	cmp	r2, r3
 8008134:	d8f7      	bhi.n	8008126 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008136:	68fb      	ldr	r3, [r7, #12]
 8008138:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800813a:	68fb      	ldr	r3, [r7, #12]
 800813c:	685b      	ldr	r3, [r3, #4]
 800813e:	68ba      	ldr	r2, [r7, #8]
 8008140:	4413      	add	r3, r2
 8008142:	687a      	ldr	r2, [r7, #4]
 8008144:	429a      	cmp	r2, r3
 8008146:	d108      	bne.n	800815a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	685a      	ldr	r2, [r3, #4]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	685b      	ldr	r3, [r3, #4]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008156:	68fb      	ldr	r3, [r7, #12]
 8008158:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800815e:	687b      	ldr	r3, [r7, #4]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	68ba      	ldr	r2, [r7, #8]
 8008164:	441a      	add	r2, r3
 8008166:	68fb      	ldr	r3, [r7, #12]
 8008168:	681b      	ldr	r3, [r3, #0]
 800816a:	429a      	cmp	r2, r3
 800816c:	d118      	bne.n	80081a0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800816e:	68fb      	ldr	r3, [r7, #12]
 8008170:	681a      	ldr	r2, [r3, #0]
 8008172:	4b15      	ldr	r3, [pc, #84]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008174:	681b      	ldr	r3, [r3, #0]
 8008176:	429a      	cmp	r2, r3
 8008178:	d00d      	beq.n	8008196 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	685a      	ldr	r2, [r3, #4]
 800817e:	68fb      	ldr	r3, [r7, #12]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	685b      	ldr	r3, [r3, #4]
 8008184:	441a      	add	r2, r3
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800818a:	68fb      	ldr	r3, [r7, #12]
 800818c:	681b      	ldr	r3, [r3, #0]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]
 8008194:	e008      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008196:	4b0c      	ldr	r3, [pc, #48]	; (80081c8 <prvInsertBlockIntoFreeList+0xb0>)
 8008198:	681a      	ldr	r2, [r3, #0]
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	601a      	str	r2, [r3, #0]
 800819e:	e003      	b.n	80081a8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	681a      	ldr	r2, [r3, #0]
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80081a8:	68fa      	ldr	r2, [r7, #12]
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	429a      	cmp	r2, r3
 80081ae:	d002      	beq.n	80081b6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	687a      	ldr	r2, [r7, #4]
 80081b4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081b6:	bf00      	nop
 80081b8:	3714      	adds	r7, #20
 80081ba:	46bd      	mov	sp, r7
 80081bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081c0:	4770      	bx	lr
 80081c2:	bf00      	nop
 80081c4:	20004d4c 	.word	0x20004d4c
 80081c8:	20004d54 	.word	0x20004d54

080081cc <memset>:
 80081cc:	4402      	add	r2, r0
 80081ce:	4603      	mov	r3, r0
 80081d0:	4293      	cmp	r3, r2
 80081d2:	d100      	bne.n	80081d6 <memset+0xa>
 80081d4:	4770      	bx	lr
 80081d6:	f803 1b01 	strb.w	r1, [r3], #1
 80081da:	e7f9      	b.n	80081d0 <memset+0x4>

080081dc <_reclaim_reent>:
 80081dc:	4b29      	ldr	r3, [pc, #164]	; (8008284 <_reclaim_reent+0xa8>)
 80081de:	681b      	ldr	r3, [r3, #0]
 80081e0:	4283      	cmp	r3, r0
 80081e2:	b570      	push	{r4, r5, r6, lr}
 80081e4:	4604      	mov	r4, r0
 80081e6:	d04b      	beq.n	8008280 <_reclaim_reent+0xa4>
 80081e8:	69c3      	ldr	r3, [r0, #28]
 80081ea:	b143      	cbz	r3, 80081fe <_reclaim_reent+0x22>
 80081ec:	68db      	ldr	r3, [r3, #12]
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d144      	bne.n	800827c <_reclaim_reent+0xa0>
 80081f2:	69e3      	ldr	r3, [r4, #28]
 80081f4:	6819      	ldr	r1, [r3, #0]
 80081f6:	b111      	cbz	r1, 80081fe <_reclaim_reent+0x22>
 80081f8:	4620      	mov	r0, r4
 80081fa:	f000 f879 	bl	80082f0 <_free_r>
 80081fe:	6961      	ldr	r1, [r4, #20]
 8008200:	b111      	cbz	r1, 8008208 <_reclaim_reent+0x2c>
 8008202:	4620      	mov	r0, r4
 8008204:	f000 f874 	bl	80082f0 <_free_r>
 8008208:	69e1      	ldr	r1, [r4, #28]
 800820a:	b111      	cbz	r1, 8008212 <_reclaim_reent+0x36>
 800820c:	4620      	mov	r0, r4
 800820e:	f000 f86f 	bl	80082f0 <_free_r>
 8008212:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8008214:	b111      	cbz	r1, 800821c <_reclaim_reent+0x40>
 8008216:	4620      	mov	r0, r4
 8008218:	f000 f86a 	bl	80082f0 <_free_r>
 800821c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800821e:	b111      	cbz	r1, 8008226 <_reclaim_reent+0x4a>
 8008220:	4620      	mov	r0, r4
 8008222:	f000 f865 	bl	80082f0 <_free_r>
 8008226:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8008228:	b111      	cbz	r1, 8008230 <_reclaim_reent+0x54>
 800822a:	4620      	mov	r0, r4
 800822c:	f000 f860 	bl	80082f0 <_free_r>
 8008230:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8008232:	b111      	cbz	r1, 800823a <_reclaim_reent+0x5e>
 8008234:	4620      	mov	r0, r4
 8008236:	f000 f85b 	bl	80082f0 <_free_r>
 800823a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 800823c:	b111      	cbz	r1, 8008244 <_reclaim_reent+0x68>
 800823e:	4620      	mov	r0, r4
 8008240:	f000 f856 	bl	80082f0 <_free_r>
 8008244:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8008246:	b111      	cbz	r1, 800824e <_reclaim_reent+0x72>
 8008248:	4620      	mov	r0, r4
 800824a:	f000 f851 	bl	80082f0 <_free_r>
 800824e:	6a23      	ldr	r3, [r4, #32]
 8008250:	b1b3      	cbz	r3, 8008280 <_reclaim_reent+0xa4>
 8008252:	4620      	mov	r0, r4
 8008254:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8008258:	4718      	bx	r3
 800825a:	5949      	ldr	r1, [r1, r5]
 800825c:	b941      	cbnz	r1, 8008270 <_reclaim_reent+0x94>
 800825e:	3504      	adds	r5, #4
 8008260:	69e3      	ldr	r3, [r4, #28]
 8008262:	2d80      	cmp	r5, #128	; 0x80
 8008264:	68d9      	ldr	r1, [r3, #12]
 8008266:	d1f8      	bne.n	800825a <_reclaim_reent+0x7e>
 8008268:	4620      	mov	r0, r4
 800826a:	f000 f841 	bl	80082f0 <_free_r>
 800826e:	e7c0      	b.n	80081f2 <_reclaim_reent+0x16>
 8008270:	680e      	ldr	r6, [r1, #0]
 8008272:	4620      	mov	r0, r4
 8008274:	f000 f83c 	bl	80082f0 <_free_r>
 8008278:	4631      	mov	r1, r6
 800827a:	e7ef      	b.n	800825c <_reclaim_reent+0x80>
 800827c:	2500      	movs	r5, #0
 800827e:	e7ef      	b.n	8008260 <_reclaim_reent+0x84>
 8008280:	bd70      	pop	{r4, r5, r6, pc}
 8008282:	bf00      	nop
 8008284:	20000060 	.word	0x20000060

08008288 <__libc_init_array>:
 8008288:	b570      	push	{r4, r5, r6, lr}
 800828a:	4d0d      	ldr	r5, [pc, #52]	; (80082c0 <__libc_init_array+0x38>)
 800828c:	4c0d      	ldr	r4, [pc, #52]	; (80082c4 <__libc_init_array+0x3c>)
 800828e:	1b64      	subs	r4, r4, r5
 8008290:	10a4      	asrs	r4, r4, #2
 8008292:	2600      	movs	r6, #0
 8008294:	42a6      	cmp	r6, r4
 8008296:	d109      	bne.n	80082ac <__libc_init_array+0x24>
 8008298:	4d0b      	ldr	r5, [pc, #44]	; (80082c8 <__libc_init_array+0x40>)
 800829a:	4c0c      	ldr	r4, [pc, #48]	; (80082cc <__libc_init_array+0x44>)
 800829c:	f000 f880 	bl	80083a0 <_init>
 80082a0:	1b64      	subs	r4, r4, r5
 80082a2:	10a4      	asrs	r4, r4, #2
 80082a4:	2600      	movs	r6, #0
 80082a6:	42a6      	cmp	r6, r4
 80082a8:	d105      	bne.n	80082b6 <__libc_init_array+0x2e>
 80082aa:	bd70      	pop	{r4, r5, r6, pc}
 80082ac:	f855 3b04 	ldr.w	r3, [r5], #4
 80082b0:	4798      	blx	r3
 80082b2:	3601      	adds	r6, #1
 80082b4:	e7ee      	b.n	8008294 <__libc_init_array+0xc>
 80082b6:	f855 3b04 	ldr.w	r3, [r5], #4
 80082ba:	4798      	blx	r3
 80082bc:	3601      	adds	r6, #1
 80082be:	e7f2      	b.n	80082a6 <__libc_init_array+0x1e>
 80082c0:	0800845c 	.word	0x0800845c
 80082c4:	0800845c 	.word	0x0800845c
 80082c8:	0800845c 	.word	0x0800845c
 80082cc:	08008460 	.word	0x08008460

080082d0 <__retarget_lock_acquire_recursive>:
 80082d0:	4770      	bx	lr

080082d2 <__retarget_lock_release_recursive>:
 80082d2:	4770      	bx	lr

080082d4 <memcpy>:
 80082d4:	440a      	add	r2, r1
 80082d6:	4291      	cmp	r1, r2
 80082d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082dc:	d100      	bne.n	80082e0 <memcpy+0xc>
 80082de:	4770      	bx	lr
 80082e0:	b510      	push	{r4, lr}
 80082e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ea:	4291      	cmp	r1, r2
 80082ec:	d1f9      	bne.n	80082e2 <memcpy+0xe>
 80082ee:	bd10      	pop	{r4, pc}

080082f0 <_free_r>:
 80082f0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 80082f2:	2900      	cmp	r1, #0
 80082f4:	d044      	beq.n	8008380 <_free_r+0x90>
 80082f6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80082fa:	9001      	str	r0, [sp, #4]
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	f1a1 0404 	sub.w	r4, r1, #4
 8008302:	bfb8      	it	lt
 8008304:	18e4      	addlt	r4, r4, r3
 8008306:	f000 f83f 	bl	8008388 <__malloc_lock>
 800830a:	4a1e      	ldr	r2, [pc, #120]	; (8008384 <_free_r+0x94>)
 800830c:	9801      	ldr	r0, [sp, #4]
 800830e:	6813      	ldr	r3, [r2, #0]
 8008310:	b933      	cbnz	r3, 8008320 <_free_r+0x30>
 8008312:	6063      	str	r3, [r4, #4]
 8008314:	6014      	str	r4, [r2, #0]
 8008316:	b003      	add	sp, #12
 8008318:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800831c:	f000 b83a 	b.w	8008394 <__malloc_unlock>
 8008320:	42a3      	cmp	r3, r4
 8008322:	d908      	bls.n	8008336 <_free_r+0x46>
 8008324:	6825      	ldr	r5, [r4, #0]
 8008326:	1961      	adds	r1, r4, r5
 8008328:	428b      	cmp	r3, r1
 800832a:	bf01      	itttt	eq
 800832c:	6819      	ldreq	r1, [r3, #0]
 800832e:	685b      	ldreq	r3, [r3, #4]
 8008330:	1949      	addeq	r1, r1, r5
 8008332:	6021      	streq	r1, [r4, #0]
 8008334:	e7ed      	b.n	8008312 <_free_r+0x22>
 8008336:	461a      	mov	r2, r3
 8008338:	685b      	ldr	r3, [r3, #4]
 800833a:	b10b      	cbz	r3, 8008340 <_free_r+0x50>
 800833c:	42a3      	cmp	r3, r4
 800833e:	d9fa      	bls.n	8008336 <_free_r+0x46>
 8008340:	6811      	ldr	r1, [r2, #0]
 8008342:	1855      	adds	r5, r2, r1
 8008344:	42a5      	cmp	r5, r4
 8008346:	d10b      	bne.n	8008360 <_free_r+0x70>
 8008348:	6824      	ldr	r4, [r4, #0]
 800834a:	4421      	add	r1, r4
 800834c:	1854      	adds	r4, r2, r1
 800834e:	42a3      	cmp	r3, r4
 8008350:	6011      	str	r1, [r2, #0]
 8008352:	d1e0      	bne.n	8008316 <_free_r+0x26>
 8008354:	681c      	ldr	r4, [r3, #0]
 8008356:	685b      	ldr	r3, [r3, #4]
 8008358:	6053      	str	r3, [r2, #4]
 800835a:	440c      	add	r4, r1
 800835c:	6014      	str	r4, [r2, #0]
 800835e:	e7da      	b.n	8008316 <_free_r+0x26>
 8008360:	d902      	bls.n	8008368 <_free_r+0x78>
 8008362:	230c      	movs	r3, #12
 8008364:	6003      	str	r3, [r0, #0]
 8008366:	e7d6      	b.n	8008316 <_free_r+0x26>
 8008368:	6825      	ldr	r5, [r4, #0]
 800836a:	1961      	adds	r1, r4, r5
 800836c:	428b      	cmp	r3, r1
 800836e:	bf04      	itt	eq
 8008370:	6819      	ldreq	r1, [r3, #0]
 8008372:	685b      	ldreq	r3, [r3, #4]
 8008374:	6063      	str	r3, [r4, #4]
 8008376:	bf04      	itt	eq
 8008378:	1949      	addeq	r1, r1, r5
 800837a:	6021      	streq	r1, [r4, #0]
 800837c:	6054      	str	r4, [r2, #4]
 800837e:	e7ca      	b.n	8008316 <_free_r+0x26>
 8008380:	b003      	add	sp, #12
 8008382:	bd30      	pop	{r4, r5, pc}
 8008384:	20004ea8 	.word	0x20004ea8

08008388 <__malloc_lock>:
 8008388:	4801      	ldr	r0, [pc, #4]	; (8008390 <__malloc_lock+0x8>)
 800838a:	f7ff bfa1 	b.w	80082d0 <__retarget_lock_acquire_recursive>
 800838e:	bf00      	nop
 8008390:	20004ea4 	.word	0x20004ea4

08008394 <__malloc_unlock>:
 8008394:	4801      	ldr	r0, [pc, #4]	; (800839c <__malloc_unlock+0x8>)
 8008396:	f7ff bf9c 	b.w	80082d2 <__retarget_lock_release_recursive>
 800839a:	bf00      	nop
 800839c:	20004ea4 	.word	0x20004ea4

080083a0 <_init>:
 80083a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083a2:	bf00      	nop
 80083a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083a6:	bc08      	pop	{r3}
 80083a8:	469e      	mov	lr, r3
 80083aa:	4770      	bx	lr

080083ac <_fini>:
 80083ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80083ae:	bf00      	nop
 80083b0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80083b2:	bc08      	pop	{r3}
 80083b4:	469e      	mov	lr, r3
 80083b6:	4770      	bx	lr
